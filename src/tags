!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	telnet.h	59;"	d
ABSORB_DAMAGE	mods/weapon-types.hpp	/^		ABSORB_DAMAGE,$/;"	e	enum:mods::weapon::capabilities::cap_t
ACMD	act.builder.cpp	/^ACMD(do_flush_holding) {$/;"	f
ACMD	act.builder.cpp	/^ACMD(do_hold_anything) {$/;"	f
ACMD	act.builder.cpp	/^ACMD(do_uuid) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_gen_comm) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_gsay) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_qcomm) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_reply) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_say) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_spec_comm) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_tell) {$/;"	f
ACMD	act.comm.cpp	/^ACMD(do_write) {$/;"	f
ACMD	act.demolitions.cpp	/^ACMD(do_breach) {$/;"	f
ACMD	act.demolitions.cpp	/^ACMD(do_cancel) {$/;"	f
ACMD	act.demolitions.cpp	/^ACMD(do_install) {$/;"	f
ACMD	act.demolitions.cpp	/^ACMD(do_thermite) {$/;"	f
ACMD	act.demolitions.cpp	/^ACMD(do_uninstall) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_color) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_commands) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_consider) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_diagnose) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_drone) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_equipment) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_examine) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_exits) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_gen_ps) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_gold) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_inventory) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_levels) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_look) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_preferences) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_recall) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_score) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_time) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_toggle) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_users) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_view) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_weather) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_where) {$/;"	f
ACMD	act.informative.cpp	/^ACMD(do_who) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_drink) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_drop) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_eat) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_get) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_give) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_grab) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_pour) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_put) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_remove) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_wear) {$/;"	f
ACMD	act.item.cpp	/^ACMD(do_wield) {$/;"	f
ACMD	act.medic.cpp	/^ACMD(do_heal) {$/;"	f
ACMD	act.medic.cpp	/^ACMD(do_revive) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_enter) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_follow) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_gen_door) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_leave) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_move) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_rest) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_sit) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_sleep) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_stand) {$/;"	f
ACMD	act.movement.cpp	/^ACMD(do_wake) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_assist) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_command_sequence) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_engagement_mode) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_go_loud) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_regroup) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_scan) { \/* !mods *\/$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_silencers_off) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_silencers_on) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_snipe) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_snipe_object) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_spray) {$/;"	f
ACMD	act.offensive.cpp	/^ACMD(do_throw) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_display) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_gen_tog) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_gen_write) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_group) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_hide) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_not_here) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_practice) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_quit) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_report) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_save) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_sneak) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_split) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_steal) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_title) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_ungroup) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_use) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_visible) {$/;"	f
ACMD	act.other.cpp	/^ACMD(do_wimpy) {$/;"	f
ACMD	act.social.cpp	/^ACMD(do_action) {$/;"	f
ACMD	act.social.cpp	/^ACMD(do_insult) {$/;"	f
ACMD	graph.cpp	/^ACMD(do_track) {$/;"	f
ACMD	house.cpp	/^ACMD(do_hcontrol) {$/;"	f
ACMD	house.cpp	/^ACMD(do_house) {$/;"	f
ACMD	interpreter.cpp	/^ACMD(do_alias) {$/;"	f
ACMD	interpreter.cpp	/^ACMD(do_room_vnum) {$/;"	f
ACMD	interpreter.cpp	/^ACMD(do_unimplemented) {$/;"	f
ACMD	interpreter.h	14;"	d
ACMD	limits.cpp	/^ACMD(do_idle){$/;"	f
ACMD	modify.cpp	/^ACMD(do_skillset) {$/;"	f
ACMD	mods/classes/breacher.cpp	/^ACMD(do_teep){$/;"	f
ACMD	mods/classes/engineer.cpp	/^	ACMD(do_drone_bomb) {$/;"	f	namespace:mods::class_abilities::engineer
ACMD	mods/classes/ghost.cpp	/^	ACMD(do_dissipate){$/;"	f	namespace:mods::class_abilities::ghost
ACMD	mods/classes/pyrexia.cpp	/^ACMD(do_fire_nade){$/;"	f
ACMD	mods/classes/sniper.cpp	/^	ACMD(do_disengage) {$/;"	f	namespace:mods::class_abilities::sniper
ACMD	mods/classes/sniper.cpp	/^	ACMD(do_engage) {$/;"	f	namespace:mods::class_abilities::sniper
ACMD	mods/classes/sniper.cpp	/^	ACMD(do_mark_target) {$/;"	f	namespace:mods::class_abilities::sniper
ACMD	mods/classes/sniper.cpp	/^	ACMD(do_tracking_shot) {$/;"	f	namespace:mods::class_abilities::sniper
ACMD	mods/classes/sniper.cpp	/^	ACMD(do_xray_shot) {$/;"	f	namespace:mods::class_abilities::sniper
ACMD	mods/contracts.cpp	/^	ACMD(do_contract) {$/;"	f	namespace:mods::contracts
ACMD	mods/date-time.cpp	/^	ACMD(do_moon_phase) {$/;"	f	namespace:mods::date_time
ACMD	mods/help.cpp	/^	ACMD(do_help) {$/;"	f	namespace:mods::help
ACMD	mods/levels.cpp	/^	ACMD(do_exp) {$/;"	f	namespace:mods::levels
ACMD	mods/levels.cpp	/^	ACMD(do_practices) {$/;"	f	namespace:mods::levels
ACMD	mods/mini-games/line-up.cpp	/^ACMD(do_hack){$/;"	f
ACMD	mods/mini-games/line-up.cpp	/^ACMD(do_next_row) {$/;"	f
ACMD	mods/mini-games/line-up.cpp	/^ACMD(do_reset_hack) {$/;"	f
ACMD	mods/mini-games/line-up.cpp	/^ACMD(do_rotate_left) {$/;"	f
ACMD	mods/mini-games/line-up.cpp	/^ACMD(do_rotate_right) {$/;"	f
ACMD	mods/mini-games/wires.cpp	/^ACMD(do_plug_cable){$/;"	f
ACMD	mods/orm/player-base-ability.cpp	/^		ACMD(do_save_my_pba) {$/;"	f	namespace:mods::orm::pba
ACMD	mods/prefs.cpp	/^ACMD(do_pref) {$/;"	f
ACMD	mods/rifle-attachments.cpp	/^		ACMD(do_vcarrying) {$/;"	f	namespace:mods::rifle_attachments
ACMD	mods/skills.cpp	/^ACMD(do_train) {$/;"	f
ACMD	mods/values.cpp	/^			ACMD(do_get_value) {$/;"	f	namespace:mods::values
ACMD	mods/values.cpp	/^			ACMD(do_list_values) {$/;"	f	namespace:mods::values
ACMD	mods/values.cpp	/^			ACMD(do_revert_value_to_default){$/;"	f	namespace:mods::values
ACMD	mods/values.cpp	/^			ACMD(do_set_value) {$/;"	f	namespace:mods::values
ACMD	mods/weapons/reload.cpp	/^	ACMD(do_reload) {$/;"	f	namespace:mods::weapons::reload
ACMD	shop.cpp	/^ACMD(do_buy) {$/;"	f
ACMD	shop.cpp	/^ACMD(do_list) {$/;"	f
ACMD_EXAMINE	boards.cpp	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_LOOK	boards.cpp	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_READ	boards.cpp	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_REMOVE	boards.cpp	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACMD_WRITE	boards.cpp	/^int ACMD_READ, ACMD_LOOK, ACMD_EXAMINE, ACMD_WRITE, ACMD_REMOVE;$/;"	v
ACOG	mods/weapon.hpp	/^		ACOG, LASER_DOT, HOLOGRAPHIC,$/;"	e	enum:mods::weapon::scope_t
ACTNULL	comm.cpp	/^const char *ACTNULL = "<NULL>";$/;"	v
ACT_DEBUG	act.social.cpp	88;"	d	file:
ADD_INTERPRETER_COMMAND	mods/interpreter-include.hpp	8;"	d
ADMIN_DONE	globals.hpp	285;"	d
ADMIN_FAIL	globals.hpp	286;"	d
ADMIN_REJECT	globals.hpp	287;"	d
ADVANCED	mods/yaml.hpp	/^		ADVANCED = 2,$/;"	e	enum:mods::yaml::armor_classification_type_t
ADVANCE_LEVEL_BONUS_HP_DICE	mods/values-list.cpp	/^ADVANCE_LEVEL_BONUS_HP_DICE,6$/;"	v
ADVANCE_LEVEL_BONUS_HP_SIDES	mods/values-list.cpp	/^ADVANCE_LEVEL_BONUS_HP_SIDES,6$/;"	v
ADVANCE_LEVEL_BONUS_HP_THRESHOLD	mods/values-list.cpp	/^ADVANCE_LEVEL_BONUS_HP_THRESHOLD,12$/;"	v
AERIAL_DRONE	structs.h	/^	AERIAL_DRONE,$/;"	e	enum:lense_type_t
AERIAL_DRONE_NIGHT_VISION	structs.h	/^	AERIAL_DRONE_NIGHT_VISION,$/;"	e	enum:lense_type_t
AERIAL_DRONE_THERMAL	structs.h	/^	AERIAL_DRONE_THERMAL,$/;"	e	enum:lense_type_t
AFF	mods/affects.hpp	301;"	d
AFF	mods/flags.hpp	/^		AFF,PLR$/;"	e	enum:mods::flags::flag_group
AFFECT_DISSOLVE_COUNT	mods/affects.hpp	/^	constexpr static std::size_t AFFECT_DISSOLVE_COUNT = affect_t::__AFFECT_SIZE;$/;"	m	namespace:mods::affects
AFFECT_MAP	mods/affects.hpp	/^	constexpr static int AFFECT_MAP[] = {$/;"	m	namespace:mods::affects
AFFECT_MOVE	mods/weapon-types.hpp	/^		AFFECT_MOVE,$/;"	e	enum:mods::weapon::capabilities::cap_t
AFF_BLIND	structs.h	342;"	d
AFF_CHARM	structs.h	363;"	d
AFF_CURSE	structs.h	351;"	d
AFF_DETECT_ALIGN	structs.h	344;"	d
AFF_DETECT_INVIS	structs.h	345;"	d
AFF_DETECT_MAGIC	structs.h	346;"	d
AFF_DISORIENT	structs.h	364;"	d
AFF_FLAGGED	utils.h	237;"	d
AFF_FLAGS	utils.h	223;"	d
AFF_FLAG_COUNT	mods/flags.hpp	/^	constexpr static uint32_t AFF_FLAG_COUNT = aff::__AFF_LAST + 1;$/;"	m	namespace:mods::flags
AFF_GROUP	structs.h	350;"	d
AFF_HIDE	structs.h	361;"	d
AFF_INFRAVISION	structs.h	352;"	d
AFF_INTIMIDATED	structs.h	348;"	d
AFF_INVISIBLE	structs.h	343;"	d
AFF_NOTRACK	structs.h	357;"	d
AFF_POISON	structs.h	353;"	d
AFF_PROTECT_EVIL	structs.h	354;"	d
AFF_PROTECT_GOOD	structs.h	355;"	d
AFF_SANCTUARY	structs.h	349;"	d
AFF_SCANNED	structs.h	365;"	d
AFF_SENSE_LIFE	structs.h	347;"	d
AFF_SLEEP	structs.h	356;"	d
AFF_SNEAK	structs.h	360;"	d
AFF_TRACKED	structs.h	366;"	d
AFF_UNUSED16	structs.h	358;"	d
AFF_UNUSED17	structs.h	359;"	d
AFF_UNUSED20	structs.h	362;"	d
AGGRESSIVE_PROTECT	mods/ai_state.hpp	/^				WANDER, SUSPICIOUS, FIGHT,SUSPICIOUS2,PROTECT,AGGRESSIVE_PROTECT,$/;"	e	enum:mods::ai_state::state
AIM	mods/weapon-types.hpp	/^		AIM,$/;"	e	enum:mods::weapon::capabilities::cap_t
AI_EVENT_ATTACKER_FOUND	mods/ai_state.hpp	/^				AI_EVENT_SNIPED,AI_EVENT_ATTACKER_FOUND,AI_WITNESS_ATTACK,AI_EVENT_WANDER,$/;"	e	enum:mods::ai_state::event_type_t
AI_EVENT_SNIPED	mods/ai_state.hpp	/^				AI_EVENT_SNIPED,AI_EVENT_ATTACKER_FOUND,AI_WITNESS_ATTACK,AI_EVENT_WANDER,$/;"	e	enum:mods::ai_state::event_type_t
AI_EVENT_WANDER	mods/ai_state.hpp	/^				AI_EVENT_SNIPED,AI_EVENT_ATTACKER_FOUND,AI_WITNESS_ATTACK,AI_EVENT_WANDER,$/;"	e	enum:mods::ai_state::event_type_t
AI_WITNESS_ATTACK	mods/ai_state.hpp	/^				AI_EVENT_SNIPED,AI_EVENT_ATTACKER_FOUND,AI_WITNESS_ATTACK,AI_EVENT_WANDER,$/;"	e	enum:mods::ai_state::event_type_t
ALIAS_COMPLEX	interpreter.h	72;"	d
ALIAS_FILE	utils.h	125;"	d
ALIAS_GLOB_CHAR	interpreter.h	76;"	d
ALIAS_SEP_CHAR	interpreter.h	74;"	d
ALIAS_SIMPLE	interpreter.h	71;"	d
ALIAS_VAR_CHAR	interpreter.h	75;"	d
ALIVE	mods/scan.hpp	/^			ALIVE,$/;"	e	enum:mods::scan::find_type_t
ALTERNATE_EXPLOSION	mods/weapon-types.hpp	/^		ALTERNATE_EXPLOSION,$/;"	e	enum:mods::weapon::capabilities::cap_t
ALTEX_EMP	mods/yaml.hpp	/^	ALTEX_EMP = (1 << 2),$/;"	e	enum:alternate_explosion_t
ALTEX_FLASHBANG	mods/yaml.hpp	/^	ALTEX_FLASHBANG = (1 << 4)$/;"	e	enum:alternate_explosion_t
ALTEX_INCENDIARY	mods/yaml.hpp	/^	ALTEX_INCENDIARY = (1 << 3),$/;"	e	enum:alternate_explosion_t
ALTEX_NONE	mods/yaml.hpp	/^	ALTEX_NONE = 0,$/;"	e	enum:alternate_explosion_t
ALTEX_SCAN	mods/yaml.hpp	/^	ALTEX_SCAN = (1),$/;"	e	enum:alternate_explosion_t
ALTEX_SMOKE	mods/yaml.hpp	/^	ALTEX_SMOKE = (1 << 1),$/;"	e	enum:alternate_explosion_t
AMMO	mods/weapon.hpp	13;"	d
AN	utils.h	161;"	d
ANA	utils.h	434;"	d
ANACONDA_ASSAULT	mods/object.hpp	/^				ANACONDA_ASSAULT,$/;"	e	enum:mods::object::object_type_enum_t
AND_THEN	mods/catch.hpp	12218;"	d
AND_WHEN	mods/catch.hpp	12216;"	d
ANGLED_GRIP	mods/weapon.hpp	/^		VERTICAL_GRIP, ANGLED_GRIP$/;"	e	enum:mods::weapon::grip_t
ANY	mods/scan.hpp	/^			ANY$/;"	e	enum:mods::scan::find_type_t
AO	telnet.h	52;"	d
AOE_TYPES_NONE	mods/aoe.hpp	/^		AOE_TYPES_NONE = 0,$/;"	e	enum:mods::aoe::types_t
APPLY_AC	structs.h	543;"	d
APPLY_AGE	structs.h	535;"	d
APPLY_BARREL	structs.h	557;"	d
APPLY_CHA	structs.h	532;"	d
APPLY_CHAR_HEIGHT	structs.h	537;"	d
APPLY_CHAR_WEIGHT	structs.h	536;"	d
APPLY_CLASS	structs.h	533;"	d
APPLY_CON	structs.h	531;"	d
APPLY_CRITICAL_RANGE	structs.h	564;"	d
APPLY_DAMROLL	structs.h	545;"	d
APPLY_DEX	structs.h	528;"	d
APPLY_EXP	structs.h	542;"	d
APPLY_GOLD	structs.h	541;"	d
APPLY_HIT	structs.h	539;"	d
APPLY_HITROLL	structs.h	544;"	d
APPLY_INCENDIARY	structs.h	559;"	d
APPLY_INT	structs.h	529;"	d
APPLY_LEVEL	structs.h	534;"	d
APPLY_MAGAZINE_SIZE	structs.h	558;"	d
APPLY_MANA	structs.h	538;"	d
APPLY_MOVE	structs.h	540;"	d
APPLY_NONE	structs.h	526;"	d
APPLY_OPTIMAL_RANGE	structs.h	565;"	d
APPLY_PENETRATION	structs.h	562;"	d
APPLY_RANGE	structs.h	563;"	d
APPLY_RECOIL	structs.h	556;"	d
APPLY_SAVING_BREATH	structs.h	551;"	d
APPLY_SAVING_PARA	structs.h	548;"	d
APPLY_SAVING_PETRI	structs.h	550;"	d
APPLY_SAVING_ROD	structs.h	549;"	d
APPLY_SAVING_SPELL	structs.h	552;"	d
APPLY_SCOPE	structs.h	555;"	d
APPLY_SIDERAIL	structs.h	560;"	d
APPLY_STEALTH	structs.h	567;"	d
APPLY_STR	structs.h	527;"	d
APPLY_UNDER_BARREL	structs.h	561;"	d
APPLY_VISION	structs.h	566;"	d
APPLY_WIS	structs.h	530;"	d
ARM	mods/item.hpp	/^		ARM = (1 << 9)$/;"	e	enum:mods::item::capability_t
ARMOR	mods/levels.hpp	/^	ARMOR$/;"	e	enum:uint8_t
ARMOR_ATTR_ANTI_MATTER_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_ANTI_MATTER_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_BALISTIC_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_BALISTIC_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_CLASSIFICATION	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_CLASSIFICATION,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_CORROSIVE_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_CORROSIVE_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_CRYOGENIC_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_CRYOGENIC_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_DURABLITY_PROFILE	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_DURABLITY_PROFILE,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_EMP_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_EMP_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_EXPLOSIVE_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_EXPLOSIVE_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_HP	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_HP,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_INCENDIARY_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_INCENDIARY_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_RADIATION_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_RADIATION_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_REPAIR_COST_PROFILE	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_REPAIR_COST_PROFILE,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_SHOCK_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_SHOCK_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_SHRAPNEL_RESISTANCE_PERCENT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_SHRAPNEL_RESISTANCE_PERCENT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_SPEED_PROFILE	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_SPEED_PROFILE,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_THAC0	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_THAC0 = 1,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_WEIGHT	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_WEIGHT,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ATTR_WORTH	mods/forge-engine/generator.hpp	/^		ARMOR_ATTR_WORTH,$/;"	e	enum:mods::forge_engine::armor_attributes_t
ARMOR_ITEM_WEAR_ABOUT	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_ABOUT		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_ARMS	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_ARMS		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_BACKPACK	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_BACKPACK,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_BODY	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_BODY		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_ELBOW	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_ELBOW	,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_FEET	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_FEET		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_FINGER	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_FINGER	=  1,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_GOGGLES	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_GOGGLES,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_HANDS	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_HANDS		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_HEAD	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_HEAD		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_HOLD	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_HOLD		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_LEGS	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_LEGS		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_NECK	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_NECK		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_SECONDARY	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_SECONDARY	,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_SHIELD	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_SHIELD	,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_SHOULDERS	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_SHOULDERS	,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_VEST_PACK	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_VEST_PACK	,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_WAIST	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_WAIST 	,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_WEAPON_ATTACHMENT	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_WEAPON_ATTACHMENT,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_WIELD	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_WIELD		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_ITEM_WEAR_WRIST	mods/forge-engine/generator.hpp	/^		ARMOR_ITEM_WEAR_WRIST		,$/;"	e	enum:mods::forge_engine::armor_types_t
ARMOR_NONE	mods/item-types.hpp	/^		ARMOR_NONE = 0,$/;"	e	enum:mods::weapon::type::armor
ASPELL	spells.cpp	/^ASPELL(spell_charm) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_create_water) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_detect_poison) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_enchant_weapon) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_identify) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_locate_object) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_recall) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_summon) {$/;"	f
ASPELL	spells.cpp	/^ASPELL(spell_teleport) {$/;"	f
ASPELL	spells.h	255;"	d
ASSAULT_RIFLE	mods/object.hpp	/^				ASSAULT_RIFLE,$/;"	e	enum:mods::object::object_type_enum_t
ASSAULT_RIFLE	mods/weapon.hpp	/^	                 GRENADE = (1 << 4), ASSAULT_RIFLE = (1 << 5), PISTOL = (1 << 6),$/;"	e	enum:mods::weapon::mask_type
ASSIGNMOB	spec_assign.cpp	/^void ASSIGNMOB(mob_vnum mob, SPECIAL(fname)) {$/;"	f
ASSIGNOBJ	spec_assign.cpp	/^void ASSIGNOBJ(obj_vnum obj, SPECIAL(fname)) {$/;"	f
ASSIGNROOM	spec_assign.cpp	/^void ASSIGNROOM(room_vnum room, SPECIAL(fname)) {$/;"	f
AS_YOU_WERE	mods/behaviour_tree_impl.hpp	/^		AS_YOU_WERE,$/;"	e	enum:mods::behaviour_tree_impl::dispatch_status_t
ATTACHMENT_NONE	mods/item-types.hpp	/^		ATTACHMENT_NONE = 0,$/;"	e	enum:mods::weapon::type::attachment
ATTACHMENT_TYPE_BARREL	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_BARREL,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACHMENT_TYPE_GRIP	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_GRIP,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACHMENT_TYPE_MAGAZINE	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_MAGAZINE,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACHMENT_TYPE_MUZZLE	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_MUZZLE,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACHMENT_TYPE_SIGHT	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_SIGHT = 1,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACHMENT_TYPE_STOCK	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_STOCK,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACHMENT_TYPE_STRAP	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_STRAP,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACHMENT_TYPE_UNDER_BARREL	mods/forge-engine/generator.hpp	/^		ATTACHMENT_TYPE_UNDER_BARREL,$/;"	e	enum:mods::forge_engine::attachment_types_t
ATTACH_LAUNCHER	mods/classes/pyrexia.hpp	/^				ATTACH_LAUNCHER,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
ATTACH_THROWER	mods/classes/pyrexia.hpp	/^				ATTACH_THROWER,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
ATTACK	mods/intent.hpp	/^		ATTACK = 1,$/;"	e	enum:mods::intent::intent_to_t
ATTACKER_NARROWLY_MISSED_YOU_EVENT	mods/damage-event.hpp	/^	ATTACKER_NARROWLY_MISSED_YOU_EVENT,$/;"	e	enum:uint16_t
ATTACK_DRONE	mods/weapon.hpp	/^	                 ATTACK_DRONE = (1 << 13)$/;"	e	enum:mods::weapon::mask_type
ATTRIBUTE_HIGH	mods/fluxkraft/generator.cpp	/^	static constexpr float ATTRIBUTE_HIGH= 10000.0;$/;"	m	namespace:mods::fluxkraft	file:
ATTRIBUTE_HIGH	mods/forge-engine/generator.cpp	/^	static constexpr float ATTRIBUTE_HIGH= 10000.0;$/;"	m	namespace:mods::forge_engine	file:
ATTRIBUTE_LOW	mods/fluxkraft/generator.cpp	/^	static constexpr float ATTRIBUTE_LOW = 1.0;$/;"	m	namespace:mods::fluxkraft	file:
ATTRIBUTE_LOW	mods/forge-engine/generator.cpp	/^	static constexpr float ATTRIBUTE_LOW = 1.0;$/;"	m	namespace:mods::forge_engine	file:
AUDITORY_DISTRACTION	mods/aoe.hpp	/^		AUDITORY_DISTRACTION,	\/** Pre-recorded audio to distract or deceive *\/$/;"	e	enum:mods::aoe::types_t
AUGPARA	mods/orm/medic.hpp	/^		const std::string AUGPARA = "AUGPARA";$/;"	m	struct:mods::orm::medic
AUGPARA	mods/weapon.hpp	/^			AUGPARA = 1,$/;"	e	enum:mods::weapon::medic::primary_choice_t
AUTHTYPE_CNT	telnet.h	265;"	d
AUTHTYPE_KERBEROS_V4	telnet.h	261;"	d
AUTHTYPE_KERBEROS_V5	telnet.h	262;"	d
AUTHTYPE_MINK	telnet.h	264;"	d
AUTHTYPE_NAME	telnet.h	278;"	d
AUTHTYPE_NAME_OK	telnet.h	277;"	d
AUTHTYPE_NULL	telnet.h	260;"	d
AUTHTYPE_SPX	telnet.h	263;"	d
AUTHTYPE_TEST	telnet.h	267;"	d
AUTH_HOW_MASK	telnet.h	258;"	d
AUTH_HOW_MUTUAL	telnet.h	257;"	d
AUTH_HOW_ONE_WAY	telnet.h	256;"	d
AUTH_WHO_CLIENT	telnet.h	249;"	d
AUTH_WHO_MASK	telnet.h	251;"	d
AUTH_WHO_SERVER	telnet.h	250;"	d
AUTOMATIC	mods/object.hpp	/^				AUTOMATIC,$/;"	e	enum:mods::object::object_type_enum_t
AWAKE	utils.h	367;"	d
AYT	telnet.h	51;"	d
AllOf	mods/catch.hpp	/^		inline Impl::MatchAllOf<T> AllOf(Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2) {$/;"	f	namespace:Catch::Matchers
AllOf	mods/catch.hpp	/^		inline Impl::MatchAllOf<T> AllOf(Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2, Impl::MatcherBase<T> const& m3) {$/;"	f	namespace:Catch::Matchers
AnyOf	mods/catch.hpp	/^		inline Impl::MatchAnyOf<T> AnyOf(Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2) {$/;"	f	namespace:Catch::Matchers
AnyOf	mods/catch.hpp	/^		inline Impl::MatchAnyOf<T> AnyOf(Impl::MatcherBase<T> const& m1, Impl::MatcherBase<T> const& m2, Impl::MatcherBase<T> const& m3) {$/;"	f	namespace:Catch::Matchers
Arg	mods/catch2.hpp	/^    class Arg : public ParserRefImpl<Arg> {$/;"	c	namespace:Catch
AssertionInfo	mods/catch.hpp	/^		AssertionInfo() {}$/;"	f	struct:Catch::AssertionInfo
AssertionInfo	mods/catch.hpp	/^	struct AssertionInfo {$/;"	s	namespace:Catch
AssertionInfo	mods/catch2.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionResult	mods/catch.hpp	/^	class AssertionResult {$/;"	c	namespace:Catch
AssertionResultData	mods/catch.hpp	/^		AssertionResultData() : decomposedExpression(CATCH_NULL)$/;"	f	struct:Catch::AssertionResultData
AssertionResultData	mods/catch.hpp	/^	struct AssertionResultData {$/;"	s	namespace:Catch
AutoReg	mods/catch.hpp	/^			AutoReg$/;"	f	struct:Catch::AutoReg
AutoReg	mods/catch.hpp	/^	struct AutoReg {$/;"	s	namespace:Catch
AutoReg	mods/catch2.hpp	/^struct AutoReg : NonCopyable {$/;"	s	namespace:Catch
BACKGROUND_FILE	db.h	84;"	d
BALLISTIC	mods/object.hpp	/^				BALLISTIC,$/;"	e	enum:mods::object::object_type_enum_t
BANDIT	structs.h	/^	BANDIT = 11,$/;"	e	enum:player_class_t
BANNED_SITE_LENGTH	db.h	276;"	d
BAN_ALL	db.h	274;"	d
BAN_FILE	db.h	97;"	d
BAN_LIST_FORMAT	ban.cpp	116;"	d	file:
BAN_LIST_FORMAT	ban.cpp	200;"	d	file:
BAN_NEW	db.h	272;"	d
BAN_NOT	db.h	271;"	d
BAN_SELECT	db.h	273;"	d
BARBED_TENDRILS	mods/aoe.hpp	/^		BARBED_TENDRILS, \/** explodes into barbed wire causing painful movement *\/$/;"	e	enum:mods::aoe::types_t
BARREL	mods/weapon.hpp	/^		BARREL,$/;"	e	enum:mods::weapon::attachment_t
BASIC	mods/yaml.hpp	/^		BASIC = 1,$/;"	e	enum:mods::yaml::armor_classification_type_t
BEACON	mods/aoe.hpp	/^		BEACON,	\/** Serves as a radio beacon for communication purposes and tracking *\/$/;"	e	enum:mods::aoe::types_t
BEEP_ONCE	mods/mini-games/wires.hpp	/^			BEEP_ONCE,$/;"	e	enum:mods::mini_games::wires::port_behaviour_t
BEEP_TWICE	mods/mini-games/wires.hpp	/^			BEEP_TWICE,$/;"	e	enum:mods::mini_games::wires::port_behaviour_t
BEEP_ZERO	mods/mini-games/wires.hpp	/^			BEEP_ZERO$/;"	e	enum:mods::mini_games::wires::port_behaviour_t
BFS_ALREADY_THERE	utils.h	129;"	d
BFS_ERROR	utils.h	128;"	d
BFS_NO_PATH	utils.h	130;"	d
BG_BLUE	mods/acl/color.hpp	/^			BG_BLUE     = 44,$/;"	e	enum:mods::Color::Code
BG_DEFAULT	mods/acl/color.hpp	/^			BG_DEFAULT  = 49$/;"	e	enum:mods::Color::Code
BG_GREEN	mods/acl/color.hpp	/^			BG_GREEN    = 42,$/;"	e	enum:mods::Color::Code
BG_RED	mods/acl/color.hpp	/^			BG_RED      = 41,$/;"	e	enum:mods::Color::Code
BINARY	act.wizard.cpp	2291;"	d	file:
BLIND	mods/affects.hpp	/^		BLIND = 0,$/;"	e	enum:mods::affects::affect_t
BLIND	mods/flags.hpp	/^		BLIND = 1,$/;"	e	enum:mods::flags::aff
BLIND	mods/weapon-types.hpp	/^		BLIND,$/;"	e	enum:mods::weapon::capabilities::cap_t
BLINDING_LIGHT	mods/aoe.hpp	/^		BLINDING_LIGHT,	\/** Typical blinding light from flash bangs *\/$/;"	e	enum:mods::aoe::types_t
BLOCK_SIZE	mail.h	29;"	d
BOARD_MAGIC	boards.h	17;"	d
BOARD_RNUM	boards.h	41;"	d
BOARD_VNUM	boards.h	36;"	d
BOOL_CASE	db.cpp	1571;"	d	file:
BOOL_CASE	db.cpp	1635;"	d	file:
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_ARMOR_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::armor
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_ATTACHMENT_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::attachment
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_CONSUMABLE_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::consumable
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_CONTAINER_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::container
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_DRONE_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::drone
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_ELEMENTAL_TYPES_SEQUENCE)$/;"	e	enum:mods::elemental_types_t
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_EXPLOSIVE_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::explosive
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_GADGET_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::gadget
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_MELEE_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::melee
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_RIFLE_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::rifle
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_TRAP_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::trap
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_ENUM_TYPES_IMPL,~,MENTOC_VEHICLE_TYPES_SEQUENCE)$/;"	e	enum:mods::weapon::type::vehicle
BOOST_PP_SEQ_FOR_EACH	mods/item-types.hpp	/^		BOOST_PP_SEQ_FOR_EACH(MENTOC_TYPE_LIST_IMPL,~,MENTOC_ITEM_TYPE_LIST_SEQUENCE)$/;"	e	enum:mods::weapon::type::type_list
BOOT_DB	globals.hpp	/^		enum boot_type_t { BOOT_DB,BOOT_HELL };$/;"	e	enum:mods::globals::boot_type_t
BOOT_HELL	globals.hpp	/^		enum boot_type_t { BOOT_DB,BOOT_HELL };$/;"	e	enum:mods::globals::boot_type_t
BOTH	act.wizard.cpp	2288;"	d	file:
BRASS_KNUCKLES	mods/weapon.hpp	/^		BRASS_KNUCKLES$/;"	e	enum:mods::weapon::melee_t
BREACH	mods/item.hpp	/^		BREACH = (1 << 5),$/;"	e	enum:mods::item::capability_t
BREACHABLE_DOOR	mods/doors.hpp	/^	static constexpr int BREACHABLE_DOOR = exit_info_masks_t::EIM_ISDOOR + exit_info_masks_t::EIM_BREACHABLE;$/;"	m	namespace:mods::doors
BREACHED_EAST	mods/ai_state.hpp	/^				BREACHED_NORTH,BREACHED_SOUTH,BREACHED_EAST,BREACHED_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHED_FROM_EAST	mods/ai_state.hpp	/^				BREACHED_FROM_NORTH,BREACHED_FROM_SOUTH,BREACHED_FROM_EAST,BREACHED_FROM_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHED_FROM_NORTH	mods/ai_state.hpp	/^				BREACHED_FROM_NORTH,BREACHED_FROM_SOUTH,BREACHED_FROM_EAST,BREACHED_FROM_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHED_FROM_SOUTH	mods/ai_state.hpp	/^				BREACHED_FROM_NORTH,BREACHED_FROM_SOUTH,BREACHED_FROM_EAST,BREACHED_FROM_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHED_FROM_WEST	mods/ai_state.hpp	/^				BREACHED_FROM_NORTH,BREACHED_FROM_SOUTH,BREACHED_FROM_EAST,BREACHED_FROM_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHED_NORTH	mods/ai_state.hpp	/^				BREACHED_NORTH,BREACHED_SOUTH,BREACHED_EAST,BREACHED_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHED_SOUTH	mods/ai_state.hpp	/^				BREACHED_NORTH,BREACHED_SOUTH,BREACHED_EAST,BREACHED_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHED_WEST	mods/ai_state.hpp	/^				BREACHED_NORTH,BREACHED_SOUTH,BREACHED_EAST,BREACHED_WEST,$/;"	e	enum:mods::ai_state::event_type_t
BREACHER	mods/classes/types.hpp	/^		BREACHER,$/;"	e	enum:mods::classes::types
BREACHER	structs.h	/^	BREACHER = 22,$/;"	e	enum:player_class_t
BREACHER_EXPLOSIVE_SHOT_MAX_COUNT	mods/values-list.cpp	/^BREACHER_EXPLOSIVE_SHOT_MAX_COUNT,2$/;"	v
BREACH_DOORS	mods/weapon-types.hpp	/^		BREACH_DOORS,$/;"	e	enum:mods::weapon::capabilities::cap_t
BREACH_MASK	mods/object-utils.hpp	/^	constexpr static obj_data::location_data_t BREACH_MASK = 32;$/;"	m	namespace:mods::object_utils
BREACH_TICKS_DURATION	mods/object-utils.hpp	/^	constexpr static uint8_t BREACH_TICKS_DURATION = 15;$/;"	m	namespace:mods::object_utils
BREAK	telnet.h	54;"	d
BRF	utils.h	118;"	d
BUG_FILE	db.h	90;"	d
BUILDER	mods/flags.hpp	/^		BUILDER,$/;"	e	enum:mods::flags::chunk_type_t
BURN	mods/item.hpp	/^		BURN = (1 << 3),$/;"	e	enum:mods::item::capability_t
BURN	mods/weapon-types.hpp	/^		BURN,$/;"	e	enum:mods::weapon::capabilities::cap_t
BUTCHER	structs.h	/^	BUTCHER = 12,$/;"	e	enum:player_class_t
BUY_TYPE	shop.h	24;"	d
BUY_WORD	shop.h	25;"	d
Board_clear_all	boards.cpp	/^void Board_clear_all(void) {$/;"	f
Board_clear_board	boards.cpp	/^void Board_clear_board(int board_type) {$/;"	f
Board_display_msg	boards.cpp	/^int Board_display_msg(int board_type, char_data *ch, char *arg, struct obj_data *board) {$/;"	f
Board_load_board	boards.cpp	/^void Board_load_board(int board_type) {$/;"	f
Board_remove_msg	boards.cpp	/^int Board_remove_msg(int board_type, char_data *ch, char *arg, struct obj_data *board) {$/;"	f
Board_reset_board	boards.cpp	/^void Board_reset_board(int board_type) {$/;"	f
Board_save_board	boards.cpp	/^void Board_save_board(int board_type) {$/;"	f
Board_show_board	boards.cpp	/^int Board_show_board(int board_type, char_data *ch, char *arg, struct obj_data *board) {$/;"	f
Board_write_message	boards.cpp	/^int Board_write_message(int board_type, char_data *ch, char *arg, struct obj_data *board) {$/;"	f
BorgType	mods/catch.hpp	/^		struct BorgType {$/;"	s	namespace:Catch::Detail
CAN_CARRY_N	utils.h	366;"	d
CAN_CARRY_OBJ	utils.h	476;"	d
CAN_CARRY_W	utils.h	365;"	d
CAN_GET_OBJ	utils.h	480;"	d
CAN_GO	utils.h	495;"	d
CAN_SEE	utils.h	455;"	d
CAN_SEE_IN_DARK	utils.h	368;"	d
CAN_SEE_OBJ	utils.h	473;"	d
CAN_SEE_OBJ_CARRIER	utils.h	466;"	d
CAN_WEAR	utils.h	418;"	d
CAP	utils.cpp	/^char *CAP(char *txt) {$/;"	f
CAPABILITY_LIST_LENGTH	structs.h	/^		static constexpr std::size_t CAPABILITY_LIST_LENGTH = mods::weapon::capabilities::cap_t::__LAST;$/;"	m	struct:obj_data
CAP_ALL	mods/util.hpp	/^	static constexpr uint8_t CAP_ALL = 0;$/;"	m	namespace:mods::util
CAP_ANY	mods/util.hpp	/^	static constexpr uint8_t CAP_ANY = 0;$/;"	m	namespace:mods::util
CAP_SINGLE	mods/util.hpp	/^	static constexpr uint8_t CAP_SINGLE = 0;$/;"	m	namespace:mods::util
CARPET	structs.h	/^			CARPET,$/;"	m	struct:room_data	typeref:enum:room_data::
CASE	db.cpp	1568;"	d	file:
CASE	db.cpp	1634;"	d	file:
CASE_MOON	mods/date-time.cpp	217;"	d	file:
CAST_POTION	spells.h	18;"	d
CAST_SCROLL	spells.h	21;"	d
CAST_SPELL	spells.h	17;"	d
CAST_STAFF	spells.h	20;"	d
CAST_UNDEFINED	spells.h	16;"	d
CAST_WAND	spells.h	19;"	d
CAT	globals.hpp	/^static inline std::string CAT(Args const& ... args) {$/;"	f
CATCHY_YAML_FILE	mods/util.hpp	/^		CATCHY_YAML_FILE = 1,$/;"	e	enum:mods::util::yaml_type_t
CATCH_AND_THEN	mods/catch.hpp	12145;"	d
CATCH_AND_WHEN	mods/catch.hpp	12143;"	d
CATCH_ANON_TEST_CASE	mods/catch.hpp	12126;"	d
CATCH_ARC_ENABLED	mods/catch.hpp	1548;"	d
CATCH_ARC_ENABLED	mods/catch2.hpp	1501;"	d
CATCH_ARC_STRONG	mods/catch.hpp	1568;"	d
CATCH_ARC_STRONG	mods/catch.hpp	1587;"	d
CATCH_ARC_STRONG	mods/catch2.hpp	1519;"	d
CATCH_ARC_STRONG	mods/catch2.hpp	1535;"	d
CATCH_AUTO_PTR	mods/catch.hpp	361;"	d
CATCH_AUTO_PTR	mods/catch.hpp	363;"	d
CATCH_BREAK_INTO_DEBUGGER	mods/catch.hpp	2180;"	d
CATCH_BREAK_INTO_DEBUGGER	mods/catch2.hpp	7972;"	d
CATCH_CAPTURE	mods/catch.hpp	12106;"	d
CATCH_CATCH_ALL	mods/catch2.hpp	450;"	d
CATCH_CATCH_ANON	mods/catch2.hpp	451;"	d
CATCH_CHECK	mods/catch.hpp	12089;"	d
CATCH_CHECKED_ELSE	mods/catch.hpp	12092;"	d
CATCH_CHECKED_IF	mods/catch.hpp	12091;"	d
CATCH_CHECK_FALSE	mods/catch.hpp	12090;"	d
CATCH_CHECK_NOFAIL	mods/catch.hpp	12093;"	d
CATCH_CHECK_NOTHROW	mods/catch.hpp	12098;"	d
CATCH_CHECK_THAT	mods/catch.hpp	12100;"	d
CATCH_CHECK_THROWS	mods/catch.hpp	12095;"	d
CATCH_CHECK_THROWS_AS	mods/catch.hpp	12096;"	d
CATCH_CHECK_THROWS_WITH	mods/catch.hpp	12097;"	d
CATCH_CLARA_CONFIG_CONSOLE_WIDTH	mods/catch2.hpp	8448;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	mods/catch2.hpp	8425;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	mods/catch2.hpp	8427;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	mods/catch2.hpp	8452;"	d
CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH	mods/catch2.hpp	8482;"	d
CATCH_CONFIG_ALL_PARTS	mods/catch2.hpp	51;"	d
CATCH_CONFIG_ANDROID_LOGWRITE	mods/catch2.hpp	404;"	d
CATCH_CONFIG_COLOUR_NONE	mods/catch2.hpp	197;"	d
CATCH_CONFIG_COLOUR_NONE	mods/catch2.hpp	246;"	d
CATCH_CONFIG_COLOUR_NONE	mods/catch2.hpp	304;"	d
CATCH_CONFIG_COLOUR_WINDOWS	mods/catch.hpp	8229;"	d
CATCH_CONFIG_CONSOLE_WIDTH	mods/catch.hpp	4039;"	d
CATCH_CONFIG_CONSOLE_WIDTH	mods/catch2.hpp	5256;"	d
CATCH_CONFIG_COUNTER	mods/catch.hpp	315;"	d
CATCH_CONFIG_COUNTER	mods/catch2.hpp	349;"	d
CATCH_CONFIG_CPP11_GENERATED_METHODS	mods/catch.hpp	291;"	d
CATCH_CONFIG_CPP11_IS_ENUM	mods/catch.hpp	294;"	d
CATCH_CONFIG_CPP11_LONG_LONG	mods/catch.hpp	303;"	d
CATCH_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	288;"	d
CATCH_CONFIG_CPP11_NULLPTR	mods/catch.hpp	285;"	d
CATCH_CONFIG_CPP11_OVERRIDE	mods/catch.hpp	306;"	d
CATCH_CONFIG_CPP11_SHUFFLE	mods/catch.hpp	318;"	d
CATCH_CONFIG_CPP11_TO_STRING	mods/catch2.hpp	364;"	d
CATCH_CONFIG_CPP11_TUPLE	mods/catch.hpp	297;"	d
CATCH_CONFIG_CPP11_TYPE_TRAITS	mods/catch.hpp	321;"	d
CATCH_CONFIG_CPP11_UNIQUE_PTR	mods/catch.hpp	309;"	d
CATCH_CONFIG_CPP17_BYTE	mods/catch2.hpp	380;"	d
CATCH_CONFIG_CPP17_OPTIONAL	mods/catch2.hpp	368;"	d
CATCH_CONFIG_CPP17_STRING_VIEW	mods/catch2.hpp	372;"	d
CATCH_CONFIG_CPP17_VARIANT	mods/catch2.hpp	376;"	d
CATCH_CONFIG_DEFAULT_REPORTER	mods/catch2.hpp	5298;"	d
CATCH_CONFIG_DEFAULT_REPORTER	mods/catch2.hpp	5301;"	d
CATCH_CONFIG_DISABLE_EXCEPTIONS	mods/catch2.hpp	392;"	d
CATCH_CONFIG_DISABLE_MATCHERS	mods/catch2.hpp	59;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	mods/catch2.hpp	1871;"	d
CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER	mods/catch2.hpp	62;"	d
CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER	mods/catch2.hpp	1872;"	d
CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER	mods/catch2.hpp	1868;"	d
CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER	mods/catch2.hpp	1869;"	d
CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER	mods/catch2.hpp	1870;"	d
CATCH_CONFIG_EXTERNAL_INTERFACES	mods/catch2.hpp	57;"	d
CATCH_CONFIG_GLOBAL_NEXTAFTER	mods/catch2.hpp	408;"	d
CATCH_CONFIG_NEW_CAPTURE	mods/catch2.hpp	388;"	d
CATCH_CONFIG_NO_CPP17_VARIANT	mods/catch2.hpp	338;"	d
CATCH_CONFIG_POLYFILL_ISNAN	mods/catch2.hpp	396;"	d
CATCH_CONFIG_POSIX_SIGNALS	mods/catch.hpp	328;"	d
CATCH_CONFIG_POSIX_SIGNALS	mods/catch2.hpp	356;"	d
CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	mods/catch2.hpp	459;"	d
CATCH_CONFIG_USE_ASYNC	mods/catch2.hpp	400;"	d
CATCH_CONFIG_VARIADIC_MACROS	mods/catch.hpp	300;"	d
CATCH_CONFIG_WCHAR	mods/catch2.hpp	360;"	d
CATCH_CONFIG_WINDOWS_SEH	mods/catch.hpp	324;"	d
CATCH_CONFIG_WINDOWS_SEH	mods/catch2.hpp	352;"	d
CATCH_CPP11_OR_GREATER	mods/catch.hpp	107;"	d
CATCH_CPP14_OR_GREATER	mods/catch.hpp	111;"	d
CATCH_CPP14_OR_GREATER	mods/catch2.hpp	126;"	d
CATCH_CPP17_OR_GREATER	mods/catch2.hpp	130;"	d
CATCH_DEFER	mods/catch2.hpp	708;"	d
CATCH_DEFINED_NOMINMAX	mods/catch2.hpp	7989;"	d
CATCH_DEFINED_WIN32_LEAN_AND_MEAN	mods/catch2.hpp	7993;"	d
CATCH_EMPTY	mods/catch2.hpp	707;"	d
CATCH_ENFORCE	mods/catch2.hpp	3901;"	d
CATCH_ERROR	mods/catch2.hpp	3895;"	d
CATCH_FAIL	mods/catch.hpp	12115;"	d
CATCH_GCC_HAS_NEW_PRAGMA	mods/catch.hpp	173;"	d
CATCH_GENERATE	mods/catch.hpp	12131;"	d
CATCH_GIVEN	mods/catch.hpp	12141;"	d
CATCH_IMPL	mods/catch.hpp	53;"	d
CATCH_IMPL	mods/catch2.hpp	50;"	d
CATCH_INFO	mods/catch.hpp	12103;"	d
CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE	mods/catch2.hpp	204;"	d
CATCH_INTERNAL_CONFIG_COUNTER	mods/catch.hpp	230;"	d
CATCH_INTERNAL_CONFIG_COUNTER	mods/catch2.hpp	293;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	mods/catch.hpp	206;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	mods/catch.hpp	249;"	d
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM	mods/catch.hpp	253;"	d
CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG	mods/catch.hpp	265;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	123;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	205;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	245;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	119;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	177;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	200;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	241;"	d
CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE	mods/catch.hpp	269;"	d
CATCH_INTERNAL_CONFIG_CPP11_SHUFFLE	mods/catch.hpp	207;"	d
CATCH_INTERNAL_CONFIG_CPP11_SHUFFLE	mods/catch.hpp	275;"	d
CATCH_INTERNAL_CONFIG_CPP11_TUPLE	mods/catch.hpp	257;"	d
CATCH_INTERNAL_CONFIG_CPP11_TYPE_TRAITS	mods/catch.hpp	208;"	d
CATCH_INTERNAL_CONFIG_CPP11_TYPE_TRAITS	mods/catch.hpp	278;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	mods/catch.hpp	201;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	mods/catch.hpp	272;"	d
CATCH_INTERNAL_CONFIG_CPP17_BYTE	mods/catch2.hpp	327;"	d
CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL	mods/catch2.hpp	320;"	d
CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW	mods/catch2.hpp	315;"	d
CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED	mods/catch2.hpp	270;"	d
CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER	mods/catch2.hpp	308;"	d
CATCH_INTERNAL_CONFIG_NEW_CAPTURE	mods/catch2.hpp	384;"	d
CATCH_INTERNAL_CONFIG_NO_ASYNC	mods/catch2.hpp	303;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	mods/catch2.hpp	203;"	d
CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING	mods/catch2.hpp	231;"	d
CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE	mods/catch2.hpp	216;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	mods/catch.hpp	141;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	mods/catch2.hpp	192;"	d
CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS	mods/catch2.hpp	196;"	d
CATCH_INTERNAL_CONFIG_NO_WCHAR	mods/catch2.hpp	276;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	mods/catch2.hpp	210;"	d
CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH	mods/catch2.hpp	302;"	d
CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN	mods/catch2.hpp	282;"	d
CATCH_INTERNAL_CONFIG_POSIX_SIGNALS	mods/catch2.hpp	186;"	d
CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR	mods/catch2.hpp	256;"	d
CATCH_INTERNAL_CONFIG_USE_ASYNC	mods/catch2.hpp	264;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	mods/catch.hpp	221;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	mods/catch.hpp	261;"	d
CATCH_INTERNAL_CONFIG_WINDOWS_SEH	mods/catch.hpp	197;"	d
CATCH_INTERNAL_ERROR	mods/catch.hpp	508;"	d
CATCH_INTERNAL_ERROR	mods/catch2.hpp	3892;"	d
CATCH_INTERNAL_IGNORE_BUT_WARN	mods/catch2.hpp	141;"	d
CATCH_INTERNAL_IGNORE_BUT_WARN	mods/catch2.hpp	162;"	d
CATCH_INTERNAL_IGNORE_BUT_WARN	mods/catch2.hpp	435;"	d
CATCH_INTERNAL_LINEINFO	mods/catch.hpp	507;"	d
CATCH_INTERNAL_LINEINFO	mods/catch2.hpp	538;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	mods/catch2.hpp	138;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	mods/catch2.hpp	147;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	mods/catch2.hpp	240;"	d
CATCH_INTERNAL_START_WARNINGS_SUPPRESSION	mods/catch2.hpp	414;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	mods/catch2.hpp	139;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	mods/catch2.hpp	148;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	mods/catch2.hpp	241;"	d
CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION	mods/catch2.hpp	417;"	d
CATCH_INTERNAL_STRINGIFY	mods/catch2.hpp	2675;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	mods/catch2.hpp	165;"	d
CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS	mods/catch2.hpp	423;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	mods/catch.hpp	127;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	mods/catch.hpp	181;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	mods/catch.hpp	332;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	mods/catch2.hpp	169;"	d
CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS	mods/catch2.hpp	420;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	mods/catch2.hpp	178;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	mods/catch2.hpp	439;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS	mods/catch2.hpp	445;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	mods/catch2.hpp	172;"	d
CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS	mods/catch2.hpp	426;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	mods/catch2.hpp	175;"	d
CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS	mods/catch2.hpp	429;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	mods/catch.hpp	130;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	mods/catch.hpp	184;"	d
CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS	mods/catch.hpp	333;"	d
CATCH_MAKE_MSG	mods/catch2.hpp	3889;"	d
CATCH_METHOD_AS_TEST_CASE	mods/catch.hpp	12112;"	d
CATCH_NOEXCEPT	mods/catch.hpp	/^			virtual const char* what() const CATCH_NOEXCEPT;$/;"	m	class:Catch::NotImplementedException
CATCH_NOEXCEPT	mods/catch.hpp	338;"	d
CATCH_NOEXCEPT	mods/catch.hpp	341;"	d
CATCH_NOEXCEPT_IS	mods/catch.hpp	339;"	d
CATCH_NOEXCEPT_IS	mods/catch.hpp	342;"	d
CATCH_NOT_IMPLEMENTED	mods/catch.hpp	529;"	d
CATCH_NULL	mods/catch.hpp	347;"	d
CATCH_NULL	mods/catch.hpp	349;"	d
CATCH_OVERRIDE	mods/catch.hpp	/^			virtual void reconstructExpression(std::string& dest) const CATCH_OVERRIDE;$/;"	m	class:Catch::ResultBuilder
CATCH_OVERRIDE	mods/catch.hpp	354;"	d
CATCH_OVERRIDE	mods/catch.hpp	356;"	d
CATCH_PLATFORM_IPHONE	mods/catch2.hpp	74;"	d
CATCH_PLATFORM_LINUX	mods/catch2.hpp	78;"	d
CATCH_PLATFORM_MAC	mods/catch.hpp	2126;"	d
CATCH_PLATFORM_MAC	mods/catch2.hpp	72;"	d
CATCH_PLATFORM_WINDOWS	mods/catch2.hpp	81;"	d
CATCH_PLATFORM_WINDOWS	mods/catch2.hpp	8812;"	d
CATCH_RECURSE	mods/catch2.hpp	699;"	d
CATCH_RECURSE	mods/catch2.hpp	701;"	d
CATCH_RECURSION_LEVEL0	mods/catch2.hpp	688;"	d
CATCH_RECURSION_LEVEL1	mods/catch2.hpp	689;"	d
CATCH_RECURSION_LEVEL2	mods/catch2.hpp	690;"	d
CATCH_RECURSION_LEVEL3	mods/catch2.hpp	691;"	d
CATCH_RECURSION_LEVEL4	mods/catch2.hpp	692;"	d
CATCH_RECURSION_LEVEL5	mods/catch2.hpp	693;"	d
CATCH_RECURSION_LEVEL6	mods/catch2.hpp	698;"	d
CATCH_REC_END	mods/catch2.hpp	704;"	d
CATCH_REC_GET_END	mods/catch2.hpp	712;"	d
CATCH_REC_GET_END1	mods/catch2.hpp	711;"	d
CATCH_REC_GET_END2	mods/catch2.hpp	710;"	d
CATCH_REC_LIST	mods/catch2.hpp	730;"	d
CATCH_REC_LIST0	mods/catch2.hpp	717;"	d
CATCH_REC_LIST0_UD	mods/catch2.hpp	721;"	d
CATCH_REC_LIST1	mods/catch2.hpp	718;"	d
CATCH_REC_LIST1_UD	mods/catch2.hpp	722;"	d
CATCH_REC_LIST2	mods/catch2.hpp	719;"	d
CATCH_REC_LIST2_UD	mods/catch2.hpp	723;"	d
CATCH_REC_LIST_UD	mods/catch2.hpp	728;"	d
CATCH_REC_NEXT	mods/catch2.hpp	715;"	d
CATCH_REC_NEXT0	mods/catch2.hpp	713;"	d
CATCH_REC_NEXT1	mods/catch2.hpp	714;"	d
CATCH_REC_OUT	mods/catch2.hpp	705;"	d
CATCH_REGISTER_ENUM	mods/catch2.hpp	2177;"	d
CATCH_REGISTER_LEGACY_REPORTER	mods/catch.hpp	12129;"	d
CATCH_REGISTER_LISTENER	mods/catch2.hpp	6088;"	d
CATCH_REGISTER_REPORTER	mods/catch.hpp	12128;"	d
CATCH_REGISTER_REPORTER	mods/catch2.hpp	6082;"	d
CATCH_REGISTER_TAG_ALIAS	mods/catch.hpp	3154;"	d
CATCH_REGISTER_TAG_ALIAS	mods/catch2.hpp	550;"	d
CATCH_REGISTER_TEST_CASE	mods/catch.hpp	12113;"	d
CATCH_REQUIRE	mods/catch.hpp	12081;"	d
CATCH_REQUIRE_FALSE	mods/catch.hpp	12082;"	d
CATCH_REQUIRE_NOTHROW	mods/catch.hpp	12087;"	d
CATCH_REQUIRE_THAT	mods/catch.hpp	12101;"	d
CATCH_REQUIRE_THROWS	mods/catch.hpp	12084;"	d
CATCH_REQUIRE_THROWS_AS	mods/catch.hpp	12085;"	d
CATCH_REQUIRE_THROWS_WITH	mods/catch.hpp	12086;"	d
CATCH_RUNTIME_ERROR	mods/catch2.hpp	3898;"	d
CATCH_SCENARIO	mods/catch.hpp	12135;"	d
CATCH_SCENARIO_METHOD	mods/catch.hpp	12136;"	d
CATCH_SCOPED_CAPTURE	mods/catch.hpp	12107;"	d
CATCH_SCOPED_INFO	mods/catch.hpp	12105;"	d
CATCH_SECTION	mods/catch.hpp	12114;"	d
CATCH_SUCCEED	mods/catch.hpp	12116;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	mods/catch.hpp	4224;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	mods/catch.hpp	5432;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	mods/catch2.hpp	8424;"	d
CATCH_TEST_CASE	mods/catch.hpp	12110;"	d
CATCH_TEST_CASE_METHOD	mods/catch.hpp	12111;"	d
CATCH_THEN	mods/catch.hpp	12144;"	d
CATCH_TRANSLATE_EXCEPTION	mods/catch.hpp	12204;"	d
CATCH_TRAP	mods/catch.hpp	2154;"	d
CATCH_TRAP	mods/catch2.hpp	7934;"	d
CATCH_TRY	mods/catch2.hpp	449;"	d
CATCH_UNSAFE_UNRETAINED	mods/catch.hpp	1567;"	d
CATCH_UNSAFE_UNRETAINED	mods/catch.hpp	1586;"	d
CATCH_UNSAFE_UNRETAINED	mods/catch2.hpp	1518;"	d
CATCH_UNSAFE_UNRETAINED	mods/catch2.hpp	1534;"	d
CATCH_VERSION_MAJOR	mods/catch2.hpp	16;"	d
CATCH_VERSION_MINOR	mods/catch2.hpp	17;"	d
CATCH_VERSION_PATCH	mods/catch2.hpp	18;"	d
CATCH_WARN	mods/catch.hpp	12104;"	d
CATCH_WHEN	mods/catch.hpp	12142;"	d
CCBLU	screen.h	33;"	d
CCCYN	screen.h	35;"	d
CCGRN	screen.h	31;"	d
CCMAG	screen.h	34;"	d
CCNRM	screen.h	29;"	d
CCRED	screen.h	30;"	d
CCWHT	screen.h	36;"	d
CCYEL	screen.h	32;"	d
CEMENT	structs.h	/^			CEMENT,			\/** asphault, nearly indestructible *\/$/;"	m	struct:room_data	typeref:enum:room_data::
CGET	mods/values.hpp	1200;"	d
CGET	mods/values.hpp	600;"	d
CGET_DEF	mods/values.cpp	20;"	d	file:
CGET_DEF	mods/values.cpp	2420;"	d	file:
CHAOTIC	mods/ai_state.hpp	/^				MANIC,CHAOTIC,RESERVED$/;"	e	enum:mods::ai_state::state
CHARM	mods/flags.hpp	/^		CHARM,$/;"	e	enum:mods::flags::aff
CHECK_NULL	comm.cpp	2416;"	d	file:
CHECK_PLAYER_SPECIAL	utils.h	214;"	d
CHECK_PLAYER_SPECIAL	utils.h	217;"	d
CHECK_WAIT	utils.h	378;"	d
CHEMIST	structs.h	/^	CHEMIST = 21,$/;"	e	enum:player_class_t
CIRCLEMUD_VERSION	utils.h	427;"	d
CIRCLE_CRYPT	conf.h	35;"	d
CIRCLE_GNU_LIBC_MEMORY_TRACK	sysdep.h	118;"	d
CIRCLE_UNIX	conf.h	32;"	d
CIRCLE_UNSIGNED_INDEX	mods/index-type.hpp	6;"	d
CI_CRIT	mods/projectile.cpp	/^		constexpr static uint8_t CI_CRIT = 0;$/;"	m	namespace:mods::projectile	file:
CI_INJ	mods/projectile.cpp	/^		constexpr static uint8_t CI_INJ = 0;$/;"	m	namespace:mods::projectile	file:
CLARA_AUTO_PTR	mods/catch.hpp	4573;"	d
CLARA_CONFIG_CONSOLE_WIDTH	mods/catch.hpp	4225;"	d
CLARA_CONFIG_CONSOLE_WIDTH	mods/catch.hpp	4227;"	d
CLARA_CONFIG_CONSOLE_WIDTH	mods/catch.hpp	5431;"	d
CLARA_CONFIG_CPP11_GENERATED_METHODS	mods/catch.hpp	4539;"	d
CLARA_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	4536;"	d
CLARA_CONFIG_CPP11_NULLPTR	mods/catch.hpp	4533;"	d
CLARA_CONFIG_CPP11_OVERRIDE	mods/catch.hpp	4542;"	d
CLARA_CONFIG_CPP11_UNIQUE_PTR	mods/catch.hpp	4545;"	d
CLARA_CONFIG_MAIN	mods/catch.hpp	12073;"	d
CLARA_CONFIG_MAIN	mods/catch.hpp	59;"	d
CLARA_CONFIG_MAIN	mods/catch2.hpp	89;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	mods/catch.hpp	58;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	mods/catch2.hpp	88;"	d
CLARA_CONFIG_OPTIONAL_TYPE	mods/catch2.hpp	8459;"	d
CLARA_CPP11_OR_GREATER	mods/catch.hpp	4508;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	mods/catch.hpp	4497;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	mods/catch.hpp	4519;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	4468;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	4496;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	mods/catch.hpp	4515;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	4464;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	4478;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	4491;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	mods/catch.hpp	4511;"	d
CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE	mods/catch.hpp	4523;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	mods/catch.hpp	4492;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	mods/catch.hpp	4526;"	d
CLARA_NOEXCEPT	mods/catch.hpp	4550;"	d
CLARA_NOEXCEPT_IS	mods/catch.hpp	4551;"	d
CLARA_NULL	mods/catch.hpp	4559;"	d
CLARA_OVERRIDE	mods/catch.hpp	4566;"	d
CLARA_PLATFORM_WINDOWS	mods/catch.hpp	4588;"	d
CLASS_ABBR	utils.h	500;"	d
CLASS_ANIMAL	structs.h	249;"	d
CLASS_BANDIT	structs.h	/^	CLASS_BANDIT = 11,$/;"	e	enum:player_class_t
CLASS_BREACHER	structs.h	/^	CLASS_BREACHER = 22,$/;"	e	enum:player_class_t
CLASS_BUTCHER	structs.h	/^	CLASS_BUTCHER = 12,$/;"	e	enum:player_class_t
CLASS_CHEMIST	structs.h	/^	CLASS_CHEMIST = 21,$/;"	e	enum:player_class_t
CLASS_CONTAGION	structs.h	/^	CLASS_CONTAGION = 4,$/;"	e	enum:player_class_t
CLASS_DEALER	structs.h	/^	CLASS_DEALER = 17,$/;"	e	enum:player_class_t
CLASS_DRAGON	structs.h	250;"	d
CLASS_ENGINEER	structs.h	/^	CLASS_ENGINEER = 5,$/;"	e	enum:player_class_t
CLASS_FIRST	structs.h	/^	CLASS_FIRST = CLASS_SNIPER,$/;"	e	enum:player_class_t
CLASS_FORGE	structs.h	/^	CLASS_FORGE = 18,$/;"	e	enum:player_class_t
CLASS_GHOST	structs.h	/^	CLASS_GHOST = 9,$/;"	e	enum:player_class_t
CLASS_GIANT	structs.h	251;"	d
CLASS_HUMANOID	structs.h	248;"	d
CLASS_LAST	structs.h	/^	CLASS_LAST = CLASS_BREACHER$/;"	e	enum:player_class_t
CLASS_MACHINIST	structs.h	/^	CLASS_MACHINIST = 20,$/;"	e	enum:player_class_t
CLASS_MALADY	structs.h	/^	CLASS_MALADY = 15,$/;"	e	enum:player_class_t
CLASS_MARINE	structs.h	/^	CLASS_MARINE = 2,$/;"	e	enum:player_class_t
CLASS_MARKSMAN	structs.h	/^	CLASS_MARKSMAN = 10,$/;"	e	enum:player_class_t
CLASS_MEDIC	structs.h	/^	CLASS_MEDIC = 6,$/;"	e	enum:player_class_t
CLASS_OBSTRUCTOR	structs.h	/^	CLASS_OBSTRUCTOR = 14,$/;"	e	enum:player_class_t
CLASS_OTHER	structs.h	246;"	d
CLASS_PSYOP	structs.h	/^	CLASS_PSYOP = 7,$/;"	e	enum:player_class_t
CLASS_PYREXIA	structs.h	/^	CLASS_PYREXIA = 16,$/;"	e	enum:player_class_t
CLASS_SENTINEL	structs.h	/^	CLASS_SENTINEL = 3,$/;"	e	enum:player_class_t
CLASS_SNIPER	structs.h	/^	CLASS_SNIPER = 1,$/;"	e	enum:player_class_t
CLASS_STRIKER	structs.h	/^	CLASS_STRIKER = 13,$/;"	e	enum:player_class_t
CLASS_SUPPORT	structs.h	/^	CLASS_SUPPORT = 8,$/;"	e	enum:player_class_t
CLASS_SYNDROME	structs.h	/^	CLASS_SYNDROME = 19,$/;"	e	enum:player_class_t
CLASS_UNDEAD	structs.h	247;"	d
CLASS_UNDEFINED	structs.h	/^	CLASS_UNDEFINED = 0,$/;"	e	enum:player_class_t
CLAYMORE	mods/weapon.hpp	/^	                 FLAME = (1 << 10), CLAYMORE = (1 << 11), REMOTE_EXPLOSIVE = (1 << 12),$/;"	e	enum:mods::weapon::mask_type
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	mods/catch.hpp	5663;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	mods/catch.hpp	5848;"	d
CLOSE_DOOR	act.movement.cpp	368;"	d	file:
CLOSE_SOCKET	sysdep.h	392;"	d
CMD_IS	interpreter.h	20;"	d
CMD_NAME	interpreter.h	19;"	d
CMP	utils.h	120;"	d
COLOR_LEV	screen.h	38;"	d
COLUMNS	mods/mini-games/wires.hpp	/^		static constexpr int COLUMNS = 3;$/;"	m	struct:mods::mini_games::wires
COMMON	mods/randomized-items.hpp	/^	COMMON = 0,$/;"	e	enum:mods::rarity_enum_t
COMMON	mods/rarity.hpp	/^		constexpr static float COMMON = 0.2510437;$/;"	m	namespace:mods::rarity
COMMON_DROP_RATE	mods/randomized-items.hpp	/^		constexpr static float COMMON_DROP_RATE = 85.0;$/;"	m	class:mods::randomized_items
COMPENSATOR	mods/weapon.hpp	/^		COMPENSATOR, MUZZLE_BRAKE,EXTENDED,$/;"	e	enum:mods::weapon::barrel_t
COMPLETELY_ON_FIRE	structs.h	/^			COMPLETELY_ON_FIRE = 2,$/;"	e	enum:uint8_t
CONSTGET	mods/values.hpp	/^		static inline T CONSTGET(value_key_t m,T fallback){$/;"	f	namespace:mods::values
CONSTSET	mods/values.hpp	/^		static inline void CONSTSET(value_key_t m,T value){$/;"	f	namespace:mods::values
CONSUMABLE_NONE	mods/item-types.hpp	/^		CONSUMABLE_NONE = 0,$/;"	e	enum:mods::weapon::type::consumable
CONTAGION	mods/classes/types.hpp	/^		CONTAGION,$/;"	e	enum:mods::classes::types
CONTAGION	structs.h	/^	CONTAGION = 4,$/;"	e	enum:player_class_t
CONTAGION_NONE	mods/weapon.hpp	/^			CONTAGION_NONE = 0,$/;"	e	enum:mods::weapon::contagion::primary_choice_t
CONTAGION_PRIMARY_FAMAS	mods/weapon.hpp	/^			CONTAGION_PRIMARY_FAMAS = 2,$/;"	e	enum:mods::weapon::contagion::primary_choice_t
CONTAGION_PRIMARY_M3	mods/weapon.hpp	/^			CONTAGION_PRIMARY_M3 = 1,$/;"	e	enum:mods::weapon::contagion::primary_choice_t
CONTAINER	mods/object.hpp	/^				CONTAINER,$/;"	e	enum:mods::object::object_type_enum_t
CONTAINER_NONE	mods/item-types.hpp	/^		CONTAINER_NONE = 0,$/;"	e	enum:mods::weapon::type::container
CONTRACT_REWARD	mods/players/db-load.hpp	/^		CONTRACT_REWARD,$/;"	e	enum:mods::players::db_load::save_from_t
CONT_CLOSEABLE	structs.h	570;"	d
CONT_CLOSED	structs.h	572;"	d
CONT_LOCKED	structs.h	573;"	d
CONT_PICKPROOF	structs.h	571;"	d
CONVERT_TO_FIRE_NADE	mods/classes/pyrexia.hpp	/^				CONVERT_TO_FIRE_NADE,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
CON_BLIND_CHARGEN	structs.h	392;"	d
CON_BLIND_CHARGEN_TAKE_OVER	structs.h	393;"	d
CON_CHARGEN_FINALIZE	structs.h	395;"	d
CON_CHARGEN_PRIMARY_CHOICE	structs.h	394;"	d
CON_CHPWD_GETNEW	structs.h	385;"	d
CON_CHPWD_GETOLD	structs.h	384;"	d
CON_CHPWD_VRFY	structs.h	386;"	d
CON_CLOSE	structs.h	373;"	d
CON_CNFPASSWD	structs.h	378;"	d
CON_DELCNF1	structs.h	387;"	d
CON_DELCNF2	structs.h	388;"	d
CON_DISCONNECT	structs.h	389;"	d
CON_EXDESC	structs.h	383;"	d
CON_GET_NAME	structs.h	374;"	d
CON_IDLE	structs.h	390;"	d
CON_MENU	structs.h	382;"	d
CON_NAME_CNFRM	structs.h	375;"	d
CON_NEEDS_AUTHENTICATION	structs.h	371;"	d
CON_NEWPASSWD	structs.h	377;"	d
CON_PASSWORD	structs.h	376;"	d
CON_PLAYING	structs.h	372;"	d
CON_QCLASS	structs.h	380;"	d
CON_QSEX	structs.h	379;"	d
CON_RMOTD	structs.h	381;"	d
CON_SUB_CLASS	structs.h	391;"	d
COOLDOWN_IN_EFFECT_EVENT	mods/damage-event.hpp	/^	COOLDOWN_IN_EFFECT_EVENT,$/;"	e	enum:uint16_t
CORROSIVE	mods/aoe.hpp	/^		CORROSIVE,	\/** Corrodes devices, melting them into a useless state. Causes irreversible burns to exposed skin *\/$/;"	e	enum:mods::aoe::types_t
COULDNT_FIND_TARGET_EVENT	mods/damage-event.hpp	/^	COULDNT_FIND_TARGET_EVENT,$/;"	e	enum:uint16_t
COULDNT_FIND_USER_ID	mods/meta_utils.cpp	/^		COULDNT_FIND_USER_ID = -1$/;"	e	enum:mods::meta_utils::return_codes	file:
COUNTDOWN_EXPLOSION	mods/weapon-types.hpp	/^		COUNTDOWN_EXPLOSION,$/;"	e	enum:mods::weapon::capabilities::cap_t
CQC	mods/weapon-types.hpp	/^		CQC,$/;"	e	enum:mods::weapon::capabilities::cap_t
CRASH	mods/flags.hpp	/^		CRASH,$/;"	e	enum:mods::flags::plr
CRASH_FILE	utils.h	123;"	d
CREATE	utils.h	167;"	d
CREATE_ARG	globals.hpp	39;"	d
CREATE_CHAR	globals.hpp	63;"	d
CREATE_OBJECT	mods/events.hpp	/^		CREATE_OBJECT,$/;"	e	enum:mods::events::event_enum
CREATE_PLAYER	mods/events.hpp	/^		CREATE_PLAYER,$/;"	e	enum:mods::events::event_enum
CREDITS_FILE	db.h	75;"	d
CRYO	mods/flags.hpp	/^		CRYO,$/;"	e	enum:mods::flags::plr
CRYO_FACTOR	objsave.cpp	26;"	d	file:
CRYPT	utils.h	547;"	d
CRYPT	utils.h	549;"	d
CURRENT_TICK	globals.hpp	/^static inline uint64_t CURRENT_TICK() {$/;"	f
CURSE	mods/flags.hpp	/^		CURSE,					\/\/ useless$/;"	e	enum:mods::flags::aff
CUT	mods/weapon-types.hpp	/^		CUT,$/;"	e	enum:mods::weapon::capabilities::cap_t
CYCLONE_RECON	mods/object.hpp	/^				CYCLONE_RECON,$/;"	e	enum:mods::object::object_type_enum_t
CZP10	mods/orm/engineer.hpp	/^		const std::string CZP10 = "CZP10";$/;"	m	struct:mods::orm::engineer
CZP10	mods/orm/marine.hpp	/^		const std::string CZP10 = "CZP10";$/;"	m	struct:mods::orm::marine
CZP10	mods/orm/medic.hpp	/^		const std::string CZP10 = "CZP10";$/;"	m	struct:mods::orm::medic
CZP10	mods/orm/support.hpp	/^		const std::string CZP10 = "CZP10";$/;"	m	struct:mods::orm::support
CZP10	mods/weapon.hpp	/^			CZP10 = 1,$/;"	e	enum:mods::weapon::medic::secondary_choice_t
C_CMP	screen.h	25;"	d
C_NRM	mods/chat.hpp	15;"	d
C_NRM	mods/chat.hpp	56;"	d
C_NRM	screen.h	24;"	d
C_OFF	screen.h	22;"	d
C_SPR	screen.h	23;"	d
CaseSensitive	mods/catch.hpp	/^	struct CaseSensitive {$/;"	s	namespace:Catch
CaseSensitive	mods/catch2.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
CastleGuard	castle.cpp	/^SPECIAL(CastleGuard);$/;"	v
Catch	mods/catch.hpp	/^namespace Catch {$/;"	n
Catch	mods/catch2.hpp	/^namespace Catch {$/;"	n
Catch_global_namespace_dummy	mods/catch2.hpp	/^struct Catch_global_namespace_dummy {};$/;"	s
Choice	mods/catch.hpp	/^		enum Choice {$/;"	g	struct:Catch::CaseSensitive
Choice	mods/catch2.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Code	mods/acl/color.hpp	/^		enum Code {$/;"	g	namespace:mods::Color
Color	mods/acl/color.hpp	/^	namespace Color {$/;"	n	namespace:mods
ComposableParserImpl	mods/catch2.hpp	/^    class ComposableParserImpl : public ParserBase {$/;"	c	namespace:Catch
ContinueOnFailure	mods/catch.hpp	/^			ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ContinueOnFailure	mods/catch2.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
CopyableStream	mods/catch.hpp	/^		CopyableStream() {}$/;"	f	struct:Catch::CopyableStream
CopyableStream	mods/catch.hpp	/^		CopyableStream(CopyableStream const& other) {$/;"	f	struct:Catch::CopyableStream
CopyableStream	mods/catch.hpp	/^	struct CopyableStream {$/;"	s	namespace:Catch
Crash_calculate_rent	objsave.cpp	/^void Crash_calculate_rent(struct obj_data *obj, int *cost) {$/;"	f
Crash_clean_file	objsave.cpp	/^int Crash_clean_file(char *name) {$/;"	f
Crash_crashsave	objsave.cpp	/^void Crash_crashsave(char_data *ch) {$/;"	f
Crash_cryosave	objsave.cpp	/^void Crash_cryosave(char_data *ch, int cost) {$/;"	f
Crash_delete_crashfile	objsave.cpp	/^int Crash_delete_crashfile(char_data *ch) {$/;"	f
Crash_delete_file	objsave.cpp	/^int Crash_delete_file(char *name) {$/;"	f
Crash_extract_expensive	objsave.cpp	/^void Crash_extract_expensive(struct obj_data *obj) {$/;"	f
Crash_extract_norent_eq	objsave.cpp	/^void Crash_extract_norent_eq(char_data *ch) {$/;"	f
Crash_extract_norents	objsave.cpp	/^void Crash_extract_norents(struct obj_data *obj) {$/;"	f
Crash_extract_objs	objsave.cpp	/^void Crash_extract_objs(struct obj_data *obj) {$/;"	f
Crash_idlesave	objsave.cpp	/^void Crash_idlesave(char_data *ch) {$/;"	f
Crash_is_unrentable	objsave.cpp	/^int Crash_is_unrentable(struct obj_data *obj) {$/;"	f
Crash_listrent	objsave.cpp	/^void Crash_listrent(char_data *ch, char *name) {$/;"	f
Crash_load	objsave.cpp	/^int Crash_load(char_data *ch) {$/;"	f
Crash_offer_rent	objsave.cpp	/^int Crash_offer_rent(char_data *ch, char_data *recep,$/;"	f
Crash_rent_deadline	objsave.cpp	/^void Crash_rent_deadline(char_data *ch, char_data *recep,$/;"	f
Crash_rentsave	objsave.cpp	/^void Crash_rentsave(char_data *ch, int cost) {$/;"	f
Crash_report_rent	objsave.cpp	/^void Crash_report_rent(char_data *ch, char_data *recep,$/;"	f
Crash_report_unrentables	objsave.cpp	/^int Crash_report_unrentables(char_data *ch, char_data *recep,$/;"	f
Crash_restore_weight	objsave.cpp	/^void Crash_restore_weight(struct obj_data *obj) {$/;"	f
Crash_save	objsave.cpp	/^int Crash_save(struct obj_data *obj, FILE *fp, int location) {$/;"	f
Crash_save_all	objsave.cpp	/^void Crash_save_all(void) {$/;"	f
Crash_write_rentcode	objsave.cpp	/^int Crash_write_rentcode(char_data *ch, FILE *fl, struct rent_info *rent) {$/;"	f
DAMAGE_DIVISOR	mods/values-list.cpp	/^DAMAGE_DIVISOR,3$/;"	v
DAMP	structs.h	/^			DAMP,$/;"	m	struct:room_data	typeref:enum:room_data::
DATA_BLOCK_DATASIZE	mail.h	75;"	d
DBG	mods/orm/inventory.cpp	17;"	d	file:
DBG	mods/orm/inventory.cpp	358;"	d	file:
DBG	mods/orm/inventory.cpp	362;"	d	file:
DBGET	globals.hpp	27;"	d
DBSET	globals.hpp	26;"	d
DB_BOOT_HLP	db.h	20;"	d
DB_BOOT_MOB	db.h	16;"	d
DB_BOOT_OBJ	db.h	17;"	d
DB_BOOT_SHP	db.h	19;"	d
DB_BOOT_WLD	db.h	15;"	d
DB_BOOT_ZON	db.h	18;"	d
DB_SAVE_CHAR	mods/players/db-load.hpp	/^		DB_SAVE_CHAR$/;"	e	enum:mods::players::db_load::save_from_t
DD	mods/debug-pre-game.hpp	204;"	d
DD	mods/debug-pre-game.hpp	39;"	d
DEAD	mods/scan.hpp	/^			DEAD,$/;"	e	enum:mods::scan::find_type_t
DEALER	structs.h	/^	DEALER = 17,$/;"	e	enum:player_class_t
DECENT	mods/yaml.hpp	/^		DECENT,$/;"	e	enum:mods::yaml::durability_profile_type_t
DEEP_OBJECT	mods/util.hpp	/^		DEEP_OBJECT = 3$/;"	e	enum:mods::util::yaml_type_t
DEFAULT	mods/rarity.hpp	/^		constexpr static float DEFAULT = mods::rarity::COMMON;$/;"	m	namespace:mods::rarity
DEFAULT	mods/yaml.hpp	/^		DEFAULT = armor_classification_type_t::BASIC,$/;"	e	enum:mods::yaml::armor_classification_type_t
DEFAULT_AMOUNT	mods/affects.hpp	/^	constexpr static amount_t DEFAULT_AMOUNT = 3;$/;"	m	namespace:mods::affects
DEFAULT_PUBLIC_CHANNELS	mods/values-list.cpp	/^DEFAULT_PUBLIC_CHANNELS,"chat,gossip,gratz,newbie"$/;"	v
DEFAULT_STAFF_LVL	spells.h	13;"	d
DEFAULT_STARTING_STIM_PISTOL_AMMO	mods/classes/medic.hpp	/^			constexpr static uint8_t DEFAULT_STARTING_STIM_PISTOL_AMMO = 4;$/;"	m	struct:mods::classes::medic
DEFAULT_WAND_LVL	spells.h	14;"	d
DELETED	mods/flags.hpp	/^		DELETED,$/;"	e	enum:mods::flags::plr
DELETED_BLOCK	mail.h	55;"	d
DESCRIBE_TESTING_SUITE	mods/testing_index.hpp	4;"	d
DESERT	structs.h	/^			DESERT,$/;"	m	struct:room_data	typeref:enum:room_data::
DESTROY_OBJECT	mods/events.hpp	/^		DESTROY_OBJECT,$/;"	e	enum:mods::events::event_enum
DESTROY_PLAYER	mods/events.hpp	/^		DESTROY_PLAYER,$/;"	e	enum:mods::events::event_enum
DETECT_ALIGN	mods/flags.hpp	/^		DETECT_ALIGN, 	\/\/ useless$/;"	e	enum:mods::flags::aff
DETECT_INVIS	mods/flags.hpp	/^		DETECT_INVIS,$/;"	e	enum:mods::flags::aff
DETECT_MAGIC	mods/flags.hpp	/^		DETECT_MAGIC,		\/\/ useless$/;"	e	enum:mods::flags::aff
DETONATE	mods/item.hpp	/^		DETONATE = (1 << 4),$/;"	e	enum:mods::item::capability_t
DFLT_DIR	config.cpp	/^const char *DFLT_DIR = "lib";$/;"	v
DFLT_IP	config.cpp	/^const char *DFLT_IP = NULL; \/* bind to all interfaces *\/$/;"	v
DFLT_PORT	config.cpp	/^ush_int DFLT_PORT = 4000;$/;"	v
DIAMONDBACK_COMBAT	mods/object.hpp	/^				DIAMONDBACK_COMBAT,$/;"	e	enum:mods::object::object_type_enum_t
DIRECTED_EXPLOSION	mods/aoe.hpp	/^		DIRECTED_EXPLOSION,	\/** Claymore explosions. Directed *\/$/;"	e	enum:mods::aoe::types_t
DIRT	structs.h	/^			DIRT,				\/** think about outside+cement but except no cement *\/$/;"	m	struct:room_data	typeref:enum:room_data::
DISORIENT	mods/affects.hpp	/^		DISORIENT = 1,$/;"	e	enum:mods::affects::affect_t
DISORIENT	mods/weapon-types.hpp	/^		DISORIENT,$/;"	e	enum:mods::weapon::capabilities::cap_t
DISPLAY	mods/mini-games/wires.hpp	/^		static constexpr std::string_view DISPLAY = "A small LED display on the panel says: ";$/;"	m	struct:mods::mini_games::wires
DISPLAY_ACMD	mods/players/db-load.hpp	/^		DISPLAY_ACMD,$/;"	e	enum:mods::players::db_load::save_from_t
DM	telnet.h	55;"	d
DMG_DEBUG	mods/weapons/damage-types.cpp	1066;"	d	file:
DMG_DUMP	mods/weapons/damage-types.cpp	436;"	d	file:
DO	telnet.h	44;"	d
DONT	telnet.h	43;"	d
DONTSET	mods/flags.hpp	/^		DONTSET,$/;"	e	enum:mods::flags::plr
DOOR_IS_BREACHED	act.movement.cpp	503;"	d	file:
DOOR_IS_CLOSED	act.movement.cpp	507;"	d	file:
DOOR_IS_CLOSED	mods/doors.hpp	/^	static constexpr int8_t DOOR_IS_CLOSED = -3;$/;"	m	namespace:mods::doors
DOOR_IS_LOCKED	act.movement.cpp	508;"	d	file:
DOOR_IS_LOCKED	mods/doors.hpp	/^	static constexpr int8_t DOOR_IS_LOCKED = -4;$/;"	m	namespace:mods::doors
DOOR_IS_OPEN	act.movement.cpp	494;"	d	file:
DOOR_IS_OPENABLE	act.movement.cpp	490;"	d	file:
DOOR_IS_PICKPROOF	act.movement.cpp	500;"	d	file:
DOOR_IS_REINFORCED	mods/doors.hpp	/^	static constexpr int8_t DOOR_IS_REINFORCED = -5;$/;"	m	namespace:mods::doors
DOOR_IS_THERMITE	act.movement.cpp	505;"	d	file:
DOOR_IS_UNLOCKED	act.movement.cpp	497;"	d	file:
DOOR_KEY	act.movement.cpp	509;"	d	file:
DOOR_OPENED_SUCCESSFULLY	mods/doors.hpp	/^	static constexpr int8_t DOOR_OPENED_SUCCESSFULLY = 0;$/;"	m	namespace:mods::doors
DOUSE	mods/item.hpp	/^		DOUSE = (1 << 8),$/;"	e	enum:mods::item::capability_t
DOUSE_OBJECT	mods/classes/pyrexia.hpp	/^				DOUSE_OBJECT,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
DOUSE_ROOM	mods/classes/pyrexia.hpp	/^				DOUSE_ROOM,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
DOWN	structs.h	138;"	d
DO_HELP	globals.hpp	43;"	d
DO_HELP_WITH_ZERO	globals.hpp	44;"	d
DO_NOTHING	mods/behaviour_tree_node.hpp	/^			enum node_type_t { DO_NOTHING, SELECTOR, SEQUENCE, LEAF };$/;"	e	enum:mods::behaviour_tree_node::node_type_t
DP_C_LDOUBLE	bsd-snprintf.cpp	151;"	d	file:
DP_C_LONG	bsd-snprintf.cpp	150;"	d	file:
DP_C_LONG_LONG	bsd-snprintf.cpp	152;"	d	file:
DP_C_SHORT	bsd-snprintf.cpp	149;"	d	file:
DP_F_MINUS	bsd-snprintf.cpp	140;"	d	file:
DP_F_NUM	bsd-snprintf.cpp	143;"	d	file:
DP_F_PLUS	bsd-snprintf.cpp	141;"	d	file:
DP_F_SPACE	bsd-snprintf.cpp	142;"	d	file:
DP_F_UNSIGNED	bsd-snprintf.cpp	146;"	d	file:
DP_F_UP	bsd-snprintf.cpp	145;"	d	file:
DP_F_ZERO	bsd-snprintf.cpp	144;"	d	file:
DP_S_CONV	bsd-snprintf.cpp	136;"	d	file:
DP_S_DEFAULT	bsd-snprintf.cpp	130;"	d	file:
DP_S_DONE	bsd-snprintf.cpp	137;"	d	file:
DP_S_DOT	bsd-snprintf.cpp	133;"	d	file:
DP_S_FLAGS	bsd-snprintf.cpp	131;"	d	file:
DP_S_MAX	bsd-snprintf.cpp	134;"	d	file:
DP_S_MIN	bsd-snprintf.cpp	132;"	d	file:
DP_S_MOD	bsd-snprintf.cpp	135;"	d	file:
DRONE	mods/mobs/mob.hpp	/^				PLAYER, MOB, DRONE$/;"	e	enum:mods::player::player_type_enum_t
DRONE	mods/player.hpp	/^				PLAYER, MOB, DRONE,$/;"	e	enum:mods::player::player_type_enum_t
DRONE_MUTED_DESCRIPTOR	mods/player.hpp	/^				DRONE_MUTED_DESCRIPTOR$/;"	e	enum:mods::player::player_type_enum_t
DRONE_NONE	mods/item-types.hpp	/^		DRONE_NONE = 0,$/;"	e	enum:mods::weapon::type::drone
DRONE_WEAPON_SET_NUM	mods/drone.hpp	14;"	d
DRUNK	structs.h	599;"	d
DRY	structs.h	/^			DRY,$/;"	m	struct:room_data	typeref:enum:room_data::
DT_FORMAT	mods/js.hpp	19;"	d
DURABLE	mods/yaml.hpp	/^		DURABLE,$/;"	e	enum:mods::yaml::durability_profile_type_t
DYNAMIC_FORMAT_STRING	mods/prefs.hpp	16;"	d
DYN_DB_GET	mods/prefs.hpp	18;"	d
DYN_DB_SET	mods/prefs.hpp	17;"	d
DecomposedExpression	mods/catch.hpp	/^	struct DecomposedExpression {$/;"	s	namespace:Catch
Detail	mods/catch.hpp	/^	namespace Detail {$/;"	n	namespace:Catch
Detail	mods/catch2.hpp	/^    namespace Detail {$/;"	n	namespace:Catch
DicknDavid	castle.cpp	/^SPECIAL(DicknDavid);$/;"	v
DidntThrowException	mods/catch.hpp	/^			DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DidntThrowException	mods/catch2.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
EAST	structs.h	134;"	d
EC	telnet.h	50;"	d
EIM_BREACHABLE	mods/doors.hpp	/^		EIM_BREACHABLE = EX_BREACHABLE,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_BREACHED	mods/doors.hpp	/^		EIM_BREACHED = EX_BREACHED,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_CLOSED	mods/doors.hpp	/^		EIM_CLOSED = EX_CLOSED,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_ELECTRIFIED	mods/doors.hpp	/^		EIM_ELECTRIFIED = EX_ELECTRIFIED,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_HIDDEN	mods/doors.hpp	/^		EIM_HIDDEN = EX_HIDDEN,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_ISDOOR	mods/doors.hpp	/^		EIM_ISDOOR = EX_ISDOOR,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_LOCKED	mods/doors.hpp	/^		EIM_LOCKED = EX_LOCKED,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_PICKPROOF	mods/doors.hpp	/^		EIM_PICKPROOF = EX_PICKPROOF,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_QUEST_LOCKED	mods/doors.hpp	/^		EIM_QUEST_LOCKED = EX_QUEST_LOCKED,$/;"	e	enum:mods::doors::exit_info_masks_t
EIM_REINFORCED	mods/doors.hpp	/^		EIM_REINFORCED = EX_REINFORCED,$/;"	e	enum:mods::doors::exit_info_masks_t
EL	telnet.h	49;"	d
ELEM_ANTI_MATTER	mods/forge-engine/elemental-enum.hpp	/^		ELEM_ANTI_MATTER,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_CORROSIVE	mods/forge-engine/elemental-enum.hpp	/^		ELEM_CORROSIVE,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_CRYOGENIC	mods/forge-engine/elemental-enum.hpp	/^		ELEM_CRYOGENIC,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_EMP	mods/forge-engine/elemental-enum.hpp	/^		ELEM_EMP,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_EXPLOSIVE	mods/forge-engine/elemental-enum.hpp	/^		ELEM_EXPLOSIVE,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_INCENDIARY	mods/forge-engine/elemental-enum.hpp	/^		ELEM_INCENDIARY = 1,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_NONE	mods/item-types.hpp	/^		ELEM_NONE = 0,$/;"	e	enum:mods::elemental_types_t
ELEM_RADIOACTIVE	mods/forge-engine/elemental-enum.hpp	/^		ELEM_RADIOACTIVE,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_SHOCK	mods/forge-engine/elemental-enum.hpp	/^		ELEM_SHOCK,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEM_SHRAPNEL	mods/forge-engine/elemental-enum.hpp	/^		ELEM_SHRAPNEL,$/;"	e	enum:mods::forge_engine::elemental_types_t
ELEVATOR	structs.h	/^			ELEVATOR,$/;"	m	struct:room_data	typeref:enum:room_data::
ELITE	mods/randomized-items.hpp	/^	ELITE,$/;"	e	enum:mods::rarity_enum_t
ELITE	mods/yaml.hpp	/^		ELITE = 3,$/;"	e	enum:mods::yaml::armor_classification_type_t
ELITE_DROP_RATE	mods/randomized-items.hpp	/^		constexpr static float ELITE_DROP_RATE = 0.033;$/;"	m	class:mods::randomized_items
EMIT_SUBSTANCE	mods/weapon-types.hpp	/^		EMIT_SUBSTANCE,$/;"	e	enum:mods::weapon::capabilities::cap_t
EMP	mods/aoe.hpp	/^		EMP,	\/** Electro magnetic pulse. Destroys\/hampers electronics *\/$/;"	e	enum:mods::aoe::types_t
EMP	structs.h	/^			EMP, \/** chaff or emp has been detonated *\/$/;"	m	struct:room_data	typeref:enum:room_data::
EMP_GRENADE_TICKS	mods/values-list.cpp	/^EMP_GRENADE_TICKS,6$/;"	v
ENCODE_INIT	mods/builder.hpp	139;"	d
ENCODE_MAP	mods/builder.hpp	141;"	d
ENCODE_OK	mods/builder.hpp	140;"	d
ENCODE_R	mods/builder.hpp	138;"	d
ENCODE_RESPONSE	mods/builder.hpp	136;"	d
ENCODE_SAFE	mods/builder.hpp	142;"	d
ENCODE_STR	mods/builder.hpp	137;"	d
ENCRYPT_CNT	telnet.h	292;"	d
ENCRYPT_DEC_KEYID	telnet.h	291;"	d
ENCRYPT_ENC_KEYID	telnet.h	290;"	d
ENCRYPT_END	telnet.h	287;"	d
ENCRYPT_IS	telnet.h	283;"	d
ENCRYPT_NAME	telnet.h	315;"	d
ENCRYPT_NAME_OK	telnet.h	314;"	d
ENCRYPT_REPLY	telnet.h	285;"	d
ENCRYPT_REQEND	telnet.h	289;"	d
ENCRYPT_REQSTART	telnet.h	288;"	d
ENCRYPT_START	telnet.h	286;"	d
ENCRYPT_SUPPORT	telnet.h	284;"	d
ENCTYPE_ANY	telnet.h	294;"	d
ENCTYPE_CNT	telnet.h	297;"	d
ENCTYPE_DES_CFB64	telnet.h	295;"	d
ENCTYPE_DES_OFB64	telnet.h	296;"	d
ENCTYPE_NAME	telnet.h	318;"	d
ENCTYPE_NAME_OK	telnet.h	317;"	d
END_OF	shop.h	90;"	d
ENERGY	mods/weapon.hpp	/^	                 MACHINE_PISTOL = (1 << 7), ENERGY = (1 << 8), FUMES = (1 << 9),$/;"	e	enum:mods::weapon::mask_type
ENGINEER	mods/classes/types.hpp	/^		ENGINEER = 0,$/;"	e	enum:mods::classes::types
ENGINEER	structs.h	/^	ENGINEER = 5,$/;"	e	enum:player_class_t
ENGINEER_NONE	mods/weapon.hpp	/^			ENGINEER_NONE = 0,$/;"	e	enum:mods::weapon::engineer::primary_choice_t
ENGINEER_PRIMARY_FMG9	mods/weapon.hpp	/^			ENGINEER_PRIMARY_FMG9 = 1,$/;"	e	enum:mods::weapon::engineer::primary_choice_t
ENGINEER_PRIMARY_P90	mods/weapon.hpp	/^			ENGINEER_PRIMARY_P90 = 2,$/;"	e	enum:mods::weapon::engineer::primary_choice_t
ENV_ESC	telnet.h	239;"	d
ENV_USERVAR	telnet.h	240;"	d
EOR	telnet.h	58;"	d
ETEXT_FILE	utils.h	124;"	d
EVENT_GET_ATTACKED	mods/deferred.hpp	/^			constexpr static uint32_t EVENT_GET_ATTACKED = 2;$/;"	m	class:mods::deferred
EVENT_OBJECT_DESTRUCT	mods/deferred.hpp	/^			constexpr static uint32_t EVENT_OBJECT_DESTRUCT = 0;$/;"	m	class:mods::deferred
EVENT_PLAYER_FINISHES_FEIGN_DEATH	mods/deferred.hpp	/^			constexpr static uint32_t EVENT_PLAYER_FINISHES_FEIGN_DEATH = 5;$/;"	m	class:mods::deferred
EVENT_PLAYER_GOES_VISIBLE	mods/deferred.hpp	/^			constexpr static uint32_t EVENT_PLAYER_GOES_VISIBLE = 6;$/;"	m	class:mods::deferred
EVENT_PLAYER_REVIVE_SUCCESSFUL	mods/deferred.hpp	/^			constexpr static uint32_t EVENT_PLAYER_REVIVE_SUCCESSFUL = 4;$/;"	m	class:mods::deferred
EVENT_PLAYER_UNBLOCK_BREACH	mods/deferred.hpp	/^			constexpr static uint32_t EVENT_PLAYER_UNBLOCK_BREACH = 3;$/;"	m	class:mods::deferred
EVENT_PLAYER_UNBLOCK_INSTALLATION	mods/deferred.hpp	/^			constexpr static uint32_t EVENT_PLAYER_UNBLOCK_INSTALLATION = 1;$/;"	m	class:mods::deferred
EV_BLINDING_LIGHT	mods/projectile.hpp	/^			EV_BLINDING_LIGHT,$/;"	e	enum:mods::projectile::projectile_event_t
EV_BURN	mods/projectile.hpp	/^			EV_BURN,$/;"	e	enum:mods::projectile::projectile_event_t
EV_CORRODE	mods/projectile.hpp	/^			EV_CORRODE,$/;"	e	enum:mods::projectile::projectile_event_t
EV_DEFORM	mods/projectile.hpp	/^			EV_DEFORM,$/;"	e	enum:mods::projectile::projectile_event_t
EV_EXPLODE	mods/projectile.hpp	/^			EV_EXPLODE,$/;"	e	enum:mods::projectile::projectile_event_t
EV_EXPOSED	mods/projectile.hpp	/^			EV_EXPOSED,$/;"	e	enum:mods::projectile::projectile_event_t
EV_IGNITE	mods/projectile.hpp	/^			EV_IGNITE,$/;"	e	enum:mods::projectile::projectile_event_t
EV_MELT	mods/projectile.hpp	/^			EV_MELT,$/;"	e	enum:mods::projectile::projectile_event_t
EV_PENETRATE	mods/projectile.hpp	/^			EV_PENETRATE,$/;"	e	enum:mods::projectile::projectile_event_t
EV_PROPAGATE_CHAFF	mods/projectile.hpp	/^			EV_PROPAGATE_CHAFF,$/;"	e	enum:mods::projectile::projectile_event_t
EV_PROPAGATE_EMP	mods/projectile.hpp	/^			EV_PROPAGATE_EMP,$/;"	e	enum:mods::projectile::projectile_event_t
EV_PROPAGATE_SMOKE	mods/projectile.hpp	/^			EV_PROPAGATE_SMOKE,$/;"	e	enum:mods::projectile::projectile_event_t
EV_SHRAPNEL	mods/projectile.hpp	/^			EV_SHRAPNEL,$/;"	e	enum:mods::projectile::projectile_event_t
EV_SHRED	mods/projectile.hpp	/^			EV_SHRED,$/;"	e	enum:mods::projectile::projectile_event_t
EV_STAIN	mods/projectile.hpp	/^			EV_STAIN,$/;"	e	enum:mods::projectile::projectile_event_t
EV_TRAVEL	mods/projectile.hpp	/^			EV_TRAVEL,$/;"	e	enum:mods::projectile::projectile_event_t
EXCEPTION_OCCURRED	mods/orm/util.hpp	/^	static constexpr int8_t EXCEPTION_OCCURRED = -1;$/;"	m	namespace:mods::orm::util
EXCEPTION_OCCURRED	mods/pq.hpp	/^static constexpr int8_t EXCEPTION_OCCURRED = -1;$/;"	v
EXDSCR_LENGTH	structs.h	702;"	d
EXEC	mods/lmdb.hpp	/^		EXEC, UPDATE, INSERT $/;"	e	enum:mods::lmdb::transact_type_t
EXIT	utils.h	493;"	d
EXITN	act.movement.cpp	364;"	d	file:
EXIT_FLAGGED	utils.h	240;"	d
EXPLODE	globals.cpp	/^str_vec_t EXPLODE(str_t value,char delimiter) {$/;"	f
EXPLODE	globals.cpp	/^str_vec_t EXPLODE(str_t& value,char delimiter) {$/;"	f
EXPLODE	mods/item.hpp	/^		EXPLODE = (1 << 6),$/;"	e	enum:mods::item::capability_t
EXPLODE	mods/weapon-types.hpp	/^		EXPLODE,$/;"	e	enum:mods::weapon::capabilities::cap_t
EXPLOSIVE	mods/aoe.hpp	/^		EXPLOSIVE,	\/** Typical explosive dmg from a frag grenade *\/$/;"	e	enum:mods::aoe::types_t
EXPLOSIVE_ATTR_ALTERNATE_EXPLOSION_TYPE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_ALTERNATE_EXPLOSION_TYPE = 1,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_ANTI_MATTER_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_ANTI_MATTER_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_ARMOR_PENETRATION_DAMAGE_DICE_COUNT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_ARMOR_PENETRATION_DAMAGE_DICE_COUNT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_ARMOR_PENETRATION_DAMAGE_DICE_SIDES	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_ARMOR_PENETRATION_DAMAGE_DICE_SIDES,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_BLAST_RADIUS	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_BLAST_RADIUS,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_CHANCE_TO_INJURE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_CHANCE_TO_INJURE,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_CHEMICAL_DAMAGE_DICE_COUNT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_CHEMICAL_DAMAGE_DICE_COUNT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_CHEMICAL_DAMAGE_DICE_SIDES	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_CHEMICAL_DAMAGE_DICE_SIDES,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_CORROSIVE_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_CORROSIVE_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_CRITICAL_CHANCE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_CRITICAL_CHANCE,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_CRITICAL_RANGE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_CRITICAL_RANGE,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_CRYOGENIC_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_CRYOGENIC_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_DAMAGE_DICE_COUNT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_DAMAGE_DICE_COUNT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_DAMAGE_DICE_SIDES	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_DAMAGE_DICE_SIDES,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_DAMAGE_PER_SECOND	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_DAMAGE_PER_SECOND,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_DISORIENT_AMOUNT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_DISORIENT_AMOUNT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_ELECTRIC_DAMAGE_DICE_COUNT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_ELECTRIC_DAMAGE_DICE_COUNT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_ELECTRIC_DAMAGE_DICE_SIDES	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_ELECTRIC_DAMAGE_DICE_SIDES,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_EMP_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_EMP_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_EXPLOSIVE_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_EXPLOSIVE_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_INCENDIARY_DAMAGE_DICE_COUNT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_INCENDIARY_DAMAGE_DICE_COUNT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_INCENDIARY_DAMAGE_DICE_SIDES	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_INCENDIARY_DAMAGE_DICE_SIDES,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_INCENDIARY_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_INCENDIARY_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_LOUDNESS_TYPE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_LOUDNESS_TYPE,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_RADIATION_DAMAGE_DICE_COUNT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_RADIATION_DAMAGE_DICE_COUNT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_RADIATION_DAMAGE_DICE_SIDES	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_RADIATION_DAMAGE_DICE_SIDES,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_RADIATION_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_RADIATION_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_RANGE_MODIFIER	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_RANGE_MODIFIER,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_SHOCK_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_SHOCK_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_ATTR_SHRAPNEL_DAMAGE_PERCENT	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_ATTR_SHRAPNEL_DAMAGE_PERCENT,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
EXPLOSIVE_NONE	mods/item-types.hpp	/^		EXPLOSIVE_NONE = 0,$/;"	e	enum:mods::weapon::type::explosive
EXPLOSIVE_TYPE_BREACH_CHARGE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_BREACH_CHARGE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_C4	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_C4,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_CLAYMORE_MINE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_CLAYMORE_MINE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_EMP_GRENADE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_EMP_GRENADE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_FLASHBANG_GRENADE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_FLASHBANG_GRENADE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_FRAG_GRENADE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_FRAG_GRENADE = 1,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_INCENDIARY_GRENADE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_INCENDIARY_GRENADE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_REMOTE_CHEMICAL	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_REMOTE_CHEMICAL,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_REMOTE_EXPLOSIVE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_REMOTE_EXPLOSIVE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_SENSOR_GRENADE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_SENSOR_GRENADE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_SMOKE_GRENADE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_SMOKE_GRENADE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXPLOSIVE_TYPE_THERMITE_CHARGE	mods/forge-engine/generator.hpp	/^		EXPLOSIVE_TYPE_THERMITE_CHARGE,$/;"	e	enum:mods::forge_engine::explosive_types_t
EXP_MAX	class.cpp	1098;"	d	file:
EXP_MAX	mods/levels.cpp	/^	static constexpr uint32_t EXP_MAX = 10000000;$/;"	m	namespace:mods::levels	file:
EXTENDED	mods/weapon.hpp	/^		COMPENSATOR, MUZZLE_BRAKE,EXTENDED,$/;"	e	enum:mods::weapon::barrel_t
EXTENDED_MAGAZINE	mods/weapon.hpp	/^		EXTENDED_MAGAZINE,$/;"	e	enum:mods::weapon::magazine_t
EXTENDED_PREFERENCES	mods/values-list.cpp	/^EXTENDED_PREFERENCES,IMPLODE({"nochat","nogossip","nonewbie","nogratz"},"|")$/;"	v
EXTENDS_CLIP	mods/weapon-types.hpp	/^		EXTENDS_CLIP,$/;"	e	enum:mods::weapon::capabilities::cap_t
EXTERN_ACT	types.hpp	9;"	d
EXTRACTION	mods/players/db-load.hpp	/^		EXTRACTION,$/;"	e	enum:mods::players::db_load::save_from_t
EX_BREACHABLE	structs.h	169;"	d
EX_BREACHED	structs.h	168;"	d
EX_CLOSED	structs.h	164;"	d
EX_ELECTRIFIED	structs.h	172;"	d
EX_HIDDEN	structs.h	171;"	d
EX_ISDOOR	structs.h	163;"	d
EX_LOCKED	structs.h	165;"	d
EX_PICKPROOF	structs.h	166;"	d
EX_QUEST_LOCKED	structs.h	170;"	d
EX_REINFORCED	structs.h	167;"	d
E_ACCESS_START	mods/acl/config-parser.hpp	/^                    E_ACCESS_TYPE, E_ACCESS_START, E_SCOPE, E_LIST_START, E_STRING, \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_ACCESS_TYPE	mods/acl/config-parser.hpp	/^                    E_ACCESS_TYPE, E_ACCESS_START, E_SCOPE, E_LIST_START, E_STRING, \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_ALLOW	mods/acl/config-parser.hpp	/^                    E_ALLOW, E_DENY,\\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_ARROW	mods/acl/config-parser.hpp	/^                    E_LIST_END, E_COLON, E_EXTENDS, E_ARROW, E_FILES, E_COMMANDS,   \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_BLOCK	mods/acl/config-parser.hpp	/^                enum PARSE_TYPE { E_CLASS, E_EXTENDED_CLASS, E_COMMENT, E_BLOCK,    \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_CLASS	mods/acl/config-parser.hpp	/^                enum PARSE_TYPE { E_CLASS, E_EXTENDED_CLASS, E_COMMENT, E_BLOCK,    \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_COLON	mods/acl/config-parser.hpp	/^                    E_LIST_END, E_COLON, E_EXTENDS, E_ARROW, E_FILES, E_COMMANDS,   \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_COMMANDS	mods/acl/config-parser.hpp	/^                    E_LIST_END, E_COLON, E_EXTENDS, E_ARROW, E_FILES, E_COMMANDS,   \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_COMMENT	mods/acl/config-parser.hpp	/^                enum PARSE_TYPE { E_CLASS, E_EXTENDED_CLASS, E_COMMENT, E_BLOCK,    \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_DEFAULT	mods/acl/config-parser.hpp	/^                    E_DEFAULT\\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_DENY	mods/acl/config-parser.hpp	/^                    E_ALLOW, E_DENY,\\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_EXTENDED_CLASS	mods/acl/config-parser.hpp	/^                enum PARSE_TYPE { E_CLASS, E_EXTENDED_CLASS, E_COMMENT, E_BLOCK,    \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_EXTENDS	mods/acl/config-parser.hpp	/^                    E_LIST_END, E_COLON, E_EXTENDS, E_ARROW, E_FILES, E_COMMANDS,   \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_FILES	mods/acl/config-parser.hpp	/^                    E_LIST_END, E_COLON, E_EXTENDS, E_ARROW, E_FILES, E_COMMANDS,   \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_LIST_END	mods/acl/config-parser.hpp	/^                    E_LIST_END, E_COLON, E_EXTENDS, E_ARROW, E_FILES, E_COMMANDS,   \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_LIST_START	mods/acl/config-parser.hpp	/^                    E_ACCESS_TYPE, E_ACCESS_START, E_SCOPE, E_LIST_START, E_STRING, \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_SCOPE	mods/acl/config-parser.hpp	/^                    E_ACCESS_TYPE, E_ACCESS_START, E_SCOPE, E_LIST_START, E_STRING, \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
E_STRING	mods/acl/config-parser.hpp	/^                    E_ACCESS_TYPE, E_ACCESS_START, E_SCOPE, E_LIST_START, E_STRING, \\$/;"	e	enum:mods::acl::FileParser::PARSE_TYPE
EnumInfo	mods/catch2.hpp	/^        struct EnumInfo {$/;"	s	namespace:Catch::Detail
EnumStringMaker	mods/catch.hpp	/^		struct EnumStringMaker {$/;"	s	namespace:Catch::Detail
EnumStringMaker	mods/catch.hpp	/^		struct EnumStringMaker<T,true> {$/;"	s	namespace:Catch::Detail
Evaluator	mods/catch.hpp	/^		class Evaluator {};$/;"	c	namespace:Catch::Internal
Evaluator	mods/catch.hpp	/^		struct Evaluator<T1, T2, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	mods/catch.hpp	/^		struct Evaluator<T1, T2, IsGreaterThan> {$/;"	s	namespace:Catch::Internal
Evaluator	mods/catch.hpp	/^		struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	mods/catch.hpp	/^		struct Evaluator<T1, T2, IsLessThan> {$/;"	s	namespace:Catch::Internal
Evaluator	mods/catch.hpp	/^		struct Evaluator<T1, T2, IsLessThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	mods/catch.hpp	/^		struct Evaluator<T1, T2, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Exception	mods/catch.hpp	/^			Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
Exception	mods/catch2.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
ExeName	mods/catch2.hpp	/^        ExeName() : m_name( std::make_shared<std::string>( "<executable>" ) ) {}$/;"	f	class:Catch::ExeName
ExeName	mods/catch2.hpp	/^        explicit ExeName( LambdaT const& lambda ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	mods/catch2.hpp	/^        explicit ExeName( std::string &ref ) : ExeName() {$/;"	f	class:Catch::ExeName
ExeName	mods/catch2.hpp	/^    class ExeName : public ComposableParserImpl<ExeName> {$/;"	c	namespace:Catch
ExplicitFailure	mods/catch.hpp	/^			ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExplicitFailure	mods/catch2.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	mods/catch.hpp	/^			ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	mods/catch2.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
FAILURE	mods/behaviour_tree_status.hpp	/^		FAILURE,$/;"	e	enum:mods::behaviour_tree_status
FALCON_ASSAULT	mods/object.hpp	/^				FALCON_ASSAULT,$/;"	e	enum:mods::object::object_type_enum_t
FALSE	utils.h	526;"	d
FAMAS	mods/weapon.hpp	/^			FAMAS = 2$/;"	e	enum:mods::weapon::contagion::primary_choice_t
FAMILIAR	mods/skills.hpp	/^	FAMILIAR = 2,$/;"	e	enum:uint8_t
FASTBOOT_FILE	db.h	52;"	d
FASTBOOT_FILE	db.h	56;"	d
FASTBOOT_FILE	db.h	60;"	d
FD_SETSIZE	sysdep.h	371;"	d
FENCED	structs.h	/^			FENCED, \/** surrounded by fencing *\/$/;"	m	struct:room_data	typeref:enum:room_data::
FETCHED_OKAY	mods/orm/util.hpp	/^	static constexpr int8_t FETCHED_OKAY = 0;$/;"	m	namespace:mods::orm::util
FETCHED_OKAY	mods/pq.hpp	/^static constexpr int8_t FETCHED_OKAY = 0;$/;"	v
FG_BLUE	mods/acl/color.hpp	/^			FG_BLUE     = 34,$/;"	e	enum:mods::Color::Code
FG_DEFAULT	mods/acl/color.hpp	/^			FG_DEFAULT  = 39,$/;"	e	enum:mods::Color::Code
FG_GREEN	mods/acl/color.hpp	/^			FG_GREEN    = 32,$/;"	e	enum:mods::Color::Code
FG_RED	mods/acl/color.hpp	/^			FG_RED      = 31,$/;"	e	enum:mods::Color::Code
FIGHT	mods/ai_state.hpp	/^				WANDER, SUSPICIOUS, FIGHT,SUSPICIOUS2,PROTECT,AGGRESSIVE_PROTECT,$/;"	e	enum:mods::ai_state::state
FIGHTING	utils.h	327;"	d
FILENAME	boards.h	40;"	d
FILE_CANNOT_OPEN	mods/acl/config-parser.cpp	/^        const int FileParser::FILE_CANNOT_OPEN = -2;$/;"	m	class:mods::acl::FileParser	file:
FILE_CANNOT_OPEN	mods/acl/config-parser.hpp	/^                static const int FILE_CANNOT_OPEN;$/;"	m	class:mods::acl::FileParser
FILE_EOF	mods/acl/config-parser.cpp	/^        const int FileParser::FILE_EOF = -3;$/;"	m	class:mods::acl::FileParser	file:
FILE_EOF	mods/acl/config-parser.hpp	/^                static const int FILE_EOF;$/;"	m	class:mods::acl::FileParser
FIND_ALL	handler.h	88;"	d
FIND_ALLDOT	handler.h	89;"	d
FIND_CHAR_ROOM	handler.h	97;"	d
FIND_CHAR_ROOM	mods/examine.cpp	42;"	d	file:
FIND_CHAR_ROOM	mods/query-objects.cpp	/^	static constexpr int FIND_CHAR_ROOM    = (1 << 0);$/;"	m	namespace:mods::query_objects	file:
FIND_CHAR_WORLD	handler.h	98;"	d
FIND_CHAR_WORLD	mods/query-objects.cpp	/^	static constexpr int FIND_CHAR_WORLD   = (1 << 1);$/;"	m	namespace:mods::query_objects	file:
FIND_INDIV	handler.h	87;"	d
FIND_OBJ_EQUIP	handler.h	102;"	d
FIND_OBJ_EQUIP	mods/query-objects.cpp	/^	static constexpr int FIND_OBJ_EQUIP    = (1 << 5);$/;"	m	namespace:mods::query_objects	file:
FIND_OBJ_EQUIP	mods/weapon.hpp	/^	static constexpr int FIND_OBJ_EQUIP     = (1 << 5);$/;"	m	namespace:mods::weapon
FIND_OBJ_INV	handler.h	99;"	d
FIND_OBJ_INV	mods/query-objects.cpp	/^	static constexpr int FIND_OBJ_INV      = (1 << 2);$/;"	m	namespace:mods::query_objects	file:
FIND_OBJ_INV	mods/weapon.hpp	/^	static constexpr int FIND_OBJ_INV       = (1 << 2);$/;"	m	namespace:mods::weapon
FIND_OBJ_ROOM	handler.h	100;"	d
FIND_OBJ_ROOM	mods/query-objects.cpp	/^	static constexpr int FIND_OBJ_ROOM     = (1 << 3);$/;"	m	namespace:mods::query_objects	file:
FIND_OBJ_WORLD	handler.h	101;"	d
FIND_OBJ_WORLD	mods/query-objects.cpp	/^	static constexpr int FIND_OBJ_WORLD    = (1 << 4);$/;"	m	namespace:mods::query_objects	file:
FIREWALL	mods/classes/pyrexia.hpp	/^				FIREWALL,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
FIRE_CARPET_ADDITIONAL_TICKS	mods/values-list.cpp	/^FIRE_CARPET_ADDITIONAL_TICKS,60$/;"	v
FIRE_DAMAGE_TICK_RESOLUTION	mods/values-list.cpp	/^FIRE_DAMAGE_TICK_RESOLUTION,30$/;"	v
FIRE_EVERY_N_TICKS	mods/values-list.cpp	/^FIRE_EVERY_N_TICKS,400$/;"	v
FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE	mods/values-list.cpp	/^FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE,70$/;"	v
FIRE_STATUS_KINDLING_DAMAGE	mods/values-list.cpp	/^FIRE_STATUS_KINDLING_DAMAGE,10$/;"	v
FIRE_STATUS_SMOKING_DAMAGE	mods/values-list.cpp	/^FIRE_STATUS_SMOKING_DAMAGE,15$/;"	v
FIRE_STATUS_SMOLDERING_DAMAGE	mods/values-list.cpp	/^FIRE_STATUS_SMOLDERING_DAMAGE,40$/;"	v
FIRE_WOODEN_ADDITIONAL_TICKS	mods/values-list.cpp	/^FIRE_WOODEN_ADDITIONAL_TICKS,80$/;"	v
FIRST	mods/flags.hpp	/^		FIRST = LEGACY_AFF,$/;"	e	enum:mods::flags::chunk_type_t
FIRST	mods/object.hpp	/^				FIRST = OBJECT,$/;"	e	enum:mods::object::object_type_enum_t
FIRST	mods/randomized-items.hpp	/^	FIRST = COMMON,$/;"	e	enum:mods::rarity_enum_t
FIRST	structs.h	/^	FIRST,$/;"	e	enum:lense_type_t
FIRST_QUARTER	mods/date-time.hpp	/^		FIRST_QUARTER,$/;"	e	enum:mods::date_time::moon_phase
FLAME	mods/aoe.hpp	/^		FLAME,	\/** Ignites material within blast_radius *\/$/;"	e	enum:mods::aoe::types_t
FLAME	mods/weapon.hpp	/^	                 FLAME = (1 << 10), CLAYMORE = (1 << 11), REMOTE_EXPLOSIVE = (1 << 12),$/;"	e	enum:mods::weapon::mask_type
FLAMETHROWER	mods/object.hpp	/^				FLAMETHROWER,$/;"	e	enum:mods::object::object_type_enum_t
FLASHBANG_COOLDOWN_TICKS	mods/projectile.hpp	/^		constexpr static int FLASHBANG_COOLDOWN_TICKS = 4; \/** FIXME: a wild guess *\/$/;"	m	namespace:mods::projectile
FLASHBANG_COOLDOWN_TICKS	mods/values-list.cpp	/^FLASHBANG_COOLDOWN_TICKS,3$/;"	v
FLASHBANG_GRENADE_TICKS	mods/values-list.cpp	/^FLASHBANG_GRENADE_TICKS,6$/;"	v
FLASH_HIDER	mods/weapon.hpp	/^		FLASH_HIDER, SUPPRESSOR$/;"	e	enum:mods::weapon::barrel_t
FLEE	mods/intent.hpp	/^		FLEE$/;"	e	enum:mods::intent::intent_to_t
FLIMSY	mods/yaml.hpp	/^		FLIMSY,$/;"	e	enum:mods::yaml::durability_profile_type_t
FLOATING_POINT_COLUMN	mods/builder.cpp	/^	FLOATING_POINT_COLUMN$/;"	e	enum:field_type_t	file:
FMG9	mods/orm/engineer.hpp	/^		const std::string FMG9 = "FMG9";$/;"	m	struct:mods::orm::engineer
FMG9	mods/weapon.hpp	/^			FMG9 = 1,$/;"	e	enum:mods::weapon::engineer::primary_choice_t
FOOTER	mods/mini-games/wires.hpp	/^		static constexpr std::string_view FOOTER = "\\r\\n"$/;"	m	struct:mods::mini_games::wires
FOREACH_MOB	utils.h	558;"	d
FOREACH_SKILLSET_AS	mods/skill-orm-adaptor.cpp	12;"	d	file:
FOREST	structs.h	/^			FOREST,$/;"	m	struct:room_data	typeref:enum:room_data::
FORGE	mods/classes/types.hpp	/^		FORGE,$/;"	e	enum:mods::classes::types
FORGE	structs.h	/^	FORGE = 18,$/;"	e	enum:player_class_t
FOR_ROOM	utils.h	557;"	d
FOUR_DOOR	mods/weapon.hpp	/^		FOUR_DOOR,$/;"	e	enum:mods::weapon::vehicle_t
FRAG_GRENADE_TICKS	mods/values-list.cpp	/^FRAG_GRENADE_TICKS,6$/;"	v
FROM	mods/mini-games/line-up.hpp	/^		static constexpr int FROM = 3;$/;"	m	struct:mods::mini_games::line_up
FROM	mods/mini-games/wires.hpp	/^		static constexpr uint8_t FROM = 0;$/;"	m	struct:mods::mini_games::wires
FROZEN	mods/flags.hpp	/^		FROZEN,$/;"	e	enum:mods::flags::plr
FROZEN	structs.h	/^			FROZEN,$/;"	m	struct:room_data	typeref:enum:room_data::
FULL	structs.h	600;"	d
FULL_MOON	mods/date-time.hpp	/^		FULL_MOON,$/;"	e	enum:mods::date_time::moon_phase
FUMES	mods/weapon.hpp	/^	                 MACHINE_PISTOL = (1 << 7), ENERGY = (1 << 8), FUMES = (1 << 9),$/;"	e	enum:mods::weapon::mask_type
FailureBit	mods/catch.hpp	/^			FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FailureBit	mods/catch2.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FalseTest	mods/catch.hpp	/^			FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseTest	mods/catch2.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseType	mods/catch.hpp	/^		struct FalseType {$/;"	s	namespace:Catch::Detail
FatalErrorCondition	mods/catch.hpp	/^			FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
FatalErrorCondition	mods/catch2.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
FileParser	mods/acl/config-parser.hpp	/^        class FileParser {$/;"	c	namespace:mods::acl
Flags	mods/catch.hpp	/^		enum Flags {$/;"	g	struct:Catch::ResultDisposition
Flags	mods/catch2.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
Free_Invalid_List	ban.cpp	/^void Free_Invalid_List(void) {$/;"	f
GA	telnet.h	48;"	d
GADGET_NONE	mods/item-types.hpp	/^		GADGET_NONE = 0,$/;"	e	enum:mods::weapon::type::gadget
GAIN_EXP	mods/players/db-load.hpp	/^		GAIN_EXP,$/;"	e	enum:mods::players::db_load::save_from_t
GARBAGE_SPACE	structs.h	688;"	d
GAUNTLETS	mods/object.hpp	/^				GAUNTLETS,$/;"	e	enum:mods::object::object_type_enum_t
GDNS_BUFFER_SIZE	mods/lmdb/db.hpp	29;"	d
GDNS_DEBUG	mods/lmdb/db.hpp	33;"	d
GDNS_DEBUG	mods/lmdb/db.hpp	35;"	d
GDNS_RESOLVE_ALL	mods/lmdb/db.hpp	20;"	d
GDNS_RESOLVE_LOCALHOST	mods/lmdb/db.hpp	22;"	d
GDNS_RESOLVE_NONE	mods/lmdb/db.hpp	19;"	d
GDNS_RESOLVE_NO_TRANSLATION	mods/lmdb/db.hpp	23;"	d
GDNS_RESOLVE_TRANSLATED	mods/lmdb/db.hpp	21;"	d
GDNS_STFU	mods/lmdb/daemon.cpp	4;"	d	file:
GDNS_STL	mods/lmdb/daemon.cpp	3;"	d	file:
GDNS_STL	mods/lmdb/gethostbyname.cpp	6;"	d	file:
GENERATE	mods/catch2.hpp	4095;"	d
GENERATE_COPY	mods/catch2.hpp	4099;"	d
GENERATE_REF	mods/catch2.hpp	4103;"	d
GEN_TOGGLE_ACMD	mods/players/db-load.hpp	/^		GEN_TOGGLE_ACMD,$/;"	e	enum:mods::players::db_load::save_from_t
GET_AC	utils.h	311;"	d
GET_ADD	utils.h	303;"	d
GET_AGE	utils.h	278;"	d
GET_ALIASES	utils.h	341;"	d
GET_ALIGNMENT	utils.h	330;"	d
GET_BAD_PWS	utils.h	337;"	d
GET_BANK_GOLD	utils.h	319;"	d
GET_CHA	utils.h	308;"	d
GET_CLASS	utils.h	296;"	d
GET_CON	utils.h	307;"	d
GET_COND	utils.h	332;"	d
GET_DAMROLL	utils.h	321;"	d
GET_DEFAULT_POS	utils.h	354;"	d
GET_DEX	utils.h	304;"	d
GET_EQ	utils.h	347;"	d
GET_EXP	utils.h	310;"	d
GET_FREEZE_LEV	utils.h	336;"	d
GET_GOLD	utils.h	318;"	d
GET_HEIGHT	utils.h	298;"	d
GET_HIT	utils.h	312;"	d
GET_HITROLL	utils.h	320;"	d
GET_HOME	utils.h	297;"	d
GET_IDNUM	utils.h	324;"	d
GET_INT	utils.h	305;"	d
GET_INVIS_LEV	utils.h	334;"	d
GET_LAST_OLC_MODE	utils.h	340;"	d
GET_LAST_OLC_TARG	utils.h	339;"	d
GET_LAST_TELL	utils.h	342;"	d
GET_LEVEL	utils.h	284;"	d
GET_LOADROOM	utils.h	333;"	d
GET_MANA	utils.h	316;"	d
GET_MAX_HIT	utils.h	313;"	d
GET_MAX_MANA	utils.h	317;"	d
GET_MAX_MOVE	utils.h	315;"	d
GET_MOB_RNUM	utils.h	350;"	d
GET_MOB_SPEC	utils.h	349;"	d
GET_MOB_VNUM	utils.h	351;"	d
GET_MOB_WAIT	utils.h	379;"	d
GET_MOVE	utils.h	314;"	d
GET_NAME	utils.h	281;"	d
GET_OBJ_AFFECT	utils.h	403;"	d
GET_OBJ_COST	utils.h	401;"	d
GET_OBJ_EXTRA	utils.h	404;"	d
GET_OBJ_RENT	utils.h	402;"	d
GET_OBJ_RNUM	utils.h	409;"	d
GET_OBJ_SPEC	utils.h	412;"	d
GET_OBJ_TIMER	utils.h	408;"	d
GET_OBJ_TYPE	utils.h	400;"	d
GET_OBJ_VAL	utils.h	406;"	d
GET_OBJ_VNUM	utils.h	410;"	d
GET_OBJ_WEAR	utils.h	405;"	d
GET_OBJ_WEIGHT	utils.h	407;"	d
GET_PASSWD	utils.h	285;"	d
GET_PC_NAME	utils.h	280;"	d
GET_PFILEPOS	utils.h	286;"	d
GET_POS	utils.h	323;"	d
GET_REAL_LEVEL	utils.h	292;"	d
GET_ROOM_SPEC	utils.h	266;"	d
GET_ROOM_VNUM	utils.h	264;"	d
GET_SAVE	utils.h	329;"	d
GET_SEX	utils.h	300;"	d
GET_SKILL	utils.h	344;"	d
GET_STR	utils.h	302;"	d
GET_TALK	utils.h	338;"	d
GET_TITLE	utils.h	283;"	d
GET_WAIT_STATE	utils.h	381;"	d
GET_WAS_IN	utils.cpp	/^room_rnum& GET_WAS_IN(char_data* ch){$/;"	f
GET_WAS_IN	utils.cpp	/^room_rnum& GET_WAS_IN(player_ptr_t& player){$/;"	f
GET_WEIGHT	utils.h	299;"	d
GET_WIMP_LEV	utils.h	335;"	d
GET_WIS	utils.h	306;"	d
GHOST	mods/classes/types.hpp	/^		GHOST,$/;"	e	enum:mods::classes::types
GHOST	structs.h	/^	GHOST = 9,$/;"	e	enum:player_class_t
GHOSTDNS_USE_SHM_CONFIG	mods/lmdb/daemon.cpp	1;"	d	file:
GHOSTDNS_USE_SHM_CONFIG	mods/lmdb/gethostbyname.cpp	9;"	d	file:
GHOSTDNS_USE_SHM_CONFIG	mods/lmdb/shm-viewer.cpp	1;"	d	file:
GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS	mods/values-list.cpp	/^GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS,60$/;"	v
GHOST_NONE	mods/weapon.hpp	/^			GHOST_NONE = 0,$/;"	e	enum:mods::weapon::ghost::primary_choice_t
GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT	mods/values-list.cpp	/^GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT,8$/;"	v
GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT	mods/values-list.cpp	/^GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT,10$/;"	v
GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT	mods/values-list.cpp	/^GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT,5$/;"	v
GHOST_PRIMARY_L96AW	mods/weapon.hpp	/^			GHOST_PRIMARY_L96AW = 2,$/;"	e	enum:mods::weapon::ghost::primary_choice_t
GHOST_PRIMARY_PSG1	mods/weapon.hpp	/^			GHOST_PRIMARY_PSG1 = 1,$/;"	e	enum:mods::weapon::ghost::primary_choice_t
GHOST_SECONARY_L96AW	mods/weapon.hpp	/^			GHOST_SECONARY_L96AW = 2,$/;"	e	enum:mods::weapon::ghost::secondary_choice_t
GHOST_SECONARY_PSG1	mods/weapon.hpp	/^			GHOST_SECONARY_PSG1 = 1,$/;"	e	enum:mods::weapon::ghost::secondary_choice_t
GHOST_SECONDARY_NONE	mods/weapon.hpp	/^			GHOST_SECONDARY_NONE = 0,$/;"	e	enum:mods::weapon::ghost::secondary_choice_t
GIVEN	mods/catch.hpp	12214;"	d
GLASS_WINDOWS	structs.h	/^			GLASS_WINDOWS,$/;"	m	struct:room_data	typeref:enum:room_data::
GOAL_DESTROY	mods/contract-steps.hpp	/^			GOAL_DESTROY = (1 << 1),$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GOAL_GAIN_ENTRY	mods/contract-steps.hpp	/^			GOAL_GAIN_ENTRY = (1 << 5),$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GOAL_INSTALL	mods/contract-steps.hpp	/^			GOAL_INSTALL = (1 << 8)$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GOAL_KILL	mods/contract-steps.hpp	/^			GOAL_KILL = (1 << 4),$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GOAL_PROTECT	mods/contract-steps.hpp	/^			GOAL_PROTECT = (1 << 6),$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GOAL_QUOTA	mods/contract-steps.hpp	/^			GOAL_QUOTA = (1 << 3),$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GOAL_RETRIEVE	mods/contract-steps.hpp	/^			GOAL_RETRIEVE = (1 << 2),$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GOAL_TALK_TO	mods/contract-steps.hpp	/^			GOAL_TALK_TO = (1 << 7),$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
GODLIKE	mods/yaml.hpp	/^		GODLIKE,$/;"	e	enum:mods::yaml::durability_profile_type_t
GOD_TIER	mods/rarity.hpp	/^		constexpr static float GOD_TIER = 0.001311304;$/;"	m	namespace:mods::rarity
GOLIATH_ASSAULT	mods/object.hpp	/^				GOLIATH_ASSAULT,$/;"	e	enum:mods::object::object_type_enum_t
GRAPPLE	mods/weapon-types.hpp	/^		GRAPPLE,$/;"	e	enum:mods::weapon::capabilities::cap_t
GRASS	structs.h	/^			GRASS,			\/** typically grass that isn't flammable (i.e. not dried out) *\/$/;"	m	struct:room_data	typeref:enum:room_data::
GREETINGS	db.cpp	/^std::string GREETINGS = "";		\/* opening credits screen	*\/$/;"	v
GREETINGS_FILE	db.h	79;"	d
GRENADE	mods/mobs/mob.hpp	/^		enum mask_type { SMG, SNIPE, SHOTGUN, GRENADE };$/;"	e	enum:mods::weapon::mask_type
GRENADE	mods/weapon.hpp	/^	                 GRENADE = (1 << 4), ASSAULT_RIFLE = (1 << 5), PISTOL = (1 << 6),$/;"	e	enum:mods::weapon::mask_type
GRENADE_EXPLOSION	mods/ai_state.hpp	/^				GRENADE_FLIES_BY,GRENADE_EXPLOSION,$/;"	e	enum:mods::ai_state::event_type_t
GRENADE_FLIES_BY	mods/ai_state.hpp	/^				GRENADE_FLIES_BY,GRENADE_EXPLOSION,$/;"	e	enum:mods::ai_state::event_type_t
GRIP	mods/weapon.hpp	/^		GRIP,$/;"	e	enum:mods::weapon::attachment_t
GROUP	mods/flags.hpp	/^		GROUP,$/;"	e	enum:mods::flags::aff
HANDBOOK_FILE	db.h	86;"	d
HANDLED	mods/builder.cpp	/^	HANDLED,$/;"	e	enum:parse_response_t	file:
HARDENED	mods/yaml.hpp	/^		HARDENED,$/;"	e	enum:mods::yaml::durability_profile_type_t
HAS_CLIP	mods/weapon-types.hpp	/^		HAS_CLIP,$/;"	e	enum:mods::weapon::capabilities::cap_t
HAS_RLIMIT	sysdep.h	407;"	d
HAS_SANDBOX	mods/builder.hpp	/^	constexpr static uint64_t HAS_SANDBOX = (1 << 0);$/;"	m	namespace:mods::builder
HAS_SPELL_ROUTINE	utils.h	245;"	d
HAVE_ARPA_INET_H	conf.h	92;"	d
HAVE_ARPA_TELNET_H	conf.h	95;"	d
HAVE_ASSERT_H	conf.h	98;"	d
HAVE_CRYPT_H	conf.h	101;"	d
HAVE_ERRNO_H	conf.h	104;"	d
HAVE_FCNTL_H	conf.h	107;"	d
HAVE_GETTIMEOFDAY	conf.h	50;"	d
HAVE_INET_ADDR	conf.h	53;"	d
HAVE_INET_ATON	conf.h	56;"	d
HAVE_LIMITS_H	conf.h	110;"	d
HAVE_MCHECK_H	conf.h	113;"	d
HAVE_MEMORY_H	conf.h	116;"	d
HAVE_NETDB_H	conf.h	122;"	d
HAVE_NETINET_IN_H	conf.h	125;"	d
HAVE_SELECT	conf.h	59;"	d
HAVE_SIGNAL_H	conf.h	128;"	d
HAVE_SNPRINTF	bsd-snprintf.cpp	101;"	d	file:
HAVE_SNPRINTF	conf.h	62;"	d
HAVE_STRCASECMP	conf.h	65;"	d
HAVE_STRDUP	conf.h	68;"	d
HAVE_STRERROR	conf.h	71;"	d
HAVE_STRINGS_H	conf.h	134;"	d
HAVE_STRING_H	conf.h	131;"	d
HAVE_STRNCASECMP	conf.h	80;"	d
HAVE_STRSTR	conf.h	86;"	d
HAVE_STRUCT_IN_ADDR	conf.h	41;"	d
HAVE_SYS_FCNTL_H	conf.h	137;"	d
HAVE_SYS_RESOURCE_H	conf.h	140;"	d
HAVE_SYS_SELECT_H	conf.h	143;"	d
HAVE_SYS_SOCKET_H	conf.h	146;"	d
HAVE_SYS_STAT_H	conf.h	149;"	d
HAVE_SYS_TIME_H	conf.h	152;"	d
HAVE_SYS_TYPES_H	conf.h	155;"	d
HAVE_SYS_UIO_H	conf.h	158;"	d
HAVE_SYS_WAIT_H	conf.h	11;"	d
HAVE_UNISTD_H	conf.h	161;"	d
HAVE_VPRINTF	conf.h	14;"	d
HAVE_VSNPRINTF	bsd-snprintf.cpp	102;"	d	file:
HAVE_VSNPRINTF	conf.h	89;"	d
HAZARDOUS_SMOKE	structs.h	/^			HAZARDOUS_SMOKE, \/** think: gas attacks *\/$/;"	m	struct:room_data	typeref:enum:room_data::
HCONTROL_FILE	db.h	98;"	d
HCONTROL_FORMAT	house.cpp	/^const char *HCONTROL_FORMAT =$/;"	v
HEADER	mods/mini-games/wires.hpp	/^		static constexpr std::string_view HEADER = "[ TN 3 v1.0.12 - Baphomet O.S. ]\\r\\n"$/;"	m	struct:mods::mini_games::wires
HEADER_BLOCK	mail.h	53;"	d
HEADER_BLOCK_DATASIZE	mail.h	71;"	d
HEADSHOT_DIVISOR	mods/values-list.cpp	/^HEADSHOT_DIVISOR,3$/;"	v
HELMET	mods/object.hpp	/^				HELMET,$/;"	e	enum:mods::object::object_type_enum_t
HELP_PAGE_FILE	db.h	80;"	d
HELP_STR	mods/help.cpp	333;"	d	file:
HELP_STR	mods/help.cpp	9;"	d	file:
HELP_WANTED	mods/response-team/radio.hpp	/^		HELP_WANTED =1,$/;"	e	enum:mods::response_team::radio::severity_t
HFO_INDEX	mods/player.cpp	/^		HFO_INDEX =1,HFO_START=2,HFO_STOP=3,HFO_LOG=4$/;"	e	enum:mods::histfile_opcode_t	file:
HFO_LOG	mods/player.cpp	/^		HFO_INDEX =1,HFO_START=2,HFO_STOP=3,HFO_LOG=4$/;"	e	enum:mods::histfile_opcode_t	file:
HFO_START	mods/player.cpp	/^		HFO_INDEX =1,HFO_START=2,HFO_STOP=3,HFO_LOG=4$/;"	e	enum:mods::histfile_opcode_t	file:
HFO_STOP	mods/player.cpp	/^		HFO_INDEX =1,HFO_START=2,HFO_STOP=3,HFO_LOG=4$/;"	e	enum:mods::histfile_opcode_t	file:
HIDE	mods/flags.hpp	/^		HIDE,$/;"	e	enum:mods::flags::aff
HIGHLIGHT_ODD_NUMBER	mods/mini-games/line-up.hpp	/^			HIGHLIGHT_ODD_NUMBER,$/;"	m	struct:mods::mini_games::line_up	typeref:enum:mods::mini_games::line_up::
HIP_FIRE	mods/weapon-types.hpp	/^		HIP_FIRE,$/;"	e	enum:mods::weapon::capabilities::cap_t
HISTFILE_DUAL	mods/player.cpp	/^	HISTFILE_FILE = 1, HISTFILE_LMDB = 2, HISTFILE_DUAL = 3$/;"	e	enum:histfile_type_t	file:
HISTFILE_FILE	mods/player.cpp	/^	HISTFILE_FILE = 1, HISTFILE_LMDB = 2, HISTFILE_DUAL = 3$/;"	e	enum:histfile_type_t	file:
HISTFILE_LMDB	mods/player.cpp	/^	HISTFILE_FILE = 1, HISTFILE_LMDB = 2, HISTFILE_DUAL = 3$/;"	e	enum:histfile_type_t	file:
HISTFILE_STRATEGY	mods/player.cpp	/^static constexpr histfile_type_t HISTFILE_STRATEGY = histfile_type_t::HISTFILE_FILE;$/;"	v	file:
HISTORY_SIZE	structs.h	693;"	d
HIT_BY_CRITICAL_RIFLE_ATTACK	mods/damage-event.hpp	/^	HIT_BY_CRITICAL_RIFLE_ATTACK,$/;"	e	enum:uint16_t
HIT_BY_CRITICAL_SPRAY_ATTACK	mods/damage-event.hpp	/^	HIT_BY_CRITICAL_SPRAY_ATTACK,$/;"	e	enum:uint16_t
HIT_BY_RIFLE_ATTACK	mods/damage-event.hpp	/^	HIT_BY_RIFLE_ATTACK,$/;"	e	enum:uint16_t
HIT_BY_SPRAY_ATTACK	mods/damage-event.hpp	/^	HIT_BY_SPRAY_ATTACK,$/;"	e	enum:uint16_t
HK21	mods/orm/support.hpp	/^		const std::string HK21 = "HK21";$/;"	m	struct:mods::orm::support
HK21	mods/weapon.hpp	/^			HK21 = 2$/;"	e	enum:mods::weapon::support::primary_choice_t
HLP_PREFIX	db.h	73;"	d
HMHR	utils.h	432;"	d
HOLD_ANYTHING	mods/player.hpp	/^				HOLD_ANYTHING = 1,$/;"	e	enum:mods::player::misc_pref_enum_t
HOLOGRAPHIC	mods/weapon.hpp	/^		ACOG, LASER_DOT, HOLOGRAPHIC,$/;"	e	enum:mods::weapon::scope_t
HOST_LENGTH	structs.h	701;"	d
HOUSE_PRIVATE	house.h	4;"	d
HSHR	utils.h	430;"	d
HSSH	utils.h	431;"	d
HUH	interpreter.h	24;"	d
HUNTING	utils.h	328;"	d
HURRICANE_ASSAULT	mods/object.hpp	/^				HURRICANE_ASSAULT,$/;"	e	enum:mods::object::object_type_enum_t
Help	mods/catch2.hpp	/^        Help( bool &showHelpFlag )$/;"	f	struct:Catch::Help
Help	mods/catch2.hpp	/^    struct Help : Opt {$/;"	s	namespace:Catch
House_boot	house.cpp	/^void House_boot(void) {$/;"	f
House_boot	mods/hell.hpp	/^	constexpr inline bool House_boot = false;$/;"	m	namespace:mods::hell
House_can_enter	house.cpp	/^int House_can_enter(char_data *ch, room_vnum house) {$/;"	f
House_crashsave	house.cpp	/^void House_crashsave(room_vnum vnum) {$/;"	f
House_delete_file	house.cpp	/^void House_delete_file(room_vnum vnum) {$/;"	f
House_get_filename	house.cpp	/^int House_get_filename(room_vnum vnum, char *filename, size_t maxlen) {$/;"	f
House_list_guests	house.cpp	/^void House_list_guests(char_data *ch, int i, int quiet) {$/;"	f
House_listrent	house.cpp	/^void House_listrent(char_data *ch, room_vnum vnum) {$/;"	f
House_load	house.cpp	/^int House_load(room_vnum vnum) {$/;"	f
House_restore_weight	house.cpp	/^void House_restore_weight(struct obj_data *obj) {$/;"	f
House_save	house.cpp	/^int House_save(struct obj_data *obj, FILE *fp) {$/;"	f
House_save_all	house.cpp	/^void House_save_all(void) {$/;"	f
House_save_control	house.cpp	/^void House_save_control(void) {$/;"	f
IAC	telnet.h	42;"	d
ICMP	globals.hpp	245;"	d
IContext	mods/catch.hpp	/^	struct IContext {$/;"	s	namespace:Catch
IDEA_FILE	db.h	88;"	d
IDXTYPE	mods/index-type.hpp	11;"	d
IGeneratorInfo	mods/catch.hpp	/^	struct IGeneratorInfo {$/;"	s	namespace:Catch
IGeneratorsForTest	mods/catch.hpp	/^	struct IGeneratorsForTest {$/;"	s	namespace:Catch
IHBD	interpreter.h	23;"	d
IMMLIST_FILE	db.h	83;"	d
IMM_CAN_SEE	utils.h	449;"	d
IMOTD_FILE	db.h	78;"	d
IMPLODE	globals.cpp	/^std::string IMPLODE(std::vector<std::string> m,std::string delim) {$/;"	f
IMPLODE	globals.cpp	/^std::string IMPLODE(std::vector<std::string> m,std::string delim, bool ignore_empty) {$/;"	f
IMPLODE_PAD	globals.cpp	/^std::string IMPLODE_PAD(std::string delim_one,std::vector<std::string> m,std::string delim_two) {$/;"	f
IMPLODE_PAD	globals.cpp	/^std::string IMPLODE_PAD(std::string delim_one,std::vector<std::string> m,std::string delim_two,bool ignore_empty) {$/;"	f
IMutableContext	mods/catch.hpp	/^	struct IMutableContext : IContext {$/;"	s	namespace:Catch
IMutableEnumValuesRegistry	mods/catch2.hpp	/^    struct IMutableEnumValuesRegistry {$/;"	s	namespace:Catch
INCENDIARY_AMMUNITION	mods/weapon.hpp	/^		INCENDIARY_AMMUNITION$/;"	e	enum:mods::weapon::magazine_t
INCENDIARY_GRENADE_TICKS	mods/values-list.cpp	/^INCENDIARY_GRENADE_TICKS,6$/;"	v
INCOMPLETE	mods/builder.cpp	/^	INCOMPLETE$/;"	e	enum:parse_response_t	file:
INDESTRUCTIBLE	mods/yaml.hpp	/^		INDESTRUCTIBLE$/;"	e	enum:mods::yaml::durability_profile_type_t
INDEX_FILE	db.h	66;"	d
INDEX_SIZE	boards.h	15;"	d
INDOOR_ATTIC	mods/rooms.hpp	/^		INDOOR_ATTIC,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_BASEMENT	mods/rooms.hpp	/^		INDOOR_BASEMENT,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_CARPET_WOODEN_WALLS	mods/rooms.hpp	/^		INDOOR_CARPET_WOODEN_WALLS,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_CEMENT	mods/rooms.hpp	/^		INDOOR_CEMENT,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_CEMENT_WOODEN_WALLS	mods/rooms.hpp	/^		INDOOR_CEMENT_WOODEN_WALLS,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_ELEVATOR	mods/rooms.hpp	/^		INDOOR_ELEVATOR,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_MARKET_PLACE	mods/rooms.hpp	/^		INDOOR_MARKET_PLACE,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_METAL_HATCH	mods/rooms.hpp	/^		INDOOR_METAL_HATCH,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_METAL_WALLS	mods/rooms.hpp	/^		INDOOR_METAL_WALLS,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_ROOF	mods/rooms.hpp	/^		INDOOR_ROOF,	\/** attached to the roof like spiderman *\/$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_SERVER_ROOM	mods/rooms.hpp	/^		INDOOR_SERVER_ROOM,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_SEWER	mods/rooms.hpp	/^		INDOOR_SEWER,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_SHALLOW_WATER	mods/rooms.hpp	/^		INDOOR_SHALLOW_WATER,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_TUNNEL	mods/rooms.hpp	/^		INDOOR_TUNNEL,$/;"	e	enum:mods::rooms::sector_type_t
INDOOR_WOODEN_WALLS	mods/rooms.hpp	/^		INDOOR_WOODEN_WALLS,$/;"	e	enum:mods::rooms::sector_type_t
INDUSTRIAL_STRENGTH	mods/yaml.hpp	/^		INDUSTRIAL_STRENGTH,$/;"	e	enum:mods::yaml::durability_profile_type_t
INFO_FILE	db.h	81;"	d
INFRAVISION	mods/flags.hpp	/^		INFRAVISION,$/;"	e	enum:mods::flags::aff
INIT	mods/init.hpp	46;"	d
INIT	mods/init.hpp	4;"	d
INITIATE	mods/skills.hpp	/^	INITIATE = 1,$/;"	e	enum:uint8_t
INK	mods/aoe.hpp	/^		INK,	\/** Marks surroundings and enemies with paint for the purpose of tracking *\/ $/;"	e	enum:mods::aoe::types_t
INSERT	mods/lmdb.hpp	/^		EXEC, UPDATE, INSERT $/;"	e	enum:mods::lmdb::transact_type_t
INSIDE	structs.h	/^			INSIDE,			\/** Example: inside a home *\/$/;"	m	struct:room_data	typeref:enum:room_data::
INSTALL	mods/item.hpp	/^		INSTALL = (1 << 0),$/;"	e	enum:mods::item::capability_t
INSTALL	mods/weapon-types.hpp	/^		INSTALL = 0,$/;"	e	enum:mods::weapon::capabilities::cap_t
INSTALL_MASK	mods/object-utils.hpp	/^	constexpr static obj_data::location_data_t INSTALL_MASK = 16;$/;"	m	namespace:mods::object_utils
INSTALL_TICKS_DURATION	mods/object-utils.hpp	/^	constexpr static uint8_t INSTALL_TICKS_DURATION = 30;$/;"	m	namespace:mods::object_utils
INTEGER_COLUMN	mods/builder.cpp	/^	INTEGER_COLUMN,$/;"	e	enum:field_type_t	file:
INTEL	mods/levels.hpp	/^	INTEL,$/;"	e	enum:uint8_t
INTERNAL_CATCH_BENCHMARK	mods/catch2.hpp	7360;"	d
INTERNAL_CATCH_BENCHMARK_ADVANCED	mods/catch2.hpp	7364;"	d
INTERNAL_CATCH_CAPTURE	mods/catch2.hpp	2781;"	d
INTERNAL_CATCH_CATCH	mods/catch2.hpp	2686;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	mods/catch2.hpp	898;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST	mods/catch2.hpp	908;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST0	mods/catch2.hpp	825;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST1	mods/catch2.hpp	826;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	mods/catch2.hpp	894;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD	mods/catch2.hpp	904;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0	mods/catch2.hpp	869;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1	mods/catch2.hpp	870;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X	mods/catch2.hpp	876;"	d
INTERNAL_CATCH_DECLARE_SIG_TEST_X	mods/catch2.hpp	829;"	d
INTERNAL_CATCH_DEF	mods/catch2.hpp	734;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	mods/catch2.hpp	897;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST	mods/catch2.hpp	907;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST0	mods/catch2.hpp	833;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST1	mods/catch2.hpp	834;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	mods/catch2.hpp	893;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD	mods/catch2.hpp	903;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0	mods/catch2.hpp	882;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1	mods/catch2.hpp	883;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X	mods/catch2.hpp	886;"	d
INTERNAL_CATCH_DEFINE_SIG_TEST_X	mods/catch2.hpp	837;"	d
INTERNAL_CATCH_DYNAMIC_SECTION	mods/catch2.hpp	2931;"	d
INTERNAL_CATCH_ELSE	mods/catch.hpp	2276;"	d
INTERNAL_CATCH_ELSE	mods/catch2.hpp	2717;"	d
INTERNAL_CATCH_EXPAND1	mods/catch2.hpp	732;"	d
INTERNAL_CATCH_EXPAND2	mods/catch2.hpp	733;"	d
INTERNAL_CATCH_EXPAND_VARGS	mods/catch2.hpp	696;"	d
INTERNAL_CATCH_GENERATE	mods/catch.hpp	2706;"	d
INTERNAL_CATCH_GET_1_ARG	mods/catch2.hpp	7357;"	d
INTERNAL_CATCH_GET_2_ARG	mods/catch2.hpp	7358;"	d
INTERNAL_CATCH_IF	mods/catch.hpp	2271;"	d
INTERNAL_CATCH_IF	mods/catch2.hpp	2712;"	d
INTERNAL_CATCH_INFO	mods/catch.hpp	2351;"	d
INTERNAL_CATCH_INFO	mods/catch2.hpp	2786;"	d
INTERNAL_CATCH_LINESTR	mods/catch.hpp	2704;"	d
INTERNAL_CATCH_LINESTR2	mods/catch.hpp	2703;"	d
INTERNAL_CATCH_MAKE_NAMESPACE	mods/catch2.hpp	748;"	d
INTERNAL_CATCH_MAKE_NAMESPACE2	mods/catch2.hpp	747;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	mods/catch2.hpp	754;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST	mods/catch2.hpp	757;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	mods/catch2.hpp	753;"	d
INTERNAL_CATCH_MAKE_TYPE_LIST2	mods/catch2.hpp	756;"	d
INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES	mods/catch2.hpp	760;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	mods/catch.hpp	806;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	mods/catch2.hpp	1053;"	d
INTERNAL_CATCH_MSG	mods/catch.hpp	2333;"	d
INTERNAL_CATCH_MSG	mods/catch2.hpp	2773;"	d
INTERNAL_CATCH_NOINTERNAL_CATCH_DEF	mods/catch2.hpp	735;"	d
INTERNAL_CATCH_NO_THROW	mods/catch.hpp	2281;"	d
INTERNAL_CATCH_NO_THROW	mods/catch2.hpp	2722;"	d
INTERNAL_CATCH_NTTP_0	mods/catch2.hpp	891;"	d
INTERNAL_CATCH_NTTP_0	mods/catch2.hpp	901;"	d
INTERNAL_CATCH_NTTP_1	mods/catch2.hpp	810;"	d
INTERNAL_CATCH_NTTP_GEN	mods/catch2.hpp	892;"	d
INTERNAL_CATCH_NTTP_GEN	mods/catch2.hpp	902;"	d
INTERNAL_CATCH_NTTP_REGISTER	mods/catch2.hpp	848;"	d
INTERNAL_CATCH_NTTP_REGISTER0	mods/catch2.hpp	841;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD	mods/catch2.hpp	862;"	d
INTERNAL_CATCH_NTTP_REGISTER_METHOD0	mods/catch2.hpp	855;"	d
INTERNAL_CATCH_NTTP_REG_GEN	mods/catch2.hpp	896;"	d
INTERNAL_CATCH_NTTP_REG_GEN	mods/catch2.hpp	906;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	mods/catch2.hpp	895;"	d
INTERNAL_CATCH_NTTP_REG_METHOD_GEN	mods/catch2.hpp	905;"	d
INTERNAL_CATCH_REACT	mods/catch.hpp	2241;"	d
INTERNAL_CATCH_REACT	mods/catch2.hpp	2695;"	d
INTERNAL_CATCH_REGISTER_ENUM	mods/catch2.hpp	2167;"	d
INTERNAL_CATCH_REGISTER_LEGACY_REPORTER	mods/catch.hpp	10386;"	d
INTERNAL_CATCH_REGISTER_LISTENER	mods/catch.hpp	10392;"	d
INTERNAL_CATCH_REGISTER_REPORTER	mods/catch.hpp	10389;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	mods/catch.hpp	822;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	mods/catch2.hpp	1075;"	d
INTERNAL_CATCH_REMOVE_PARENS	mods/catch2.hpp	750;"	d
INTERNAL_CATCH_REMOVE_PARENS_10_ARG	mods/catch2.hpp	772;"	d
INTERNAL_CATCH_REMOVE_PARENS_11_ARG	mods/catch2.hpp	773;"	d
INTERNAL_CATCH_REMOVE_PARENS_1_ARG	mods/catch2.hpp	763;"	d
INTERNAL_CATCH_REMOVE_PARENS_2_ARG	mods/catch2.hpp	764;"	d
INTERNAL_CATCH_REMOVE_PARENS_3_ARG	mods/catch2.hpp	765;"	d
INTERNAL_CATCH_REMOVE_PARENS_4_ARG	mods/catch2.hpp	766;"	d
INTERNAL_CATCH_REMOVE_PARENS_5_ARG	mods/catch2.hpp	767;"	d
INTERNAL_CATCH_REMOVE_PARENS_6_ARG	mods/catch2.hpp	768;"	d
INTERNAL_CATCH_REMOVE_PARENS_7_ARG	mods/catch2.hpp	769;"	d
INTERNAL_CATCH_REMOVE_PARENS_8_ARG	mods/catch2.hpp	770;"	d
INTERNAL_CATCH_REMOVE_PARENS_9_ARG	mods/catch2.hpp	771;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	mods/catch2.hpp	899;"	d
INTERNAL_CATCH_REMOVE_PARENS_GEN	mods/catch2.hpp	909;"	d
INTERNAL_CATCH_SECTION	mods/catch.hpp	2521;"	d
INTERNAL_CATCH_SECTION	mods/catch2.hpp	2925;"	d
INTERNAL_CATCH_STRINGIFY	mods/catch.hpp	375;"	d
INTERNAL_CATCH_STRINGIFY2	mods/catch.hpp	374;"	d
INTERNAL_CATCH_STRINGIZE	mods/catch2.hpp	736;"	d
INTERNAL_CATCH_STRINGIZE2	mods/catch2.hpp	738;"	d
INTERNAL_CATCH_STRINGIZE2	mods/catch2.hpp	742;"	d
INTERNAL_CATCH_STRINGIZE3	mods/catch2.hpp	743;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	mods/catch2.hpp	739;"	d
INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS	mods/catch2.hpp	744;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE	mods/catch2.hpp	1203;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2	mods/catch2.hpp	1176;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD	mods/catch2.hpp	1333;"	d
INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2	mods/catch2.hpp	1303;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE	mods/catch2.hpp	1161;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2	mods/catch2.hpp	1127;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD	mods/catch2.hpp	1288;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2	mods/catch2.hpp	1251;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG	mods/catch2.hpp	1296;"	d
INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG	mods/catch2.hpp	1169;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE	mods/catch2.hpp	1112;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_2	mods/catch2.hpp	1082;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD	mods/catch2.hpp	1236;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2	mods/catch2.hpp	1206;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION	mods/catch2.hpp	1025;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2	mods/catch2.hpp	1000;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG	mods/catch2.hpp	1244;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION	mods/catch2.hpp	1033;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION	mods/catch2.hpp	1009;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2	mods/catch2.hpp	998;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG	mods/catch2.hpp	1120;"	d
INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION	mods/catch2.hpp	1017;"	d
INTERNAL_CATCH_TEST	mods/catch.hpp	2255;"	d
INTERNAL_CATCH_TEST	mods/catch2.hpp	2698;"	d
INTERNAL_CATCH_TESTCASE	mods/catch.hpp	802;"	d
INTERNAL_CATCH_TESTCASE	mods/catch2.hpp	1049;"	d
INTERNAL_CATCH_TESTCASE2	mods/catch.hpp	798;"	d
INTERNAL_CATCH_TESTCASE2	mods/catch2.hpp	1042;"	d
INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION	mods/catch2.hpp	991;"	d
INTERNAL_CATCH_TESTCASE_NO_REGISTRATION	mods/catch2.hpp	989;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	mods/catch.hpp	818;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	mods/catch2.hpp	1071;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	mods/catch.hpp	810;"	d
INTERNAL_CATCH_TEST_CASE_METHOD2	mods/catch2.hpp	1060;"	d
INTERNAL_CATCH_THROWS	mods/catch.hpp	2295;"	d
INTERNAL_CATCH_THROWS	mods/catch2.hpp	2736;"	d
INTERNAL_CATCH_THROWS_AS	mods/catch.hpp	2312;"	d
INTERNAL_CATCH_THROWS_AS	mods/catch2.hpp	2753;"	d
INTERNAL_CATCH_THROWS_MATCHES	mods/catch2.hpp	3809;"	d
INTERNAL_CATCH_THROWS_STR_MATCHES	mods/catch2.hpp	2795;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	mods/catch.hpp	2809;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	mods/catch2.hpp	3063;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	mods/catch.hpp	2804;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION2	mods/catch2.hpp	3055;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG	mods/catch2.hpp	2991;"	d
INTERNAL_CATCH_TRY	mods/catch2.hpp	2685;"	d
INTERNAL_CATCH_TYPE_GEN	mods/catch2.hpp	777;"	d
INTERNAL_CATCH_UNIQUE_NAME	mods/catch.hpp	369;"	d
INTERNAL_CATCH_UNIQUE_NAME	mods/catch.hpp	371;"	d
INTERNAL_CATCH_UNIQUE_NAME	mods/catch2.hpp	466;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	mods/catch.hpp	367;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	mods/catch2.hpp	464;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	mods/catch.hpp	366;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	mods/catch2.hpp	463;"	d
INTERNAL_CATCH_UNSCOPED_INFO	mods/catch2.hpp	2790;"	d
INTERNAL_CATCH_VA_NARGS_IMPL	mods/catch2.hpp	775;"	d
INTERNAL_CHECK_THAT	mods/catch.hpp	2355;"	d
INTERNAL_CHECK_THAT	mods/catch2.hpp	3799;"	d
INTIMIDATED	mods/affects.hpp	/^		INTIMIDATED = 3,$/;"	e	enum:mods::affects::affect_t
INVALID_DIR_OPTION	mods/doors.hpp	/^	static constexpr int8_t INVALID_DIR_OPTION = -1;$/;"	m	namespace:mods::doors
INVALID_SLOT	mods/orm/orm-base.hpp	/^	static constexpr std::string_view INVALID_SLOT = "invalid slot";$/;"	m	namespace:mods::orm
INVALID_SOCKET	comm.cpp	88;"	d	file:
INVISIBLE	mods/flags.hpp	/^		INVISIBLE,$/;"	e	enum:mods::flags::aff
INVIS_OK	utils.h	443;"	d
INVIS_OK_OBJ	utils.h	462;"	d
INVSTART	mods/flags.hpp	/^		INVSTART,$/;"	e	enum:mods::flags::plr
IN_ROOM	utils.h	273;"	d
IP	telnet.h	53;"	d
ISNEWL	utils.h	158;"	d
IS_AFFECTED	utils.h	248;"	d
IS_CARRYING_N	utils.h	326;"	d
IS_CARRYING_W	utils.h	325;"	d
IS_CLERIC	utils.h	504;"	d
IS_CLOSED	graph.cpp	57;"	d	file:
IS_CORPSE	utils.h	415;"	d
IS_DARK	utils.h	260;"	d
IS_DIRECTION	globals.hpp	23;"	d
IS_EVIL	utils.h	372;"	d
IS_GOD	shop.h	89;"	d
IS_GOOD	utils.h	371;"	d
IS_LIGHT	utils.h	261;"	d
IS_MAGIC_USER	utils.h	502;"	d
IS_MARINE	utils.h	508;"	d
IS_MARKED	graph.cpp	55;"	d	file:
IS_MOB	utils.h	232;"	d
IS_MOVE	interpreter.h	21;"	d
IS_NEUTRAL	utils.h	373;"	d
IS_NPC	utils.h	231;"	d
IS_SET	utils.h	200;"	d
IS_SUPPORT	utils.h	511;"	d
IS_THIEF	utils.h	506;"	d
IS_WARRIOR	utils.h	510;"	d
IS_WEAPON	fight.cpp	129;"	d	file:
IS_WEAPON	mods/weapons/damage-types.cpp	31;"	d	file:
IS_WEAPON_LOADED	mods/weapon.hpp	15;"	d
IShared	mods/catch.hpp	/^	struct IShared : NonCopyable {$/;"	s	namespace:Catch
IStream	mods/catch2.hpp	/^    struct IStream {$/;"	s	namespace:Catch
ITEM_ANTI_CLERIC	structs.h	515;"	d
ITEM_ANTI_EVIL	structs.h	512;"	d
ITEM_ANTI_GOOD	structs.h	511;"	d
ITEM_ANTI_MAGIC_USER	structs.h	514;"	d
ITEM_ANTI_NEUTRAL	structs.h	513;"	d
ITEM_ANTI_THIEF	structs.h	516;"	d
ITEM_ANTI_WARRIOR	structs.h	517;"	d
ITEM_ARMOR	mods/item-types.hpp	771;"	d
ITEM_ARMOR	structs.h	466;"	d
ITEM_ATTACHMENT	mods/item-types.hpp	770;"	d
ITEM_ATTACHMENT	structs.h	465;"	d
ITEM_BLESS	structs.h	510;"	d
ITEM_BOAT	structs.h	454;"	d
ITEM_CONSUMABLE	mods/item-types.hpp	772;"	d
ITEM_CONSUMABLE	structs.h	467;"	d
ITEM_CONTAINER	mods/item-types.hpp	774;"	d
ITEM_CONTAINER	structs.h	469;"	d
ITEM_CONTAINER_LEGACY	structs.h	447;"	d
ITEM_DRINKCON	structs.h	449;"	d
ITEM_DRONE	mods/item-types.hpp	767;"	d
ITEM_DRONE	structs.h	462;"	d
ITEM_EXPLOSIVE	mods/item-types.hpp	765;"	d
ITEM_EXPLOSIVE	structs.h	460;"	d
ITEM_FIREWEAPON	structs.h	440;"	d
ITEM_FOOD	structs.h	451;"	d
ITEM_FOUNTAIN	structs.h	455;"	d
ITEM_GADGET	mods/item-types.hpp	766;"	d
ITEM_GADGET	structs.h	461;"	d
ITEM_GLOW	structs.h	502;"	d
ITEM_HUM	structs.h	503;"	d
ITEM_INVISIBLE	structs.h	507;"	d
ITEM_KEY	structs.h	450;"	d
ITEM_LIGHT	structs.h	436;"	d
ITEM_MAGIC	structs.h	508;"	d
ITEM_MELEE	mods/item-types.hpp	775;"	d
ITEM_MELEE	structs.h	470;"	d
ITEM_MISSILE	structs.h	441;"	d
ITEM_MONEY	structs.h	452;"	d
ITEM_NODONATE	structs.h	505;"	d
ITEM_NODROP	structs.h	509;"	d
ITEM_NOINVIS	structs.h	506;"	d
ITEM_NORENT	structs.h	504;"	d
ITEM_NOSELL	structs.h	518;"	d
ITEM_NOTE	structs.h	448;"	d
ITEM_OTHER	structs.h	445;"	d
ITEM_PEN	structs.h	453;"	d
ITEM_POTION	structs.h	443;"	d
ITEM_RIFLE	mods/item-types.hpp	764;"	d
ITEM_RIFLE	structs.h	459;"	d
ITEM_SCROLL	structs.h	437;"	d
ITEM_STAFF	structs.h	439;"	d
ITEM_TRAP	mods/item-types.hpp	773;"	d
ITEM_TRAP	structs.h	468;"	d
ITEM_TRASH	structs.h	446;"	d
ITEM_TREASURE	structs.h	442;"	d
ITEM_TYPE	mods/acl/config-parser.hpp	/^                enum ITEM_TYPE { ITEM_TYPE_FILES, ITEM_TYPE_COMMANDS };$/;"	g	class:mods::acl::FileParser
ITEM_TYPE_COMMANDS	mods/acl/config-parser.hpp	/^                enum ITEM_TYPE { ITEM_TYPE_FILES, ITEM_TYPE_COMMANDS };$/;"	e	enum:mods::acl::FileParser::ITEM_TYPE
ITEM_TYPE_FILES	mods/acl/config-parser.hpp	/^                enum ITEM_TYPE { ITEM_TYPE_FILES, ITEM_TYPE_COMMANDS };$/;"	e	enum:mods::acl::FileParser::ITEM_TYPE
ITEM_VEHICLE	mods/item-types.hpp	776;"	d
ITEM_WAND	structs.h	438;"	d
ITEM_WEAPON	mods/item-types.hpp	768;"	d
ITEM_WEAPON	structs.h	463;"	d
ITEM_WEAPON_ATTACHMENT	mods/item-types.hpp	769;"	d
ITEM_WEAPON_ATTACHMENT	structs.h	464;"	d
ITEM_WEAR_ABOUT	structs.h	486;"	d
ITEM_WEAR_ARMS	structs.h	484;"	d
ITEM_WEAR_BACKPACK	structs.h	496;"	d
ITEM_WEAR_BODY	structs.h	479;"	d
ITEM_WEAR_ELBOW	structs.h	495;"	d
ITEM_WEAR_FEET	structs.h	482;"	d
ITEM_WEAR_FINGER	structs.h	477;"	d
ITEM_WEAR_GOGGLES	structs.h	497;"	d
ITEM_WEAR_HANDS	structs.h	483;"	d
ITEM_WEAR_HEAD	structs.h	480;"	d
ITEM_WEAR_HOLD	structs.h	491;"	d
ITEM_WEAR_LEGS	structs.h	481;"	d
ITEM_WEAR_LIGHT	structs.h	475;"	d
ITEM_WEAR_NECK	structs.h	478;"	d
ITEM_WEAR_PRIMARY	structs.h	490;"	d
ITEM_WEAR_SECONDARY	structs.h	492;"	d
ITEM_WEAR_SHIELD	structs.h	485;"	d
ITEM_WEAR_SHOULDERS	structs.h	493;"	d
ITEM_WEAR_TAKE	structs.h	476;"	d
ITEM_WEAR_VEST_PACK	structs.h	494;"	d
ITEM_WEAR_WAIST	structs.h	487;"	d
ITEM_WEAR_WEAPON_ATTACHMENT	structs.h	498;"	d
ITEM_WEAR_WIELD	structs.h	489;"	d
ITEM_WEAR_WRIST	structs.h	488;"	d
ITEM_WORN	structs.h	444;"	d
ITestCase	mods/catch.hpp	/^	struct ITestCase : IShared {$/;"	s	namespace:Catch
ITestCaseRegistry	mods/catch.hpp	/^	struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestCaseRegistry	mods/catch2.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestInvoker	mods/catch2.hpp	/^    struct ITestInvoker {$/;"	s	namespace:Catch
Impl	mods/catch.hpp	/^		namespace Impl {$/;"	n	namespace:Catch::Matchers
Info	mods/catch.hpp	/^			Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Info	mods/catch2.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Internal	mods/catch.hpp	/^	namespace Internal {$/;"	n	namespace:Catch
IsEqualTo	mods/catch.hpp	/^			IsEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThan	mods/catch.hpp	/^			IsGreaterThan,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThanOrEqualTo	mods/catch.hpp	/^			IsGreaterThanOrEqualTo$/;"	e	enum:Catch::Internal::Operator
IsLessThan	mods/catch.hpp	/^			IsLessThan,$/;"	e	enum:Catch::Internal::Operator
IsLessThanOrEqualTo	mods/catch.hpp	/^			IsLessThanOrEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsNotEqualTo	mods/catch.hpp	/^			IsNotEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsStreamInsertable	mods/catch.hpp	/^		struct IsStreamInsertable {$/;"	s	namespace:Catch::Detail
IsStreamInsertable	mods/catch2.hpp	/^        class IsStreamInsertable {$/;"	c	namespace:Catch::Detail
JEEP	mods/weapon.hpp	/^		JEEP$/;"	e	enum:mods::weapon::vehicle_t
JS_PATH	mods/js-path.hpp	/^		constexpr static const char * JS_PATH = "..\/lib\/js\/";$/;"	m	namespace:mods::js::path
JS_READ_CHUNK_SIZE	mods/js.hpp	18;"	d
JS_TEST_PATH	mods/js-path.hpp	/^		constexpr static const char * JS_TEST_PATH = "..\/lib\/js\/tests\/";$/;"	m	namespace:mods::js::path
James	castle.cpp	/^SPECIAL(James);$/;"	v
KBLU	screen.h	15;"	d
KCYN	screen.h	17;"	d
KEY_FETCHED_OKAY	mods/lmdb.hpp	/^		constexpr static int KEY_FETCHED_OKAY = 1;$/;"	m	struct:mods::lmdb::_db_handle
KEY_NOT_FOUND	mods/lmdb.hpp	/^		constexpr static int KEY_NOT_FOUND = 0;$/;"	m	struct:mods::lmdb::_db_handle
KGRN	screen.h	13;"	d
KILLER	mods/flags.hpp	/^		KILLER = 1,$/;"	e	enum:mods::flags::plr
KILLSCRIPT_FILE	db.h	53;"	d
KILLSCRIPT_FILE	db.h	57;"	d
KILLSCRIPT_FILE	db.h	61;"	d
KINDLING	structs.h	/^			KINDLING = 1,$/;"	e	enum:uint8_t
KMAG	screen.h	16;"	d
KNIFE	mods/object.hpp	/^				KNIFE,$/;"	e	enum:mods::object::object_type_enum_t
KNIFE	mods/weapon.hpp	/^		KNIFE,$/;"	e	enum:mods::weapon::melee_t
KNRM	mods/chat.hpp	14;"	d
KNRM	mods/chat.hpp	55;"	d
KNRM	screen.h	11;"	d
KNUL	screen.h	19;"	d
KRED	screen.h	12;"	d
KWHT	screen.h	18;"	d
KYEL	screen.h	14;"	d
L96AW	mods/orm/pyrexia.hpp	/^		const std::string L96AW = "L96AW";$/;"	m	struct:mods::orm::pyrexia
L96AW	mods/orm/sniper.hpp	/^		const std::string L96AW = "L96AW";$/;"	m	struct:mods::orm::sniper
L96AW	mods/weapon.hpp	/^			L96AW = 2$/;"	e	enum:mods::weapon::ghost::primary_choice_t
L96AW	mods/weapon.hpp	/^			L96AW = 2$/;"	e	enum:mods::weapon::sniper::primary_choice_t
LADDER	structs.h	/^			LADDER, \/** a ladder leading up or down *\/$/;"	m	struct:room_data	typeref:enum:room_data::
LARGE_BUFSIZE	structs.h	691;"	d
LASER_DOT	mods/weapon.hpp	/^		ACOG, LASER_DOT, HOLOGRAPHIC,$/;"	e	enum:mods::weapon::scope_t
LASER_SIGHT	mods/weapon.hpp	/^		LASER_SIGHT$/;"	e	enum:mods::weapon::siderail_t
LAST	mods/flags.hpp	/^		LAST = BUILDER$/;"	e	enum:mods::flags::chunk_type_t
LAST	mods/object.hpp	/^				LAST = __ARMOR_BRANDS_END__$/;"	e	enum:mods::object::object_type_enum_t
LAST	mods/randomized-items.hpp	/^	LAST = ELITE$/;"	e	enum:mods::rarity_enum_t
LAST	structs.h	/^	LAST$/;"	e	enum:lense_type_t
LAST_BLOCK	mail.h	54;"	d
LAZY_CHECK	mods/builder/conbuild.cpp	445;"	d	file:
LEAF	mods/behaviour_tree_node.hpp	/^			enum node_type_t { DO_NOTHING, SELECTOR, SEQUENCE, LEAF };$/;"	e	enum:mods::behaviour_tree_node::node_type_t
LEARNED	spec_procs.cpp	133;"	d	file:
LEARNED_LEVEL	spec_procs.cpp	125;"	d	file:
LEGACY_AFF	mods/flags.hpp	/^		LEGACY_AFF = 0,$/;"	e	enum:mods::flags::chunk_type_t
LEGACY_AFF_BLIND	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_BLIND = (1 << 0);$/;"	m	namespace:mods::flags
LEGACY_AFF_CHARM	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_CHARM = (1 << 21);$/;"	m	namespace:mods::flags
LEGACY_AFF_CURSE	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_CURSE = (1 << 9);$/;"	m	namespace:mods::flags
LEGACY_AFF_DETECT_ALIGN	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_DETECT_ALIGN = (1 << 2);$/;"	m	namespace:mods::flags
LEGACY_AFF_DETECT_INVIS	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_DETECT_INVIS = (1 << 3);$/;"	m	namespace:mods::flags
LEGACY_AFF_DETECT_MAGIC	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_DETECT_MAGIC = (1 << 4);$/;"	m	namespace:mods::flags
LEGACY_AFF_GROUP	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_GROUP = (1 << 8);$/;"	m	namespace:mods::flags
LEGACY_AFF_HIDE	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_HIDE = (1 << 19);$/;"	m	namespace:mods::flags
LEGACY_AFF_INFRAVISION	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_INFRAVISION = (1 << 10);$/;"	m	namespace:mods::flags
LEGACY_AFF_INVISIBLE	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_INVISIBLE = (1 << 1);$/;"	m	namespace:mods::flags
LEGACY_AFF_NOTRACK	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_NOTRACK = (1 << 15);$/;"	m	namespace:mods::flags
LEGACY_AFF_POISON	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_POISON = (1 << 11);$/;"	m	namespace:mods::flags
LEGACY_AFF_PROTECT_EVIL	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_PROTECT_EVIL = (1 << 12);$/;"	m	namespace:mods::flags
LEGACY_AFF_PROTECT_GOOD	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_PROTECT_GOOD = (1 << 13);$/;"	m	namespace:mods::flags
LEGACY_AFF_SANCTUARY	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_SANCTUARY = (1 << 7);$/;"	m	namespace:mods::flags
LEGACY_AFF_SENSE_LIFE	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_SENSE_LIFE = (1 << 5);$/;"	m	namespace:mods::flags
LEGACY_AFF_SLEEP	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_SLEEP = (1 << 14);$/;"	m	namespace:mods::flags
LEGACY_AFF_SNEAK	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_SNEAK = (1 << 18);$/;"	m	namespace:mods::flags
LEGACY_AFF_UNUSED16	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_UNUSED16 = (1 << 16);$/;"	m	namespace:mods::flags
LEGACY_AFF_UNUSED17	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_UNUSED17 = (1 << 17);$/;"	m	namespace:mods::flags
LEGACY_AFF_UNUSED20	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_UNUSED20 = (1 << 20);$/;"	m	namespace:mods::flags
LEGACY_AFF_WATERWALK	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_AFF_WATERWALK = (1 << 6);$/;"	m	namespace:mods::flags
LEGACY_PLR	mods/flags.hpp	/^		LEGACY_PLR,$/;"	e	enum:mods::flags::chunk_type_t
LEGACY_PLR_CRASH	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_CRASH = (1 << 6);$/;"	m	namespace:mods::flags
LEGACY_PLR_CRYO	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_CRYO = (1 << 15);$/;"	m	namespace:mods::flags
LEGACY_PLR_DELETED	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_DELETED = (1 << 10);$/;"	m	namespace:mods::flags
LEGACY_PLR_DONTSET	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_DONTSET = (1 << 3);$/;"	m	namespace:mods::flags
LEGACY_PLR_FROZEN	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_FROZEN = (1 << 2);$/;"	m	namespace:mods::flags
LEGACY_PLR_INVSTART	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_INVSTART = (1 << 14);$/;"	m	namespace:mods::flags
LEGACY_PLR_KILLER	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_KILLER = (1 << 0);$/;"	m	namespace:mods::flags
LEGACY_PLR_LOADROOM	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_LOADROOM = (1 << 11);$/;"	m	namespace:mods::flags
LEGACY_PLR_MAILING	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_MAILING = (1 << 5);$/;"	m	namespace:mods::flags
LEGACY_PLR_NODELETE	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_NODELETE = (1 << 13);$/;"	m	namespace:mods::flags
LEGACY_PLR_NOSHOUT	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_NOSHOUT = (1 << 8);$/;"	m	namespace:mods::flags
LEGACY_PLR_NOTDEADYET	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_NOTDEADYET = (1 << 16);$/;"	m	namespace:mods::flags
LEGACY_PLR_NOTITLE	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_NOTITLE = (1 << 9);$/;"	m	namespace:mods::flags
LEGACY_PLR_NOWIZLIST	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_NOWIZLIST = (1 << 12);$/;"	m	namespace:mods::flags
LEGACY_PLR_SITEOK	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_SITEOK = (1 << 7);$/;"	m	namespace:mods::flags
LEGACY_PLR_THIEF	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_THIEF = (1 << 1);$/;"	m	namespace:mods::flags
LEGACY_PLR_WRITING	mods/flags.hpp	/^	constexpr static uint32_t LEGACY_PLR_WRITING = (1 << 4);$/;"	m	namespace:mods::flags
LEGENDARY	mods/randomized-items.hpp	/^	LEGENDARY,$/;"	e	enum:mods::rarity_enum_t
LEGENDARY	mods/rarity.hpp	/^		constexpr static float LEGENDARY = 0.0100341;$/;"	m	namespace:mods::rarity
LEGENDARY_DROP_RATE	mods/randomized-items.hpp	/^		constexpr static float LEGENDARY_DROP_RATE = 3.0;$/;"	m	class:mods::randomized_items
LEGS	mods/object.hpp	/^				LEGS,$/;"	e	enum:mods::object::object_type_enum_t
LETHAL_ROOM_SEALANT	mods/classes/pyrexia.hpp	/^				LETHAL_ROOM_SEALANT,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
LEVELS_FIRST_TIER	mods/values-list.cpp	/^LEVELS_FIRST_TIER,10.00$/;"	v
LFLOW_OFF	telnet.h	153;"	d
LFLOW_ON	telnet.h	154;"	d
LFLOW_RESTART_ANY	telnet.h	155;"	d
LFLOW_RESTART_XON	telnet.h	156;"	d
LIB_ETC	db.h	26;"	d
LIB_ETC	db.h	37;"	d
LIB_HOUSE	db.h	30;"	d
LIB_HOUSE	db.h	41;"	d
LIB_MISC	db.h	25;"	d
LIB_MISC	db.h	36;"	d
LIB_PLRALIAS	db.h	29;"	d
LIB_PLRALIAS	db.h	40;"	d
LIB_PLROBJS	db.h	28;"	d
LIB_PLROBJS	db.h	39;"	d
LIB_PLRTEXT	db.h	27;"	d
LIB_PLRTEXT	db.h	38;"	d
LIB_TEXT	db.h	23;"	d
LIB_TEXT	db.h	34;"	d
LIB_TEXT_HELP	db.h	24;"	d
LIB_TEXT_HELP	db.h	35;"	d
LIB_WORLD	db.h	22;"	d
LIB_WORLD	db.h	33;"	d
LIGHT_MACHINE_GUN	mods/object.hpp	/^				LIGHT_MACHINE_GUN,$/;"	e	enum:mods::object::object_type_enum_t
LIGHT_OK	utils.h	440;"	d
LIQ_ALE	structs.h	580;"	d
LIQ_BEER	structs.h	578;"	d
LIQ_BLOOD	structs.h	590;"	d
LIQ_CLEARWATER	structs.h	592;"	d
LIQ_COFFE	structs.h	589;"	d
LIQ_DARKALE	structs.h	581;"	d
LIQ_FIREBRT	structs.h	584;"	d
LIQ_LEMONADE	structs.h	583;"	d
LIQ_LOCALSPC	structs.h	585;"	d
LIQ_MILK	structs.h	587;"	d
LIQ_SALTWATER	structs.h	591;"	d
LIQ_SLIME	structs.h	586;"	d
LIQ_TEA	structs.h	588;"	d
LIQ_WATER	structs.h	577;"	d
LIQ_WHISKY	structs.h	582;"	d
LIQ_WINE	structs.h	579;"	d
LIST_PRODUCE	shop.h	101;"	d
LIST_ROOM	shop.h	103;"	d
LIST_TRADE	shop.h	102;"	d
LMDBCOMMIT	globals.hpp	37;"	d
LMDBDEL	globals.hpp	35;"	d
LMDBGET	globals.hpp	36;"	d
LMDBNDEL	globals.hpp	34;"	d
LMDBNGET	globals.hpp	32;"	d
LMDBNSET	globals.hpp	29;"	d
LMDBRENEW	globals.hpp	38;"	d
LMDBSET	globals.hpp	31;"	d
LMDBVGET	globals.hpp	33;"	d
LM_FORWARDMASK	telnet.h	163;"	d
LM_MODE	telnet.h	162;"	d
LM_SLC	telnet.h	164;"	d
LOADED	mods/weapon.hpp	14;"	d
LOADROOM	mods/flags.hpp	/^		LOADROOM,$/;"	e	enum:mods::flags::plr
LOCK_DOOR	act.movement.cpp	371;"	d	file:
LOC_INVENTORY	objsave.cpp	28;"	d	file:
LOGNAME	config.cpp	/^const char *LOGNAME = NULL;$/;"	v
LONG_RANGE	mods/object.hpp	/^				LONG_RANGE,$/;"	e	enum:mods::object::object_type_enum_t
LONG_STRING	bsd-snprintf.cpp	815;"	d	file:
LOS_SCAN_DIRECTION_DEBUG	mods/scan.cpp	5;"	d	file:
LOS_SCAN_DIRECTION_DEBUG	mods/scan.cpp	7;"	d	file:
LOWER	utils.h	155;"	d
LOWLY_SECURITY_GUARD_WEAR_ABOUT	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_ABOUT,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_ARMS	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_ARMS,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_BACKPACK	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_BACKPACK,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_BODY	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_BODY,"objects\/armor\/basic-ballistic-vest.yml"$/;"	v
LOWLY_SECURITY_GUARD_WEAR_ELBOW_L	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_ELBOW_L,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_ELBOW_R	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_ELBOW_R,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_FEET	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_FEET,"objects\/armor\/basic-boots.yml"$/;"	v
LOWLY_SECURITY_GUARD_WEAR_FINGER_L	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_FINGER_L,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_FINGER_R	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_FINGER_R,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_GOGGLES	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_GOGGLES,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_HANDS	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_HANDS,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_HEAD	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_HEAD,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_HOLD	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_HOLD,"objects\/gadget\/cbradio.yml"$/;"	v
LOWLY_SECURITY_GUARD_WEAR_LEGS	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_LEGS,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_LIGHT	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_LIGHT,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_NECK_1	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_NECK_1,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_NECK_2	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_NECK_2,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_PRIMARY	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_PRIMARY,"objects\/rifle\/hk45.yml"$/;"	v
LOWLY_SECURITY_GUARD_WEAR_SECONDARY	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_SECONDARY,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_SHIELD	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_SHIELD,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_VEST_PACK	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_VEST_PACK,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_WAIST	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_WAIST,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_WIELD	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_WIELD,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_WRIST_L	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_WRIST_L,""$/;"	v
LOWLY_SECURITY_GUARD_WEAR_WRIST_R	mods/values-list.cpp	/^LOWLY_SECURITY_GUARD_WEAR_WRIST_R,""$/;"	v
LOWLY_SECURITY_RANDOM_TRIVIAL_TICK	mods/values-list.cpp	/^LOWLY_SECURITY_RANDOM_TRIVIAL_TICK,60$/;"	v
LOWLY_SECURITY_ROAM_TICK	mods/values-list.cpp	/^LOWLY_SECURITY_ROAM_TICK,20$/;"	v
LOW_ATMOSPHERE	structs.h	/^			LOW_ATMOSPHERE,	\/** atmosphere too thin for helicopter to fly *\/$/;"	m	struct:room_data	typeref:enum:room_data::
LUNATIC_WEAR_ABOUT	mods/values-list.cpp	/^LUNATIC_WEAR_ABOUT,""$/;"	v
LUNATIC_WEAR_ARMS	mods/values-list.cpp	/^LUNATIC_WEAR_ARMS,""$/;"	v
LUNATIC_WEAR_BACKPACK	mods/values-list.cpp	/^LUNATIC_WEAR_BACKPACK,""$/;"	v
LUNATIC_WEAR_BODY	mods/values-list.cpp	/^LUNATIC_WEAR_BODY,"objects\/armor\/weak-tanktop.yml"$/;"	v
LUNATIC_WEAR_ELBOW_L	mods/values-list.cpp	/^LUNATIC_WEAR_ELBOW_L,""$/;"	v
LUNATIC_WEAR_ELBOW_R	mods/values-list.cpp	/^LUNATIC_WEAR_ELBOW_R,""$/;"	v
LUNATIC_WEAR_FEET	mods/values-list.cpp	/^LUNATIC_WEAR_FEET,"objects\/armor\/iconic-shoes.yml"$/;"	v
LUNATIC_WEAR_FINGER_L	mods/values-list.cpp	/^LUNATIC_WEAR_FINGER_L,"objects\/armor\/spiked-skull-ring.yml"$/;"	v
LUNATIC_WEAR_FINGER_R	mods/values-list.cpp	/^LUNATIC_WEAR_FINGER_R,""$/;"	v
LUNATIC_WEAR_GOGGLES	mods/values-list.cpp	/^LUNATIC_WEAR_GOGGLES,"objects\/armor\/idiots-sunglasses.yml"$/;"	v
LUNATIC_WEAR_HANDS	mods/values-list.cpp	/^LUNATIC_WEAR_HANDS,""$/;"	v
LUNATIC_WEAR_HEAD	mods/values-list.cpp	/^LUNATIC_WEAR_HEAD,"objects\/armor\/generic-hat.yml"$/;"	v
LUNATIC_WEAR_HOLD	mods/values-list.cpp	/^LUNATIC_WEAR_HOLD,""$/;"	v
LUNATIC_WEAR_LEGS	mods/values-list.cpp	/^LUNATIC_WEAR_LEGS,"objects\/armor\/generic-red-jeans.yml"$/;"	v
LUNATIC_WEAR_LIGHT	mods/values-list.cpp	/^LUNATIC_WEAR_LIGHT,""$/;"	v
LUNATIC_WEAR_NECK_1	mods/values-list.cpp	/^LUNATIC_WEAR_NECK_1,"objects\/armor\/qi-wol-clock-chain.yml"$/;"	v
LUNATIC_WEAR_NECK_2	mods/values-list.cpp	/^LUNATIC_WEAR_NECK_2,""$/;"	v
LUNATIC_WEAR_PRIMARY	mods/values-list.cpp	/^LUNATIC_WEAR_PRIMARY,"objects\/rifle\/uzi-machine-pistol.yml"$/;"	v
LUNATIC_WEAR_SECONDARY	mods/values-list.cpp	/^LUNATIC_WEAR_SECONDARY,""$/;"	v
LUNATIC_WEAR_SECONDARY_WEAPON	mods/values-list.cpp	/^LUNATIC_WEAR_SECONDARY_WEAPON,""$/;"	v
LUNATIC_WEAR_SHIELD	mods/values-list.cpp	/^LUNATIC_WEAR_SHIELD,""$/;"	v
LUNATIC_WEAR_SHOULDERS_L	mods/values-list.cpp	/^LUNATIC_WEAR_SHOULDERS_L,""$/;"	v
LUNATIC_WEAR_SHOULDERS_R	mods/values-list.cpp	/^LUNATIC_WEAR_SHOULDERS_R,""$/;"	v
LUNATIC_WEAR_VEST_PACK	mods/values-list.cpp	/^LUNATIC_WEAR_VEST_PACK,""$/;"	v
LUNATIC_WEAR_WAIST	mods/values-list.cpp	/^LUNATIC_WEAR_WAIST,"objects\/armor\/plain-black-belt.yml"$/;"	v
LUNATIC_WEAR_WEAPON_ATTACHMENT	mods/values-list.cpp	/^LUNATIC_WEAR_WEAPON_ATTACHMENT,"objects\/attachment\/high-velocity-magazine.yml"$/;"	v
LUNATIC_WEAR_WIELD	mods/values-list.cpp	/^LUNATIC_WEAR_WIELD,"objects\/rifle\/uzi-machine-pistol.yml"$/;"	v
LUNATIC_WEAR_WRIST_L	mods/values-list.cpp	/^LUNATIC_WEAR_WRIST_L,""$/;"	v
LUNATIC_WEAR_WRIST_R	mods/values-list.cpp	/^LUNATIC_WEAR_WRIST_R,""$/;"	v
LVL_BUILDER	structs.h	/^	LVL_BUILDER = 34,$/;"	e	enum:player_level
LVL_BUILDER	structs.h	649;"	d
LVL_FREEZE	structs.h	656;"	d
LVL_GOD	structs.h	/^	LVL_GOD = 32,$/;"	e	enum:player_level
LVL_GOD	structs.h	651;"	d
LVL_GRGOD	structs.h	/^	LVL_GRGOD = 33,$/;"	e	enum:player_level
LVL_GRGOD	structs.h	650;"	d
LVL_IMMORT	structs.h	/^	LVL_IMMORT = 31,$/;"	e	enum:player_level
LVL_IMMORT	structs.h	652;"	d
LVL_IMPL	structs.h	/^	LVL_IMPL = 35$/;"	e	enum:player_level
LVL_IMPL	structs.h	648;"	d
LVL_MORTAL	structs.h	/^	LVL_MORTAL = 0,$/;"	e	enum:player_level
LVL_MORTAL	structs.h	653;"	d
Lambda	mods/acl/lambda.hpp	/^				Lambda(std::function<void (char_data*,char*,int,int)> func,const char* file,const char* command_name) : $/;"	f	class:mods::acl::Lambda
Lambda	mods/acl/lambda.hpp	/^        class Lambda {$/;"	c	namespace:mods::acl
M16A4	mods/orm/marine.hpp	/^		const std::string M16A4 = "M16A4";$/;"	m	struct:mods::orm::marine
M16A4	mods/weapon.hpp	/^			M16A4 = 1,$/;"	e	enum:mods::weapon::marine::primary_choice_t
M3	mods/weapon.hpp	/^			M3 = 1,$/;"	e	enum:mods::weapon::contagion::primary_choice_t
M4	mods/orm/marine.hpp	/^		const std::string M4 = "M4";$/;"	m	struct:mods::orm::marine
M4	mods/weapon.hpp	/^			M4 = 2$/;"	e	enum:mods::weapon::marine::primary_choice_t
MACHETE	mods/object.hpp	/^				MACHETE,$/;"	e	enum:mods::object::object_type_enum_t
MACHETE	mods/weapon.hpp	/^		MACHETE,$/;"	e	enum:mods::weapon::melee_t
MACHINE_PISTOL	mods/weapon.hpp	/^	                 MACHINE_PISTOL = (1 << 7), ENERGY = (1 << 8), FUMES = (1 << 9),$/;"	e	enum:mods::weapon::mask_type
MACHINIST	structs.h	/^	MACHINIST = 20,$/;"	e	enum:player_class_t
MAGAZINE	mods/weapon.hpp	/^		MAGAZINE,$/;"	e	enum:mods::weapon::attachment_t
MAGIC_NUMBER	structs.h	659;"	d
MAGNIFICATION_SIX	mods/weapon.hpp	/^		MAGNIFICATION_SIX,$/;"	e	enum:mods::weapon::scope_t
MAGNIFICATION_TWELVE	mods/weapon.hpp	/^		MAGNIFICATION_TWELVE,$/;"	e	enum:mods::weapon::scope_t
MAG_AFFECTS	spells.h	24;"	d
MAG_ALTER_OBJS	spells.h	27;"	d
MAG_AREAS	spells.h	30;"	d
MAG_CREATIONS	spells.h	32;"	d
MAG_DAMAGE	spells.h	23;"	d
MAG_GROUPS	spells.h	28;"	d
MAG_MANUAL	spells.h	33;"	d
MAG_MASSES	spells.h	29;"	d
MAG_POINTS	spells.h	26;"	d
MAG_SUMMONS	spells.h	31;"	d
MAG_UNAFFECTS	spells.h	25;"	d
MAILING	mods/flags.hpp	/^		MAILING,$/;"	e	enum:mods::flags::plr
MAIL_FILE	db.h	96;"	d
MAIN_PLAYER_INDEX	mods/player-scaffolding.hpp	/^		constexpr static std::size_t MAIN_PLAYER_INDEX = 0;$/;"	m	struct:mods::player_scaffolding
MALADY	structs.h	/^	MALADY = 15,$/;"	e	enum:player_class_t
MANIC	mods/ai_state.hpp	/^				MANIC,CHAOTIC,RESERVED$/;"	e	enum:mods::ai_state::state
MANUAL_SAVE_ACMD	mods/players/db-load.hpp	/^		MANUAL_SAVE_ACMD,$/;"	e	enum:mods::players::db_load::save_from_t
MANUAL_SPELL	spells.h	259;"	d
MARINE	mods/classes/types.hpp	/^		MARINE,$/;"	e	enum:mods::classes::types
MARINE	structs.h	/^	MARINE = 2,$/;"	e	enum:player_class_t
MARINE_NONE	mods/weapon.hpp	/^			MARINE_NONE = 0,$/;"	e	enum:mods::weapon::marine::primary_choice_t
MARINE_PRIMARY_M16A4	mods/weapon.hpp	/^			MARINE_PRIMARY_M16A4 = 1,$/;"	e	enum:mods::weapon::marine::primary_choice_t
MARINE_PRIMARY_M4	mods/weapon.hpp	/^			MARINE_PRIMARY_M4 = 2,$/;"	e	enum:mods::weapon::marine::primary_choice_t
MARK	graph.cpp	53;"	d	file:
MARKSMAN	structs.h	/^	MARKSMAN = 10,$/;"	e	enum:player_class_t
MAR_STR	mods/weapon.hpp	473;"	d
MAR_STR	mods/weapon.hpp	483;"	d
MAR_STR	mods/weapon.hpp	494;"	d
MAR_STR	mods/weapon.hpp	504;"	d
MAR_STR	mods/weapon.hpp	515;"	d
MAR_STR	mods/weapon.hpp	525;"	d
MAR_STR	mods/weapon.hpp	536;"	d
MAR_STR	mods/weapon.hpp	549;"	d
MAR_STR	mods/weapon.hpp	560;"	d
MAR_STR	mods/weapon.hpp	570;"	d
MAR_STR	mods/weapon.hpp	581;"	d
MAR_STR	mods/weapon.hpp	591;"	d
MASTER	mods/skills.hpp	/^	MASTER = 3$/;"	e	enum:uint8_t
MAX	bsd-snprintf.cpp	97;"	d	file:
MAX	utils.cpp	/^int MAX(int a, int b) {$/;"	f
MAX	utils.h	75;"	d
MAXGAIN	spec_procs.cpp	135;"	d	file:
MAX_AFFECT	structs.h	705;"	d
MAX_AOE_TRIGGERS	mods/yaml.hpp	/^	constexpr static std::size_t MAX_AOE_TRIGGERS = 6;$/;"	m	namespace:mods::yaml
MAX_ATTRIBUTES	mods/fluxkraft/generator.cpp	/^	static constexpr uint8_t MAX_ATTRIBUTES = 35;$/;"	m	namespace:mods::fluxkraft	file:
MAX_ATTRIBUTES	mods/forge-engine/generator.cpp	/^	static constexpr uint8_t MAX_ATTRIBUTES = 35;$/;"	m	namespace:mods::forge_engine	file:
MAX_BAG_ROWS	objsave.cpp	29;"	d	file:
MAX_BOARD_MESSAGES	boards.h	12;"	d
MAX_DEPTH	mods/scan.cpp	/^	constexpr static std::size_t MAX_DEPTH = 6;$/;"	m	namespace:mods::scan	file:
MAX_EXPLOSION_FADE_OUT	structs.h	/^constexpr static std::size_t MAX_EXPLOSION_FADE_OUT = 5;$/;"	v
MAX_FORGE_ENGINE_VALUE	mods/fluxkraft/generator.hpp	/^	static constexpr random_number_type_t MAX_FORGE_ENGINE_VALUE = 4294967295;$/;"	m	namespace:mods::fluxkraft
MAX_FORGE_ENGINE_VALUE	mods/forge-engine/generator.hpp	/^	static constexpr random_number_type_t MAX_FORGE_ENGINE_VALUE = 4294967295;$/;"	m	namespace:mods::forge_engine
MAX_GUESTS	house.h	2;"	d
MAX_HOUSES	house.h	1;"	d
MAX_INPUT_LENGTH	structs.h	695;"	d
MAX_INVALID_NAMES	ban.cpp	245;"	d	file:
MAX_MAIL_SIZE	mail.h	26;"	d
MAX_MESSAGES	structs.h	697;"	d
MAX_MESSAGE_LENGTH	boards.h	13;"	d
MAX_MOB_DESC	olc.h	18;"	d
MAX_MOB_NAME	olc.h	15;"	d
MAX_NAME_LENGTH	structs.h	698;"	d
MAX_NOTE_LENGTH	structs.h	707;"	d
MAX_OBJ_AFFECT	structs.h	706;"	d
MAX_OBJ_DESC	olc.h	19;"	d
MAX_OBJ_NAME	olc.h	16;"	d
MAX_OPER	shop.h	131;"	d
MAX_OUTSIDE_BANK	shop.h	171;"	d
MAX_PER_PRAC	spec_procs.cpp	126;"	d	file:
MAX_PLAYER_LEVEL	mods/levels.cpp	/^	static constexpr uint8_t MAX_PLAYER_LEVEL = 30;$/;"	m	namespace:mods::levels	file:
MAX_PROD	shop.h	83;"	d
MAX_PROMPT_LENGTH	structs.h	687;"	d
MAX_PWD_LENGTH	structs.h	699;"	d
MAX_RANGE	mods/weapon.hpp	/^	static constexpr uint8_t MAX_RANGE = 4;$/;"	m	namespace:mods::weapon
MAX_RAW_INPUT_LENGTH	structs.h	696;"	d
MAX_RIFLE_STAT_BOOSTS	mods/fluxkraft/generator.cpp	/^	static constexpr uint8_t MAX_RIFLE_STAT_BOOSTS = 35;$/;"	m	namespace:mods::fluxkraft	file:
MAX_RIFLE_STAT_BOOSTS	mods/forge-engine/generator.cpp	/^	static constexpr uint8_t MAX_RIFLE_STAT_BOOSTS = 35;$/;"	m	namespace:mods::forge_engine	file:
MAX_ROOM_DESC	olc.h	17;"	d
MAX_ROOM_DISTANCE	mods/weapon.hpp	/^		constexpr static uint8_t MAX_ROOM_DISTANCE = 10;$/;"	m	namespace:mods::weapon::yaml
MAX_ROOM_DISTANCE	mods/yaml.hpp	/^	constexpr static uint8_t MAX_ROOM_DISTANCE = 4;$/;"	m	namespace:mods::yaml
MAX_ROOM_NAME	olc.h	14;"	d
MAX_SHOP_OBJ	shop.h	85;"	d
MAX_SKILLS	structs.h	704;"	d
MAX_SOCK_BUF	structs.h	686;"	d
MAX_SPELLS	spells.h	93;"	d
MAX_SPELL_AFFECTS	magic.cpp	323;"	d	file:
MAX_STRING_LENGTH	structs.h	694;"	d
MAX_TITLE_LENGTH	structs.h	700;"	d
MAX_TONGUE	structs.h	703;"	d
MAX_TRADE	shop.h	82;"	d
MEDIC	mods/classes/types.hpp	/^		MEDIC,$/;"	e	enum:mods::classes::types
MEDIC	structs.h	/^	MEDIC = 6,$/;"	e	enum:player_class_t
MEDIC_NONE	mods/weapon.hpp	/^			MEDIC_NONE = 0,$/;"	e	enum:mods::weapon::medic::primary_choice_t
MEDIC_PRIMARY_AUGPARA	mods/weapon.hpp	/^			MEDIC_PRIMARY_AUGPARA = 1,$/;"	e	enum:mods::weapon::medic::primary_choice_t
MEDIC_PRIMARY_TAR21	mods/weapon.hpp	/^			MEDIC_PRIMARY_TAR21 = 2,$/;"	e	enum:mods::weapon::medic::primary_choice_t
MELEE	mods/levels.hpp	/^	MELEE = 0,$/;"	e	enum:uint8_t
MELEE_NONE	mods/item-types.hpp	/^		MELEE_NONE = 0,$/;"	e	enum:mods::weapon::type::melee
MELEE_STUB	mods/yaml.cpp	12;"	d	file:
MEMORY	utils.h	355;"	d
MENTOC_ABIL_SET	db.cpp	923;"	d	file:
MENTOC_ACT	mods/rate-limiting.cpp	33;"	d	file:
MENTOC_ACT	mods/rate-limiting.cpp	39;"	d	file:
MENTOC_ACT	mods/rate-limiting.cpp	42;"	d	file:
MENTOC_ARMOR_MEMBERS_TUPLE	mods/item-types.hpp	394;"	d
MENTOC_ARMOR_TYPES_SEQUENCE	mods/item-types.hpp	375;"	d
MENTOC_ATTACHMENT_MEMBERS_TUPLE	mods/item-types.hpp	347;"	d
MENTOC_ATTACHMENT_TYPES_SEQUENCE	mods/item-types.hpp	338;"	d
MENTOC_BASE_MEMBERS_SET	mods/yaml.hpp	55;"	d
MENTOC_BITVECTOR	mods/builder.cpp	3990;"	d	file:
MENTOC_CF	mods/yaml.hpp	102;"	d
MENTOC_CF	mods/yaml.hpp	84;"	d
MENTOC_CF	mods/yaml.hpp	89;"	d
MENTOC_CF	mods/yaml.hpp	93;"	d
MENTOC_CONSUMABLE_MEMBERS_TUPLE	mods/item-types.hpp	442;"	d
MENTOC_CONSUMABLE_TYPES_SEQUENCE	mods/item-types.hpp	433;"	d
MENTOC_CONTAINER_MEMBERS_TUPLE	mods/item-types.hpp	118;"	d
MENTOC_CONTAINER_TYPES_SEQUENCE	mods/item-types.hpp	109;"	d
MENTOC_DATA_CLASS	mods/weapon-types.hpp	137;"	d
MENTOC_DATA_CLASS	mods/weapon-types.hpp	86;"	d
MENTOC_DATA_OBJ	structs.h	929;"	d
MENTOC_DATA_OBJ	structs.h	960;"	d
MENTOC_DECLARE_DATA_STRUCTS	mods/item-types.hpp	540;"	d
MENTOC_DECLARE_DATA_STRUCTS_IMPL	mods/item-types.hpp	532;"	d
MENTOC_DEFER	globals.hpp	22;"	d
MENTOC_DEPRECATED	globals.hpp	40;"	d
MENTOC_DP	mods/yaml.hpp	106;"	d
MENTOC_DP	mods/yaml.hpp	119;"	d
MENTOC_DP	mods/yaml.hpp	123;"	d
MENTOC_DP	mods/yaml.hpp	132;"	d
MENTOC_DRONE_MEMBERS_TUPLE	mods/item-types.hpp	298;"	d
MENTOC_DRONE_TYPES_SEQUENCE	mods/item-types.hpp	294;"	d
MENTOC_ELEMENTAL_TYPES_SEQUENCE	mods/item-types.hpp	237;"	d
MENTOC_ENUM_TYPES_IMPL	mods/item-types.hpp	563;"	d
MENTOC_EXAMPLE_ARMORS	mods/item-types.hpp	712;"	d
MENTOC_EXAMPLE_ATTACHMENTS	mods/item-types.hpp	679;"	d
MENTOC_EXAMPLE_CONSUMABLE	mods/item-types.hpp	722;"	d
MENTOC_EXAMPLE_CONTAINERS	mods/item-types.hpp	658;"	d
MENTOC_EXAMPLE_DRONES	mods/item-types.hpp	669;"	d
MENTOC_EXAMPLE_EXPLOSIVES	mods/item-types.hpp	701;"	d
MENTOC_EXAMPLE_GADGETS	mods/item-types.hpp	647;"	d
MENTOC_EXAMPLE_IMPL	mods/item-types.hpp	574;"	d
MENTOC_EXAMPLE_MELEE	mods/item-types.hpp	743;"	d
MENTOC_EXAMPLE_RIFLES	mods/item-types.hpp	690;"	d
MENTOC_EXAMPLE_TRAP	mods/item-types.hpp	732;"	d
MENTOC_EXAMPLE_VEHICLE	mods/item-types.hpp	753;"	d
MENTOC_EXPLOSIVE_MEMBERS_TUPLE	mods/item-types.hpp	261;"	d
MENTOC_EXPLOSIVE_TYPES_SEQUENCE	mods/item-types.hpp	247;"	d
MENTOC_EX_CHECK	mods/intent.cpp	53;"	d	file:
MENTOC_EX_CHECK	mods/intent.cpp	67;"	d	file:
MENTOC_FEED_ARMOR	mods/item-types.hpp	708;"	d
MENTOC_FEED_ATTACHMENT	mods/item-types.hpp	675;"	d
MENTOC_FEED_BASE_MEMBERS	mods/yaml.cpp	42;"	d	file:
MENTOC_FEED_CONSUMABLE	mods/item-types.hpp	718;"	d
MENTOC_FEED_CONTAINER	mods/item-types.hpp	654;"	d
MENTOC_FEED_DEFAULTED_VALUE	mods/item-types.hpp	614;"	d
MENTOC_FEED_DEFAULTED_VALUE	mods/item-types.hpp	616;"	d
MENTOC_FEED_DRONE	mods/item-types.hpp	665;"	d
MENTOC_FEED_EXPLOSIVE	mods/item-types.hpp	697;"	d
MENTOC_FEED_GADGET	mods/item-types.hpp	643;"	d
MENTOC_FEED_MELEE	mods/item-types.hpp	739;"	d
MENTOC_FEED_PARSE_ACTUAL_IMPL	mods/item-types.hpp	624;"	d
MENTOC_FEED_PARSE_ALL_IMPL	mods/item-types.hpp	635;"	d
MENTOC_FEED_REPORT_FIELD	mods/item-types.hpp	619;"	d
MENTOC_FEED_REPORT_FIELD	mods/item-types.hpp	621;"	d
MENTOC_FEED_RIFLE	mods/item-types.hpp	686;"	d
MENTOC_FEED_TRAP	mods/item-types.hpp	728;"	d
MENTOC_FEED_TYPE_IMPL	mods/item-types.hpp	569;"	d
MENTOC_FEED_VEHICLE	mods/item-types.hpp	749;"	d
MENTOC_FILE_EXISTS_PREAMBLE	mods/yaml.cpp	35;"	d	file:
MENTOC_F_EXA	act.builder.cpp	490;"	d	file:
MENTOC_F_EXA	act.builder.cpp	507;"	d	file:
MENTOC_F_IMPORT	mods/object-utils.hpp	303;"	d
MENTOC_F_IMPORT	mods/object-utils.hpp	321;"	d
MENTOC_GADGET_MEMBERS_TUPLE	mods/item-types.hpp	324;"	d
MENTOC_GADGET_TYPES_SEQUENCE	mods/item-types.hpp	313;"	d
MENTOC_GENERATE_MAP	mods/item-types.hpp	601;"	d
MENTOC_GENERATE_MAP_IMPL	mods/item-types.hpp	586;"	d
MENTOC_GENERIC_WEARS_IMPL	mods/item-types.hpp	519;"	d
MENTOC_HACK_USED	mods/chat.hpp	13;"	d
MENTOC_HACK_USED	mods/chat.hpp	54;"	d
MENTOC_INITIALIZE	mods/item-types.hpp	598;"	d
MENTOC_INITIALIZE_IMPL	mods/item-types.hpp	594;"	d
MENTOC_ITEM_PARSE	mods/util.cpp	962;"	d	file:
MENTOC_ITEM_PARSE	mods/util.cpp	968;"	d	file:
MENTOC_ITEM_PARSE	mods/util.cpp	975;"	d	file:
MENTOC_ITEM_PARSE_IMPL	mods/util.cpp	958;"	d	file:
MENTOC_ITEM_PARSE_IMPL	mods/util.cpp	967;"	d	file:
MENTOC_ITEM_PARSE_IMPL	mods/util.cpp	971;"	d	file:
MENTOC_ITEM_TYPES_BY_CAPS_SEQ	mods/item-types.hpp	38;"	d
MENTOC_ITEM_TYPES_CAPS_SEQ	mods/item-types.hpp	25;"	d
MENTOC_ITEM_TYPES_SEQ	mods/item-types.hpp	12;"	d
MENTOC_ITEM_TYPES_SEQ_CAPS	mods/item-types.hpp	87;"	d
MENTOC_ITEM_TYPE_LIST_SEQUENCE	mods/item-types.hpp	497;"	d
MENTOC_LAZY	mods/orm/room.cpp	111;"	d	file:
MENTOC_LAZY	mods/orm/room.cpp	134;"	d	file:
MENTOC_LAZY	mods/orm/room.cpp	141;"	d	file:
MENTOC_LAZY	mods/orm/room.cpp	168;"	d	file:
MENTOC_LAZY	mods/rooms.hpp	100;"	d
MENTOC_LAZY	mods/rooms.hpp	118;"	d
MENTOC_LAZY_COMP	mods/doors.hpp	276;"	d
MENTOC_LAZY_COMP	mods/doors.hpp	287;"	d
MENTOC_LAZY_INT	mods/builder.cpp	1813;"	d	file:
MENTOC_LAZY_INT	mods/builder.cpp	1832;"	d	file:
MENTOC_LAZY_ME	mods/builder.cpp	3410;"	d	file:
MENTOC_LAZY_ME	mods/builder.cpp	3419;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	865;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	877;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	884;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	896;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	897;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	909;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	916;"	d	file:
MENTOC_LAZY_ME	mods/util.cpp	928;"	d	file:
MENTOC_LAZY_POS	act.debug.cpp	221;"	d	file:
MENTOC_LAZY_POS	act.debug.cpp	235;"	d	file:
MENTOC_LAZY_POS	act.debug.cpp	246;"	d	file:
MENTOC_LAZY_POS	act.debug.cpp	268;"	d	file:
MENTOC_LAZY_SHOP	mods/builder.cpp	1903;"	d	file:
MENTOC_LAZY_SHOP	mods/builder.cpp	1928;"	d	file:
MENTOC_LAZY_SHOP	mods/builder.cpp	67;"	d	file:
MENTOC_LAZY_SHOP	mods/builder.cpp	92;"	d	file:
MENTOC_LAZY_STR	mods/builder.cpp	1797;"	d	file:
MENTOC_LAZY_STR	mods/builder.cpp	1812;"	d	file:
MENTOC_LIST_EXTRACT	mods/builder.hpp	165;"	d
MENTOC_MELEE_MEMBERS_TUPLE	mods/item-types.hpp	204;"	d
MENTOC_MELEE_TYPES_SEQUENCE	mods/item-types.hpp	200;"	d
MENTOC_MEMBER_VARS_EXAMPLE_FOR	mods/item-types.hpp	604;"	d
MENTOC_MEMBER_VARS_EXAMPLE_IMPL	mods/item-types.hpp	577;"	d
MENTOC_MEMBER_VARS_FOR	mods/item-types.hpp	607;"	d
MENTOC_MEMBER_VARS_IMPL	mods/item-types.hpp	610;"	d
MENTOC_MOB_WEARS	mods/item-types.hpp	521;"	d
MENTOC_MS_COMP	mods/doors.hpp	258;"	d
MENTOC_MS_COMP	mods/doors.hpp	273;"	d
MENTOC_NPC_CHECK	mods/player.cpp	82;"	d	file:
MENTOC_NPC_CHECK_0	mods/player.cpp	83;"	d	file:
MENTOC_OBI	mods/builder.cpp	40;"	d	file:
MENTOC_OBI2	mods/builder.cpp	41;"	d	file:
MENTOC_OBJ_DATA_FEED_DUAL	structs.cpp	68;"	d	file:
MENTOC_OBJ_DATA_FEED_SWITCH	mods/item-types.hpp	557;"	d
MENTOC_OBJ_DATA_FEED_SWITCH_IMPL	mods/item-types.hpp	551;"	d
MENTOC_OBJ_DATA_STAT_GEN	structs.cpp	89;"	d	file:
MENTOC_OBJ_INITIALIZE_CONSTRUCTOR	structs.cpp	47;"	d	file:
MENTOC_OBS	mods/builder.cpp	42;"	d	file:
MENTOC_OBS2	mods/builder.cpp	43;"	d	file:
MENTOC_PAGINATED_LIST	mods/builder.hpp	196;"	d
MENTOC_PLAYER_NULL_CHECK	mods/builder.cpp	1181;"	d	file:
MENTOC_PREAMBLE	globals.hpp	20;"	d
MENTOC_RIFLE_MEMBERS_TUPLE	mods/item-types.hpp	156;"	d
MENTOC_RIFLE_TYPES_SEQUENCE	mods/item-types.hpp	147;"	d
MENTOC_S	mods/orm/room.cpp	117;"	d	file:
MENTOC_S	mods/orm/room.cpp	135;"	d	file:
MENTOC_S	mods/orm/room.cpp	148;"	d	file:
MENTOC_S	mods/orm/room.cpp	169;"	d	file:
MENTOC_SHOW_FLAG	mods/builder.cpp	4026;"	d	file:
MENTOC_SHOW_OBJ	mods/builder.cpp	2765;"	d	file:
MENTOC_SHOW_OBJ_BITVECTOR	mods/builder.cpp	2757;"	d	file:
MENTOC_SHOW_OBJ_FLAGS	mods/builder.cpp	2749;"	d	file:
MENTOC_T	mods/aoe.hpp	32;"	d
MENTOC_T	mods/aoe.hpp	55;"	d
MENTOC_T	mods/lmdb.hpp	68;"	d
MENTOC_T	mods/lmdb.hpp	83;"	d
MENTOC_TO_STR	mods/weapon.hpp	183;"	d
MENTOC_TO_STR	mods/weapon.hpp	197;"	d
MENTOC_TO_STR	mods/weapon.hpp	202;"	d
MENTOC_TO_STR	mods/weapon.hpp	209;"	d
MENTOC_TO_STR	mods/weapon.hpp	215;"	d
MENTOC_TO_STR	mods/weapon.hpp	221;"	d
MENTOC_TO_STR	mods/weapon.hpp	226;"	d
MENTOC_TO_STR	mods/weapon.hpp	244;"	d
MENTOC_TO_STR	mods/weapon.hpp	249;"	d
MENTOC_TO_STR	mods/weapon.hpp	260;"	d
MENTOC_TO_STR	mods/weapon.hpp	265;"	d
MENTOC_TO_STR	mods/weapon.hpp	272;"	d
MENTOC_TO_STR	mods/weapon.hpp	276;"	d
MENTOC_TO_STR	mods/weapon.hpp	285;"	d
MENTOC_TO_STR	mods/weapon.hpp	289;"	d
MENTOC_TO_STR	mods/weapon.hpp	302;"	d
MENTOC_TO_STR	mods/weapon.hpp	306;"	d
MENTOC_TO_STR	mods/weapon.hpp	322;"	d
MENTOC_TO_STR	mods/weapon.hpp	326;"	d
MENTOC_TO_STR	mods/weapon.hpp	338;"	d
MENTOC_TO_STR	mods/weapon.hpp	342;"	d
MENTOC_TO_STR	mods/weapon.hpp	349;"	d
MENTOC_TRAP_MEMBERS_TUPLE	mods/item-types.hpp	484;"	d
MENTOC_TRAP_TYPES_SEQUENCE	mods/item-types.hpp	481;"	d
MENTOC_TYPE	mods/builder.cpp	3964;"	d	file:
MENTOC_TYPE_LIST_IMPL	mods/item-types.hpp	837;"	d
MENTOC_UPTR	structs.h	1031;"	d
MENTOC_UPTR	structs.h	1033;"	d
MENTOC_USING_CT	mods/item-types.hpp	515;"	d
MENTOC_USING_CT_IMPL	mods/item-types.hpp	512;"	d
MENTOC_VEHICLE_MEMBERS_TUPLE	mods/item-types.hpp	133;"	d
MENTOC_VEHICLE_TYPES_SEQUENCE	mods/item-types.hpp	122;"	d
MENTOC_WEAPON	mods/builder.cpp	273;"	d	file:
MENTOC_WEAPON	mods/builder.cpp	290;"	d	file:
MENTOC_WEAR	mods/builder.cpp	3947;"	d	file:
MENTOC_WEAR_PLACES_SEQ	mods/item-types.hpp	51;"	d
MENTOC_YAML_DESC	mods/item-types.hpp	529;"	d
MENTOC_YAML_DESC_IMPL	mods/item-types.hpp	528;"	d
MENU	config.cpp	/^const char *MENU =$/;"	v
MESS_FILE	db.h	91;"	d
METAL_HATCH	structs.h	/^			METAL_HATCH,$/;"	m	struct:room_data	typeref:enum:room_data::
METAL_WALL	structs.h	/^			METAL_WALL,$/;"	m	struct:room_data	typeref:enum:room_data::
MFEEDBACK	mods/weapons/damage-types.cpp	455;"	d	file:
MG_REPORT	mods/mobs/lowly-security.cpp	87;"	d	file:
MG_REPORT	mods/mobs/lowly-security.cpp	96;"	d	file:
MG_REPORT	mods/mobs/mini-gunner.cpp	86;"	d	file:
MG_REPORT	mods/mobs/mini-gunner.cpp	95;"	d	file:
MG_REPORT	mods/mobs/smart-mob.cpp	28;"	d	file:
MG_REPORT	mods/mobs/smart-mob.cpp	37;"	d	file:
MIN	utils.cpp	/^int MIN(int a, int b) {$/;"	f
MIN	utils.h	79;"	d
MINDEX_FILE	db.h	67;"	d
MINGAIN	spec_procs.cpp	134;"	d	file:
MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS	mods/values-list.cpp	/^MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS,""$/;"	v
MINI_GUNNER_RANDOM_DISORIENT_STRINGS	mods/values-list.cpp	/^MINI_GUNNER_RANDOM_DISORIENT_STRINGS,""$/;"	v
MINI_GUNNER_WEAR_ABOUT	mods/values-list.cpp	/^MINI_GUNNER_WEAR_ABOUT,""$/;"	v
MINI_GUNNER_WEAR_ARMS	mods/values-list.cpp	/^MINI_GUNNER_WEAR_ARMS,""$/;"	v
MINI_GUNNER_WEAR_BACKPACK	mods/values-list.cpp	/^MINI_GUNNER_WEAR_BACKPACK,"objects\/armor\/ammo-backpack.yml"$/;"	v
MINI_GUNNER_WEAR_BODY	mods/values-list.cpp	/^MINI_GUNNER_WEAR_BODY,"objects\/armor\/vanguard-spiked-vest.yml"$/;"	v
MINI_GUNNER_WEAR_ELBOW_L	mods/values-list.cpp	/^MINI_GUNNER_WEAR_ELBOW_L,""$/;"	v
MINI_GUNNER_WEAR_ELBOW_R	mods/values-list.cpp	/^MINI_GUNNER_WEAR_ELBOW_R,"objects\/armor\/vanguard-elbow-guard.yml"$/;"	v
MINI_GUNNER_WEAR_FEET	mods/values-list.cpp	/^MINI_GUNNER_WEAR_FEET,"objects\/armor\/phagia-corps-ballistic-boots.yml"$/;"	v
MINI_GUNNER_WEAR_FINGER_L	mods/values-list.cpp	/^MINI_GUNNER_WEAR_FINGER_L,""$/;"	v
MINI_GUNNER_WEAR_FINGER_R	mods/values-list.cpp	/^MINI_GUNNER_WEAR_FINGER_R,""$/;"	v
MINI_GUNNER_WEAR_GOGGLES	mods/values-list.cpp	/^MINI_GUNNER_WEAR_GOGGLES,"objects\/armor\/ballistic-eye-gaurd.yml"$/;"	v
MINI_GUNNER_WEAR_HANDS	mods/values-list.cpp	/^MINI_GUNNER_WEAR_HANDS,"objects\/armor\/weight-lifting-gloves.yml"$/;"	v
MINI_GUNNER_WEAR_HEAD	mods/values-list.cpp	/^MINI_GUNNER_WEAR_HEAD,"objects\/armor\/ballistic-helmet.yml"$/;"	v
MINI_GUNNER_WEAR_HOLD	mods/values-list.cpp	/^MINI_GUNNER_WEAR_HOLD,""$/;"	v
MINI_GUNNER_WEAR_LEGS	mods/values-list.cpp	/^MINI_GUNNER_WEAR_LEGS,""$/;"	v
MINI_GUNNER_WEAR_LIGHT	mods/values-list.cpp	/^MINI_GUNNER_WEAR_LIGHT,""$/;"	v
MINI_GUNNER_WEAR_NECK_1	mods/values-list.cpp	/^MINI_GUNNER_WEAR_NECK_1,""$/;"	v
MINI_GUNNER_WEAR_NECK_2	mods/values-list.cpp	/^MINI_GUNNER_WEAR_NECK_2,""$/;"	v
MINI_GUNNER_WEAR_PRIMARY	mods/values-list.cpp	/^MINI_GUNNER_WEAR_PRIMARY,"objects\/rifle\/belt-fed-minigun.yml"$/;"	v
MINI_GUNNER_WEAR_SECONDARY	mods/values-list.cpp	/^MINI_GUNNER_WEAR_SECONDARY,""$/;"	v
MINI_GUNNER_WEAR_SECONDARY_WEAPON	mods/values-list.cpp	/^MINI_GUNNER_WEAR_SECONDARY_WEAPON,""$/;"	v
MINI_GUNNER_WEAR_SHIELD	mods/values-list.cpp	/^MINI_GUNNER_WEAR_SHIELD,""$/;"	v
MINI_GUNNER_WEAR_SHOULDERS_L	mods/values-list.cpp	/^MINI_GUNNER_WEAR_SHOULDERS_L,"objects\/armor\/vanguard-shoulder-pad.yml"$/;"	v
MINI_GUNNER_WEAR_SHOULDERS_R	mods/values-list.cpp	/^MINI_GUNNER_WEAR_SHOULDERS_R,"objects\/armor\/vanguard-shoulder-pad.yml"$/;"	v
MINI_GUNNER_WEAR_VEST_PACK	mods/values-list.cpp	/^MINI_GUNNER_WEAR_VEST_PACK,""$/;"	v
MINI_GUNNER_WEAR_WAIST	mods/values-list.cpp	/^MINI_GUNNER_WEAR_WAIST,""$/;"	v
MINI_GUNNER_WEAR_WEAPON_ATTACHMENT	mods/values-list.cpp	/^MINI_GUNNER_WEAR_WEAPON_ATTACHMENT,"objects\/attachment\/belt-feeder.yml"$/;"	v
MINI_GUNNER_WEAR_WIELD	mods/values-list.cpp	/^MINI_GUNNER_WEAR_WIELD,"objects\/rifle\/belt-fed-minigun.yml"$/;"	v
MINI_GUNNER_WEAR_WRIST_L	mods/values-list.cpp	/^MINI_GUNNER_WEAR_WRIST_L,""$/;"	v
MINI_GUNNER_WEAR_WRIST_R	mods/values-list.cpp	/^MINI_GUNNER_WEAR_WRIST_R,""$/;"	v
MIN_MAIL_LEVEL	mail.h	20;"	d
MIN_OUTSIDE_BANK	shop.h	170;"	d
MIN_PER_PRAC	spec_procs.cpp	127;"	d	file:
MISC	act.wizard.cpp	2290;"	d	file:
MK46	mods/orm/support.hpp	/^		const std::string MK46 = "MK46";$/;"	m	struct:mods::orm::support
MK46	mods/weapon.hpp	/^			MK46 = 1,$/;"	e	enum:mods::weapon::support::primary_choice_t
MOB	mods/mobs/mob.hpp	/^				PLAYER, MOB, DRONE$/;"	e	enum:mods::player::player_type_enum_t
MOB	mods/player.hpp	/^				PLAYER, MOB, DRONE,$/;"	e	enum:mods::player::player_type_enum_t
MOBILITY_RESTRICTING_FOAM	mods/aoe.hpp	/^		MOBILITY_RESTRICTING_FOAM,	\/** A foam that restricts enemy movement once dried. Dries fast *\/$/;"	e	enum:mods::aoe::types_t
MOBTOSTR	globals.hpp	41;"	d
MOB_AERIALSERVANT	magic.cpp	793;"	d	file:
MOB_AGGRESSIVE	structs.h	298;"	d
MOB_AGGR_EVIL	structs.h	301;"	d
MOB_AGGR_GOOD	structs.h	302;"	d
MOB_AGGR_NEUTRAL	structs.h	303;"	d
MOB_AGGR_TO_ALIGN	mobact.cpp	42;"	d	file:
MOB_AWARE	structs.h	297;"	d
MOB_CLONE	magic.cpp	791;"	d	file:
MOB_DOESNT_EXIST	mods/behaviour_tree_impl.hpp	/^		MOB_DOESNT_EXIST$/;"	e	enum:mods::behaviour_tree_impl::dispatch_status_t
MOB_DOESNT_EXIST	mods/behaviour_tree_status.hpp	/^		MOB_DOESNT_EXIST$/;"	e	enum:mods::behaviour_tree_status
MOB_ELEMENTAL_BASE	magic.cpp	790;"	d	file:
MOB_FLAGGED	utils.h	235;"	d
MOB_FLAGS	utils.h	220;"	d
MOB_GATE_I	magic.cpp	785;"	d	file:
MOB_GATE_II	magic.cpp	786;"	d	file:
MOB_GATE_III	magic.cpp	787;"	d	file:
MOB_HELPER	structs.h	305;"	d
MOB_ISNPC	structs.h	296;"	d
MOB_MEMORY	structs.h	304;"	d
MOB_MONSUM_I	magic.cpp	782;"	d	file:
MOB_MONSUM_II	magic.cpp	783;"	d	file:
MOB_MONSUM_III	magic.cpp	784;"	d	file:
MOB_MUTED_DESCRIPTOR	mods/player.hpp	/^				MOB_MUTED_DESCRIPTOR,$/;"	e	enum:mods::player::player_type_enum_t
MOB_NOBASH	structs.h	309;"	d
MOB_NOBLIND	structs.h	310;"	d
MOB_NOCHARM	structs.h	306;"	d
MOB_NOSLEEP	structs.h	308;"	d
MOB_NOSUMMON	structs.h	307;"	d
MOB_NOTDEADYET	structs.h	311;"	d
MOB_PREFIX	db.h	69;"	d
MOB_RNUM	mods/builder.cpp	/^	MOB_RNUM,$/;"	e	enum:field_type_t	file:
MOB_SCAVENGER	structs.h	295;"	d
MOB_SENTINEL	structs.h	294;"	d
MOB_SPEC	structs.h	293;"	d
MOB_STAY_ZONE	structs.h	299;"	d
MOB_VNUM	mods/builder.cpp	/^	MOB_VNUM,$/;"	e	enum:field_type_t	file:
MOB_WIMPY	structs.h	300;"	d
MOB_ZOMBIE	magic.cpp	792;"	d	file:
MODE_ACK	telnet.h	168;"	d
MODE_ECHO	telnet.h	176;"	d
MODE_EDIT	telnet.h	166;"	d
MODE_FLOW	telnet.h	175;"	d
MODE_FORCE	telnet.h	179;"	d
MODE_INBIN	telnet.h	177;"	d
MODE_LIT_ECHO	telnet.h	170;"	d
MODE_MASK	telnet.h	172;"	d
MODE_OUTBIN	telnet.h	178;"	d
MODE_SOFT_TAB	telnet.h	169;"	d
MODE_TRAPSIG	telnet.h	167;"	d
MODS_BREACH_DISORIENT	globals.cpp	35;"	d	file:
MODS_GRENADE_BASE_DAMAGE	globals.cpp	36;"	d	file:
MOD_AGGRESSION_CHANCE	mods/ai_state.cpp	17;"	d	file:
MOD_AGGRESSION_MODIFIER	mods/ai_state.cpp	16;"	d	file:
MOD_LENIENT_MAX	mods/ai_state.hpp	17;"	d
MOD_SNIPE_AGGRESSION	mods/ai_state.cpp	14;"	d	file:
MOD_SNIPE_DISTANCE_THACO	fight.cpp	31;"	d	file:
MOD_SNIPE_SAME_ROOM_THACO	fight.cpp	30;"	d	file:
MOD_SNIPE_THRESHOLD	mods/ai_state.cpp	15;"	d	file:
MOD_SUSPICIOUS_MAX	mods/ai_state.hpp	18;"	d
MOD_WANDER_SAY_DIVISOR	mods/ai_state.cpp	18;"	d	file:
MOD_WANDER_SAY_TOP	mods/ai_state.cpp	19;"	d	file:
MORT_CAN_SEE	utils.h	447;"	d
MORT_CAN_SEE_OBJ	utils.h	470;"	d
MOTD_FILE	db.h	77;"	d
MOTORCYCLE	mods/weapon.hpp	/^		MOTORCYCLE,$/;"	e	enum:mods::weapon::vehicle_t
MP5	mods/orm/breacher.hpp	/^		const std::string MP5 = "MP5";$/;"	m	struct:mods::orm::breacher
MP5	mods/weapon.hpp	/^			MP5 = 1,$/;"	e	enum:mods::weapon::breacher::primary_choice_t
MP5	mods/weapon.hpp	/^			MP5 = 1,$/;"	e	enum:mods::weapon::sentinel::primary_choice_t
MR	mods/player.cpp	1584;"	d	file:
MR	mods/player.cpp	1638;"	d	file:
MR	structs.cpp	603;"	d	file:
MR	structs.cpp	614;"	d	file:
MRC	mods/player.cpp	1585;"	d	file:
MRC	mods/player.cpp	1639;"	d	file:
MSG_ANTI_MATTER_DAMAGE	mods/values-list.cpp	/^MSG_ANTI_MATTER_DAMAGE,"[%d] You take ANTI-MATTER damage!\\r\\n"$/;"	v
MSG_CANT_KILL_KEEPER	shop.h	181;"	d
MSG_CLOSED_FOR_DAY	shop.h	175;"	d
MSG_COOLDOWN_IN_EFFECT	mods/values-list.cpp	/^MSG_COOLDOWN_IN_EFFECT,"{gld}Weapon cooldown in effect.{\/gld}"$/;"	v
MSG_CORROSIVE_DAMAGE	mods/values-list.cpp	/^MSG_CORROSIVE_DAMAGE,"[%d] You take CORROSIVE damage!\\r\\n"$/;"	v
MSG_COULDNT_FIND_TARGET	mods/values-list.cpp	/^MSG_COULDNT_FIND_TARGET,"You couldn't find your target!"$/;"	v
MSG_CRITICAL	mods/values-list.cpp	/^MSG_CRITICAL,"{red}***CRITICAL***{\/red} --"$/;"	v
MSG_CRYOGENIC_DAMAGE	mods/values-list.cpp	/^MSG_CRYOGENIC_DAMAGE,"[%d] You take CRYOGENIC damage!\\r\\n"$/;"	v
MSG_EMP_DAMAGE	mods/values-list.cpp	/^MSG_EMP_DAMAGE,"[%d] You take EMP damage!\\r\\n"$/;"	v
MSG_ERROR	mods/builder/slotted-builder.hpp	/^	static constexpr uint8_t MSG_ERROR = 1;$/;"	m	namespace:mods::builder
MSG_EXPLOSIVE_DAMAGE	mods/values-list.cpp	/^MSG_EXPLOSIVE_DAMAGE,"[%d] You take EXPLOSIVE damage!\\r\\n"$/;"	v
MSG_FIRE_DAMAGE	mods/values-list.cpp	/^MSG_FIRE_DAMAGE,"[%d] You suffer burns from the roaring fire!\\r\\n"$/;"	v
MSG_HEADING	boards.h	44;"	d
MSG_HEADSHOT	mods/values-list.cpp	/^MSG_HEADSHOT,"{red}***HEADSHOT***{\/red} -- "$/;"	v
MSG_HIT	mods/values-list.cpp	/^MSG_HIT,"{yel}--[HIT]--{\/yel}"$/;"	v
MSG_HIT_BY_HEADSHOT	mods/values-list.cpp	/^MSG_HIT_BY_HEADSHOT,"{red}*** YOU'VE BEEN HEADSHOTTED ***{\/red} -- "$/;"	v
MSG_HIT_BY_RIFLE_ATTACK	mods/values-list.cpp	/^MSG_HIT_BY_RIFLE_ATTACK,"{red}*** YOUR ARE HIT ***{\/red} -- "$/;"	v
MSG_HIT_BY_SPRAY_ATTACK	mods/values-list.cpp	/^MSG_HIT_BY_SPRAY_ATTACK,"{red}*** YOUR ARE HIT BY A SPRAY OF BULLETS ***{\/red} -- "$/;"	v
MSG_LEVEL	boards.h	46;"	d
MSG_MISSED_TARGET	mods/values-list.cpp	/^MSG_MISSED_TARGET,"You missed your target!"$/;"	v
MSG_NARROWLY_MISSED_ME	mods/values-list.cpp	/^MSG_NARROWLY_MISSED_ME,"You just barely get out of the way of a potentially fatal shot!\\r\\n"$/;"	v
MSG_NOT_OPEN_YET	shop.h	173;"	d
MSG_NOT_REOPEN_YET	shop.h	174;"	d
MSG_NO_PRIMARY_WIELDED	mods/values-list.cpp	/^MSG_NO_PRIMARY_WIELDED,"{gld}You aren't wielding a primary weapon.{\/gld}"$/;"	v
MSG_NO_SEE_CHAR	shop.h	177;"	d
MSG_NO_SELL_ALIGN	shop.h	178;"	d
MSG_NO_SELL_CLASS	shop.h	179;"	d
MSG_NO_STEAL_HERE	shop.h	176;"	d
MSG_NO_USED_WANDSTAFF	shop.h	180;"	d
MSG_OUT_OF_AMMO	mods/values-list.cpp	/^MSG_OUT_OF_AMMO,"{gld}*CLICK*{\/gld} Your weapon is out of ammo!"$/;"	v
MSG_RADIOACTIVE_DAMAGE	mods/values-list.cpp	/^MSG_RADIOACTIVE_DAMAGE,"[%d] You take RADIOACTIVE damage!\\r\\n"$/;"	v
MSG_SHOCK_DAMAGE	mods/values-list.cpp	/^MSG_SHOCK_DAMAGE,"[%d] You take SHOCK damage!\\r\\n"$/;"	v
MSG_SHRAPNEL_DAMAGE	mods/values-list.cpp	/^MSG_SHRAPNEL_DAMAGE,"[%d] You are shredded by SHRAPNEL!\\r\\n"$/;"	v
MSG_SLOTNUM	boards.h	45;"	d
MSG_SMOKE_DAMAGE	mods/values-list.cpp	/^MSG_SMOKE_DAMAGE,"[%d] You struggle to breath as smoke fills your lungs!\\r\\n"$/;"	v
MSG_SUCCESS	mods/builder/slotted-builder.hpp	/^	static constexpr uint8_t MSG_SUCCESS = 0;$/;"	m	namespace:mods::builder
MSG_TARGET_DEAD	mods/values-list.cpp	/^MSG_TARGET_DEAD,"It appears that your target is dead."$/;"	v
MSG_TARGET_IN_PEACEFUL_ROOM	mods/values-list.cpp	/^MSG_TARGET_IN_PEACEFUL_ROOM,"{gld}Your target is in a peaceful room{\/gld}"$/;"	v
MSG_YOURE_INJURED	mods/values-list.cpp	/^MSG_YOURE_INJURED,"You are injured!"$/;"	v
MSG_YOUR_TARGET_IS_DEAD	mods/values-list.cpp	/^MSG_YOUR_TARGET_IS_DEAD,"{grn}*** YOUR TARGET IS DEAD ***{\/grn}\\r\\n"$/;"	v
MSG_YOU_ARE_DISORIENTED	mods/values-list.cpp	/^MSG_YOU_ARE_DISORIENTED,"You become disoriented!"$/;"	v
MSG_YOU_ARE_INJURED	mods/values-list.cpp	/^MSG_YOU_ARE_INJURED,"{red}***YOU ARE INJURED***{\/red} --"$/;"	v
MSG_YOU_DISORIENT_SOMEONE	mods/values-list.cpp	/^MSG_YOU_DISORIENT_SOMEONE,"You disorient your target!"$/;"	v
MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO	mods/values-list.cpp	/^MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO,"{yel} Your equipment burns from incendiary damage! {\/yel}"$/;"	v
MSG_YOU_INFLICTED_INCENDIARY_AMMO	mods/values-list.cpp	/^MSG_YOU_INFLICTED_INCENDIARY_AMMO,"{grn} You inflict incendiary damage on your target! {\/grn}"$/;"	v
MSG_YOU_INJURED_SOMEONE	mods/values-list.cpp	/^MSG_YOU_INJURED_SOMEONE,"{red}*** YOU INJURED %s{\/red}!"$/;"	v
MUZZLE_BRAKE	mods/weapon.hpp	/^		COMPENSATOR, MUZZLE_BRAKE,EXTENDED,$/;"	e	enum:mods::weapon::barrel_t
M_LAZY	mods/forge-engine/util.cpp	132;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	13;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	141;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	150;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	163;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	171;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	193;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	201;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	211;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	219;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	236;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	245;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	255;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	264;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	273;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	282;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	300;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	32;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	39;"	d	file:
M_LAZY	mods/forge-engine/util.cpp	70;"	d	file:
M_MATCH	mods/help.cpp	476;"	d	file:
M_MATCH	mods/help.cpp	509;"	d	file:
MatchAllOf	mods/catch.hpp	/^			struct MatchAllOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatchAnyOf	mods/catch.hpp	/^			struct MatchAnyOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatchNotOf	mods/catch.hpp	/^				MatchNotOf(MatcherBase<ArgT> const& underlyingMatcher) : m_underlyingMatcher(underlyingMatcher) {}$/;"	f	struct:Catch::Matchers::Impl::MatchNotOf
MatchNotOf	mods/catch.hpp	/^			struct MatchNotOf : MatcherBase<ArgT> {$/;"	s	namespace:Catch::Matchers::Impl
MatcherBase	mods/catch.hpp	/^			struct MatcherBase : MatcherUntypedBase {$/;"	s	namespace:Catch::Matchers::Impl
MatcherUntypedBase	mods/catch.hpp	/^			class MatcherUntypedBase {$/;"	c	namespace:Catch::Matchers::Impl
Matchers	mods/catch.hpp	/^	namespace Matchers {$/;"	n	namespace:Catch
MethodTestCase	mods/catch.hpp	/^			MethodTestCase(void (C::*method)()) : m_method(method) {}$/;"	f	class:Catch::MethodTestCase
MethodTestCase	mods/catch.hpp	/^	class MethodTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
Modifier	mods/acl/color.hpp	/^			Modifier(Code pCode) : code(pCode) {}$/;"	f	class:mods::Color::Modifier
Modifier	mods/acl/color.hpp	/^		class Modifier {$/;"	c	namespace:mods::Color
NEED_CLOSED	act.movement.cpp	343;"	d	file:
NEED_LOCKED	act.movement.cpp	345;"	d	file:
NEED_OPEN	act.movement.cpp	342;"	d	file:
NEED_STRICMP_PROTO	conf.h	308;"	d
NEED_STRLCPY_PROTO	conf.h	311;"	d
NEED_STRNICMP_PROTO	conf.h	317;"	d
NEED_UNLOCKED	act.movement.cpp	344;"	d	file:
NEWEST_AT_TOP	boards.cpp	60;"	d	file:
NEWS_FILE	db.h	76;"	d
NEW_ENV_VALUE	telnet.h	238;"	d
NEW_ENV_VAR	telnet.h	237;"	d
NEW_MOON	mods/date-time.hpp	/^		NEW_MOON = 0,$/;"	e	enum:mods::date_time::moon_phase
NEW_MSG_INDEX	boards.h	43;"	d
NIGHT_VISION	mods/flags.hpp	/^		NIGHT_VISION,$/;"	e	enum:mods::flags::aff
NIGHT_VISION	mods/weapon-types.hpp	/^		NIGHT_VISION,$/;"	e	enum:mods::weapon::capabilities::cap_t
NIGHT_VISION_GOGGLES	structs.h	/^	NIGHT_VISION_GOGGLES,$/;"	e	enum:lense_type_t
NO	config.cpp	21;"	d	file:
NOBODY	mods/index-type.hpp	14;"	d
NODELETE	mods/flags.hpp	/^		NODELETE,$/;"	e	enum:mods::flags::plr
NOEFFECT	config.cpp	/^const char *NOEFFECT = "Nothing seems to happen.\\r\\n";$/;"	v
NOMINMAX	mods/catch.hpp	6779;"	d
NOMINMAX	mods/catch.hpp	6792;"	d
NOMINMAX	mods/catch2.hpp	7990;"	d
NOMINMAX	mods/catch2.hpp	8004;"	d
NONE	mods/affects.hpp	/^		NONE = -1,$/;"	e	enum:mods::affects::affect_t
NONE	mods/behaviour_tree.hpp	/^		static constexpr int NONE = 0;$/;"	m	struct:mods::behaviour_tree
NONE	mods/behaviour_tree_impl.hpp	/^		NONE = 0,$/;"	e	enum:mods::behaviour_tree_impl::type
NONE	mods/events.hpp	/^		NONE = 0,$/;"	e	enum:mods::events::event_enum
NONE	mods/players/db-load.hpp	/^		NONE,$/;"	e	enum:mods::players::db_load::save_from_t
NONE	mods/rooms.hpp	/^		NONE = 0,$/;"	e	enum:mods::rooms::sector_type_t
NONE	mods/skills.hpp	/^	NONE = 0,$/;"	e	enum:uint8_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::breacher::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::contagion::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::engineer::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::ghost::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::marine::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::medic::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::psyop::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::sentinel::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::sniper::primary_choice_t
NONE	mods/weapon.hpp	/^			NONE = 0,$/;"	e	enum:mods::weapon::support::primary_choice_t
NONE	mods/yaml.hpp	/^		NONE = 0,$/;"	e	enum:mods::yaml::armor_classification_type_t
NONE	structs.h	/^			NONE = 0,$/;"	e	enum:uint8_t
NON_HAZARDOUS_SMOKE	structs.h	/^			NON_HAZARDOUS_SMOKE, \/** think: burning car *\/$/;"	m	struct:room_data	typeref:enum:room_data::
NOP	telnet.h	56;"	d
NOPERSON	config.cpp	/^const char *NOPERSON = "No-one by that name here.\\r\\n";$/;"	v
NORMAL_SIGHT	mods/flags.hpp	/^		NORMAL_SIGHT,$/;"	e	enum:mods::flags::aff
NORMAL_SIGHT	structs.h	/^	NORMAL_SIGHT,$/;"	e	enum:lense_type_t
NORTH	structs.h	133;"	d
NOSHOUT	mods/flags.hpp	/^		NOSHOUT,$/;"	e	enum:mods::flags::plr
NOTDEADYET	mods/flags.hpp	/^		NOTDEADYET,$/;"	e	enum:mods::flags::plr
NOTHING	mods/index-type.hpp	13;"	d
NOTIFY_OWNER	mods/weapon-types.hpp	/^		NOTIFY_OWNER,$/;"	e	enum:mods::weapon::capabilities::cap_t
NOTITLE	mods/flags.hpp	/^		NOTITLE,$/;"	e	enum:mods::flags::plr
NOTRACK	mods/flags.hpp	/^		NOTRACK,$/;"	e	enum:mods::flags::aff
NOTRADE_CLERIC	shop.h	157;"	d
NOTRADE_EVIL	shop.h	154;"	d
NOTRADE_GOOD	shop.h	153;"	d
NOTRADE_MAGIC_USER	shop.h	156;"	d
NOTRADE_NEUTRAL	shop.h	155;"	d
NOTRADE_THIEF	shop.h	158;"	d
NOTRADE_WARRIOR	shop.h	159;"	d
NOT_A_DOOR	mods/doors.hpp	/^	static constexpr int8_t NOT_A_DOOR = -2;$/;"	m	namespace:mods::doors
NOT_IMPL	mods/flags.hpp	/^	constexpr static uint32_t NOT_IMPL = (1 << 22);$/;"	m	namespace:mods::flags
NOT_OURS	mods/builder.cpp	/^	NOT_OURS,$/;"	e	enum:parse_response_t	file:
NOWHERE	mods/index-type.hpp	12;"	d
NOWIZLIST	mods/flags.hpp	/^		NOWIZLIST,$/;"	e	enum:mods::flags::plr
NO_ATTACK_TYPE	mods/ai_state.cpp	20;"	d	file:
NO_LOGIC	mods/behaviour_tree_status.hpp	/^		NO_LOGIC,$/;"	e	enum:mods::behaviour_tree_status
NO_PRIMARY_WIELDED_EVENT	mods/damage-event.hpp	/^	NO_PRIMARY_WIELDED_EVENT,$/;"	e	enum:uint16_t
NO_RESULTS	mods/orm/util.hpp	/^	static constexpr int8_t NO_RESULTS = 1;$/;"	m	namespace:mods::orm::util
NO_RESULTS	mods/pq.hpp	/^static constexpr int8_t NO_RESULTS = 1;$/;"	v
NPC	act.wizard.cpp	2287;"	d	file:
NPC	mods/scan.hpp	/^			NPC,$/;"	e	enum:mods::scan::find_type_t
NPC_SEND_DEBUG	mods/player.cpp	78;"	d	file:
NRM	utils.h	119;"	d
NSLC	telnet.h	200;"	d
NTELOPTS	telnet.h	125;"	d
NULL	utils.h	522;"	d
NULLABLE_U32	mods/orm/util.hpp	5;"	d
NUMBER	act.wizard.cpp	2292;"	d	file:
NUM_CLASSES	structs.h	243;"	d
NUM_OF_BOARDS	boards.h	11;"	d
NUM_OF_DIRS	structs.h	658;"	d
NUM_RESERVED_DESCS	comm.h	11;"	d
NUM_TOKENS	interpreter.cpp	1156;"	d	file:
NUM_WEARS	structs.h	430;"	d
NameAndDesc	mods/catch.hpp	/^		NameAndDesc(const char* _name = "", const char* _description= "")$/;"	f	struct:Catch::NameAndDesc
NameAndDesc	mods/catch.hpp	/^	struct NameAndDesc {$/;"	s	namespace:Catch
NameAndTags	mods/catch2.hpp	/^struct NameAndTags {$/;"	s	namespace:Catch
No	mods/catch.hpp	/^			No$/;"	e	enum:Catch::CaseSensitive::Choice
No	mods/catch2.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
NonCopyable	mods/catch.hpp	/^			NonCopyable() {}$/;"	f	class:Catch::NonCopyable
NonCopyable	mods/catch.hpp	/^	class NonCopyable {$/;"	c	namespace:Catch
NonCopyable	mods/catch2.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
Normal	mods/catch.hpp	/^			Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Normal	mods/catch2.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Not	mods/catch.hpp	/^		inline Impl::MatchNotOf<T> Not(Impl::MatcherBase<T> const& underlyingMatcher) {$/;"	f	namespace:Catch::Matchers
NotImplementedException	mods/catch.hpp	/^			NotImplementedException(NotImplementedException const&) {}$/;"	f	class:Catch::NotImplementedException
NotImplementedException	mods/catch.hpp	/^	class NotImplementedException : public std::exception {$/;"	c	namespace:Catch
OBJAFF_FLAGGED	utils.h	241;"	d
OBJECT	mods/object.hpp	/^				OBJECT = 0,$/;"	e	enum:mods::object::object_type_enum_t
OBJECTS	mods/scan.hpp	/^			OBJECTS,$/;"	e	enum:mods::scan::find_type_t
OBJECT_DEAD	shop.h	94;"	d
OBJECT_FROM_ROOM	mods/events.hpp	/^		OBJECT_FROM_ROOM,$/;"	e	enum:mods::events::event_enum
OBJECT_NOTOK	shop.h	95;"	d
OBJECT_NOVAL	shop.h	97;"	d
OBJECT_OK	shop.h	96;"	d
OBJECT_TO_ROOM	mods/events.hpp	/^		OBJECT_TO_ROOM$/;"	e	enum:mods::events::event_enum
OBJN	utils.h	489;"	d
OBJS	utils.h	486;"	d
OBJVAL_FLAGGED	utils.h	242;"	d
OBJWEAR_FLAGGED	utils.h	243;"	d
OBJ_FLAGGED	utils.h	244;"	d
OBJ_PREFIX	db.h	70;"	d
OBSTRUCTOR	structs.h	/^	OBSTRUCTOR = 14,$/;"	e	enum:player_class_t
OC_MAKE_UNIQUE_NAME	mods/catch2.hpp	5025;"	d
OC_TEST_CASE	mods/catch.hpp	3532;"	d
OC_TEST_CASE	mods/catch2.hpp	5037;"	d
OC_TEST_CASE2	mods/catch2.hpp	5026;"	d
OFF	utils.h	117;"	d
OFFICER_IS_DAZED	mods/response-team/radio.hpp	/^		OFFICER_IS_DAZED$/;"	e	enum:mods::response_team::radio::severity_t
OK	config.cpp	/^const char *OK = "Okay.\\r\\n";$/;"	v
OLC_ALIASES	olc.h	11;"	d
OLC_COPY	olc.h	8;"	d
OLC_DESC	olc.h	10;"	d
OLC_MOB	olc.h	5;"	d
OLC_NAME	olc.h	9;"	d
OLC_OBJ	olc.h	6;"	d
OLC_REPEAT	olc.h	3;"	d
OLC_ROOM	olc.h	4;"	d
OLC_SET	olc.h	1;"	d
OLC_SHOW	olc.h	2;"	d
OLC_USAGE	olc.cpp	34;"	d	file:
OLD_ENV_VALUE	telnet.h	236;"	d
OLD_ENV_VAR	telnet.h	235;"	d
ONOFF	utils.h	153;"	d
ON_FIRE	structs.h	/^			ON_FIRE,		\/** actively burning *\/$/;"	m	struct:room_data	typeref:enum:room_data::
OPEN_DOOR	act.movement.cpp	365;"	d	file:
OPER_AND	shop.h	129;"	d
OPER_CLOSE_PAREN	shop.h	127;"	d
OPER_NOT	shop.h	130;"	d
OPER_OPEN_PAREN	shop.h	126;"	d
OPER_OR	shop.h	128;"	d
OPPOSITE_DIR	globals.hpp	25;"	d
OPT_USEC	structs.h	669;"	d
ORM_FAILURE	mods/orm/orm-base.hpp	15;"	d
ORM_FAILURE	mods/pq.hpp	47;"	d
ORM_FAILURE	mods/pq.hpp	611;"	d
ORM_NO_RESULTS	mods/orm/orm-base.hpp	14;"	d
ORM_NO_RESULTS	mods/pq.hpp	46;"	d
ORM_NO_RESULTS	mods/pq.hpp	610;"	d
ORM_SUCCESS	mods/orm/orm-base.hpp	13;"	d
ORM_SUCCESS	mods/pq.hpp	45;"	d
ORM_SUCCESS	mods/pq.hpp	609;"	d
OTHER_PLAYER_INDEX_START	mods/player-scaffolding.hpp	/^		constexpr static std::size_t OTHER_PLAYER_INDEX_START = 2;$/;"	m	struct:mods::player_scaffolding
OUT	structs.h	/^			OUT = 5$/;"	e	enum:uint8_t
OUTSIDE	structs.h	/^			OUTSIDE,		\/** Outside where anyone can see you *\/$/;"	m	struct:room_data	typeref:enum:room_data::
OUTSIDE	utils.h	514;"	d
OUTSIDE_AIR	mods/rooms.hpp	/^		OUTSIDE_AIR,	\/** on a rope hanging from a helicopter *\/$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_CEMENT	mods/rooms.hpp	/^		OUTSIDE_CEMENT,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_DESERT	mods/rooms.hpp	/^		OUTSIDE_DESERT,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_DIRT	mods/rooms.hpp	/^		OUTSIDE_DIRT,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_FOREST	mods/rooms.hpp	/^		OUTSIDE_FOREST,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_FROZEN	mods/rooms.hpp	/^		OUTSIDE_FROZEN,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_GRASSY	mods/rooms.hpp	/^		OUTSIDE_GRASSY,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_HILLS	mods/rooms.hpp	/^		OUTSIDE_HILLS,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_MARKET_PLACE	mods/rooms.hpp	/^		OUTSIDE_MARKET_PLACE,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_METAL_HATCH	mods/rooms.hpp	/^		OUTSIDE_METAL_HATCH,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_METAL_WALL	mods/rooms.hpp	/^		OUTSIDE_METAL_WALL,	\/** rappelling *\/$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_ROOFTOP	mods/rooms.hpp	/^		OUTSIDE_ROOFTOP,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_SHALLOW_WATER	mods/rooms.hpp	/^		OUTSIDE_SHALLOW_WATER,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_TRASHY_PARKING_LOT	mods/rooms.hpp	/^		OUTSIDE_TRASHY_PARKING_LOT,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_TREE	mods/rooms.hpp	/^		OUTSIDE_TREE,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_UNDERWATER	mods/rooms.hpp	/^		OUTSIDE_UNDERWATER,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_WATER	mods/rooms.hpp	/^		OUTSIDE_WATER,$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_WOODEN_WALL	mods/rooms.hpp	/^		OUTSIDE_WOODEN_WALL,	\/** rappelling *\/$/;"	e	enum:mods::rooms::sector_type_t
OUTSIDE_WOODEN_WALLS	mods/rooms.hpp	/^		OUTSIDE_WOODEN_WALLS,$/;"	e	enum:mods::rooms::sector_type_t
OUT_OF_AMMO_EVENT	mods/damage-event.hpp	/^	OUT_OF_AMMO_EVENT,$/;"	e	enum:uint16_t
O_NONBLOCK	comm.cpp	2094;"	d	file:
Obj_from_store	objsave.cpp	/^struct obj_data *Obj_from_store(struct obj_file_elem object, int *location) {$/;"	f
Obj_to_store	objsave.cpp	/^int Obj_to_store(struct obj_data *obj, FILE *fl, int location) {$/;"	f
OfType	mods/catch.hpp	/^		enum OfType {$/;"	g	struct:Catch::ResultWas
OfType	mods/catch2.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
Ok	mods/catch.hpp	/^			Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
Ok	mods/catch2.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
Operator	mods/catch.hpp	/^		enum Operator {$/;"	g	namespace:Catch::Internal
OperatorTraits	mods/catch.hpp	/^		template<> struct OperatorTraits<IsEqualTo>             {$/;"	s	namespace:Catch::Internal
OperatorTraits	mods/catch.hpp	/^		template<> struct OperatorTraits<IsGreaterThan>         {$/;"	s	namespace:Catch::Internal
OperatorTraits	mods/catch.hpp	/^		template<> struct OperatorTraits<IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
OperatorTraits	mods/catch.hpp	/^		template<> struct OperatorTraits<IsLessThan>            {$/;"	s	namespace:Catch::Internal
OperatorTraits	mods/catch.hpp	/^		template<> struct OperatorTraits<IsLessThanOrEqualTo>   {$/;"	s	namespace:Catch::Internal
OperatorTraits	mods/catch.hpp	/^		template<> struct OperatorTraits<IsNotEqualTo>          {$/;"	s	namespace:Catch::Internal
OperatorTraits	mods/catch.hpp	/^		template<Operator Op> struct OperatorTraits             {$/;"	s	namespace:Catch::Internal
Opt	mods/catch2.hpp	/^        Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	mods/catch2.hpp	/^        Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}$/;"	f	class:Catch::Opt
Opt	mods/catch2.hpp	/^        explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	mods/catch2.hpp	/^        explicit Opt( bool &ref ) : ParserRefImpl( std::make_shared<BoundFlagRef>( ref ) ) {}$/;"	f	class:Catch::Opt
Opt	mods/catch2.hpp	/^    class Opt : public ParserRefImpl<Opt> {$/;"	c	namespace:Catch
P90	mods/orm/engineer.hpp	/^		const std::string P90 = "P90";$/;"	m	struct:mods::orm::engineer
P90	mods/weapon.hpp	/^			P90 = 2$/;"	e	enum:mods::weapon::engineer::primary_choice_t
PAGE_LENGTH	comm.h	80;"	d
PAGE_SIZE	mods/mobs/mob.hpp	/^			static constexpr int PAGE_SIZE = 40;$/;"	m	class:mods::player
PAGE_SIZE	mods/player.hpp	/^			static constexpr int PAGE_SIZE = 40;$/;"	m	struct:mods::player
PAGE_WIDTH	comm.h	81;"	d
PARSE_ARGS	globals.hpp	244;"	d
PARSE_FAIL	mods/acl/config-parser.cpp	/^        const int FileParser::PARSE_FAIL = -1;$/;"	m	class:mods::acl::FileParser	file:
PARSE_FAIL	mods/acl/config-parser.hpp	/^                static const int PARSE_FAIL;$/;"	m	class:mods::acl::FileParser
PARSE_TYPE	mods/acl/config-parser.hpp	/^                enum PARSE_TYPE { E_CLASS, E_EXTENDED_CLASS, E_COMMENT, E_BLOCK,    \\$/;"	g	class:mods::acl::FileParser
PASSES_PER_SEC	structs.h	670;"	d
PATH_MAX	sysdep.h	352;"	d
PAUSE_FILE	db.h	54;"	d
PAUSE_FILE	db.h	58;"	d
PAUSE_FILE	db.h	62;"	d
PC	act.wizard.cpp	2286;"	d	file:
PERS	utils.h	484;"	d
PET_PRICE	spec_procs.cpp	704;"	d	file:
PISTOL	mods/weapon.hpp	/^	                 GRENADE = (1 << 4), ASSAULT_RIFLE = (1 << 5), PISTOL = (1 << 6),$/;"	e	enum:mods::weapon::mask_type
PLACE_HOLDER_VALUE	mods/schema.hpp	/^	constexpr static const char* PLACE_HOLDER_VALUE = "\\x01";$/;"	m	namespace:mods::schema
PLAYER	mods/mobs/mob.hpp	/^				PLAYER, MOB, DRONE$/;"	e	enum:mods::player::player_type_enum_t
PLAYER	mods/player.hpp	/^				PLAYER, MOB, DRONE,$/;"	e	enum:mods::player::player_type_enum_t
PLAYERS	mods/scan.hpp	/^			PLAYERS,$/;"	e	enum:mods::scan::find_type_t
PLAYER_CAN	globals.hpp	289;"	d
PLAYER_FILE	db.h	95;"	d
PLAYER_GET	mods/prefs.hpp	20;"	d
PLAYER_GETI	mods/prefs.hpp	22;"	d
PLAYER_ID	mods/unit-tests/contracts.cpp	/^static constexpr int PLAYER_ID = 1;$/;"	v	file:
PLAYER_MUTED_DESCRIPTOR	mods/player.hpp	/^				PLAYER_MUTED_DESCRIPTOR,$/;"	e	enum:mods::player::player_type_enum_t
PLAYER_SAVE	mods/rate-limiting.hpp	/^		PLAYER_SAVE = 0,$/;"	e	enum:mods::rate_limiting::action_t
PLAYER_SET	mods/prefs.hpp	19;"	d
PLAYER_SETI	mods/prefs.hpp	21;"	d
PLCLASS_BREACHER	mods/forge-engine/player-class.hpp	/^			PLCLASS_BREACHER ,$/;"	e	enum:mods::forge_engine::player_class_types_t
PLCLASS_ENGINEER	mods/forge-engine/player-class.hpp	/^			PLCLASS_ENGINEER ,$/;"	e	enum:mods::forge_engine::player_class_types_t
PLCLASS_GHOST	mods/forge-engine/player-class.hpp	/^			PLCLASS_GHOST ,$/;"	e	enum:mods::forge_engine::player_class_types_t
PLCLASS_MARINE	mods/forge-engine/player-class.hpp	/^			PLCLASS_MARINE ,$/;"	e	enum:mods::forge_engine::player_class_types_t
PLCLASS_MEDIC	mods/forge-engine/player-class.hpp	/^			PLCLASS_MEDIC ,$/;"	e	enum:mods::forge_engine::player_class_types_t
PLCLASS_SNIPER	mods/forge-engine/player-class.hpp	/^			PLCLASS_SNIPER = 1,$/;"	e	enum:mods::forge_engine::player_class_types_t
PLCLASS_SUPPORT	mods/forge-engine/player-class.hpp	/^			PLCLASS_SUPPORT ,$/;"	e	enum:mods::forge_engine::player_class_types_t
PLR	mods/flags.hpp	/^		AFF,PLR$/;"	e	enum:mods::flags::flag_group
PLR_CRASH	structs.h	279;"	d
PLR_CRYO	structs.h	288;"	d
PLR_DELETED	structs.h	283;"	d
PLR_DONTSET	structs.h	276;"	d
PLR_FLAGGED	utils.h	236;"	d
PLR_FLAGS	utils.h	221;"	d
PLR_FLAG_COUNT	mods/flags.hpp	/^	constexpr static uint32_t PLR_FLAG_COUNT = plr::__PLR_LAST + 1;$/;"	m	namespace:mods::flags
PLR_FROZEN	structs.h	275;"	d
PLR_INVSTART	structs.h	287;"	d
PLR_KILLER	structs.h	273;"	d
PLR_LOADROOM	structs.h	284;"	d
PLR_MAILING	structs.h	278;"	d
PLR_NODELETE	structs.h	286;"	d
PLR_NOSHOUT	structs.h	281;"	d
PLR_NOTDEADYET	structs.h	289;"	d
PLR_NOTITLE	structs.h	282;"	d
PLR_NOWIZLIST	structs.h	285;"	d
PLR_SITEOK	structs.h	280;"	d
PLR_THIEF	structs.h	274;"	d
PLR_TOG_CHK	utils.h	250;"	d
PLR_WRITING	structs.h	277;"	d
POISON	mods/affects.hpp	/^		POISON = 2,$/;"	e	enum:mods::affects::affect_t
POISON	mods/flags.hpp	/^		POISON,$/;"	e	enum:mods::flags::aff
POISONOUS	mods/aoe.hpp	/^		POISONOUS,	\/** Venomous poisons that need urgent attn *\/$/;"	e	enum:mods::aoe::types_t
POLICIES_FILE	db.h	85;"	d
POSITION_INVENTORY	mods/orm/rifle-attachment.hpp	/^		static constexpr const char* POSITION_INVENTORY = "inventory";$/;"	m	struct:mods::orm::rifle_attachment
POSITION_PRIMARY	mods/orm/rifle-attachment.hpp	/^		static constexpr const char* POSITION_PRIMARY = "primary";$/;"	m	struct:mods::orm::rifle_attachment
POSITION_SECONDARY	mods/orm/rifle-attachment.hpp	/^		static constexpr const char* POSITION_SECONDARY = "secondary";$/;"	m	struct:mods::orm::rifle_attachment
POSIX	sysdep.h	181;"	d
POSIX	sysdep.h	188;"	d
POSIX	sysdep.h	193;"	d
POSIX_NONBLOCK_BROKEN	sysdep.h	197;"	d
POS_DEAD	structs.h	261;"	d
POS_FIGHTING	structs.h	268;"	d
POS_INCAP	structs.h	263;"	d
POS_MORTALLYW	structs.h	262;"	d
POS_RESTING	structs.h	266;"	d
POS_SITTING	structs.h	267;"	d
POS_SLEEPING	structs.h	265;"	d
POS_STANDING	structs.h	269;"	d
POS_STUNNED	structs.h	264;"	d
PQXX_TR1_HEADERS	mods/string.hpp	8;"	d
PRAC_TYPE	spec_procs.cpp	128;"	d	file:
PREFS_FORMAT_STRING	mods/prefs.hpp	15;"	d
PREFS_SEPARATOR	mods/prefs.hpp	14;"	d
PREVENT_RUN	mods/weapon-types.hpp	/^		PREVENT_RUN,$/;"	e	enum:mods::weapon::capabilities::cap_t
PRF_AUTOEXIT	structs.h	322;"	d
PRF_BRIEF	structs.h	315;"	d
PRF_COLOR_1	structs.h	328;"	d
PRF_COLOR_2	structs.h	329;"	d
PRF_COMPACT	structs.h	316;"	d
PRF_DEAF	structs.h	317;"	d
PRF_DISPAUTO	structs.h	337;"	d
PRF_DISPHP	structs.h	319;"	d
PRF_DISPMANA	structs.h	320;"	d
PRF_DISPMOVE	structs.h	321;"	d
PRF_FLAGGED	utils.h	238;"	d
PRF_FLAGS	utils.h	222;"	d
PRF_HOLYLIGHT	structs.h	327;"	d
PRF_LOG1	structs.h	331;"	d
PRF_LOG2	structs.h	332;"	d
PRF_NOAUCT	structs.h	333;"	d
PRF_NOGOSS	structs.h	334;"	d
PRF_NOGRATZ	structs.h	335;"	d
PRF_NOHASSLE	structs.h	323;"	d
PRF_NOREPEAT	structs.h	326;"	d
PRF_NOTELL	structs.h	318;"	d
PRF_NOWIZ	structs.h	330;"	d
PRF_OVERHEAD_MAP	structs.h	338;"	d
PRF_QUEST	structs.h	324;"	d
PRF_ROOMFLAGS	structs.h	336;"	d
PRF_SUMMONABLE	structs.h	325;"	d
PRF_TOG_CHK	act.other.cpp	920;"	d	file:
PRF_TOG_CHK	utils.h	251;"	d
PROCESS_INPUT_CONTROL_C	comm.cpp	576;"	d	file:
PROTECT	mods/ai_state.hpp	/^				WANDER, SUSPICIOUS, FIGHT,SUSPICIOUS2,PROTECT,AGGRESSIVE_PROTECT,$/;"	e	enum:mods::ai_state::state
PROTECT_EVIL	mods/flags.hpp	/^		PROTECT_EVIL,		\/\/ useless$/;"	e	enum:mods::flags::aff
PROTECT_GOOD	mods/flags.hpp	/^		PROTECT_GOOD,		\/\/ useless$/;"	e	enum:mods::flags::aff
PSG1	mods/orm/pyrexia.hpp	/^		const std::string PSG1 = "PSG1";$/;"	m	struct:mods::orm::pyrexia
PSG1	mods/orm/sniper.hpp	/^		const std::string PSG1 = "PSG1";$/;"	m	struct:mods::orm::sniper
PSG1	mods/weapon.hpp	/^			PSG1 = 1,$/;"	e	enum:mods::weapon::ghost::primary_choice_t
PSG1	mods/weapon.hpp	/^			PSG1 = 1,$/;"	e	enum:mods::weapon::sniper::primary_choice_t
PSYOP	mods/classes/types.hpp	/^		PSYOP,$/;"	e	enum:mods::classes::types
PSYOP	structs.h	/^	PSYOP = 7,$/;"	e	enum:player_class_t
PSYOP_NONE	mods/weapon.hpp	/^			PSYOP_NONE = 0,$/;"	e	enum:mods::weapon::psyop::primary_choice_t
PSYOP_PRIMARY_SCARH	mods/weapon.hpp	/^			PSYOP_PRIMARY_SCARH = 1,$/;"	e	enum:mods::weapon::psyop::primary_choice_t
PSYOP_PRIMARY_UMP45	mods/weapon.hpp	/^			PSYOP_PRIMARY_UMP45 = 2,$/;"	e	enum:mods::weapon::psyop::primary_choice_t
PT_NONE	mods/deep-object-parser.cpp	/^		PT_NONE = 0,$/;"	e	enum:mods::parsed_type_t	file:
PT_PRIMARY_KEY	mods/deep-object-parser.cpp	/^		PT_PRIMARY_KEY = 2$/;"	e	enum:mods::parsed_type_t	file:
PT_YAML_FILE_NAME	mods/deep-object-parser.cpp	/^		PT_YAML_FILE_NAME = 1,$/;"	e	enum:mods::parsed_type_t	file:
PULSE_AUTOSAVE	structs.h	678;"	d
PULSE_BTREE	structs.h	673;"	d
PULSE_IDLEPWD	structs.h	679;"	d
PULSE_MOBILE	structs.h	676;"	d
PULSE_REPLENISH	structs.h	683;"	d
PULSE_REPLENISH_CHARACTERS	structs.h	675;"	d
PULSE_SANITY	structs.h	680;"	d
PULSE_TIMESAVE	structs.h	682;"	d
PULSE_USAGE	structs.h	681;"	d
PULSE_VIOLENCE	structs.h	677;"	d
PULSE_ZONE	structs.h	674;"	d
PYREXIA	mods/classes/types.hpp	/^		PYREXIA,$/;"	e	enum:mods::classes::types
PYREXIA	structs.h	/^	PYREXIA = 16,$/;"	e	enum:player_class_t
PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR	mods/values-list.cpp	/^PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR,280$/;"	v
PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE	mods/values-list.cpp	/^PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE,390$/;"	v
PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER	mods/values-list.cpp	/^PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER,170$/;"	v
Parser	mods/catch2.hpp	/^        auto operator+( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	mods/catch2.hpp	/^        auto operator|( T const &other ) const -> Parser;$/;"	m	class:Catch::ComposableParserImpl
Parser	mods/catch2.hpp	/^    struct Parser : ParserBase {$/;"	s	namespace:Catch
ParserRefImpl	mods/catch2.hpp	/^        ParserRefImpl( LambdaT const &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	mods/catch2.hpp	/^        ParserRefImpl( T &ref, std::string const &hint )$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	mods/catch2.hpp	/^        explicit ParserRefImpl( std::shared_ptr<BoundRef> const &ref ) : m_ref( ref ) {}$/;"	f	class:Catch::ParserRefImpl
ParserRefImpl	mods/catch2.hpp	/^    class ParserRefImpl : public ComposableParserImpl<DerivedT> {$/;"	c	namespace:Catch
Ptr	mods/catch.hpp	/^			Ptr() : m_p(CATCH_NULL) {}$/;"	f	class:Catch::Ptr
Ptr	mods/catch.hpp	/^			Ptr(Ptr const& other) : m_p(other.m_p) {$/;"	f	class:Catch::Ptr
Ptr	mods/catch.hpp	/^			Ptr(T* p) : m_p(p) {$/;"	f	class:Catch::Ptr
Ptr	mods/catch.hpp	/^	class Ptr {$/;"	c	namespace:Catch
QBLU	screen.h	44;"	d
QCYN	screen.h	46;"	d
QGRN	screen.h	42;"	d
QMAG	screen.h	45;"	d
QNRM	screen.h	40;"	d
QRED	screen.h	41;"	d
QUEUE_TEXTURE_REMOVAL	mods/projectile.cpp	75;"	d	file:
QUIT	mods/players/db-load.hpp	/^		QUIT,$/;"	e	enum:mods::players::db_load::save_from_t
QWHT	screen.h	47;"	d
QYEL	screen.h	43;"	d
RADIATION	mods/aoe.hpp	/^		RADIATION, \/** Radioactive fallout *\/$/;"	e	enum:mods::aoe::types_t
RADIOACTIVE	structs.h	/^			RADIOACTIVE, \/** actively emitting radioactivity *\/$/;"	m	struct:room_data	typeref:enum:room_data::
RANGE	act.wizard.cpp	2298;"	d	file:
RANGE	db.cpp	1574;"	d	file:
RANGE	db.cpp	1636;"	d	file:
RANGED_ATTACK	mods/weapon-types.hpp	/^		RANGED_ATTACK,$/;"	e	enum:mods::weapon::capabilities::cap_t
RARE	mods/randomized-items.hpp	/^	RARE,$/;"	e	enum:mods::rarity_enum_t
RARE	mods/rarity.hpp	/^		constexpr static float RARE = 0.05034415;$/;"	m	namespace:mods::rarity
RARE_DROP_RATE	mods/randomized-items.hpp	/^		constexpr static float RARE_DROP_RATE = 6.0;$/;"	m	class:mods::randomized_items
RAVEN_RECON	mods/object.hpp	/^				RAVEN_RECON,$/;"	e	enum:mods::object::object_type_enum_t
RC_DRONE	structs.h	/^	RC_DRONE,$/;"	e	enum:lense_type_t
RC_DRONE_NIGHT_VISION	structs.h	/^	RC_DRONE_NIGHT_VISION,$/;"	e	enum:lense_type_t
RC_DRONE_THERMAL	structs.h	/^	RC_DRONE_THERMAL,$/;"	e	enum:lense_type_t
READ_LVL	boards.h	37;"	d
READ_SIZE	utils.h	27;"	d
REAL	db.h	/^               REAL=0,\\$/;"	e	enum:__anon1
RECON	interpreter.cpp	1563;"	d	file:
RECREATE	utils.h	173;"	d
RELOAD	mods/weapon-types.hpp	/^		RELOAD,$/;"	e	enum:mods::weapon::capabilities::cap_t
REMOTE	mods/item.hpp	/^		REMOTE = (1 << 7),$/;"	e	enum:mods::item::capability_t
REMOTELY_DETONATE	mods/weapon-types.hpp	/^		REMOTELY_DETONATE,$/;"	e	enum:mods::weapon::capabilities::cap_t
REMOTELY_VIEW	mods/weapon-types.hpp	/^		REMOTELY_VIEW,$/;"	e	enum:mods::weapon::capabilities::cap_t
REMOTE_EXPLOSIVE	mods/weapon.hpp	/^	                 FLAME = (1 << 10), CLAYMORE = (1 << 11), REMOTE_EXPLOSIVE = (1 << 12),$/;"	e	enum:mods::weapon::mask_type
REMOVE_BIT	utils.h	202;"	d
REMOVE_FROM_LIST	utils.h	186;"	d
REMOVE_LVL	boards.h	39;"	d
RENT_CRASH	structs.h	620;"	d
RENT_CRYO	structs.h	622;"	d
RENT_FACTOR	objsave.cpp	25;"	d	file:
RENT_FORCED	structs.h	623;"	d
RENT_RENTED	structs.h	621;"	d
RENT_TIMEDOUT	structs.h	624;"	d
RENT_UNDEF	structs.h	619;"	d
REPORT_DB_ISSUE	mods/db-report.hpp	11;"	d
REPORT_DB_ISSUE	mods/migrations.cpp	/^	void REPORT_DB_ISSUE(std::string issue,std::string exception_message){$/;"	f	namespace:mods::migrations
REPORT_DB_ISSUE	mods/pq.hpp	/^static inline void REPORT_DB_ISSUE(std::string issue,std::string exception_message) {$/;"	f
REPORT_VIOLENCE	mods/response-team/radio.hpp	/^		REPORT_VIOLENCE,$/;"	e	enum:mods::response_team::radio::severity_t
RESERVED	mods/ai_state.hpp	/^				MANIC,CHAOTIC,RESERVED$/;"	e	enum:mods::ai_state::state
RETSIGTYPE	conf.h	20;"	d
RETURN_FALSE_IMMEDIATELY	mods/behaviour_tree_impl.hpp	/^		RETURN_FALSE_IMMEDIATELY,$/;"	e	enum:mods::behaviour_tree_impl::dispatch_status_t
RETURN_IMMEDIATELY	mods/behaviour_tree_impl.hpp	/^		RETURN_IMMEDIATELY,$/;"	e	enum:mods::behaviour_tree_impl::dispatch_status_t
RIFLE_ATTRIBUTES_AMMO_MAX	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_AMMO_MAX = 1,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_CHANCE_TO_INJURE	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_CHANCE_TO_INJURE,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_CLIP_SIZE	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_CLIP_SIZE,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_COOLDOWN_BETWEEN_SHOTS	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_COOLDOWN_BETWEEN_SHOTS,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_CRITICAL_CHANCE	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_CRITICAL_CHANCE,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_CRITICAL_RANGE	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_CRITICAL_RANGE,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_DAMAGE_DICE_COUNT	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_DAMAGE_DICE_COUNT,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_DAMAGE_DICE_SIDES	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_DAMAGE_DICE_SIDES,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_DAMAGE_PER_SECOND	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_DAMAGE_PER_SECOND,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_DISORIENT_AMOUNT	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_DISORIENT_AMOUNT,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_EFFECTIVE_FIRING_RANGE	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_EFFECTIVE_FIRING_RANGE,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_HEADSHOT_BONUS	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_HEADSHOT_BONUS,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_MAX_RANGE	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_MAX_RANGE,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_MUZZLE_VELOCITY	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_MUZZLE_VELOCITY,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_RANGE_MULTIPLIER	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_RANGE_MULTIPLIER,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_RELOAD_TIME	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_RELOAD_TIME,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_ATTRIBUTES_ROUNDS_PER_MINUTE	mods/forge-engine/generator.hpp	/^		RIFLE_ATTRIBUTES_ROUNDS_PER_MINUTE,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
RIFLE_NONE	mods/item-types.hpp	/^		RIFLE_NONE = 0,$/;"	e	enum:mods::weapon::type::rifle
RIFLE_TYPE_ASSAULT_RIFLE	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_ASSAULT_RIFLE,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIFLE_TYPE_HANDGUN	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_HANDGUN,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIFLE_TYPE_LIGHT_MACHINE_GUN	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_LIGHT_MACHINE_GUN,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIFLE_TYPE_MACHINE_PISTOL	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_MACHINE_PISTOL,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIFLE_TYPE_PISTOL	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_PISTOL,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIFLE_TYPE_SHOTGUN	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_SHOTGUN = 1,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIFLE_TYPE_SNIPER	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_SNIPER,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIFLE_TYPE_SUB_MACHINE_GUN	mods/forge-engine/generator.hpp	/^		RIFLE_TYPE_SUB_MACHINE_GUN,$/;"	e	enum:mods::forge_engine::rifle_types_t
RIP	mods/weapon-types.hpp	/^		RIP,$/;"	e	enum:mods::weapon::capabilities::cap_t
RLIMIT_NOFILE	sysdep.h	409;"	d
RL_SEC	structs.h	671;"	d
RNUMLIST_MAX_PER_CALL	mods/builder.hpp	/^	constexpr static unsigned int RNUMLIST_MAX_PER_CALL = 10000;$/;"	m	namespace:mods::builder
ROOFTOP	structs.h	/^			ROOFTOP,$/;"	m	struct:room_data	typeref:enum:room_data::
ROOM_ATRIUM	structs.h	157;"	d
ROOM_BFS_MARK	structs.h	159;"	d
ROOM_DARK	structs.h	143;"	d
ROOM_DEATH	structs.h	144;"	d
ROOM_DESC_EMPTY	mods/builder.hpp	/^	constexpr static int ROOM_DESC_EMPTY = -3;$/;"	m	namespace:mods::builder
ROOM_DMZ	structs.h	148;"	d
ROOM_EMP	mods/ai_state.hpp	/^				ROOM_EMP,ROOM_NORMAL$/;"	e	enum:mods::ai_state::event_type_t
ROOM_FLAGGED	utils.h	239;"	d
ROOM_FLAGS	utils.h	224;"	d
ROOM_GODROOM	structs.h	154;"	d
ROOM_HOUSE	structs.h	155;"	d
ROOM_HOUSE_CRASH	structs.h	156;"	d
ROOM_INDOORS	structs.h	146;"	d
ROOM_NAME_EMPTY	mods/builder.hpp	/^	constexpr static int ROOM_NAME_EMPTY = -2;$/;"	m	namespace:mods::builder
ROOM_NOMAGIC	structs.h	151;"	d
ROOM_NOMOB	structs.h	145;"	d
ROOM_NORMAL	mods/ai_state.hpp	/^				ROOM_EMP,ROOM_NORMAL$/;"	e	enum:mods::ai_state::event_type_t
ROOM_NOTRACK	structs.h	150;"	d
ROOM_NUMBER_OUT_OF_RANGE	mods/builder.hpp	/^	constexpr static int ROOM_NUMBER_OUT_OF_RANGE = -1;$/;"	m	namespace:mods::builder
ROOM_OLC	structs.h	158;"	d
ROOM_PEACEFUL	structs.h	147;"	d
ROOM_PRIVATE	structs.h	153;"	d
ROOM_SOUNDPROOF	structs.h	149;"	d
ROOM_TUNNEL	structs.h	152;"	d
ROWS	mods/mini-games/wires.hpp	/^		static constexpr int ROWS  = 2;$/;"	m	struct:mods::mini_games::wires
RR_MODE_MANUAL	mods/mob-roam.hpp	/^				RR_MODE_MANUAL = 1,$/;"	e	enum:mods::mob_roam::roam_recorder::mode_t
RR_MODE_PAVE	mods/mob-roam.hpp	/^				RR_MODE_PAVE = 2$/;"	e	enum:mods::mob_roam::roam_recorder::mode_t
RTA_CONTRA_SEC	mods/affiliations.hpp	/^		RTA_CONTRA_SEC,	\/\/ Private contractors$/;"	e	enum:mods::affiliation_t
RTA_K12_SYNDICATE	mods/affiliations.hpp	/^		RTA_K12_SYNDICATE,	\/\/ gang$/;"	e	enum:mods::affiliation_t
RTA_MF13	mods/affiliations.hpp	/^		RTA_MF13,		\/\/ gang$/;"	e	enum:mods::affiliation_t
RTA_POLICE	mods/affiliations.hpp	/^		RTA_POLICE,	\/\/ town police$/;"	e	enum:mods::affiliation_t
RTA_RUSSIAN_MOB	mods/affiliations.hpp	/^		RTA_RUSSIAN_MOB,	\/\/ mafia ran by russia$/;"	e	enum:mods::affiliation_t
RUBBLE	structs.h	/^			RUBBLE,			\/** decimation of buildings resulting in lots of ruble *\/$/;"	m	struct:room_data	typeref:enum:room_data::
RUNNING	mods/behaviour_tree_status.hpp	/^		RUNNING,$/;"	e	enum:mods::behaviour_tree_status
Read_Invalid_List	ban.cpp	/^void Read_Invalid_List(void) {$/;"	f
Read_Invalid_List	mods/hell.hpp	/^	constexpr inline bool Read_Invalid_List = false;$/;"	m	namespace:mods::hell
RegistrarForTagAliases	mods/catch2.hpp	/^    struct RegistrarForTagAliases {$/;"	s	namespace:Catch
ResultBuilder	mods/catch.hpp	/^	class ResultBuilder : public DecomposedExpression {$/;"	c	namespace:Catch
ResultDisposition	mods/catch.hpp	/^	struct ResultDisposition {$/;"	s	namespace:Catch
ResultDisposition	mods/catch2.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultWas	mods/catch.hpp	/^	struct ResultWas {$/;"	s	namespace:Catch
ResultWas	mods/catch2.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ReusableStringStream	mods/catch2.hpp	/^    class ReusableStringStream : NonCopyable {$/;"	c	namespace:Catch
SANA	utils.h	435;"	d
SANCTUARY	mods/flags.hpp	/^		SANCTUARY,$/;"	e	enum:mods::flags::aff
SANITY_CHECK	mods/values-list.cpp	/^SANITY_CHECK,"sanity-check"$/;"	v
SASG12	mods/orm/breacher.hpp	/^		const std::string SASG12 = "SASG12";$/;"	m	struct:mods::orm::breacher
SASG12	mods/weapon.hpp	/^			SASG12 = 2$/;"	e	enum:mods::weapon::sentinel::primary_choice_t
SAVING_BREATH	spells.h	195;"	d
SAVING_PARA	spells.h	192;"	d
SAVING_PETRI	spells.h	194;"	d
SAVING_ROD	spells.h	193;"	d
SAVING_SPELL	spells.h	196;"	d
SB	telnet.h	47;"	d
SCAN	mods/weapon-types.hpp	/^		SCAN,$/;"	e	enum:mods::weapon::capabilities::cap_t
SCANNED	mods/affects.hpp	/^		SCANNED = 4,$/;"	e	enum:mods::affects::affect_t
SCANNED	structs.h	/^			SCANNED,$/;"	m	struct:room_data	typeref:enum:room_data::
SCANNED_AFFECT_DURATION	mods/sensor-grenade.cpp	/^	static constexpr uint64_t SCANNED_AFFECT_DURATION = 400; \/** in ticks *\/$/;"	m	namespace:mods::sensor_grenade	file:
SCARH	mods/weapon.hpp	/^			SCARH = 1,$/;"	e	enum:mods::weapon::psyop::primary_choice_t
SCENARIO	mods/catch.hpp	12208;"	d
SCENARIO_METHOD	mods/catch.hpp	12209;"	d
SCMD_ASK	interpreter.h	137;"	d
SCMD_AUCTION	interpreter.h	143;"	d
SCMD_AUTOEXIT	interpreter.h	122;"	d
SCMD_AUTOMAP	interpreter.h	124;"	d
SCMD_BRIEF	interpreter.h	109;"	d
SCMD_BUG	interpreter.h	169;"	d
SCMD_CLEAR	interpreter.h	103;"	d
SCMD_CLOSE	interpreter.h	210;"	d
SCMD_COMMANDS	interpreter.h	159;"	d
SCMD_COMPACT	interpreter.h	110;"	d
SCMD_CREDITS	interpreter.h	95;"	d
SCMD_DATE	interpreter.h	155;"	d
SCMD_DEAF	interpreter.h	113;"	d
SCMD_DONATE	interpreter.h	166;"	d
SCMD_DOWN	interpreter.h	90;"	d
SCMD_DRINK	interpreter.h	196;"	d
SCMD_DROP	interpreter.h	164;"	d
SCMD_EAST	interpreter.h	86;"	d
SCMD_EAT	interpreter.h	194;"	d
SCMD_ECHO	interpreter.h	205;"	d
SCMD_EMOTE	interpreter.h	206;"	d
SCMD_FILL	interpreter.h	183;"	d
SCMD_FREEZE	interpreter.h	131;"	d
SCMD_GOSSIP	interpreter.h	142;"	d
SCMD_GRATZ	interpreter.h	144;"	d
SCMD_HANDBOOK	interpreter.h	94;"	d
SCMD_HIT	interpreter.h	190;"	d
SCMD_HOLLER	interpreter.h	140;"	d
SCMD_HOLYLIGHT	interpreter.h	120;"	d
SCMD_IDEA	interpreter.h	171;"	d
SCMD_IMMLIST	interpreter.h	100;"	d
SCMD_IMOTD	interpreter.h	102;"	d
SCMD_INFO	interpreter.h	93;"	d
SCMD_JUNK	interpreter.h	165;"	d
SCMD_LOCK	interpreter.h	212;"	d
SCMD_LOOK	interpreter.h	174;"	d
SCMD_MOTD	interpreter.h	101;"	d
SCMD_MURDER	interpreter.h	191;"	d
SCMD_NEWS	interpreter.h	96;"	d
SCMD_NOAUCTION	interpreter.h	112;"	d
SCMD_NOGOSSIP	interpreter.h	114;"	d
SCMD_NOGRATZ	interpreter.h	115;"	d
SCMD_NOHASSLE	interpreter.h	108;"	d
SCMD_NOREPEAT	interpreter.h	119;"	d
SCMD_NORTH	interpreter.h	85;"	d
SCMD_NOSUMMON	interpreter.h	107;"	d
SCMD_NOTELL	interpreter.h	111;"	d
SCMD_NOTITLE	interpreter.h	129;"	d
SCMD_NOWIZ	interpreter.h	116;"	d
SCMD_OPEN	interpreter.h	209;"	d
SCMD_PARDON	interpreter.h	128;"	d
SCMD_PICK	interpreter.h	213;"	d
SCMD_POLICIES	interpreter.h	98;"	d
SCMD_POOFIN	interpreter.h	186;"	d
SCMD_POOFOUT	interpreter.h	187;"	d
SCMD_POUR	interpreter.h	182;"	d
SCMD_QECHO	interpreter.h	179;"	d
SCMD_QSAY	interpreter.h	178;"	d
SCMD_QUAFF	interpreter.h	201;"	d
SCMD_QUEST	interpreter.h	117;"	d
SCMD_QUI	interpreter.h	151;"	d
SCMD_QUIT	interpreter.h	152;"	d
SCMD_READ	interpreter.h	175;"	d
SCMD_RECITE	interpreter.h	202;"	d
SCMD_REROLL	interpreter.h	127;"	d
SCMD_ROOMFLAGS	interpreter.h	118;"	d
SCMD_SHOUT	interpreter.h	141;"	d
SCMD_SHUTDOW	interpreter.h	147;"	d
SCMD_SHUTDOWN	interpreter.h	148;"	d
SCMD_SIP	interpreter.h	197;"	d
SCMD_SLOWNS	interpreter.h	121;"	d
SCMD_SOCIALS	interpreter.h	160;"	d
SCMD_SOUTH	interpreter.h	87;"	d
SCMD_SQUELCH	interpreter.h	130;"	d
SCMD_TASTE	interpreter.h	195;"	d
SCMD_THAW	interpreter.h	132;"	d
SCMD_TRACK	interpreter.h	123;"	d
SCMD_TYPO	interpreter.h	170;"	d
SCMD_UNAFFECT	interpreter.h	133;"	d
SCMD_UNLOCK	interpreter.h	211;"	d
SCMD_UP	interpreter.h	89;"	d
SCMD_UPTIME	interpreter.h	156;"	d
SCMD_USE	interpreter.h	200;"	d
SCMD_VERSION	interpreter.h	99;"	d
SCMD_WEST	interpreter.h	88;"	d
SCMD_WHISPER	interpreter.h	136;"	d
SCMD_WHOAMI	interpreter.h	104;"	d
SCMD_WIZHELP	interpreter.h	161;"	d
SCMD_WIZLIST	interpreter.h	97;"	d
SCOPE	mods/weapon.hpp	/^		SCOPE,$/;"	e	enum:mods::weapon::attachment_t
SE	telnet.h	57;"	d
SECS_PER_MUD_DAY	utils.h	138;"	d
SECS_PER_MUD_HOUR	utils.h	137;"	d
SECS_PER_MUD_MONTH	utils.h	139;"	d
SECS_PER_MUD_YEAR	utils.h	140;"	d
SECS_PER_REAL_DAY	utils.h	145;"	d
SECS_PER_REAL_HOUR	utils.h	144;"	d
SECS_PER_REAL_MIN	utils.h	143;"	d
SECS_PER_REAL_YEAR	utils.h	146;"	d
SECT	utils.h	257;"	d
SECT_CITY	structs.h	176;"	d
SECT_ELEVATOR	structs.h	185;"	d
SECT_FIELD	structs.h	177;"	d
SECT_FLYING	structs.h	183;"	d
SECT_FOREST	structs.h	178;"	d
SECT_HILLS	structs.h	179;"	d
SECT_INSIDE	structs.h	175;"	d
SECT_MOUNTAIN	structs.h	180;"	d
SECT_UNDERWATER	structs.h	184;"	d
SECT_WATER_NOSWIM	structs.h	182;"	d
SECT_WATER_SWIM	structs.h	181;"	d
SEEK_CUR	utils.h	536;"	d
SEEK_END	utils.h	537;"	d
SEEK_SET	utils.h	535;"	d
SELECTOR	mods/behaviour_tree_node.hpp	/^			enum node_type_t { DO_NOTHING, SELECTOR, SEQUENCE, LEAF };$/;"	e	enum:mods::behaviour_tree_node::node_type_t
SELF	utils.h	452;"	d
SEMI	mods/weapon.hpp	/^		SEMI,$/;"	e	enum:mods::weapon::vehicle_t
SENDOK	comm.cpp	2555;"	d	file:
SEND_HELP	globals.hpp	291;"	d
SENSE_LIFE	mods/flags.hpp	/^		SENSE_LIFE,$/;"	e	enum:mods::flags::aff
SENSE_MOTION	mods/weapon-types.hpp	/^		SENSE_MOTION,$/;"	e	enum:mods::weapon::capabilities::cap_t
SENSOR	mods/aoe.hpp	/^		SENSOR, \/** senses objects or enemies within blast_radius *\/$/;"	e	enum:mods::aoe::types_t
SENSOR_GRENADE_TICKS	mods/values-list.cpp	/^SENSOR_GRENADE_TICKS,6$/;"	v
SENTINEL	mods/classes/types.hpp	/^		SENTINEL,$/;"	e	enum:mods::classes::types
SENTINEL	mods/object.hpp	/^				SENTINEL,$/;"	e	enum:mods::object::object_type_enum_t
SENTINEL	structs.h	/^	SENTINEL = 3,$/;"	e	enum:player_class_t
SENTINEL_CURE_BASIC	mods/classes/sentinel.hpp	/^				SENTINEL_CURE_BASIC = 1,$/;"	e	enum:mods::classes::sentinel::cure_levels_t
SENTINEL_CURE_CRITIC	mods/classes/sentinel.hpp	/^				SENTINEL_CURE_CRITIC = 3,$/;"	e	enum:mods::classes::sentinel::cure_levels_t
SENTINEL_CURE_LIGHT	mods/classes/sentinel.hpp	/^				SENTINEL_CURE_LIGHT = 2,$/;"	e	enum:mods::classes::sentinel::cure_levels_t
SENTINEL_CURE_NONE	mods/classes/sentinel.hpp	/^				SENTINEL_CURE_NONE = 0,$/;"	e	enum:mods::classes::sentinel::cure_levels_t
SENTINEL_DENY_ENTRY_BARRICADE	mods/classes/sentinel.hpp	/^			SENTINEL_DENY_ENTRY_BARRICADE=4$/;"	e	enum:mods::classes::sentinel::deny_entry_levels_t
SENTINEL_DENY_ENTRY_BASIC	mods/classes/sentinel.hpp	/^			SENTINEL_DENY_ENTRY_BASIC = 1,$/;"	e	enum:mods::classes::sentinel::deny_entry_levels_t
SENTINEL_DENY_ENTRY_EXPELL	mods/classes/sentinel.hpp	/^			SENTINEL_DENY_ENTRY_EXPELL=3,$/;"	e	enum:mods::classes::sentinel::deny_entry_levels_t
SENTINEL_DENY_ENTRY_FIREWALL	mods/classes/sentinel.hpp	/^			SENTINEL_DENY_ENTRY_FIREWALL=2,$/;"	e	enum:mods::classes::sentinel::deny_entry_levels_t
SENTINEL_DENY_ENTRY_NONE	mods/classes/sentinel.hpp	/^			SENTINEL_DENY_ENTRY_NONE =0,$/;"	e	enum:mods::classes::sentinel::deny_entry_levels_t
SENTINEL_GSHIELD_BASIC	mods/classes/sentinel.hpp	/^			SENTINEL_GSHIELD_BASIC = 1,$/;"	e	enum:mods::classes::sentinel::gadget_shield_levels_t
SENTINEL_GSHIELD_DEFLECT	mods/classes/sentinel.hpp	/^			SENTINEL_GSHIELD_DEFLECT =2,$/;"	e	enum:mods::classes::sentinel::gadget_shield_levels_t
SENTINEL_GSHIELD_DEFLECT_IGNITE	mods/classes/sentinel.hpp	/^			SENTINEL_GSHIELD_DEFLECT_IGNITE = 3,$/;"	e	enum:mods::classes::sentinel::gadget_shield_levels_t
SENTINEL_GSHIELD_FIREWALL	mods/classes/sentinel.hpp	/^			SENTINEL_GSHIELD_FIREWALL = 4$/;"	e	enum:mods::classes::sentinel::gadget_shield_levels_t
SENTINEL_GSHIELD_NONE	mods/classes/sentinel.hpp	/^			SENTINEL_GSHIELD_NONE = 0,$/;"	e	enum:mods::classes::sentinel::gadget_shield_levels_t
SENTINEL_HEAL	mods/classes/sentinel.hpp	/^				SENTINEL_HEAL = 4$/;"	e	enum:mods::classes::sentinel::cure_levels_t
SENTINEL_HUMAN_SHIELD_ABSORB	mods/classes/sentinel.hpp	/^			SENTINEL_HUMAN_SHIELD_ABSORB = 2,$/;"	e	enum:mods::classes::sentinel::human_shield_levels_t
SENTINEL_HUMAN_SHIELD_BASIC	mods/classes/sentinel.hpp	/^			SENTINEL_HUMAN_SHIELD_BASIC  = 1,$/;"	e	enum:mods::classes::sentinel::human_shield_levels_t
SENTINEL_HUMAN_SHIELD_NONE	mods/classes/sentinel.hpp	/^			SENTINEL_HUMAN_SHIELD_NONE = 0,$/;"	e	enum:mods::classes::sentinel::human_shield_levels_t
SENTINEL_HUMAN_SHIELD_ON_COMBUST	mods/classes/sentinel.hpp	/^			SENTINEL_HUMAN_SHIELD_ON_COMBUST = 4$/;"	e	enum:mods::classes::sentinel::human_shield_levels_t
SENTINEL_HUMAN_SHIELD_ON_FIRE	mods/classes/sentinel.hpp	/^			SENTINEL_HUMAN_SHIELD_ON_FIRE = 3,$/;"	e	enum:mods::classes::sentinel::human_shield_levels_t
SENTINEL_INTIMIDATE_BASIC	mods/classes/sentinel.hpp	/^			SENTINEL_INTIMIDATE_BASIC = 1,$/;"	e	enum:mods::classes::sentinel::intimidate_levels_t
SENTINEL_INTIMIDATE_CRITIC	mods/classes/sentinel.hpp	/^			SENTINEL_INTIMIDATE_CRITIC = 3,$/;"	e	enum:mods::classes::sentinel::intimidate_levels_t
SENTINEL_INTIMIDATE_HEART_ATTACK	mods/classes/sentinel.hpp	/^			SENTINEL_INTIMIDATE_HEART_ATTACK = 4$/;"	e	enum:mods::classes::sentinel::intimidate_levels_t
SENTINEL_INTIMIDATE_LIGHT	mods/classes/sentinel.hpp	/^			SENTINEL_INTIMIDATE_LIGHT = 2,$/;"	e	enum:mods::classes::sentinel::intimidate_levels_t
SENTINEL_INTIMIDATE_NONE	mods/classes/sentinel.hpp	/^			SENTINEL_INTIMIDATE_NONE = 0,$/;"	e	enum:mods::classes::sentinel::intimidate_levels_t
SENTINEL_NONE	mods/weapon.hpp	/^			SENTINEL_NONE = 0,$/;"	e	enum:mods::weapon::sentinel::primary_choice_t
SENTINEL_OBLIQUE_KICK_BASE	mods/classes/sentinel.hpp	/^			SENTINEL_OBLIQUE_KICK_BASE = 1,$/;"	e	enum:mods::classes::sentinel::oblique_kick_levels_t
SENTINEL_OBLIQUE_KICK_EXTREME	mods/classes/sentinel.hpp	/^			SENTINEL_OBLIQUE_KICK_EXTREME = 3$/;"	e	enum:mods::classes::sentinel::oblique_kick_levels_t
SENTINEL_OBLIQUE_KICK_HEAVY	mods/classes/sentinel.hpp	/^			SENTINEL_OBLIQUE_KICK_HEAVY = 2,$/;"	e	enum:mods::classes::sentinel::oblique_kick_levels_t
SENTINEL_OBLIQUE_KICK_NONE	mods/classes/sentinel.hpp	/^			SENTINEL_OBLIQUE_KICK_NONE = 0,$/;"	e	enum:mods::classes::sentinel::oblique_kick_levels_t
SENTINEL_PRIMARY_MP5	mods/weapon.hpp	/^			SENTINEL_PRIMARY_MP5 = 1,$/;"	e	enum:mods::weapon::sentinel::primary_choice_t
SENTINEL_PRIMARY_SASG12	mods/weapon.hpp	/^			SENTINEL_PRIMARY_SASG12 = 2,$/;"	e	enum:mods::weapon::sentinel::primary_choice_t
SENTINEL_SHIELD_PROFICIENCY_BASIC	mods/classes/sentinel.hpp	/^			SENTINEL_SHIELD_PROFICIENCY_BASIC = 1,$/;"	e	enum:mods::classes::sentinel::shield_proficiency_levels_t
SENTINEL_SHIELD_PROFICIENCY_DEFLECT	mods/classes/sentinel.hpp	/^			SENTINEL_SHIELD_PROFICIENCY_DEFLECT = 2,$/;"	e	enum:mods::classes::sentinel::shield_proficiency_levels_t
SENTINEL_SHIELD_PROFICIENCY_DEFLECT_AND_IGNITE	mods/classes/sentinel.hpp	/^			SENTINEL_SHIELD_PROFICIENCY_DEFLECT_AND_IGNITE = 3$/;"	e	enum:mods::classes::sentinel::shield_proficiency_levels_t
SENTINEL_SHIELD_PROFICIENCY_NONE	mods/classes/sentinel.hpp	/^			SENTINEL_SHIELD_PROFICIENCY_NONE = 0,$/;"	e	enum:mods::classes::sentinel::shield_proficiency_levels_t
SEN_STR	mods/weapon.hpp	602;"	d
SEN_STR	mods/weapon.hpp	612;"	d
SEQUENCE	mods/behaviour_tree_node.hpp	/^			enum node_type_t { DO_NOTHING, SELECTOR, SEQUENCE, LEAF };$/;"	e	enum:mods::behaviour_tree_node::node_type_t
SERVER_ROOM	structs.h	/^			SERVER_ROOM,$/;"	m	struct:room_data	typeref:enum:room_data::
SET_BIT	utils.h	201;"	d
SET_OR_REMOVE	act.wizard.cpp	2294;"	d	file:
SET_SKILL	utils.h	345;"	d
SEWER	structs.h	/^			SEWER,			\/** Underground sewer tunnel *\/$/;"	m	struct:room_data	typeref:enum:room_data::
SEX_FEMALE	structs.h	257;"	d
SEX_MALE	structs.h	256;"	d
SEX_NEUTRAL	structs.h	255;"	d
SHALLOW_WATER	structs.h	/^			SHALLOW_WATER,	\/** less than 5 inches of water *\/$/;"	m	struct:room_data	typeref:enum:room_data::
SHARED_MEMORY_ID	mods/lmdb/gdns-shared-memory.hpp	12;"	d
SHATTERED_GLASS	structs.h	/^			SHATTERED_GLASS, \/** results of breaking glass objects *\/$/;"	m	struct:room_data	typeref:enum:room_data::
SHOCK	mods/object.hpp	/^				SHOCK,$/;"	e	enum:mods::object::object_type_enum_t
SHOOT	mods/weapon-types.hpp	/^		SHOOT,$/;"	e	enum:mods::weapon::capabilities::cap_t
SHOP_BANK	shop.h	144;"	d
SHOP_BITVECTOR	shop.h	146;"	d
SHOP_BROKE_TEMPER	shop.h	145;"	d
SHOP_BUYPROFIT	shop.h	149;"	d
SHOP_BUYTYPE	shop.h	141;"	d
SHOP_BUYWORD	shop.h	142;"	d
SHOP_CLOSE1	shop.h	137;"	d
SHOP_CLOSE2	shop.h	139;"	d
SHOP_FUNC	shop.h	151;"	d
SHOP_KEEPER	shop.h	135;"	d
SHOP_KILL_CHARS	shop.h	166;"	d
SHOP_NUM	shop.h	134;"	d
SHOP_OPEN1	shop.h	136;"	d
SHOP_OPEN2	shop.h	138;"	d
SHOP_PRODUCT	shop.h	143;"	d
SHOP_ROOM	shop.h	140;"	d
SHOP_SELLPROFIT	shop.h	150;"	d
SHOP_SORT	shop.h	148;"	d
SHOP_TRADE_WITH	shop.h	147;"	d
SHOP_USES_BANK	shop.h	167;"	d
SHORT_RANGE	mods/object.hpp	/^				SHORT_RANGE,$/;"	e	enum:mods::object::object_type_enum_t
SHOTGUN	mods/mobs/mob.hpp	/^		enum mask_type { SMG, SNIPE, SHOTGUN, GRENADE };$/;"	e	enum:mods::weapon::mask_type
SHOTGUN	mods/object.hpp	/^				SHOTGUN,$/;"	e	enum:mods::object::object_type_enum_t
SHOTGUN	mods/weapon.hpp	/^	enum mask_type { SMG = 1, SNIPE = (1 << 2), SHOTGUN = (1 << 3),$/;"	e	enum:mods::weapon::mask_type
SHOULDER	mods/object.hpp	/^				SHOULDER,$/;"	e	enum:mods::object::object_type_enum_t
SHOULD_DO_RANDOM_TRIVIAL	mods/mobs/lowly-security.hpp	/^		static constexpr uint16_t SHOULD_DO_RANDOM_TRIVIAL = 1;$/;"	m	struct:mods::mobs::lowly_security
SHOULD_DO_ROAM	mods/mobs/lowly-security.hpp	/^		static constexpr uint16_t SHOULD_DO_ROAM = 0;$/;"	m	struct:mods::mobs::lowly_security
SHOULD_RATE_LIMIT	globals.hpp	290;"	d
SHOW_OBJ_ACTION	act.informative.cpp	122;"	d	file:
SHOW_OBJ_LONG	act.informative.cpp	120;"	d	file:
SHOW_OBJ_SHORT	act.informative.cpp	121;"	d	file:
SHP_PREFIX	db.h	72;"	d
SHRAPNEL	mods/aoe.hpp	/^		SHRAPNEL,	\/** metal fragments flown in random directions *\/$/;"	e	enum:mods::aoe::types_t
SIDERAIL	mods/weapon.hpp	/^		SIDERAIL$/;"	e	enum:mods::weapon::attachment_t
SIGALRM	comm.cpp	40;"	d	file:
SIGPIPE	comm.cpp	39;"	d	file:
SINFO	spell_parser.cpp	25;"	d	file:
SINGLE_CHAR_COLUMN	mods/builder.cpp	/^	SINGLE_CHAR_COLUMN,$/;"	e	enum:field_type_t	file:
SITEOK	mods/flags.hpp	/^		SITEOK,$/;"	e	enum:mods::flags::plr
SIZE	mods/player.hpp	/^				SIZE = HOLD_ANYTHING$/;"	e	enum:mods::player::misc_pref_enum_t
SKILL	class.cpp	397;"	d	file:
SKILL_ACCURACY	mods/values-list.cpp	/^SKILL_ACCURACY,150$/;"	v
SKILL_ADRENALINE_BOOST	mods/values-list.cpp	/^SKILL_ADRENALINE_BOOST,2050$/;"	v
SKILL_ADVANCED_ARMOR	mods/values-list.cpp	/^SKILL_ADVANCED_ARMOR,50$/;"	v
SKILL_ADVANCED_ASSAULT_RIFLE	mods/values-list.cpp	/^SKILL_ADVANCED_ASSAULT_RIFLE,150$/;"	v
SKILL_ADVANCED_PISTOL	mods/values-list.cpp	/^SKILL_ADVANCED_PISTOL,150$/;"	v
SKILL_ADVANCED_SHOTGUN	mods/values-list.cpp	/^SKILL_ADVANCED_SHOTGUN,150$/;"	v
SKILL_ADVANCED_SNIPER_RIFLE	mods/values-list.cpp	/^SKILL_ADVANCED_SNIPER_RIFLE,150$/;"	v
SKILL_ADVANCED_SUB_MACHINE_GUN	mods/values-list.cpp	/^SKILL_ADVANCED_SUB_MACHINE_GUN,150$/;"	v
SKILL_ARMOR	mods/forge-engine/requirements.hpp	/^			SKILL_ARMOR ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_ARMOR_PENETRATION_SHOT	mods/values-list.cpp	/^SKILL_ARMOR_PENETRATION_SHOT,150$/;"	v
SKILL_ASSAULT_RIFLE_SHRAPNEL	mods/values-list.cpp	/^SKILL_ASSAULT_RIFLE_SHRAPNEL,150$/;"	v
SKILL_BACKSTAB	spells.h	96;"	d
SKILL_BASH	spells.h	97;"	d
SKILL_BASIC_ARMOR	mods/values-list.cpp	/^SKILL_BASIC_ARMOR,50$/;"	v
SKILL_BASIC_ASSAULT_RIFLE	mods/values-list.cpp	/^SKILL_BASIC_ASSAULT_RIFLE,150$/;"	v
SKILL_BASIC_HP_RECOVERY	mods/values-list.cpp	/^SKILL_BASIC_HP_RECOVERY,2050$/;"	v
SKILL_BASIC_PISTOL	mods/values-list.cpp	/^SKILL_BASIC_PISTOL,150$/;"	v
SKILL_BASIC_SHOTGUN	mods/values-list.cpp	/^SKILL_BASIC_SHOTGUN,150$/;"	v
SKILL_BASIC_SNIPER_RIFLE	mods/values-list.cpp	/^SKILL_BASIC_SNIPER_RIFLE,150$/;"	v
SKILL_BASIC_SUB_MACHINE_GUN	mods/values-list.cpp	/^SKILL_BASIC_SUB_MACHINE_GUN,150$/;"	v
SKILL_BETTER_EXPLOSIONS	mods/values-list.cpp	/^SKILL_BETTER_EXPLOSIONS,33$/;"	v
SKILL_BETTER_SNIPING_ACCURACY	mods/values-list.cpp	/^SKILL_BETTER_SNIPING_ACCURACY,450$/;"	v
SKILL_BETTER_WEAPON_ACCURACY	mods/values-list.cpp	/^SKILL_BETTER_WEAPON_ACCURACY,50$/;"	v
SKILL_BIGGER_CLAYMORES	mods/values-list.cpp	/^SKILL_BIGGER_CLAYMORES,50$/;"	v
SKILL_BIGGER_FIRE_NADES	mods/values-list.cpp	/^SKILL_BIGGER_FIRE_NADES,50$/;"	v
SKILL_BREACH_USAGE	mods/values-list.cpp	/^SKILL_BREACH_USAGE,50$/;"	v
SKILL_CAMERA_DESTRUCTION	mods/values-list.cpp	/^SKILL_CAMERA_DESTRUCTION,100$/;"	v
SKILL_CAMERA_PLACEMENT	mods/values-list.cpp	/^SKILL_CAMERA_PLACEMENT,50$/;"	v
SKILL_CHA	mods/forge-engine/requirements.hpp	/^			SKILL_CHA ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_CHAINABLE_BREACHING	mods/values-list.cpp	/^SKILL_CHAINABLE_BREACHING,1$/;"	v
SKILL_CHEMISTRY	mods/forge-engine/requirements.hpp	/^			SKILL_CHEMISTRY ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_CLAYMORE_USAGE	mods/values-list.cpp	/^SKILL_CLAYMORE_USAGE,50$/;"	v
SKILL_CON	mods/forge-engine/requirements.hpp	/^			SKILL_CON ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_COUNTER_SHOCK	mods/values-list.cpp	/^SKILL_COUNTER_SHOCK,4$/;"	v
SKILL_CRAFTY_C4	mods/values-list.cpp	/^SKILL_CRAFTY_C4,4$/;"	v
SKILL_CREATE_EMP_WEAPONS	mods/values-list.cpp	/^SKILL_CREATE_EMP_WEAPONS,200$/;"	v
SKILL_DEMOLITIONS	mods/forge-engine/requirements.hpp	/^			SKILL_DEMOLITIONS ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_DEPLOYABLE_FIRE_TURRET	mods/values-list.cpp	/^SKILL_DEPLOYABLE_FIRE_TURRET,3050$/;"	v
SKILL_DEPLOYABLE_SHIELD	mods/values-list.cpp	/^SKILL_DEPLOYABLE_SHIELD,8050$/;"	v
SKILL_DEPLOYABLE_TURRET	mods/values-list.cpp	/^SKILL_DEPLOYABLE_TURRET,3050$/;"	v
SKILL_DETECT_CAMERAS	mods/values-list.cpp	/^SKILL_DETECT_CAMERAS,50$/;"	v
SKILL_DEX	mods/forge-engine/requirements.hpp	/^			SKILL_DEX ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_DOOR_CAMERA	mods/values-list.cpp	/^SKILL_DOOR_CAMERA,3050$/;"	v
SKILL_DUTCH_OVEN	mods/values-list.cpp	/^SKILL_DUTCH_OVEN,50$/;"	v
SKILL_ELECTRIFIED_DAMAGE	mods/values-list.cpp	/^SKILL_ELECTRIFIED_DAMAGE,100$/;"	v
SKILL_ELECTRONICS	mods/forge-engine/requirements.hpp	/^			SKILL_ELECTRONICS ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_ELITE_ARMOR	mods/values-list.cpp	/^SKILL_ELITE_ARMOR,50$/;"	v
SKILL_ENTRY_DENIAL	mods/values-list.cpp	/^SKILL_ENTRY_DENIAL,2050$/;"	v
SKILL_EXPERT_ASSAULT_RIFLE	mods/values-list.cpp	/^SKILL_EXPERT_ASSAULT_RIFLE,150$/;"	v
SKILL_EXPERT_PISTOL	mods/values-list.cpp	/^SKILL_EXPERT_PISTOL,150$/;"	v
SKILL_EXPERT_SHOTGUN	mods/values-list.cpp	/^SKILL_EXPERT_SHOTGUN,150$/;"	v
SKILL_EXPERT_SNIPER_RIFLE	mods/values-list.cpp	/^SKILL_EXPERT_SNIPER_RIFLE,150$/;"	v
SKILL_EXPERT_SUB_MACHINE_GUN	mods/values-list.cpp	/^SKILL_EXPERT_SUB_MACHINE_GUN,150$/;"	v
SKILL_EXPLOSIVE_RESISTANCE	mods/values-list.cpp	/^SKILL_EXPLOSIVE_RESISTANCE,2050$/;"	v
SKILL_FASTER_BREACHES	mods/values-list.cpp	/^SKILL_FASTER_BREACHES,50$/;"	v
SKILL_FASTER_RELOADING	mods/values-list.cpp	/^SKILL_FASTER_RELOADING,50$/;"	v
SKILL_FASTER_THERMITES	mods/values-list.cpp	/^SKILL_FASTER_THERMITES,50$/;"	v
SKILL_FASTER_TRIGGER_FINGER	mods/values-list.cpp	/^SKILL_FASTER_TRIGGER_FINGER,50$/;"	v
SKILL_FIRE_NADE_DEALER	mods/values-list.cpp	/^SKILL_FIRE_NADE_DEALER,50$/;"	v
SKILL_FURTHER_C4S	mods/values-list.cpp	/^SKILL_FURTHER_C4S,4$/;"	v
SKILL_GHOST_CRYOGENIC_GRENADE	mods/values-list.cpp	/^SKILL_GHOST_CRYOGENIC_GRENADE,50$/;"	v
SKILL_GHOST_DRONE_SCAN	mods/values-list.cpp	/^SKILL_GHOST_DRONE_SCAN,50$/;"	v
SKILL_GHOST_FEIGN_DEATH	mods/values-list.cpp	/^SKILL_GHOST_FEIGN_DEATH,50$/;"	v
SKILL_GHOST_FLASH_UNDERBARREL	mods/values-list.cpp	/^SKILL_GHOST_FLASH_UNDERBARREL,50$/;"	v
SKILL_GHOST_INTIMIDATION	mods/values-list.cpp	/^SKILL_GHOST_INTIMIDATION,50$/;"	v
SKILL_GHOST_PENETRATING_SHOT	mods/values-list.cpp	/^SKILL_GHOST_PENETRATING_SHOT,50$/;"	v
SKILL_GHOST_PLANT_CLAYMORE	mods/values-list.cpp	/^SKILL_GHOST_PLANT_CLAYMORE,50$/;"	v
SKILL_GHOST_STEALTH	mods/values-list.cpp	/^SKILL_GHOST_STEALTH,50$/;"	v
SKILL_GHOST_SUMMON_EXTRACTION	mods/values-list.cpp	/^SKILL_GHOST_SUMMON_EXTRACTION,50$/;"	v
SKILL_GHOST_XRAY_SHOT	mods/values-list.cpp	/^SKILL_GHOST_XRAY_SHOT,50$/;"	v
SKILL_GRENADE_USAGE	mods/values-list.cpp	/^SKILL_GRENADE_USAGE,50$/;"	v
SKILL_HEADGEAR_INTROSPECTION	mods/values-list.cpp	/^SKILL_HEADGEAR_INTROSPECTION,3050$/;"	v
SKILL_HEADSHOT_CHANCE	mods/values-list.cpp	/^SKILL_HEADSHOT_CHANCE,250$/;"	v
SKILL_HGH_DEALER	mods/values-list.cpp	/^SKILL_HGH_DEALER,50$/;"	v
SKILL_HGH_MORE_POWERFUL	mods/values-list.cpp	/^SKILL_HGH_MORE_POWERFUL,2050$/;"	v
SKILL_HIDE	spells.h	98;"	d
SKILL_INCREASED_AWARENESS	mods/values-list.cpp	/^SKILL_INCREASED_AWARENESS,2050$/;"	v
SKILL_INCREASED_INJURE_CHANCE	mods/values-list.cpp	/^SKILL_INCREASED_INJURE_CHANCE,150$/;"	v
SKILL_INJURE_RESISTANCE	mods/values-list.cpp	/^SKILL_INJURE_RESISTANCE,3050$/;"	v
SKILL_INTEL	mods/forge-engine/requirements.hpp	/^			SKILL_INTEL ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_INTERMEDIATE_ASSAULT_RIFLE	mods/values-list.cpp	/^SKILL_INTERMEDIATE_ASSAULT_RIFLE,150$/;"	v
SKILL_INTERMEDIATE_PISTOL	mods/values-list.cpp	/^SKILL_INTERMEDIATE_PISTOL,150$/;"	v
SKILL_INTERMEDIATE_SHOTGUN	mods/values-list.cpp	/^SKILL_INTERMEDIATE_SHOTGUN,150$/;"	v
SKILL_INTERMEDIATE_SNIPER_RIFLE	mods/values-list.cpp	/^SKILL_INTERMEDIATE_SNIPER_RIFLE,150$/;"	v
SKILL_INTERMEDIATE_SUB_MACHINE_GUN	mods/values-list.cpp	/^SKILL_INTERMEDIATE_SUB_MACHINE_GUN,150$/;"	v
SKILL_KICK	spells.h	99;"	d
SKILL_LIMB_CHANCE	mods/values-list.cpp	/^SKILL_LIMB_CHANCE,350$/;"	v
SKILL_MARKSMANSHIP	mods/forge-engine/requirements.hpp	/^			SKILL_MARKSMANSHIP ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_MEDICAL	mods/forge-engine/requirements.hpp	/^			SKILL_MEDICAL ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_MISDIRECTION	mods/values-list.cpp	/^SKILL_MISDIRECTION,2050$/;"	v
SKILL_MOLD	mods/values-list.cpp	/^SKILL_MOLD,350$/;"	v
SKILL_MUNITIONS_REFLECTOR	mods/values-list.cpp	/^SKILL_MUNITIONS_REFLECTOR,4$/;"	v
SKILL_NONSTOP_PENETRATION_SHOT	mods/values-list.cpp	/^SKILL_NONSTOP_PENETRATION_SHOT,150$/;"	v
SKILL_NOXIOUS_NADE_CRAFTER	mods/values-list.cpp	/^SKILL_NOXIOUS_NADE_CRAFTER,50$/;"	v
SKILL_NO_FACTOR_ADVANCED	mods/values-list.cpp	/^SKILL_NO_FACTOR_ADVANCED,850$/;"	v
SKILL_NO_FACTOR_BASIC	mods/values-list.cpp	/^SKILL_NO_FACTOR_BASIC,400$/;"	v
SKILL_NO_FACTOR_ELITE	mods/values-list.cpp	/^SKILL_NO_FACTOR_ELITE,900$/;"	v
SKILL_PARASITIC_HP_RECOVERY	mods/values-list.cpp	/^SKILL_PARASITIC_HP_RECOVERY,2050$/;"	v
SKILL_PICK_LOCK	spells.h	100;"	d
SKILL_PROTECT_FROM_EMP	mods/values-list.cpp	/^SKILL_PROTECT_FROM_EMP,200$/;"	v
SKILL_PROXIMITY_ALARM	mods/values-list.cpp	/^SKILL_PROXIMITY_ALARM,3050$/;"	v
SKILL_PRO_WEAPON_HANDLER	mods/values-list.cpp	/^SKILL_PRO_WEAPON_HANDLER,50$/;"	v
SKILL_PYREXIA_ATTACH_FLAMETHROWER	mods/values-list.cpp	/^SKILL_PYREXIA_ATTACH_FLAMETHROWER,50$/;"	v
SKILL_PYREXIA_ATTACH_INC_LAUNCHER	mods/values-list.cpp	/^SKILL_PYREXIA_ATTACH_INC_LAUNCHER,50$/;"	v
SKILL_PYREXIA_CONVERT_TO_FIRE_NADE	mods/values-list.cpp	/^SKILL_PYREXIA_CONVERT_TO_FIRE_NADE,50$/;"	v
SKILL_PYREXIA_CREATE_WALL_OF_FIRE	mods/values-list.cpp	/^SKILL_PYREXIA_CREATE_WALL_OF_FIRE,50$/;"	v
SKILL_PYREXIA_DRENCH_IN_GASOLINE	mods/values-list.cpp	/^SKILL_PYREXIA_DRENCH_IN_GASOLINE,50$/;"	v
SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE	mods/values-list.cpp	/^SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE,50$/;"	v
SKILL_PYREXIA_SEAL_OFF_ROOM	mods/values-list.cpp	/^SKILL_PYREXIA_SEAL_OFF_ROOM,50$/;"	v
SKILL_PYREXIA_THROW_FIRE_NADE	mods/values-list.cpp	/^SKILL_PYREXIA_THROW_FIRE_NADE,50$/;"	v
SKILL_QUIETER_SNIPER_SHOTS	mods/values-list.cpp	/^SKILL_QUIETER_SNIPER_SHOTS,350$/;"	v
SKILL_REDUCED_DETECTION_CHANCE	mods/values-list.cpp	/^SKILL_REDUCED_DETECTION_CHANCE,4$/;"	v
SKILL_RESCUE	spells.h	102;"	d
SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER	mods/values-list.cpp	/^SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER,50$/;"	v
SKILL_RETROFIT_GRENADE_LAUNCHER	mods/values-list.cpp	/^SKILL_RETROFIT_GRENADE_LAUNCHER,50$/;"	v
SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER	mods/values-list.cpp	/^SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER,50$/;"	v
SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER	mods/values-list.cpp	/^SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER,50$/;"	v
SKILL_RETROFIT_STUN_GRENADE_LAUNCHER	mods/values-list.cpp	/^SKILL_RETROFIT_STUN_GRENADE_LAUNCHER,50$/;"	v
SKILL_SENTINEL_DISCIPLINE	mods/values-list.cpp	/^SKILL_SENTINEL_DISCIPLINE,3$/;"	v
SKILL_SNEAK	spells.h	103;"	d
SKILL_SNIPER_GUIDED_MISSILE	mods/values-list.cpp	/^SKILL_SNIPER_GUIDED_MISSILE,50$/;"	v
SKILL_SNIPER_PLANT_CLAYMORE	mods/values-list.cpp	/^SKILL_SNIPER_PLANT_CLAYMORE,50$/;"	v
SKILL_SNIPER_SUMMON_AREA_SCAN	mods/values-list.cpp	/^SKILL_SNIPER_SUMMON_AREA_SCAN,50$/;"	v
SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER	mods/values-list.cpp	/^SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER,50$/;"	v
SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN	mods/values-list.cpp	/^SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN,50$/;"	v
SKILL_SNIPER_SUPPORT	mods/values-list.cpp	/^SKILL_SNIPER_SUPPORT,2050$/;"	v
SKILL_SNIPER_TARGET_LIMB	mods/values-list.cpp	/^SKILL_SNIPER_TARGET_LIMB,50$/;"	v
SKILL_SNIPER_TRACKING_SHOT	mods/values-list.cpp	/^SKILL_SNIPER_TRACKING_SHOT,50$/;"	v
SKILL_SNIPER_TRACKING_SHOT_TICKS	mods/values-list.cpp	/^SKILL_SNIPER_TRACKING_SHOT_TICKS,280$/;"	v
SKILL_SNIPER_XRAY_SHOT	mods/values-list.cpp	/^SKILL_SNIPER_XRAY_SHOT,50$/;"	v
SKILL_SNIPING	mods/forge-engine/requirements.hpp	/^			SKILL_SNIPING ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_SPRAY_CHANCE	mods/values-list.cpp	/^SKILL_SPRAY_CHANCE,150$/;"	v
SKILL_STEAL	spells.h	104;"	d
SKILL_STEROID_DEALER	mods/values-list.cpp	/^SKILL_STEROID_DEALER,50$/;"	v
SKILL_STR	mods/forge-engine/requirements.hpp	/^			SKILL_STR = 1,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_STRATEGY	mods/forge-engine/requirements.hpp	/^			SKILL_STRATEGY ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_STRONGER_FRAG_ARM	mods/values-list.cpp	/^SKILL_STRONGER_FRAG_ARM,50$/;"	v
SKILL_STR_ADD	mods/forge-engine/requirements.hpp	/^			SKILL_STR_ADD ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_SUTURE	mods/values-list.cpp	/^SKILL_SUTURE,2050$/;"	v
SKILL_TARGET_LIMB	mods/values-list.cpp	/^SKILL_TARGET_LIMB,850$/;"	v
SKILL_THIEF	mods/values-list.cpp	/^SKILL_THIEF,200$/;"	v
SKILL_TOGGLE_NIGHT_VISION	mods/values-list.cpp	/^SKILL_TOGGLE_NIGHT_VISION,2050$/;"	v
SKILL_TOGGLE_THERMAL	mods/values-list.cpp	/^SKILL_TOGGLE_THERMAL,2050$/;"	v
SKILL_TRACK	spells.h	105;"	d
SKILL_TRACKER	mods/values-list.cpp	/^SKILL_TRACKER,350$/;"	v
SKILL_TRICK_MAGAZINE	mods/values-list.cpp	/^SKILL_TRICK_MAGAZINE,2050$/;"	v
SKILL_VIP	mods/values-list.cpp	/^SKILL_VIP,250$/;"	v
SKILL_WEAPON_HANDLING	mods/forge-engine/requirements.hpp	/^			SKILL_WEAPON_HANDLING ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKILL_WIS	mods/forge-engine/requirements.hpp	/^			SKILL_WIS ,$/;"	e	enum:mods::forge_engine::stat_types_t
SKIP_WHITESPACE	mods/acl/config-parser.hpp	31;"	d
SKY_CLOUDLESS	structs.h	612;"	d
SKY_CLOUDY	structs.h	613;"	d
SKY_LIGHTNING	structs.h	615;"	d
SKY_RAINING	structs.h	614;"	d
SLASH	db.h	31;"	d
SLASH	db.h	42;"	d
SLC_ABORT	telnet.h	187;"	d
SLC_ACK	telnet.h	231;"	d
SLC_AO	telnet.h	184;"	d
SLC_AYT	telnet.h	185;"	d
SLC_BRK	telnet.h	182;"	d
SLC_CANTCHANGE	telnet.h	222;"	d
SLC_DEFAULT	telnet.h	224;"	d
SLC_EC	telnet.h	190;"	d
SLC_EL	telnet.h	191;"	d
SLC_EOF	telnet.h	188;"	d
SLC_EOR	telnet.h	186;"	d
SLC_EW	telnet.h	192;"	d
SLC_FLAGS	telnet.h	228;"	d
SLC_FLUSHIN	telnet.h	232;"	d
SLC_FLUSHOUT	telnet.h	233;"	d
SLC_FORW1	telnet.h	197;"	d
SLC_FORW2	telnet.h	198;"	d
SLC_FUNC	telnet.h	227;"	d
SLC_IP	telnet.h	183;"	d
SLC_LEVELBITS	telnet.h	225;"	d
SLC_LNEXT	telnet.h	194;"	d
SLC_NAME	telnet.h	219;"	d
SLC_NAMELIST	telnet.h	206;"	d
SLC_NAMES	telnet.h	215;"	d
SLC_NAME_OK	telnet.h	218;"	d
SLC_NOSUPPORT	telnet.h	221;"	d
SLC_RP	telnet.h	193;"	d
SLC_SUSP	telnet.h	189;"	d
SLC_SYNCH	telnet.h	181;"	d
SLC_VALUE	telnet.h	229;"	d
SLC_VARIABLE	telnet.h	223;"	d
SLC_XOFF	telnet.h	196;"	d
SLC_XON	telnet.h	195;"	d
SLEDGEHAMMER	mods/object.hpp	/^				SLEDGEHAMMER,$/;"	e	enum:mods::object::object_type_enum_t
SLEEP	mods/flags.hpp	/^		SLEEP,$/;"	e	enum:mods::flags::aff
SMALL_BUFSIZE	structs.h	689;"	d
SMG	mods/mobs/mob.hpp	/^		enum mask_type { SMG, SNIPE, SHOTGUN, GRENADE };$/;"	e	enum:mods::weapon::mask_type
SMG	mods/weapon.hpp	/^	enum mask_type { SMG = 1, SNIPE = (1 << 2), SHOTGUN = (1 << 3),$/;"	e	enum:mods::weapon::mask_type
SMOKE_GRENADE_TICKS	mods/values-list.cpp	/^SMOKE_GRENADE_TICKS,6$/;"	v
SMOKE_SCREEN	mods/aoe.hpp	/^		SMOKE_SCREEN,	\/** Typical grey smoke screen. Hampers vision *\/$/;"	e	enum:mods::aoe::types_t
SMOKING	structs.h	/^			SMOKING = 4,$/;"	e	enum:uint8_t
SMOLDERING	structs.h	/^			SMOLDERING = 3,$/;"	e	enum:uint8_t
SNEAK	mods/flags.hpp	/^		SNEAK,$/;"	e	enum:mods::flags::aff
SNIPE	mods/mobs/mob.hpp	/^		enum mask_type { SMG, SNIPE, SHOTGUN, GRENADE };$/;"	e	enum:mods::weapon::mask_type
SNIPE	mods/weapon-types.hpp	/^		SNIPE,$/;"	e	enum:mods::weapon::capabilities::cap_t
SNIPE	mods/weapon.hpp	/^	enum mask_type { SMG = 1, SNIPE = (1 << 2), SHOTGUN = (1 << 3),$/;"	e	enum:mods::weapon::mask_type
SNIPER	mods/classes/types.hpp	/^		SNIPER,$/;"	e	enum:mods::classes::types
SNIPER	structs.h	/^	SNIPER = 1,$/;"	e	enum:player_class_t
SNIPER_NONE	mods/weapon.hpp	/^			SNIPER_NONE = 0,$/;"	e	enum:mods::weapon::sniper::primary_choice_t
SNIPER_PRIMARY_L96AW	mods/weapon.hpp	/^			SNIPER_PRIMARY_L96AW = 2,$/;"	e	enum:mods::weapon::sniper::primary_choice_t
SNIPER_PRIMARY_PSG1	mods/weapon.hpp	/^			SNIPER_PRIMARY_PSG1 = 1,$/;"	e	enum:mods::weapon::sniper::primary_choice_t
SNIPER_RIFLE	mods/object.hpp	/^				SNIPER_RIFLE,$/;"	e	enum:mods::object::object_type_enum_t
SNIPER_SECONARY_L96AW	mods/weapon.hpp	/^			SNIPER_SECONARY_L96AW = 2,$/;"	e	enum:mods::weapon::sniper::secondary_choice_t
SNIPER_SECONARY_PSG1	mods/weapon.hpp	/^			SNIPER_SECONARY_PSG1 = 1,$/;"	e	enum:mods::weapon::sniper::secondary_choice_t
SNIPER_SECONDARY_NONE	mods/weapon.hpp	/^			SNIPER_SECONDARY_NONE = 0,$/;"	e	enum:mods::weapon::sniper::secondary_choice_t
SNI_STR	mods/weapon.hpp	376;"	d
SNI_STR	mods/weapon.hpp	380;"	d
SNI_STR	mods/weapon.hpp	397;"	d
SNI_STR	mods/weapon.hpp	402;"	d
SNI_STR	mods/weapon.hpp	413;"	d
SNI_STR	mods/weapon.hpp	418;"	d
SNI_STR	mods/weapon.hpp	435;"	d
SNI_STR	mods/weapon.hpp	440;"	d
SNI_STR	mods/weapon.hpp	451;"	d
SNI_STR	mods/weapon.hpp	456;"	d
SNI_STR	mods/weapon.hpp	462;"	d
SOCMESS_FILE	db.h	92;"	d
SONIC_WAVE	mods/aoe.hpp	/^		SONIC_WAVE,	\/** The same type of explosion caused by breaking the sound barrier *\/$/;"	e	enum:mods::aoe::types_t
SOUTH	structs.h	135;"	d
SPECIAL	boards.cpp	/^SPECIAL(gen_board) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(CastleGuard) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(DicknDavid) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(James) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(cleaning) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(jerry) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(king_welmar) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(peter) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(tim) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(tom) {$/;"	f
SPECIAL	castle.cpp	/^SPECIAL(training_master) {$/;"	f
SPECIAL	mail.cpp	/^SPECIAL(postmaster) {$/;"	f
SPECIAL	objsave.cpp	/^SPECIAL(cryogenicist) {$/;"	f
SPECIAL	objsave.cpp	/^SPECIAL(receptionist) {$/;"	f
SPECIAL	shop.cpp	/^SPECIAL(shop_keeper) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(bank) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(cityguard) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(dump) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(fido) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(guild) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(guild_guard) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(janitor) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(magic_user) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(mayor) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(pet_shops) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(puff) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(snake) {$/;"	f
SPECIAL	spec_procs.cpp	/^SPECIAL(thief) {$/;"	f
SPECIAL	structs.h	125;"	d
SPEED	mods/levels.hpp	/^	SPEED,$/;"	e	enum:uint8_t
SPELL	class.cpp	396;"	d	file:
SPELL_ACID_BREATH	spells.h	121;"	d
SPELL_ANIMATE_DEAD	spells.h	85;"	d
SPELL_ARMOR	spells.h	41;"	d
SPELL_BLESS	spells.h	43;"	d
SPELL_BLINDNESS	spells.h	44;"	d
SPELL_BURNING_HANDS	spells.h	45;"	d
SPELL_CALL_LIGHTNING	spells.h	46;"	d
SPELL_CHARM	spells.h	47;"	d
SPELL_CHILL_TOUCH	spells.h	48;"	d
SPELL_CLONE	spells.h	49;"	d
SPELL_COLOR_SPRAY	spells.h	50;"	d
SPELL_CONTROL_WEATHER	spells.h	51;"	d
SPELL_CREATE_FOOD	spells.h	52;"	d
SPELL_CREATE_WATER	spells.h	53;"	d
SPELL_CURE_BLIND	spells.h	54;"	d
SPELL_CURE_CRITIC	spells.h	55;"	d
SPELL_CURE_LIGHT	spells.h	56;"	d
SPELL_CURSE	spells.h	57;"	d
SPELL_DETECT_ALIGN	spells.h	58;"	d
SPELL_DETECT_INVIS	spells.h	59;"	d
SPELL_DETECT_MAGIC	spells.h	60;"	d
SPELL_DETECT_POISON	spells.h	61;"	d
SPELL_DISPEL_EVIL	spells.h	62;"	d
SPELL_DISPEL_GOOD	spells.h	86;"	d
SPELL_EARTHQUAKE	spells.h	63;"	d
SPELL_ENCHANT_WEAPON	spells.h	64;"	d
SPELL_ENERGY_DRAIN	spells.h	65;"	d
SPELL_FIREBALL	spells.h	66;"	d
SPELL_FIRE_BREATH	spells.h	118;"	d
SPELL_FROST_BREATH	spells.h	120;"	d
SPELL_GAS_BREATH	spells.h	119;"	d
SPELL_GROUP_ARMOR	spells.h	87;"	d
SPELL_GROUP_HEAL	spells.h	88;"	d
SPELL_GROUP_RECALL	spells.h	89;"	d
SPELL_HARM	spells.h	67;"	d
SPELL_HEAL	spells.h	68;"	d
SPELL_IDENTIFY	spells.h	117;"	d
SPELL_INFRAVISION	spells.h	90;"	d
SPELL_INTIMIDATED	spells.h	91;"	d
SPELL_INVISIBLE	spells.h	69;"	d
SPELL_LIGHTNING_BOLT	spells.h	70;"	d
SPELL_LIGHTNING_BREATH	spells.h	122;"	d
SPELL_LOCATE_OBJECT	spells.h	71;"	d
SPELL_MAGIC_MISSILE	spells.h	72;"	d
SPELL_POISON	spells.h	73;"	d
SPELL_PROT_FROM_EVIL	spells.h	74;"	d
SPELL_REMOVE_CURSE	spells.h	75;"	d
SPELL_REMOVE_POISON	spells.h	83;"	d
SPELL_RESERVED_DBC	spells.h	37;"	d
SPELL_ROUTINES	utils.h	225;"	d
SPELL_SANCTUARY	spells.h	76;"	d
SPELL_SENSE_LIFE	spells.h	84;"	d
SPELL_SHOCKING_GRASP	spells.h	77;"	d
SPELL_SLEEP	spells.h	78;"	d
SPELL_STRENGTH	spells.h	79;"	d
SPELL_SUMMON	spells.h	80;"	d
SPELL_TELEPORT	spells.h	42;"	d
SPELL_TYPE_POTION	spells.h	241;"	d
SPELL_TYPE_SCROLL	spells.h	244;"	d
SPELL_TYPE_SPELL	spells.h	240;"	d
SPELL_TYPE_STAFF	spells.h	243;"	d
SPELL_TYPE_WAND	spells.h	242;"	d
SPELL_VENTRILOQUATE	spells.h	81;"	d
SPELL_WORD_OF_RECALL	spells.h	82;"	d
SPLSKL	spec_procs.cpp	136;"	d	file:
SPRAY_BULLETS	mods/weapon-types.hpp	/^		SPRAY_BULLETS,$/;"	e	enum:mods::weapon::capabilities::cap_t
STAB	mods/weapon-types.hpp	/^		STAB,$/;"	e	enum:mods::weapon::capabilities::cap_t
STAMP_PRICE	mail.h	23;"	d
STARTING_VISIBILITY	structs.h	/^		static constexpr visibility_t STARTING_VISIBILITY = 255;$/;"	m	struct:obj_data
START_MESSG	config.cpp	/^const char *START_MESSG =$/;"	v
START_ROOM_TABLE	mods/world-configuration.hpp	/^	constexpr const char* START_ROOM_TABLE = "world_configuration_start_rooms";$/;"	m	namespace:mods::world_conf
STATE	utils.cpp	/^int& STATE(mods::descriptor_data &d){	$/;"	f
STATE	utils.cpp	/^int& STATE(std::deque<mods::descriptor_data>::iterator d){ $/;"	f
STATE	utils.cpp	/^int& STATE(std::shared_ptr<mods::descriptor_data> d){	$/;"	f
STATUS_BREACHING	mods/object-utils.hpp	/^	constexpr static bitvector_t STATUS_BREACHING = (1 << 1);$/;"	m	namespace:mods::object_utils
STATUS_INSTALLING	mods/object-utils.hpp	/^	constexpr static bitvector_t STATUS_INSTALLING = (1 << 0);$/;"	m	namespace:mods::object_utils
STATUS_INSTALLING	mods/player-utils.hpp	/^	constexpr static bitvector_t STATUS_INSTALLING = (1 << 0);$/;"	m	namespace:mods::player_utils
STAT_BOOST_HIGH	mods/fluxkraft/generator.cpp	/^	static constexpr float STAT_BOOST_HIGH= 10000.0;$/;"	m	namespace:mods::fluxkraft	file:
STAT_BOOST_HIGH	mods/forge-engine/generator.cpp	/^	static constexpr float STAT_BOOST_HIGH= 10000.0;$/;"	m	namespace:mods::forge_engine	file:
STAT_BOOST_LOW	mods/fluxkraft/generator.cpp	/^	static constexpr float STAT_BOOST_LOW = 1.0;$/;"	m	namespace:mods::fluxkraft	file:
STAT_BOOST_LOW	mods/forge-engine/generator.cpp	/^	static constexpr float STAT_BOOST_LOW = 1.0;$/;"	m	namespace:mods::forge_engine	file:
STDC_HEADERS	conf.h	26;"	d
STDERR_FILENO	sysdep.h	416;"	d
STDOUT_FILENO	sysdep.h	421;"	d
STITCH_CLARA_CLOSE_NAMESPACE	mods/catch.hpp	4241;"	d
STITCH_CLARA_CLOSE_NAMESPACE	mods/catch.hpp	5424;"	d
STITCH_CLARA_OPEN_NAMESPACE	mods/catch.hpp	4230;"	d
STITCH_CLARA_OPEN_NAMESPACE	mods/catch.hpp	4240;"	d
STITCH_CLARA_OPEN_NAMESPACE	mods/catch.hpp	5423;"	d
STITCH_CLARA_OPEN_NAMESPACE	mods/catch.hpp	5427;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	mods/catch.hpp	4246;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	mods/catch.hpp	4434;"	d
STRENGTH_APPLY_INDEX	utils.h	357;"	d
STRIKER	mods/classes/types.hpp	/^		STRIKER,$/;"	e	enum:mods::classes::types
STRIKER	structs.h	/^	STRIKER = 13,$/;"	e	enum:player_class_t
STRIKER_FEIGN_DEATH_FAMILIAR	mods/orm/striker.hpp	/^				STRIKER_FEIGN_DEATH_FAMILIAR,$/;"	e	enum:mods::orm::striker::feign_death_levels_t
STRIKER_FEIGN_DEATH_INITIATE	mods/orm/striker.hpp	/^				STRIKER_FEIGN_DEATH_INITIATE,$/;"	e	enum:mods::orm::striker::feign_death_levels_t
STRIKER_FEIGN_DEATH_MASTER	mods/orm/striker.hpp	/^				STRIKER_FEIGN_DEATH_MASTER$/;"	e	enum:mods::orm::striker::feign_death_levels_t
STRIKER_FEIGN_DEATH_NONE	mods/orm/striker.hpp	/^				STRIKER_FEIGN_DEATH_NONE = 0,$/;"	e	enum:mods::orm::striker::feign_death_levels_t
STRIKER_STEALTH_FAMILIAR	mods/orm/striker.hpp	/^				STRIKER_STEALTH_FAMILIAR,$/;"	e	enum:mods::orm::striker::stealth_levels_t
STRIKER_STEALTH_INITIATE	mods/orm/striker.hpp	/^				STRIKER_STEALTH_INITIATE,$/;"	e	enum:mods::orm::striker::stealth_levels_t
STRIKER_STEALTH_MASTER	mods/orm/striker.hpp	/^				STRIKER_STEALTH_MASTER$/;"	e	enum:mods::orm::striker::stealth_levels_t
STRIKER_STEALTH_NONE	mods/orm/striker.hpp	/^				STRIKER_STEALTH_NONE = 0,$/;"	e	enum:mods::orm::striker::stealth_levels_t
STRIKER_SUMMON_EXTRACTION_FAMILIAR	mods/orm/striker.hpp	/^				STRIKER_SUMMON_EXTRACTION_FAMILIAR,$/;"	e	enum:mods::orm::striker::summon_extraction_levels_t
STRIKER_SUMMON_EXTRACTION_INITIATE	mods/orm/striker.hpp	/^				STRIKER_SUMMON_EXTRACTION_INITIATE,$/;"	e	enum:mods::orm::striker::summon_extraction_levels_t
STRIKER_SUMMON_EXTRACTION_MASTER	mods/orm/striker.hpp	/^				STRIKER_SUMMON_EXTRACTION_MASTER$/;"	e	enum:mods::orm::striker::summon_extraction_levels_t
STRIKER_SUMMON_EXTRACTION_NONE	mods/orm/striker.hpp	/^				STRIKER_SUMMON_EXTRACTION_NONE = 0,$/;"	e	enum:mods::orm::striker::summon_extraction_levels_t
STRIKER_TEEP_FAMILIAR	mods/orm/striker.hpp	/^				STRIKER_TEEP_FAMILIAR,$/;"	e	enum:mods::orm::striker::teep_levels_t
STRIKER_TEEP_INITIATE	mods/orm/striker.hpp	/^				STRIKER_TEEP_INITIATE,$/;"	e	enum:mods::orm::striker::teep_levels_t
STRIKER_TEEP_MASTER	mods/orm/striker.hpp	/^				STRIKER_TEEP_MASTER$/;"	e	enum:mods::orm::striker::teep_levels_t
STRIKER_TEEP_NONE	mods/orm/striker.hpp	/^				STRIKER_TEEP_NONE = 0,$/;"	e	enum:mods::orm::striker::teep_levels_t
STRIKER_XRAY_SHOT_FAMILIAR	mods/orm/striker.hpp	/^				STRIKER_XRAY_SHOT_FAMILIAR,$/;"	e	enum:mods::orm::striker::xray_shot_levels_t
STRIKER_XRAY_SHOT_INITIATE	mods/orm/striker.hpp	/^				STRIKER_XRAY_SHOT_INITIATE,$/;"	e	enum:mods::orm::striker::xray_shot_levels_t
STRIKER_XRAY_SHOT_MASTER	mods/orm/striker.hpp	/^				STRIKER_XRAY_SHOT_MASTER$/;"	e	enum:mods::orm::striker::xray_shot_levels_t
STRIKER_XRAY_SHOT_NONE	mods/orm/striker.hpp	/^				STRIKER_XRAY_SHOT_NONE = 0,$/;"	e	enum:mods::orm::striker::xray_shot_levels_t
STRING_COLUMN	mods/builder.cpp	/^	STRING_COLUMN,$/;"	e	enum:field_type_t	file:
SUB_MACHINE_GUN	mods/object.hpp	/^				SUB_MACHINE_GUN,$/;"	e	enum:mods::object::object_type_enum_t
SUCCESS	mods/behaviour_tree_status.hpp	/^		SUCCESS,$/;"	e	enum:mods::behaviour_tree_status
SUF_ALIAS	db.h	49;"	d
SUF_OBJS	db.h	47;"	d
SUF_TEXT	db.h	48;"	d
SUMMON_FAIL	spells.cpp	107;"	d	file:
SUN_DARK	structs.h	605;"	d
SUN_LIGHT	structs.h	607;"	d
SUN_RISE	structs.h	606;"	d
SUN_SET	structs.h	608;"	d
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_armor_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_attachment_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_consumable_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_container_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_drone_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_explosive_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_gadget_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_histfile) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_js_help) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_melee_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_next_mob_number) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_next_obj_number) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_next_object_number) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_next_room_number) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_next_zone_number) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_pmw_obj_from_room) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_rifle_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_toggle_obj_from_room) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_trap_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_vehicle_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_yaml_example) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_yaml_import) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_yaml_log) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_yaml_log_clear) {$/;"	f
SUPERCMD	act.builder.cpp	/^SUPERCMD(do_yaml_log_save) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_feed_player) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_flush_player) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_get_ticks_per_minute) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_camera) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_emp_grenades) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_flashbang_grenades) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_frag_grenades) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_incendiary_grenades) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_night_vision_camera) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_sensor_grenades) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_smoke_grenades) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_sniper_rifle) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_giveme_thermal_camera) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_givemenades) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_my_uuid) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_one_punch) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_point_update) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_room_dark) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_room_fire) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_room_list_uuid) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_send_report) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_set_ammo) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_set_npc_position) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_set_position) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_show_tics) {$/;"	f
SUPERCMD	act.debug.cpp	/^SUPERCMD(do_zero_socket) {$/;"	f
SUPERCMD	act.informative.cpp	/^SUPERCMD(do_givemegold) {$/;"	f
SUPERCMD	act.informative.cpp	/^SUPERCMD(do_js) {$/;"	f
SUPERCMD	act.informative.cpp	/^SUPERCMD(do_jstest) {$/;"	f
SUPERCMD	act.informative.cpp	/^SUPERCMD(do_newjs) {$/;"	f
SUPERCMD	act.offensive.cpp	/^SUPERCMD(do_affect_me) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_advance) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_at) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_date) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_dc) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_echo) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_force) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_gecho) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_goto) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_invis) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_last) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_load) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_poofset) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_purge) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_restore) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_return) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_send) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_set) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_show) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_shutdown) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_snoop) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_stat) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_switch) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_syslog) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_teleport) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_trans) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_vnum) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_vstat) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_wiz_quote) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_wizlock) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_wiznet) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_wizutil) {$/;"	f
SUPERCMD	act.wizard.cpp	/^SUPERCMD(do_zreset) {$/;"	f
SUPERCMD	ban.cpp	/^SUPERCMD(do_ban) {$/;"	f
SUPERCMD	ban.cpp	/^SUPERCMD(do_unban) {$/;"	f
SUPERCMD	db.cpp	/^SUPERCMD(do_reboot) {$/;"	f
SUPERCMD	interpreter.cpp	/^SUPERCMD(do_builder) {$/;"	f
SUPERCMD	interpreter.cpp	/^SUPERCMD(do_debug_sleep) {$/;"	f
SUPERCMD	interpreter.cpp	/^SUPERCMD(do_require_js) {$/;"	f
SUPERCMD	interpreter.cpp	/^SUPERCMD(do_room_list) {$/;"	f
SUPERCMD	interpreter.h	15;"	d
SUPERCMD	mobact.cpp	/^	SUPERCMD(do_mobact) {$/;"	f	namespace:mods::mobact
SUPERCMD	mods/builder.cpp	/^	SUPERCMD(do_ndelete) {$/;"	f	namespace:mods::builder
SUPERCMD	mods/builder.cpp	/^	SUPERCMD(do_nfind) {$/;"	f	namespace:mods::builder
SUPERCMD	mods/builder.cpp	/^	SUPERCMD(do_ngoto) {$/;"	f	namespace:mods::builder
SUPERCMD	mods/builder.cpp	/^	SUPERCMD(do_nhelp) {$/;"	f	namespace:mods::builder
SUPERCMD	mods/builder.cpp	/^	SUPERCMD(do_nset) {$/;"	f	namespace:mods::builder
SUPERCMD	mods/builder.cpp	/^SUPERCMD(do_mbuild) {$/;"	f
SUPERCMD	mods/builder.cpp	/^SUPERCMD(do_obuild) {$/;"	f
SUPERCMD	mods/builder.cpp	/^SUPERCMD(do_rbuild) {$/;"	f
SUPERCMD	mods/builder.cpp	/^SUPERCMD(do_rbuild_sandbox) {$/;"	f
SUPERCMD	mods/builder.cpp	/^SUPERCMD(do_sbuild) {$/;"	f
SUPERCMD	mods/builder.cpp	/^SUPERCMD(do_zbuild) {$/;"	f
SUPERCMD	mods/builder/bookmarks.cpp	/^	SUPERCMD(do_bookmark) {$/;"	f	namespace:mods::builder::bookmarks
SUPERCMD	mods/builder/bookmarks.cpp	/^	SUPERCMD(do_goto) {$/;"	f	namespace:mods::builder::bookmarks
SUPERCMD	mods/builder/bookmarks.cpp	/^	SUPERCMD(do_print_vnum) {$/;"	f	namespace:mods::builder::bookmarks
SUPERCMD	mods/builder/conbuild.cpp	/^	SUPERCMD(do_conbuild) {$/;"	f	namespace:mods::builder::conbuild
SUPERCMD	mods/builder/hqbuild.cpp	/^	SUPERCMD(do_hqbuild) {$/;"	f	namespace:mods::builder::hqbuild
SUPERCMD	mods/builder/meqbuild.cpp	/^	SUPERCMD(do_meqbuild) {$/;"	f	namespace:mods::builder::meqbuild
SUPERCMD	mods/chat.cpp	/^SUPERCMD(do_chanmgr) {$/;"	f
SUPERCMD	mods/classes/super-user-fiddler.cpp	/^	SUPERCMD(do_mock_level) {$/;"	f	namespace:mods::classes
SUPERCMD	mods/date-time.cpp	/^	SUPERCMD(do_serialize_date) {$/;"	f	namespace:mods::date_time
SUPERCMD	mods/elevator.cpp	/^SUPERCMD(do_instantiate_elevator_here) {$/;"	f
SUPERCMD	mods/fluxkraft/arcon-bar.hpp	/^		SUPERCMD(do_generate_bar) {$/;"	f	namespace:mods::fluxkraft::arcon_bar
SUPERCMD	mods/fluxkraft/shape-dictionary.cpp	/^	SUPERCMD(do_generate_zone) {$/;"	f	namespace:mods::fluxkraft
SUPERCMD	mods/fluxkraft/shape-dictionary.cpp	/^	SUPERCMD(do_procgen_random_amount) {$/;"	f	namespace:mods::fluxkraft
SUPERCMD	mods/forge-engine/value-scaler.cpp	/^		SUPERCMD(do_value_scaler) {$/;"	f	namespace:mods::forge_engine::value_scaler_static
SUPERCMD	mods/immortal.cpp	/^SUPERCMD(do_rnumlist) {$/;"	f
SUPERCMD	mods/immortal.cpp	/^SUPERCMD(do_rnumtele) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_armor_locker_quota) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_create_catchy_name) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_install_armor_locker) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_install_camera_feed) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_install_computer_choice) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_install_weapon_locker) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_instantiate_catchy_name) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_list_wear_flags) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_uninstall_armor_locker) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_uninstall_camera_feed) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_uninstall_weapon_locker) {$/;"	f
SUPERCMD	mods/integral-objects.cpp	/^SUPERCMD(do_weapon_locker_quota) {$/;"	f
SUPERCMD	mods/levels.cpp	/^	SUPERCMD(do_award_exp_by_name) {$/;"	f	namespace:mods::levels
SUPERCMD	mods/levels.cpp	/^	SUPERCMD(do_csv_export_levels) {$/;"	f	namespace:mods::levels
SUPERCMD	mods/loot.cpp	/^	SUPERCMD(do_add_armor_index) {$/;"	f	namespace:mods::loot
SUPERCMD	mods/loot.cpp	/^	SUPERCMD(do_add_rifle_index) {$/;"	f	namespace:mods::loot
SUPERCMD	mods/loot.cpp	/^	SUPERCMD(do_reward) {$/;"	f	namespace:mods::loot
SUPERCMD	mods/mini-games.cpp	/^SUPERCMD(do_install_minigame) {$/;"	f
SUPERCMD	mods/mini-games.cpp	/^SUPERCMD(do_list_minigame) {$/;"	f
SUPERCMD	mods/mini-games.cpp	/^SUPERCMD(do_uninstall_minigame) {$/;"	f
SUPERCMD	mods/mob-equipment.cpp	/^	SUPERCMD(do_npc_report) {$/;"	f	namespace:mods::mob_equipment
SUPERCMD	mods/player-registration.cpp	/^SUPERCMD(do_disable_registration) {$/;"	f
SUPERCMD	mods/player-registration.cpp	/^SUPERCMD(do_enable_registration) {$/;"	f
SUPERCMD	mods/player-registration.cpp	/^SUPERCMD(do_registration_status) {$/;"	f
SUPERCMD	mods/players/messages.cpp	/^	SUPERCMD(do_queue_message) {$/;"	f	namespace:mods::players::messages
SUPERCMD	mods/query-objects.cpp	/^SUPERCMD(do_query_container) {$/;"	f
SUPERCMD	mods/query-objects.cpp	/^SUPERCMD(do_query_inventory) {$/;"	f
SUPERCMD	mods/query-objects.cpp	/^SUPERCMD(do_query_inventory_container) {$/;"	f
SUPERCMD	mods/query-objects.cpp	/^SUPERCMD(do_query_room) {$/;"	f
SUPERCMD	mods/query-objects.cpp	/^SUPERCMD(do_query_zone) {$/;"	f
SUPERCMD	mods/rate-limiting.cpp	/^	SUPERCMD(do_get_rate_limit_types) {$/;"	f	namespace:mods::rate_limiting
SUPERCMD	mods/rate-limiting.cpp	/^	SUPERCMD(do_list_rate_limits) {$/;"	f	namespace:mods::rate_limiting
SUPERCMD	mods/rate-limiting.cpp	/^	SUPERCMD(do_set_rate_limit) {$/;"	f	namespace:mods::rate_limiting
SUPERCMD	mods/rifle-attachments.cpp	/^		SUPERCMD(do_instantiate_rifle_attachment) {$/;"	f	namespace:mods::rifle_attachments
SUPERCMD	mods/rifle-attachments.cpp	/^		SUPERCMD(do_list_rifle_attachments) {$/;"	f	namespace:mods::rifle_attachments
SUPERCMD	mods/rifle-attachments.cpp	/^		SUPERCMD(do_load_my_rifle_attachments) {$/;"	f	namespace:mods::rifle_attachments
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_add_super_user) {$/;"	f
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_clear_who_line) {$/;"	f
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_get_super_user_list) {$/;"	f
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_go_invisible) {$/;"	f
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_go_visible) {$/;"	f
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_remove_super_user) {$/;"	f
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_set_who_line) {$/;"	f
SUPERCMD	mods/super-users.cpp	/^SUPERCMD(do_shutdown_mud) {$/;"	f
SUPERCMD	mods/target-practice.cpp	/^SUPERCMD(do_install_dummy) {$/;"	f
SUPERCMD	mods/target-practice.cpp	/^SUPERCMD(do_instantiate_dummy) {$/;"	f
SUPERCMD	mods/target-practice.cpp	/^SUPERCMD(do_uninstall_dummy) {$/;"	f
SUPERCMD	mods/weapons/damage-types.cpp	/^	SUPERCMD(do_inc_damage) {$/;"	f	namespace:mods::weapons::damage_types
SUPERCMD	mods/weapons/elemental.cpp	/^	SUPERCMD(do_inc_damage) {$/;"	f	namespace:mods::weapons::elemental
SUPERCMD	mods/zone.cpp	/^	SUPERCMD(do_list_zone_table) {$/;"	f	namespace:mods::zone
SUPERCMD	mods/zone.cpp	/^	SUPERCMD(do_reset_zone) {$/;"	f	namespace:mods::zone
SUPERCMD	mods/zone.cpp	/^	SUPERCMD(do_uuids) {$/;"	f	namespace:mods::zone
SUPERCMD	olc.cpp	/^SUPERCMD(do_olc) {$/;"	f
SUPERCMD	spell_parser.cpp	/^SUPERCMD(do_cast) {$/;"	f
SUPPORT	mods/classes/types.hpp	/^		SUPPORT,$/;"	e	enum:mods::classes::types
SUPPORT	structs.h	/^	SUPPORT = 8,$/;"	e	enum:player_class_t
SUPPORT_NONE	mods/weapon.hpp	/^			SUPPORT_NONE = 0,$/;"	e	enum:mods::weapon::support::primary_choice_t
SUPPORT_PRIMARY_HK21	mods/weapon.hpp	/^			SUPPORT_PRIMARY_HK21 = 2,$/;"	e	enum:mods::weapon::support::primary_choice_t
SUPPORT_PRIMARY_MK46	mods/weapon.hpp	/^			SUPPORT_PRIMARY_MK46 = 1,$/;"	e	enum:mods::weapon::support::primary_choice_t
SUPPRESSOR	mods/weapon.hpp	/^		FLASH_HIDER, SUPPRESSOR$/;"	e	enum:mods::weapon::barrel_t
SUSP	telnet.h	60;"	d
SUSPICIOUS	mods/ai_state.hpp	/^				WANDER, SUSPICIOUS, FIGHT,SUSPICIOUS2,PROTECT,AGGRESSIVE_PROTECT,$/;"	e	enum:mods::ai_state::state
SUSPICIOUS2	mods/ai_state.hpp	/^				WANDER, SUSPICIOUS, FIGHT,SUSPICIOUS2,PROTECT,AGGRESSIVE_PROTECT,$/;"	e	enum:mods::ai_state::state
SUV	mods/weapon.hpp	/^		SUV,$/;"	e	enum:mods::weapon::vehicle_t
SWAT_VAN	mods/weapon.hpp	/^		SWAT_VAN,$/;"	e	enum:mods::weapon::vehicle_t
SYNCH	telnet.h	63;"	d
SYNDROME	mods/classes/types.hpp	/^		SYNDROME,$/;"	e	enum:mods::classes::types
SYNDROME	structs.h	/^	SYNDROME = 19,$/;"	e	enum:player_class_t
S_DATA	shop.h	121;"	d
S_LEN	shop.h	122;"	d
SafeBool	mods/catch.hpp	/^	class SafeBool {$/;"	c	namespace:Catch
SharedImpl	mods/catch.hpp	/^		SharedImpl() : m_rc(0) {}$/;"	f	struct:Catch::SharedImpl
SharedImpl	mods/catch.hpp	/^	struct SharedImpl : T {$/;"	s	namespace:Catch
SourceLineInfo	mods/catch.hpp	/^	struct SourceLineInfo {$/;"	s	namespace:Catch
SourceLineInfo	mods/catch2.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
StreamEndStop	mods/catch.hpp	/^	struct StreamEndStop {$/;"	s	namespace:Catch
StreamEndStop	mods/catch2.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StringMaker	mods/catch.hpp	/^	struct StringMaker :$/;"	s	namespace:Catch
StringMaker	mods/catch.hpp	/^	struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	mods/catch.hpp	/^	struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<NSObject*> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<NSString*> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<T^> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<bool> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<char *> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<char const *> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<char> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<char[SZ]> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<double> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<float> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<int> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<long long> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<long> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<signed char> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<signed char[SZ]> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::byte> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::nullptr_t> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::optional<T> > {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::pair<T1, T2> > {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::string> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::string_view> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::wstring> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<std::wstring_view> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<unsigned char> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<unsigned char[SZ]> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<unsigned int> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<unsigned long long> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<unsigned long> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<wchar_t *> {$/;"	s	namespace:Catch
StringMaker	mods/catch2.hpp	/^    struct StringMaker<wchar_t const *> {$/;"	s	namespace:Catch
StringMakerBase	mods/catch.hpp	/^		struct StringMakerBase {$/;"	s	namespace:Catch::Detail
StringMakerBase	mods/catch.hpp	/^		struct StringMakerBase<true> {$/;"	s	namespace:Catch::Detail
StringRef	mods/catch2.hpp	/^    class StringRef {$/;"	c	namespace:Catch
SuppressFail	mods/catch.hpp	/^			SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SuppressFail	mods/catch2.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
TANK	mods/weapon.hpp	/^		TANK,$/;"	e	enum:mods::weapon::vehicle_t
TAR21	mods/orm/medic.hpp	/^		const std::string TAR21 = "TAR21";$/;"	m	struct:mods::orm::medic
TAR21	mods/weapon.hpp	/^			TAR21 = 2$/;"	e	enum:mods::weapon::medic::primary_choice_t
TARGET_DEAD_EVENT	mods/damage-event.hpp	/^	TARGET_DEAD_EVENT,$/;"	e	enum:uint16_t
TARGET_IN_PEACEFUL_ROOM_EVENT	mods/damage-event.hpp	/^	TARGET_IN_PEACEFUL_ROOM_EVENT,$/;"	e	enum:uint16_t
TARGET_ITEM	mods/contract-steps.hpp	/^			TARGET_ITEM,$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
TARGET_PLAYER_INDEX	mods/player-scaffolding.hpp	/^		constexpr static std::size_t TARGET_PLAYER_INDEX = 1;$/;"	m	struct:mods::player_scaffolding
TARGET_ROOM	mods/contract-steps.hpp	/^			TARGET_ROOM,$/;"	m	struct:mods::contracts::contract_step	typeref:enum:mods::contracts::contract_step::
TAR_CHAR_ROOM	spells.h	200;"	d
TAR_CHAR_WORLD	spells.h	201;"	d
TAR_FIGHT_SELF	spells.h	202;"	d
TAR_FIGHT_VICT	spells.h	203;"	d
TAR_IGNORE	spells.h	199;"	d
TAR_NOT_SELF	spells.h	205;"	d
TAR_OBJ_EQUIP	spells.h	209;"	d
TAR_OBJ_INV	spells.h	206;"	d
TAR_OBJ_ROOM	spells.h	207;"	d
TAR_OBJ_WORLD	spells.h	208;"	d
TAR_SELF_ONLY	spells.h	204;"	d
TBC_TEXT_FORMAT_CONSOLE_WIDTH	mods/catch.hpp	5661;"	d
TBC_TEXT_FORMAT_H_INCLUDED	mods/catch.hpp	4253;"	d
TELCMD	telnet.h	79;"	d
TELCMD_FIRST	telnet.h	75;"	d
TELCMD_LAST	telnet.h	76;"	d
TELCMD_OK	telnet.h	77;"	d
TELOPT	telnet.h	143;"	d
TELOPT_3270REGIME	telnet.h	111;"	d
TELOPT_AUTHENTICATION	telnet.h	119;"	d
TELOPT_BINARY	telnet.h	82;"	d
TELOPT_BM	telnet.h	101;"	d
TELOPT_DET	telnet.h	102;"	d
TELOPT_ECHO	telnet.h	83;"	d
TELOPT_ENCRYPT	telnet.h	120;"	d
TELOPT_EOR	telnet.h	107;"	d
TELOPT_EXOPL	telnet.h	122;"	d
TELOPT_FIRST	telnet.h	140;"	d
TELOPT_LAST	telnet.h	141;"	d
TELOPT_LFLOW	telnet.h	115;"	d
TELOPT_LINEMODE	telnet.h	116;"	d
TELOPT_LOGOUT	telnet.h	100;"	d
TELOPT_NAMS	telnet.h	86;"	d
TELOPT_NAOCRD	telnet.h	92;"	d
TELOPT_NAOFFD	telnet.h	95;"	d
TELOPT_NAOHTD	telnet.h	94;"	d
TELOPT_NAOHTS	telnet.h	93;"	d
TELOPT_NAOL	telnet.h	90;"	d
TELOPT_NAOLFD	telnet.h	98;"	d
TELOPT_NAOP	telnet.h	91;"	d
TELOPT_NAOVTD	telnet.h	97;"	d
TELOPT_NAOVTS	telnet.h	96;"	d
TELOPT_NAWS	telnet.h	113;"	d
TELOPT_NEW_ENVIRON	telnet.h	121;"	d
TELOPT_OK	telnet.h	142;"	d
TELOPT_OLD_ENVIRON	telnet.h	118;"	d
TELOPT_OUTMRK	telnet.h	109;"	d
TELOPT_RCP	telnet.h	84;"	d
TELOPT_RCTE	telnet.h	89;"	d
TELOPT_SGA	telnet.h	85;"	d
TELOPT_SNDLOC	telnet.h	105;"	d
TELOPT_STATUS	telnet.h	87;"	d
TELOPT_SUPDUP	telnet.h	103;"	d
TELOPT_SUPDUPOUTPUT	telnet.h	104;"	d
TELOPT_TM	telnet.h	88;"	d
TELOPT_TSPEED	telnet.h	114;"	d
TELOPT_TTYLOC	telnet.h	110;"	d
TELOPT_TTYPE	telnet.h	106;"	d
TELOPT_TUID	telnet.h	108;"	d
TELOPT_X3PAD	telnet.h	112;"	d
TELOPT_XASCII	telnet.h	99;"	d
TELOPT_XDISPLOC	telnet.h	117;"	d
TELQUAL_INFO	telnet.h	149;"	d
TELQUAL_IS	telnet.h	147;"	d
TELQUAL_NAME	telnet.h	151;"	d
TELQUAL_REPLY	telnet.h	150;"	d
TELQUAL_SEND	telnet.h	148;"	d
TEST_CONTRACT_VNUM	mods/unit-tests/contracts.cpp	/^static constexpr int TEST_CONTRACT_VNUM = 250;$/;"	v	file:
TFAILURE	mods/mobs/lowly-security-behaviour-tree.hpp	43;"	d
TFAILURE	mods/mobs/mini-gunner-behaviour-tree.hpp	29;"	d
THEN	mods/catch.hpp	12217;"	d
THERMAL	mods/weapon.hpp	/^		THERMAL$/;"	e	enum:mods::weapon::scope_t
THERMAL_AGITATOR	mods/aoe.hpp	/^		THERMAL_AGITATOR,	\/** Causes visual noise to thermal devices rendering them of no use *\/$/;"	e	enum:mods::aoe::types_t
THERMAL_GOGGLES	structs.h	/^	THERMAL_GOGGLES,$/;"	e	enum:lense_type_t
THERMAL_VISION	mods/flags.hpp	/^		THERMAL_VISION,$/;"	e	enum:mods::flags::aff
THERMAL_VISION	mods/weapon-types.hpp	/^		THERMAL_VISION,$/;"	e	enum:mods::weapon::capabilities::cap_t
THERMITE_BREACH_TICKS_DURATION	mods/object-utils.hpp	/^	constexpr static uint8_t THERMITE_BREACH_TICKS_DURATION = 35;$/;"	m	namespace:mods::object_utils
THIEF	mods/flags.hpp	/^		THIEF,$/;"	e	enum:mods::flags::plr
THIRD_QUARTER	mods/date-time.hpp	/^		THIRD_QUARTER,$/;"	e	enum:mods::date_time::moon_phase
THIRST	structs.h	601;"	d
THROW	mods/item.hpp	/^		THROW = (1 << 2),$/;"	e	enum:mods::item::capability_t
THROW	mods/weapon-types.hpp	/^		THROW,$/;"	e	enum:mods::weapon::capabilities::cap_t
TICK_RESOLUTION	mods/deferred.hpp	/^			constexpr static uint64_t TICK_RESOLUTION = 3;$/;"	m	class:mods::deferred
TIME_FILE	db.h	99;"	d
TIME_LOG_FILE_NAME	mods/date-time.cpp	/^	constexpr const char* TIME_LOG_FILE_NAME = "\/tmp\/cm++-time.log";$/;"	m	namespace:mods::date_time	file:
TIME_WITH_SYS_TIME	conf.h	29;"	d
TITAN_COMBAT	mods/object.hpp	/^				TITAN_COMBAT,$/;"	e	enum:mods::object::object_type_enum_t
TO	mods/mini-games/line-up.hpp	/^		static constexpr int TO = 6;$/;"	m	struct:mods::mini_games::line_up
TO	mods/mini-games/wires.hpp	/^		static constexpr uint8_t TO = 2;$/;"	m	struct:mods::mini_games::wires
TODO	globals.hpp	288;"	d
TOGGLE_BIT	utils.h	203;"	d
TOGGLE_LOCK	act.movement.cpp	377;"	d	file:
TOG_OFF	act.other.cpp	917;"	d	file:
TOG_ON	act.other.cpp	918;"	d	file:
TOP_SPELL_DEFINE	spells.h	124;"	d
TOROOM	graph.cpp	56;"	d	file:
TOROOM	house.h	30;"	d
TOSTR	utils.cpp	/^std::string TOSTR(int a){$/;"	f
TOSTR	utils.cpp	/^std::string TOSTR(nullptr_t a){ return ""; }$/;"	f
TOSTR	utils.cpp	/^std::string TOSTR(std::string a){$/;"	f
TO_CHAR	comm.h	67;"	d
TO_NOTVICT	comm.h	66;"	d
TO_OBJ_PTR	utils.h	553;"	d
TO_ROOM	comm.h	64;"	d
TO_ROOM	mods/weapons/damage-calculator.cpp	22;"	d	file:
TO_ROOM	mods/weapons/damage-types.cpp	15;"	d	file:
TO_ROOM	mods/weapons/reload.cpp	7;"	d	file:
TO_SLEEP	comm.h	68;"	d
TO_SLEEP	mods/chat.hpp	12;"	d
TO_SLEEP	mods/chat.hpp	53;"	d
TO_VICT	comm.h	65;"	d
TO_VICT	mods/chat.hpp	11;"	d
TO_VICT	mods/chat.hpp	52;"	d
TRACER_AMMUNITION	mods/weapon.hpp	/^		TRACER_AMMUNITION,$/;"	e	enum:mods::weapon::magazine_t
TRACKED	mods/affects.hpp	/^		TRACKED = 5,$/;"	e	enum:mods::affects::affect_t
TRACKED_DAMAGE_BONUS_MULTIPLIER	mods/affects.hpp	/^	static constexpr float TRACKED_DAMAGE_BONUS_MULTIPLIER = 0.15;$/;"	m	namespace:mods::affects
TRADE_NOCLERIC	shop.h	111;"	d
TRADE_NOEVIL	shop.h	108;"	d
TRADE_NOGOOD	shop.h	107;"	d
TRADE_NOMAGIC_USER	shop.h	110;"	d
TRADE_NONEUTRAL	shop.h	109;"	d
TRADE_NOTHIEF	shop.h	112;"	d
TRADE_NOWARRIOR	shop.h	113;"	d
TRAP_NONE	mods/item-types.hpp	/^		TRAP_NONE = 0,$/;"	e	enum:mods::weapon::type::trap
TRASHY	structs.h	/^			TRASHY,$/;"	m	struct:room_data	typeref:enum:room_data::
TREE	structs.h	/^			TREE,$/;"	m	struct:room_data	typeref:enum:room_data::
TRIGGER_ALERT	mods/weapon-types.hpp	/^		TRIGGER_ALERT,$/;"	e	enum:mods::weapon::capabilities::cap_t
TRIGGER_EXPLOSION	mods/weapon-types.hpp	/^		TRIGGER_EXPLOSION,$/;"	e	enum:mods::weapon::capabilities::cap_t
TRUCK	mods/weapon.hpp	/^		TRUCK,$/;"	e	enum:mods::weapon::vehicle_t
TRUE	utils.h	530;"	d
TSUCCESS	mods/mobs/lowly-security-behaviour-tree.hpp	42;"	d
TSUCCESS	mods/mobs/mini-gunner-behaviour-tree.hpp	28;"	d
TUNNEL	structs.h	/^			TUNNEL, \/** a tunnel made of any material *\/$/;"	m	struct:room_data	typeref:enum:room_data::
TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED	mods/catch.hpp	2812;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED	mods/catch.hpp	8518;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	mods/catch.hpp	924;"	d
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	mods/catch.hpp	856;"	d
TWOBLUECUBES_CATCH_CLARA_H_INCLUDED	mods/catch.hpp	4220;"	d
TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED	mods/catch.hpp	3584;"	d
TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED	mods/catch.hpp	9056;"	d
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	mods/catch.hpp	67;"	d
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	mods/catch.hpp	70;"	d
TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED	mods/catch.hpp	3587;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED	mods/catch.hpp	5856;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED	mods/catch.hpp	8205;"	d
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	mods/catch.hpp	532;"	d
TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED	mods/catch.hpp	8005;"	d
TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED	mods/catch.hpp	9213;"	d
TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED	mods/catch.hpp	2120;"	d
TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED	mods/catch.hpp	12040;"	d
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	mods/catch.hpp	1291;"	d
TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED	mods/catch.hpp	7853;"	d
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	mods/catch.hpp	1288;"	d
TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED	mods/catch.hpp	6760;"	d
TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED	mods/catch.hpp	2529;"	d
TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED	mods/catch.hpp	8439;"	d
TWOBLUECUBES_CATCH_HPP_INCLUDED	mods/catch.hpp	14;"	d
TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED	mods/catch.hpp	3570;"	d
TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED	mods/catch.hpp	2083;"	d
TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED	mods/catch.hpp	3902;"	d
TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED	mods/catch.hpp	2709;"	d
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	mods/catch.hpp	535;"	d
TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED	mods/catch.hpp	2715;"	d
TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED	mods/catch.hpp	5915;"	d
TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED	mods/catch.hpp	2186;"	d
TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED	mods/catch.hpp	3132;"	d
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	mods/catch.hpp	696;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED	mods/catch.hpp	8872;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED	mods/catch.hpp	8875;"	d
TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED	mods/catch.hpp	5656;"	d
TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED	mods/catch.hpp	1045;"	d
TWOBLUECUBES_CATCH_MATCHERS_STRING_H_INCLUDED	mods/catch.hpp	2978;"	d
TWOBLUECUBES_CATCH_MATCHERS_VECTOR_H_INCLUDED	mods/catch.hpp	3033;"	d
TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED	mods/catch.hpp	8838;"	d
TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED	mods/catch.hpp	2027;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED	mods/catch.hpp	7984;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	mods/catch.hpp	64;"	d
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	mods/catch.hpp	1543;"	d
TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED	mods/catch.hpp	3338;"	d
TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED	mods/catch.hpp	3156;"	d
TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED	mods/catch.hpp	2123;"	d
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	mods/catch.hpp	559;"	d
TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED	mods/catch.hpp	10648;"	d
TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED	mods/catch.hpp	7592;"	d
TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED	mods/catch.hpp	10057;"	d
TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED	mods/catch.hpp	11664;"	d
TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED	mods/catch.hpp	11154;"	d
TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED	mods/catch.hpp	10891;"	d
TWOBLUECUBES_CATCH_REPORTER_MULTI_HPP_INCLUDED	mods/catch.hpp	9900;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED	mods/catch.hpp	10309;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED	mods/catch.hpp	7810;"	d
TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED	mods/catch.hpp	10054;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED	mods/catch.hpp	9579;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	mods/catch.hpp	859;"	d
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	mods/catch.hpp	862;"	d
TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED	mods/catch.hpp	3581;"	d
TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED	mods/catch.hpp	6371;"	d
TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED	mods/catch.hpp	9174;"	d
TWOBLUECUBES_CATCH_SECTION_H_INCLUDED	mods/catch.hpp	2367;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED	mods/catch.hpp	2370;"	d
TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED	mods/catch.hpp	3975;"	d
TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED	mods/catch.hpp	8008;"	d
TWOBLUECUBES_CATCH_STREAM_H_INCLUDED	mods/catch.hpp	3972;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED	mods/catch.hpp	3135;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED	mods/catch.hpp	9724;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED	mods/catch.hpp	9727;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED	mods/catch.hpp	8608;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED	mods/catch.hpp	3254;"	d
TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED	mods/catch.hpp	7595;"	d
TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED	mods/catch.hpp	6374;"	d
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	mods/catch.hpp	693;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED	mods/catch.hpp	3598;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED	mods/catch.hpp	3590;"	d
TWOBLUECUBES_CATCH_TEXT_H_INCLUDED	mods/catch.hpp	5659;"	d
TWOBLUECUBES_CATCH_TIMER_H_INCLUDED	mods/catch.hpp	2473;"	d
TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED	mods/catch.hpp	9332;"	d
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	mods/catch.hpp	1533;"	d
TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED	mods/catch.hpp	2373;"	d
TWOBLUECUBES_CATCH_TYPE_TRAITS_HPP_INCLUDED	mods/catch.hpp	2198;"	d
TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED	mods/catch.hpp	8803;"	d
TWOBLUECUBES_CATCH_VERSION_H_INCLUDED	mods/catch.hpp	7331;"	d
TWOBLUECUBES_CATCH_WILDCARD_PATTERN_HPP_INCLUDED	mods/catch.hpp	3606;"	d
TWOBLUECUBES_CATCH_WINDOWS_H_PROXY_H_INCLUDED	mods/catch.hpp	6776;"	d
TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED	mods/catch.hpp	10396;"	d
TWOBLUECUBES_CLARA_COMPILERS_H_INCLUDED	mods/catch.hpp	4439;"	d
TWOBLUECUBES_CLARA_H_INCLUDED	mods/catch.hpp	4239;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	mods/catch.hpp	12;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	mods/catch2.hpp	12;"	d
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED	mods/catch.hpp	5669;"	d
TWO_DOOR	mods/weapon.hpp	/^		TWO_DOOR,$/;"	e	enum:mods::weapon::vehicle_t
TYPE_ANNIHILATE	spells.h	/^TYPE_ANNIHILATE,$/;"	e	enum:weapon_attack_types_t
TYPE_ANNIHILATE	spells.h	183;"	d
TYPE_BITE	spells.h	/^TYPE_BITE,$/;"	e	enum:weapon_attack_types_t
TYPE_BITE	spells.h	165;"	d
TYPE_BLAST	spells.h	/^TYPE_BLAST,$/;"	e	enum:weapon_attack_types_t
TYPE_BLAST	spells.h	173;"	d
TYPE_BLUDGEON	spells.h	/^TYPE_BLUDGEON,$/;"	e	enum:weapon_attack_types_t
TYPE_BLUDGEON	spells.h	166;"	d
TYPE_CLAW	spells.h	/^TYPE_CLAW,$/;"	e	enum:weapon_attack_types_t
TYPE_CLAW	spells.h	169;"	d
TYPE_COMPLETELY_DESTROY	spells.h	/^TYPE_COMPLETELY_DESTROY,$/;"	e	enum:weapon_attack_types_t
TYPE_COMPLETELY_DESTROY	spells.h	184;"	d
TYPE_CRUSH	spells.h	/^TYPE_CRUSH,$/;"	e	enum:weapon_attack_types_t
TYPE_CRUSH	spells.h	167;"	d
TYPE_DECOMPOSE	spells.h	/^TYPE_DECOMPOSE,$/;"	e	enum:weapon_attack_types_t
TYPE_DECOMPOSE	spells.h	182;"	d
TYPE_DEVOID	spells.h	/^TYPE_DEVOID$/;"	e	enum:weapon_attack_types_t
TYPE_DEVOID	spells.h	186;"	d
TYPE_GRENADE	spells.h	/^TYPE_GRENADE,$/;"	e	enum:weapon_attack_types_t
TYPE_GRENADE	spells.h	180;"	d
TYPE_HIT	spells.h	/^	TYPE_HIT = 300,$/;"	e	enum:weapon_attack_types_t
TYPE_HIT	spells.h	161;"	d
TYPE_ITEM_ARMOR	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_ARMOR,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_ATTACHMENT	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_ATTACHMENT,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_CONSUMABLE	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_CONSUMABLE,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_DRONE	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_DRONE,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_EXPLOSIVE	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_EXPLOSIVE,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_GADGET	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_GADGET,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_RIFLE	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_RIFLE = 1,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_TRAP	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_TRAP,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_ITEM_WEAPON	mods/forge-engine/generator.hpp	/^		TYPE_ITEM_WEAPON,$/;"	e	enum:mods::forge_engine::item_types_t
TYPE_LIGHT_MACHINE_GUN	spells.h	/^TYPE_LIGHT_MACHINE_GUN,$/;"	e	enum:weapon_attack_types_t
TYPE_LIGHT_MACHINE_GUN	spells.h	179;"	d
TYPE_MAUL	spells.h	/^TYPE_MAUL,$/;"	e	enum:weapon_attack_types_t
TYPE_MAUL	spells.h	170;"	d
TYPE_PIERCE	spells.h	/^TYPE_PIERCE,$/;"	e	enum:weapon_attack_types_t
TYPE_PIERCE	spells.h	172;"	d
TYPE_POUND	spells.h	/^TYPE_POUND,$/;"	e	enum:weapon_attack_types_t
TYPE_POUND	spells.h	168;"	d
TYPE_PUNCH	spells.h	/^TYPE_PUNCH,$/;"	e	enum:weapon_attack_types_t
TYPE_PUNCH	spells.h	174;"	d
TYPE_SHOTGUN	spells.h	/^TYPE_SHOTGUN,$/;"	e	enum:weapon_attack_types_t
TYPE_SHOTGUN	spells.h	177;"	d
TYPE_SLASH	spells.h	/^TYPE_SLASH,$/;"	e	enum:weapon_attack_types_t
TYPE_SLASH	spells.h	164;"	d
TYPE_SNIPE	spells.h	/^TYPE_SNIPE,$/;"	e	enum:weapon_attack_types_t
TYPE_SNIPE	spells.h	176;"	d
TYPE_STAB	spells.h	/^TYPE_STAB,$/;"	e	enum:weapon_attack_types_t
TYPE_STAB	spells.h	175;"	d
TYPE_STING	spells.h	/^TYPE_STING,$/;"	e	enum:weapon_attack_types_t
TYPE_STING	spells.h	162;"	d
TYPE_SUB_MACHINE_GUN	spells.h	/^TYPE_SUB_MACHINE_GUN,$/;"	e	enum:weapon_attack_types_t
TYPE_SUB_MACHINE_GUN	spells.h	178;"	d
TYPE_SUFFER	spells.h	181;"	d
TYPE_SUFFERING	spells.h	/^TYPE_SUFFERING,$/;"	e	enum:weapon_attack_types_t
TYPE_THRASH	spells.h	/^TYPE_THRASH,$/;"	e	enum:weapon_attack_types_t
TYPE_THRASH	spells.h	171;"	d
TYPE_UNDEFINED	spells.h	36;"	d
TYPE_UTTERLY_DECIMATE	spells.h	/^TYPE_UTTERLY_DECIMATE,$/;"	e	enum:weapon_attack_types_t
TYPE_UTTERLY_DECIMATE	spells.h	185;"	d
TYPE_WHIP	spells.h	/^TYPE_WHIP,$/;"	e	enum:weapon_attack_types_t
TYPE_WHIP	spells.h	163;"	d
TYPO_FILE	db.h	89;"	d
TestFailureException	mods/catch.hpp	/^	struct TestFailureException {};$/;"	s	namespace:Catch
TestFunction	mods/catch.hpp	/^	typedef void(*TestFunction)();$/;"	t	namespace:Catch
TestInvokerAsMethod	mods/catch2.hpp	/^class TestInvokerAsMethod : public ITestInvoker {$/;"	c	namespace:Catch
ThrewException	mods/catch.hpp	/^			ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
ThrewException	mods/catch2.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
TrueType	mods/catch.hpp	/^		struct TrueType {$/;"	s	namespace:Catch::Detail
TupleDetail	mods/catch.hpp	/^	namespace TupleDetail {$/;"	n	namespace:Catch
UMP45	mods/weapon.hpp	/^			UMP45 = 2$/;"	e	enum:mods::weapon::psyop::primary_choice_t
UNCOMMON	mods/randomized-items.hpp	/^	UNCOMMON,$/;"	e	enum:mods::rarity_enum_t
UNCOMMON	mods/rarity.hpp	/^		constexpr static float UNCOMMON = 0.1503172;$/;"	m	namespace:mods::rarity
UNCOMMON_DROP_RATE	mods/randomized-items.hpp	/^		constexpr static float UNCOMMON_DROP_RATE = 15.0;$/;"	m	class:mods::randomized_items
UNDEFINED	mods/classes/types.hpp	/^		UNDEFINED$/;"	e	enum:mods::classes::types
UNDERWATER	structs.h	/^			UNDERWATER,$/;"	m	struct:room_data	typeref:enum:room_data::
UNKNOWN_ACTION	mods/rate-limiting.hpp	/^		UNKNOWN_ACTION = -1,$/;"	e	enum:mods::rate_limiting::action_t
UNKNOWN_ERROR	mods/orm/util.hpp	/^	static constexpr int8_t UNKNOWN_ERROR = -2;$/;"	m	namespace:mods::orm::util
UNKNOWN_ERROR	mods/pq.hpp	/^static constexpr int8_t UNKNOWN_ERROR = -2;$/;"	v
UNKNOWN_STATUS	mods/behaviour_tree_status.hpp	/^		UNKNOWN_STATUS,$/;"	e	enum:mods::behaviour_tree_status
UNKNOWN_YAML_FILE	mods/util.hpp	/^	constexpr static const char* UNKNOWN_YAML_FILE = "unknown-yits";$/;"	m	namespace:mods::util
UNLOCK_DOOR	act.movement.cpp	374;"	d	file:
UNMARK	graph.cpp	54;"	d	file:
UNRECOGNIZED	mods/util.hpp	/^		UNRECOGNIZED = 0,$/;"	e	enum:mods::util::yaml_type_t
UNSWITCH	interpreter.cpp	1565;"	d	file:
UNUSED16	mods/flags.hpp	/^		UNUSED16,				\/\/ useless$/;"	e	enum:mods::flags::aff
UNUSED17	mods/flags.hpp	/^		UNUSED17,				\/\/ useless$/;"	e	enum:mods::flags::aff
UP	structs.h	137;"	d
UPDATE	mods/lmdb.hpp	/^		EXEC, UPDATE, INSERT $/;"	e	enum:mods::lmdb::transact_type_t
UPPER	utils.h	156;"	d
USERS_FORMAT	act.informative.cpp	1449;"	d	file:
USE_AUTOEQ	structs.h	119;"	d
USURP	interpreter.cpp	1564;"	d	file:
Unknown	mods/catch.hpp	/^			Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
Unknown	mods/catch2.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
VALID_EDGE	graph.cpp	/^int VALID_EDGE(room_rnum x, int y) {$/;"	f
VALID_OBJ_RNUM	utils.h	397;"	d
VALID_ROOM_RNUM	utils.h	263;"	d
VALID_TYPES	mods/util.hpp	/^	static std::vector<std::string> VALID_TYPES = {$/;"	m	namespace:mods::util
VAN	mods/weapon.hpp	/^		VAN,$/;"	e	enum:mods::weapon::vehicle_t
VANISH	act.item.cpp	482;"	d	file:
VEHICLE_NONE	mods/item-types.hpp	/^		VEHICLE_NONE = 0,$/;"	e	enum:mods::weapon::type::vehicle
VEHICLE_STUB	mods/yaml.cpp	16;"	d	file:
VERSION3_TAG	shop.h	84;"	d
VERTICAL_GRIP	mods/weapon.hpp	/^		VERTICAL_GRIP, ANGLED_GRIP$/;"	e	enum:mods::weapon::grip_t
VEST	mods/object.hpp	/^				VEST,$/;"	e	enum:mods::object::object_type_enum_t
VIPER_RECON	mods/object.hpp	/^				VIPER_RECON,$/;"	e	enum:mods::object::object_type_enum_t
VIRTUAL	db.h	/^               VIRTUAL\\$/;"	e	enum:__anon1
VISION	mods/flags.hpp	/^		VISION,$/;"	e	enum:mods::flags::chunk_type_t
VOLATILE	structs.h	/^			VOLATILE,		\/** Volatile means any slight spark will ignite an explosion *\/$/;"	m	struct:room_data	typeref:enum:room_data::
VULTURE_COMBAT	mods/object.hpp	/^				VULTURE_COMBAT,$/;"	e	enum:mods::object::object_type_enum_t
Valid_Name	ban.cpp	/^int Valid_Name(const char *newname) {$/;"	f
WAIT_STATE	utils.h	377;"	d
WANDER	mods/ai_state.hpp	/^				WANDER, SUSPICIOUS, FIGHT,SUSPICIOUS2,PROTECT,AGGRESSIVE_PROTECT,$/;"	e	enum:mods::ai_state::state
WANING_CRESCENT	mods/date-time.hpp	/^		WANING_CRESCENT,$/;"	e	enum:mods::date_time::moon_phase
WANING_GIBBOUS	mods/date-time.hpp	/^		WANING_GIBBOUS,$/;"	e	enum:mods::date_time::moon_phase
WATER	structs.h	/^			WATER,$/;"	m	struct:room_data	typeref:enum:room_data::
WATERWALK	mods/flags.hpp	/^		WATERWALK,			\/\/ useless$/;"	e	enum:mods::flags::aff
WAXING_CRESCENT	mods/date-time.hpp	/^		WAXING_CRESCENT,$/;"	e	enum:mods::date_time::moon_phase
WAXING_GIBBOUS	mods/date-time.hpp	/^		WAXING_GIBBOUS,$/;"	e	enum:mods::date_time::moon_phase
WC_FROZEN	mods/world-configuration.hpp	/^constexpr static int WC_FROZEN = 0;$/;"	v
WC_IDLE	mods/world-configuration.hpp	/^constexpr static int WC_IDLE = 1;$/;"	v
WC_IMM	mods/world-configuration.hpp	/^constexpr static int WC_IMM = 2;$/;"	v
WC_MOR	mods/world-configuration.hpp	/^constexpr static int WC_MOR = 3;$/;"	v
WEAPON	mods/object.hpp	/^				WEAPON,$/;"	e	enum:mods::object::object_type_enum_t
WEAPONS	mods/levels.hpp	/^	WEAPONS,$/;"	e	enum:uint8_t
WEAPON_SET_NUM	mods/mobs/mob.hpp	26;"	d
WEAPON_SET_NUM	mods/player.hpp	44;"	d
WEAR_ABOUT	structs.h	412;"	d
WEAR_ARMS	structs.h	410;"	d
WEAR_BACKPACK	structs.h	424;"	d
WEAR_BODY	structs.h	405;"	d
WEAR_ELBOW_L	structs.h	427;"	d
WEAR_ELBOW_R	structs.h	428;"	d
WEAR_FEET	structs.h	408;"	d
WEAR_FINGER_L	structs.h	402;"	d
WEAR_FINGER_R	structs.h	401;"	d
WEAR_GOGGLES	structs.h	425;"	d
WEAR_HANDS	structs.h	409;"	d
WEAR_HEAD	structs.h	406;"	d
WEAR_HOLD	structs.h	418;"	d
WEAR_LEGS	structs.h	407;"	d
WEAR_LIGHT	structs.h	400;"	d
WEAR_NECK_1	structs.h	403;"	d
WEAR_NECK_2	structs.h	404;"	d
WEAR_PRIMARY	structs.h	417;"	d
WEAR_SECONDARY	structs.h	420;"	d
WEAR_SECONDARY_WEAPON	structs.h	419;"	d
WEAR_SHIELD	structs.h	411;"	d
WEAR_SHOULDERS_L	structs.h	422;"	d
WEAR_SHOULDERS_R	structs.h	423;"	d
WEAR_VEST_PACK	structs.h	426;"	d
WEAR_WAIST	structs.h	413;"	d
WEAR_WEAPON_ATTACHMENT	structs.h	421;"	d
WEAR_WIELD	structs.h	416;"	d
WEAR_WRIST_L	structs.h	415;"	d
WEAR_WRIST_R	structs.h	414;"	d
WELC_MESSG	config.cpp	/^const char *WELC_MESSG =$/;"	v
WEST	structs.h	136;"	d
WHEN	mods/catch.hpp	12215;"	d
WHO_FORMAT	act.informative.cpp	1412;"	d	file:
WILL	telnet.h	46;"	d
WILL_BANK_MONEY	shop.h	164;"	d
WILL_START_FIGHT	shop.h	163;"	d
WIN32_LEAN_AND_MEAN	mods/catch.hpp	6782;"	d
WIN32_LEAN_AND_MEAN	mods/catch.hpp	6795;"	d
WIN32_LEAN_AND_MEAN	mods/catch2.hpp	7994;"	d
WIN32_LEAN_AND_MEAN	mods/catch2.hpp	8007;"	d
WIZLIST_FILE	db.h	82;"	d
WLD_PREFIX	db.h	68;"	d
WONT	telnet.h	45;"	d
WOODEN_WALLS	structs.h	/^			WOODEN_WALLS,$/;"	m	struct:room_data	typeref:enum:room_data::
WRITE_LVL	boards.h	38;"	d
WRITING	mods/flags.hpp	/^		WRITING,$/;"	e	enum:mods::flags::plr
WSL_AR_0_ACCURACY	mods/values-list.cpp	/^WSL_AR_0_ACCURACY,40$/;"	v
WSL_AR_0_ALLOWABLE	mods/values-list.cpp	/^WSL_AR_0_ALLOWABLE,1$/;"	v
WSL_AR_0_DAMAGE	mods/values-list.cpp	/^WSL_AR_0_DAMAGE,40$/;"	v
WSL_AR_1_ACCURACY	mods/values-list.cpp	/^WSL_AR_1_ACCURACY,40$/;"	v
WSL_AR_1_ALLOWABLE	mods/values-list.cpp	/^WSL_AR_1_ALLOWABLE,1$/;"	v
WSL_AR_1_DAMAGE	mods/values-list.cpp	/^WSL_AR_1_DAMAGE,40$/;"	v
WSL_AR_2_ACCURACY	mods/values-list.cpp	/^WSL_AR_2_ACCURACY,40$/;"	v
WSL_AR_2_ALLOWABLE	mods/values-list.cpp	/^WSL_AR_2_ALLOWABLE,1$/;"	v
WSL_AR_2_DAMAGE	mods/values-list.cpp	/^WSL_AR_2_DAMAGE,40$/;"	v
WSL_AR_3_ACCURACY	mods/values-list.cpp	/^WSL_AR_3_ACCURACY,0$/;"	v
WSL_AR_3_ALLOWABLE	mods/values-list.cpp	/^WSL_AR_3_ALLOWABLE,0$/;"	v
WSL_AR_3_DAMAGE	mods/values-list.cpp	/^WSL_AR_3_DAMAGE,0$/;"	v
WSL_AR_4_ACCURACY	mods/values-list.cpp	/^WSL_AR_4_ACCURACY,0$/;"	v
WSL_AR_4_ALLOWABLE	mods/values-list.cpp	/^WSL_AR_4_ALLOWABLE,0$/;"	v
WSL_AR_4_DAMAGE	mods/values-list.cpp	/^WSL_AR_4_DAMAGE,0$/;"	v
WSL_HANDGUN_0_ACCURACY	mods/values-list.cpp	/^WSL_HANDGUN_0_ACCURACY,55$/;"	v
WSL_HANDGUN_0_ALLOWABLE	mods/values-list.cpp	/^WSL_HANDGUN_0_ALLOWABLE,1$/;"	v
WSL_HANDGUN_0_DAMAGE	mods/values-list.cpp	/^WSL_HANDGUN_0_DAMAGE,10$/;"	v
WSL_HANDGUN_1_ACCURACY	mods/values-list.cpp	/^WSL_HANDGUN_1_ACCURACY,0$/;"	v
WSL_HANDGUN_1_ALLOWABLE	mods/values-list.cpp	/^WSL_HANDGUN_1_ALLOWABLE,0$/;"	v
WSL_HANDGUN_1_DAMAGE	mods/values-list.cpp	/^WSL_HANDGUN_1_DAMAGE,0$/;"	v
WSL_HANDGUN_2_ACCURACY	mods/values-list.cpp	/^WSL_HANDGUN_2_ACCURACY,0$/;"	v
WSL_HANDGUN_2_ALLOWABLE	mods/values-list.cpp	/^WSL_HANDGUN_2_ALLOWABLE,0$/;"	v
WSL_HANDGUN_2_DAMAGE	mods/values-list.cpp	/^WSL_HANDGUN_2_DAMAGE,0$/;"	v
WSL_HANDGUN_3_ACCURACY	mods/values-list.cpp	/^WSL_HANDGUN_3_ACCURACY,0$/;"	v
WSL_HANDGUN_3_ALLOWABLE	mods/values-list.cpp	/^WSL_HANDGUN_3_ALLOWABLE,0$/;"	v
WSL_HANDGUN_3_DAMAGE	mods/values-list.cpp	/^WSL_HANDGUN_3_DAMAGE,0$/;"	v
WSL_HANDGUN_4_ACCURACY	mods/values-list.cpp	/^WSL_HANDGUN_4_ACCURACY,0$/;"	v
WSL_HANDGUN_4_ALLOWABLE	mods/values-list.cpp	/^WSL_HANDGUN_4_ALLOWABLE,0$/;"	v
WSL_HANDGUN_4_DAMAGE	mods/values-list.cpp	/^WSL_HANDGUN_4_DAMAGE,0$/;"	v
WSL_LMG_0_ACCURACY	mods/values-list.cpp	/^WSL_LMG_0_ACCURACY,40$/;"	v
WSL_LMG_0_ALLOWABLE	mods/values-list.cpp	/^WSL_LMG_0_ALLOWABLE,1$/;"	v
WSL_LMG_0_DAMAGE	mods/values-list.cpp	/^WSL_LMG_0_DAMAGE,40$/;"	v
WSL_LMG_1_ACCURACY	mods/values-list.cpp	/^WSL_LMG_1_ACCURACY,35$/;"	v
WSL_LMG_1_ALLOWABLE	mods/values-list.cpp	/^WSL_LMG_1_ALLOWABLE,1$/;"	v
WSL_LMG_1_DAMAGE	mods/values-list.cpp	/^WSL_LMG_1_DAMAGE,35$/;"	v
WSL_LMG_2_ACCURACY	mods/values-list.cpp	/^WSL_LMG_2_ACCURACY,30$/;"	v
WSL_LMG_2_ALLOWABLE	mods/values-list.cpp	/^WSL_LMG_2_ALLOWABLE,1$/;"	v
WSL_LMG_2_DAMAGE	mods/values-list.cpp	/^WSL_LMG_2_DAMAGE,30$/;"	v
WSL_LMG_3_ACCURACY	mods/values-list.cpp	/^WSL_LMG_3_ACCURACY,0$/;"	v
WSL_LMG_3_ALLOWABLE	mods/values-list.cpp	/^WSL_LMG_3_ALLOWABLE,0$/;"	v
WSL_LMG_3_DAMAGE	mods/values-list.cpp	/^WSL_LMG_3_DAMAGE,0$/;"	v
WSL_LMG_4_ACCURACY	mods/values-list.cpp	/^WSL_LMG_4_ACCURACY,0$/;"	v
WSL_LMG_4_ALLOWABLE	mods/values-list.cpp	/^WSL_LMG_4_ALLOWABLE,0$/;"	v
WSL_LMG_4_DAMAGE	mods/values-list.cpp	/^WSL_LMG_4_DAMAGE,0$/;"	v
WSL_MACHINE_PISTOL_0_ACCURACY	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_0_ACCURACY,25$/;"	v
WSL_MACHINE_PISTOL_0_ALLOWABLE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_0_ALLOWABLE,1$/;"	v
WSL_MACHINE_PISTOL_0_DAMAGE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_0_DAMAGE,15$/;"	v
WSL_MACHINE_PISTOL_1_ACCURACY	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_1_ACCURACY,0$/;"	v
WSL_MACHINE_PISTOL_1_ALLOWABLE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_1_ALLOWABLE,0$/;"	v
WSL_MACHINE_PISTOL_1_DAMAGE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_1_DAMAGE,0$/;"	v
WSL_MACHINE_PISTOL_2_ACCURACY	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_2_ACCURACY,0$/;"	v
WSL_MACHINE_PISTOL_2_ALLOWABLE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_2_ALLOWABLE,0$/;"	v
WSL_MACHINE_PISTOL_2_DAMAGE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_2_DAMAGE,0$/;"	v
WSL_MACHINE_PISTOL_3_ACCURACY	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_3_ACCURACY,0$/;"	v
WSL_MACHINE_PISTOL_3_ALLOWABLE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_3_ALLOWABLE,0$/;"	v
WSL_MACHINE_PISTOL_3_DAMAGE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_3_DAMAGE,0$/;"	v
WSL_MACHINE_PISTOL_4_ACCURACY	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_4_ACCURACY,0$/;"	v
WSL_MACHINE_PISTOL_4_ALLOWABLE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_4_ALLOWABLE,0$/;"	v
WSL_MACHINE_PISTOL_4_DAMAGE	mods/values-list.cpp	/^WSL_MACHINE_PISTOL_4_DAMAGE,0$/;"	v
WSL_SHOTGUN_0_ACCURACY	mods/values-list.cpp	/^WSL_SHOTGUN_0_ACCURACY,80$/;"	v
WSL_SHOTGUN_0_ALLOWABLE	mods/values-list.cpp	/^WSL_SHOTGUN_0_ALLOWABLE,1$/;"	v
WSL_SHOTGUN_0_DAMAGE	mods/values-list.cpp	/^WSL_SHOTGUN_0_DAMAGE,80$/;"	v
WSL_SHOTGUN_1_ACCURACY	mods/values-list.cpp	/^WSL_SHOTGUN_1_ACCURACY,15$/;"	v
WSL_SHOTGUN_1_ALLOWABLE	mods/values-list.cpp	/^WSL_SHOTGUN_1_ALLOWABLE,1$/;"	v
WSL_SHOTGUN_1_DAMAGE	mods/values-list.cpp	/^WSL_SHOTGUN_1_DAMAGE,15$/;"	v
WSL_SHOTGUN_2_ACCURACY	mods/values-list.cpp	/^WSL_SHOTGUN_2_ACCURACY,0$/;"	v
WSL_SHOTGUN_2_ALLOWABLE	mods/values-list.cpp	/^WSL_SHOTGUN_2_ALLOWABLE,0$/;"	v
WSL_SHOTGUN_2_DAMAGE	mods/values-list.cpp	/^WSL_SHOTGUN_2_DAMAGE,0$/;"	v
WSL_SHOTGUN_3_ACCURACY	mods/values-list.cpp	/^WSL_SHOTGUN_3_ACCURACY,0$/;"	v
WSL_SHOTGUN_3_ALLOWABLE	mods/values-list.cpp	/^WSL_SHOTGUN_3_ALLOWABLE,0$/;"	v
WSL_SHOTGUN_3_DAMAGE	mods/values-list.cpp	/^WSL_SHOTGUN_3_DAMAGE,0$/;"	v
WSL_SHOTGUN_4_ACCURACY	mods/values-list.cpp	/^WSL_SHOTGUN_4_ACCURACY,0$/;"	v
WSL_SHOTGUN_4_ALLOWABLE	mods/values-list.cpp	/^WSL_SHOTGUN_4_ALLOWABLE,0$/;"	v
WSL_SHOTGUN_4_DAMAGE	mods/values-list.cpp	/^WSL_SHOTGUN_4_DAMAGE,0$/;"	v
WSL_SMG_0_ACCURACY	mods/values-list.cpp	/^WSL_SMG_0_ACCURACY,90$/;"	v
WSL_SMG_0_ALLOWABLE	mods/values-list.cpp	/^WSL_SMG_0_ALLOWABLE,1$/;"	v
WSL_SMG_0_DAMAGE	mods/values-list.cpp	/^WSL_SMG_0_DAMAGE,40$/;"	v
WSL_SMG_1_ACCURACY	mods/values-list.cpp	/^WSL_SMG_1_ACCURACY,0$/;"	v
WSL_SMG_1_ALLOWABLE	mods/values-list.cpp	/^WSL_SMG_1_ALLOWABLE,0$/;"	v
WSL_SMG_1_DAMAGE	mods/values-list.cpp	/^WSL_SMG_1_DAMAGE,0$/;"	v
WSL_SMG_2_ACCURACY	mods/values-list.cpp	/^WSL_SMG_2_ACCURACY,0$/;"	v
WSL_SMG_2_ALLOWABLE	mods/values-list.cpp	/^WSL_SMG_2_ALLOWABLE,0$/;"	v
WSL_SMG_2_DAMAGE	mods/values-list.cpp	/^WSL_SMG_2_DAMAGE,0$/;"	v
WSL_SMG_3_ACCURACY	mods/values-list.cpp	/^WSL_SMG_3_ACCURACY,0$/;"	v
WSL_SMG_3_ALLOWABLE	mods/values-list.cpp	/^WSL_SMG_3_ALLOWABLE,0$/;"	v
WSL_SMG_3_DAMAGE	mods/values-list.cpp	/^WSL_SMG_3_DAMAGE,0$/;"	v
WSL_SMG_4_ACCURACY	mods/values-list.cpp	/^WSL_SMG_4_ACCURACY,0$/;"	v
WSL_SMG_4_ALLOWABLE	mods/values-list.cpp	/^WSL_SMG_4_ALLOWABLE,0$/;"	v
WSL_SMG_4_DAMAGE	mods/values-list.cpp	/^WSL_SMG_4_DAMAGE,0$/;"	v
WSL_SNIPER_0_ACCURACY	mods/values-list.cpp	/^WSL_SNIPER_0_ACCURACY,10$/;"	v
WSL_SNIPER_0_ALLOWABLE	mods/values-list.cpp	/^WSL_SNIPER_0_ALLOWABLE,1$/;"	v
WSL_SNIPER_0_DAMAGE	mods/values-list.cpp	/^WSL_SNIPER_0_DAMAGE,10$/;"	v
WSL_SNIPER_1_ACCURACY	mods/values-list.cpp	/^WSL_SNIPER_1_ACCURACY,35$/;"	v
WSL_SNIPER_1_ALLOWABLE	mods/values-list.cpp	/^WSL_SNIPER_1_ALLOWABLE,1$/;"	v
WSL_SNIPER_1_DAMAGE	mods/values-list.cpp	/^WSL_SNIPER_1_DAMAGE,35$/;"	v
WSL_SNIPER_2_ACCURACY	mods/values-list.cpp	/^WSL_SNIPER_2_ACCURACY,60$/;"	v
WSL_SNIPER_2_ALLOWABLE	mods/values-list.cpp	/^WSL_SNIPER_2_ALLOWABLE,1$/;"	v
WSL_SNIPER_2_DAMAGE	mods/values-list.cpp	/^WSL_SNIPER_2_DAMAGE,60$/;"	v
WSL_SNIPER_3_ACCURACY	mods/values-list.cpp	/^WSL_SNIPER_3_ACCURACY,75$/;"	v
WSL_SNIPER_3_ALLOWABLE	mods/values-list.cpp	/^WSL_SNIPER_3_ALLOWABLE,1$/;"	v
WSL_SNIPER_3_DAMAGE	mods/values-list.cpp	/^WSL_SNIPER_3_DAMAGE,75$/;"	v
WSL_SNIPER_4_ACCURACY	mods/values-list.cpp	/^WSL_SNIPER_4_ACCURACY,75$/;"	v
WSL_SNIPER_4_ALLOWABLE	mods/values-list.cpp	/^WSL_SNIPER_4_ALLOWABLE,1$/;"	v
WSL_SNIPER_4_DAMAGE	mods/values-list.cpp	/^WSL_SNIPER_4_DAMAGE,75$/;"	v
Warning	mods/catch.hpp	/^			Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
Warning	mods/catch2.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
XNAME_FILE	db.h	93;"	d
YAML_FILE_WITH_PREFIX	mods/util.hpp	/^		YAML_FILE_WITH_PREFIX = 2,$/;"	e	enum:mods::util::yaml_type_t
YES	config.cpp	20;"	d	file:
YESNO	utils.h	152;"	d
YOURE_IN_PEACEFUL_ROOM	mods/damage-event.hpp	/^	YOURE_IN_PEACEFUL_ROOM,$/;"	e	enum:uint16_t
YOU_ARE_DISORIENTED_EVENT	mods/damage-event.hpp	/^	YOU_ARE_DISORIENTED_EVENT$/;"	e	enum:uint16_t
YOU_ARE_INJURED_EVENT	mods/damage-event.hpp	/^	YOU_ARE_INJURED_EVENT,$/;"	e	enum:uint16_t
YOU_DEALT_CRITICAL_RIFLE_ATTACK	mods/damage-event.hpp	/^	YOU_DEALT_CRITICAL_RIFLE_ATTACK,$/;"	e	enum:uint16_t
YOU_DEALT_HEADSHOT_WITH_RIFLE_ATTACK	mods/damage-event.hpp	/^	YOU_DEALT_HEADSHOT_WITH_RIFLE_ATTACK,$/;"	e	enum:uint16_t
YOU_DEALT_HEADSHOT_WITH_SPRAY_ATTACK	mods/damage-event.hpp	/^	YOU_DEALT_HEADSHOT_WITH_SPRAY_ATTACK,$/;"	e	enum:uint16_t
YOU_DISORIENTED_SOMEONE_EVENT	mods/damage-event.hpp	/^	YOU_DISORIENTED_SOMEONE_EVENT,$/;"	e	enum:uint16_t
YOU_GOT_HEADSHOT_BY_RIFLE_ATTACK	mods/damage-event.hpp	/^	YOU_GOT_HEADSHOT_BY_RIFLE_ATTACK,$/;"	e	enum:uint16_t
YOU_GOT_HEADSHOT_BY_SPRAY_ATTACK	mods/damage-event.hpp	/^	YOU_GOT_HEADSHOT_BY_SPRAY_ATTACK,$/;"	e	enum:uint16_t
YOU_GOT_HIT_BY_AR_SHRAPNEL	mods/damage-event.hpp	/^	YOU_GOT_HIT_BY_AR_SHRAPNEL,$/;"	e	enum:uint16_t
YOU_GOT_HIT_BY_INCENDIARY_AMMO	mods/damage-event.hpp	/^	YOU_GOT_HIT_BY_INCENDIARY_AMMO,$/;"	e	enum:uint16_t
YOU_GOT_HIT_BY_REFLECTED_MUNITIONS_EVENT	mods/damage-event.hpp	/^	YOU_GOT_HIT_BY_REFLECTED_MUNITIONS_EVENT,$/;"	e	enum:uint16_t
YOU_INFLICTED_AR_SHRAPNEL	mods/damage-event.hpp	/^	YOU_INFLICTED_AR_SHRAPNEL,$/;"	e	enum:uint16_t
YOU_INFLICTED_INCENDIARY_AMMO	mods/damage-event.hpp	/^	YOU_INFLICTED_INCENDIARY_AMMO,$/;"	e	enum:uint16_t
YOU_INJURED_SOMEONE_EVENT	mods/damage-event.hpp	/^	YOU_INJURED_SOMEONE_EVENT,$/;"	e	enum:uint16_t
YOU_MISSED_YOUR_TARGET_EVENT	mods/damage-event.hpp	/^	YOU_MISSED_YOUR_TARGET_EVENT,$/;"	e	enum:uint16_t
YOU_REFLECTED_MUNITIONS_EVENT	mods/damage-event.hpp	/^	YOU_REFLECTED_MUNITIONS_EVENT,$/;"	e	enum:uint16_t
YamlFeedExceptionInfo	mods/object-utils.hpp	/^		YamlFeedExceptionInfo($/;"	f	struct:mods::object_utils::YamlFeedExceptionInfo
YamlFeedExceptionInfo	mods/object-utils.hpp	/^	struct YamlFeedExceptionInfo {$/;"	s	namespace:mods::object_utils
Yes	mods/catch.hpp	/^			Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Yes	mods/catch2.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Z	db.cpp	1689;"	d	file:
Z	db.cpp	1697;"	d	file:
ZONE_ERROR	mods/zone.cpp	111;"	d	file:
ZON_PREFIX	db.h	71;"	d
ZOOM	mods/weapon-types.hpp	/^		ZOOM,$/;"	e	enum:mods::weapon::capabilities::cap_t
Z_KINGS_C	castle.cpp	31;"	d	file:
_ARPA_TELNET_H	telnet.h	37;"	d
_BSD_SNPRINTF_H	bsd-snprintf.h	41;"	d
_BSD_SOURCE	mods/catch.hpp	146;"	d
_BSD_SOURCE	mods/catch2.hpp	225;"	d
_CIRCLEMUD	structs.h	109;"	d
_GNU_SOURCE	mods/lmdb/gethostbyname.cpp	2;"	d	file:
_POSIX_C_SOURCE	sysdep.h	293;"	d
_POSIX_C_SOURCE	sysdep.h	295;"	d
__ACT_OTHER_C__	act.other.cpp	11;"	d	file:
__AFFECT_SIZE	mods/affects.hpp	/^		__AFFECT_SIZE = 6$/;"	e	enum:mods::affects::affect_t
__AFF_FIRST	mods/flags.hpp	/^		__AFF_FIRST = BLIND,$/;"	e	enum:mods::flags::aff
__AFF_LAST	mods/flags.hpp	/^		__AFF_LAST = NORMAL_SIGHT$/;"	e	enum:mods::flags::aff
__AOE_FIRST	mods/aoe.hpp	/^		__AOE_FIRST = EXPLOSIVE,$/;"	e	enum:mods::aoe::types_t
__AOE_LAST	mods/aoe.hpp	/^		__AOE_LAST = CORROSIVE$/;"	e	enum:mods::aoe::types_t
__ARMOR_ATTR_FIRST	mods/forge-engine/generator.hpp	/^		__ARMOR_ATTR_FIRST = ARMOR_ATTR_THAC0,$/;"	e	enum:mods::forge_engine::armor_attributes_t
__ARMOR_ATTR_LAST	mods/forge-engine/generator.hpp	/^		__ARMOR_ATTR_LAST = ARMOR_ATTR_WORTH,$/;"	e	enum:mods::forge_engine::armor_attributes_t
__ARMOR_BRANDS_END__	mods/object.hpp	/^				__ARMOR_BRANDS_END__,$/;"	e	enum:mods::object::object_type_enum_t
__ARMOR_BRANDS_START__	mods/object.hpp	/^				__ARMOR_BRANDS_START__,$/;"	e	enum:mods::object::object_type_enum_t
__ARMOR_POSITION_END__	mods/object.hpp	/^				__ARMOR_POSITION_END__,$/;"	e	enum:mods::object::object_type_enum_t
__ARMOR_POSITION_START__	mods/object.hpp	/^				__ARMOR_POSITION_START__,$/;"	e	enum:mods::object::object_type_enum_t
__ARMOR_WEAR_FIRST	mods/forge-engine/generator.hpp	/^		__ARMOR_WEAR_FIRST = ARMOR_ITEM_WEAR_FINGER,$/;"	e	enum:mods::forge_engine::armor_types_t
__ARMOR_WEAR_LAST	mods/forge-engine/generator.hpp	/^		__ARMOR_WEAR_LAST = ARMOR_ITEM_WEAR_WEAPON_ATTACHMENT$/;"	e	enum:mods::forge_engine::armor_types_t
__ATTACHMENT_TYPE_FIRST	mods/forge-engine/generator.hpp	/^		__ATTACHMENT_TYPE_FIRST = ATTACHMENT_TYPE_SIGHT,$/;"	e	enum:mods::forge_engine::attachment_types_t
__ATTACHMENT_TYPE_LAST	mods/forge-engine/generator.hpp	/^		__ATTACHMENT_TYPE_LAST = ATTACHMENT_TYPE_STRAP$/;"	e	enum:mods::forge_engine::attachment_types_t
__BROAD_CATEGORY_END__	mods/object.hpp	/^				__BROAD_CATEGORY_END__,$/;"	e	enum:mods::object::object_type_enum_t
__BROAD_CATEGORY_START__	mods/object.hpp	/^				__BROAD_CATEGORY_START__,$/;"	e	enum:mods::object::object_type_enum_t
__CIRCLEMUD_SRC_MODS_ACL_LAMBDA_HEADER__	mods/acl/lambda.hpp	2;"	d
__CIRCLEMUD_SRC_MODS_ACL_PARSER_HEADER__	mods/acl/config-parser.hpp	2;"	d
__CIRCLEMUD_SRC_MODS_GLOBALS_HEADER__	globals.hpp	2;"	d
__CIRCLEMUD_SRC_MODS_GLOBALS_SOURCE__	globals.cpp	2;"	d	file:
__CIRCLEMUD_STRUCTS_HEADER__	structs.h	12;"	d
__COMM_C__	comm.cpp	11;"	d	file:
__CONFIG_C__	config.cpp	11;"	d	file:
__DB_C__	db.cpp	11;"	d	file:
__ELEM_FIRST	mods/forge-engine/elemental-enum.hpp	/^		__ELEM_FIRST = ELEM_INCENDIARY,$/;"	e	enum:mods::forge_engine::elemental_types_t
__ELEM_LAST	mods/forge-engine/elemental-enum.hpp	/^		__ELEM_LAST = ELEM_ANTI_MATTER$/;"	e	enum:mods::forge_engine::elemental_types_t
__EV_FIRST	mods/projectile.hpp	/^			__EV_FIRST = EV_TRAVEL,$/;"	e	enum:mods::projectile::projectile_event_t
__EV_LAST	mods/projectile.hpp	/^			__EV_LAST = EV_EXPOSED$/;"	e	enum:mods::projectile::projectile_event_t
__EXPLOSIVE_ATTR_FIRST	mods/forge-engine/generator.hpp	/^		__EXPLOSIVE_ATTR_FIRST = EXPLOSIVE_ATTR_ALTERNATE_EXPLOSION_TYPE,$/;"	e	enum:mods::forge_engine::explosive_attributes_t
__EXPLOSIVE_ATTR_LAST	mods/forge-engine/generator.hpp	/^		__EXPLOSIVE_ATTR_LAST = EXPLOSIVE_ATTR_ANTI_MATTER_DAMAGE_PERCENT$/;"	e	enum:mods::forge_engine::explosive_attributes_t
__EXPLOSIVE_TYPE_FIRST	mods/forge-engine/generator.hpp	/^		__EXPLOSIVE_TYPE_FIRST = EXPLOSIVE_TYPE_FRAG_GRENADE,$/;"	e	enum:mods::forge_engine::explosive_types_t
__EXPLOSIVE_TYPE_LAST	mods/forge-engine/generator.hpp	/^		__EXPLOSIVE_TYPE_LAST = EXPLOSIVE_TYPE_SENSOR_GRENADE$/;"	e	enum:mods::forge_engine::explosive_types_t
__FIRST	mods/classes/pyrexia.hpp	/^				__FIRST = THROW_FIRE_NADE,$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
__FIRST	mods/date-time.hpp	/^		__FIRST = NEW_MOON,$/;"	e	enum:mods::date_time::moon_phase
__GENERIC_QUALIFIERS_END__	mods/object.hpp	/^				__GENERIC_QUALIFIERS_END__,$/;"	e	enum:mods::object::object_type_enum_t
__GENERIC_QUALIFIERS_START__	mods/object.hpp	/^				__GENERIC_QUALIFIERS_START__,$/;"	e	enum:mods::object::object_type_enum_t
__GET_POS	mods/macro_impl.cpp	/^	byte& __GET_POS(char_data* ch){$/;"	f	namespace:mods::macro_impl
__GHOST_CONF_HEADER__	mods/lmdb/conf.hpp	2;"	d
__GHOST_DB_HEADER__	mods/lmdb/db.hpp	2;"	d
__GHOST_DNS_DAEMON_INTERFACE_HEADER__	mods/lmdb/gdns-shared-memory.hpp	2;"	d
__GHOST_DNS_SHM_HEADER__	mods/lmdb/shm.hpp	2;"	d
__INTERPRETER_C__	interpreter.cpp	11;"	d	file:
__INTERPRETER_C__	login.hpp	3;"	d
__INTERPRETER_HEADER__	interpreter.h	2;"	d
__LAST	mods/classes/pyrexia.hpp	/^				__LAST = LETHAL_ROOM_SEALANT$/;"	m	struct:mods::classes::pyrexia	typeref:enum:mods::classes::pyrexia::
__LAST	mods/date-time.hpp	/^		__LAST = WANING_CRESCENT$/;"	e	enum:mods::date_time::moon_phase
__LAST	mods/doors.hpp	/^		__LAST = EIM_ELECTRIFIED << 1$/;"	e	enum:mods::doors::exit_info_masks_t
__LAST	mods/weapon-types.hpp	/^		__LAST = RIP$/;"	e	enum:mods::weapon::capabilities::cap_t
__MELEE_WEAPON_END__	mods/object.hpp	/^				__MELEE_WEAPON_END__,$/;"	e	enum:mods::object::object_type_enum_t
__MELEE_WEAPON_START__	mods/object.hpp	/^				__MELEE_WEAPON_START__,$/;"	e	enum:mods::object::object_type_enum_t
__MENTOC_ACT_DEBUG_HEADER__	act.debug.hpp	2;"	d
__MENTOC_ARCON_METROPOLITAN_HEADER__	mods/fluxkraft/areas.hpp	2;"	d
__MENTOC_BUILDER_UTILS_ACCEPT_ZERO_INDEX__	mods/builder.hpp	3;"	d
__MENTOC_CONFIG_HEADER__	config.hpp	2;"	d
__MENTOC_DB_HEADER__	db.h	2;"	d
__MENTOC_DEBUG__	globals.hpp	48;"	d
__MENTOC_HELL_HEADER__	mods/hell.hpp	2;"	d
__MENTOC_INTERPRETER_INCLUDES_HEADER__	mods/interpreter-include.hpp	2;"	d
__MENTOC_ITEM_CONSTANTS_DEFINED__	structs.h	471;"	d
__MENTOC_LOGIN_HEADER__	login.hpp	2;"	d
__MENTOC_MODS_ACL_LIST_HEADER__	mods/acl_list.hpp	2;"	d
__MENTOC_MODS_AFFECTS_HEADER__	mods/affects.hpp	2;"	d
__MENTOC_MODS_AFFECTS_SHOW_DEBUG_OUTPUT__	mods/intimidate.hpp	6;"	d
__MENTOC_MODS_AFFECTS_SHOW_DEBUG_OUTPUT__	mods/zone.hpp	6;"	d
__MENTOC_MODS_AFFILIATIONS_HEADER__	mods/affiliations.hpp	2;"	d
__MENTOC_MODS_AOE_HEADER__	mods/aoe.hpp	2;"	d
__MENTOC_MODS_ARMOR_ADVANCED_PROTECTION_HEADER__	mods/armor/advanced-protection.hpp	2;"	d
__MENTOC_MODS_ARMOR_BASIC_PROTECTION_HEADER__	mods/armor/basic-protection.hpp	2;"	d
__MENTOC_MODS_ARMOR_ELITE_PROTECTION_HEADER__	mods/armor/elite-protection.hpp	2;"	d
__MENTOC_MODS_AUTO_LOGIN_HEADER__	mods/auto-login.hpp	2;"	d
__MENTOC_MODS_BAN_SYSTEM_HEADER__	mods/ban_system.hpp	2;"	d
__MENTOC_MODS_BEHAVIOUR_TREE_HEADER__	mods/behaviour_tree.hpp	2;"	d
__MENTOC_MODS_BEHAVIOUR_TREE_IMPL_HEADER__	mods/behaviour_tree_impl.hpp	2;"	d
__MENTOC_MODS_BEHAVIOUR_TREE_NODE_HEADER__	mods/behaviour_tree_node.hpp	2;"	d
__MENTOC_MODS_BEHAVIOUR_TREE_STATUS_HEADER__	mods/behaviour_tree_status.hpp	2;"	d
__MENTOC_MODS_BUGS_FIXTURES_HEADER__	mods/bugs-fixtures.hpp	2;"	d
__MENTOC_MODS_BUILDER_BOOKMARKS_HEADER__	mods/builder/bookmarks.hpp	2;"	d
__MENTOC_MODS_BUILDER_CONTRACT_HEADER__	mods/builder/conbuild.hpp	2;"	d
__MENTOC_MODS_BUILDER_COORDINATES_HEADER__	mods/builder/coordinates.hpp	2;"	d
__MENTOC_MODS_BUILDER_DATA_HEADER__	mods/builder-data.hpp	2;"	d
__MENTOC_MODS_BUILDER_ENCODE_HEADER__	mods/builder/encode.hpp	2;"	d
__MENTOC_MODS_BUILDER_HEADER__	mods/builder.hpp	2;"	d
__MENTOC_MODS_BUILDER_HQ_BUILD_HEADER__	mods/builder/hqbuild.hpp	2;"	d
__MENTOC_MODS_BUILDER_MOB_EQUIPMENT_HEADER__	mods/builder/meqbuild.hpp	2;"	d
__MENTOC_MODS_BUILDER_OBJECT_PLACEMENT_HEADER__	mods/builder/object-placement.hpp	2;"	d
__MENTOC_MODS_BUILDER_RECTANGLE_LAYOUTS_HEADER__	mods/builder/rectangle-layouts.hpp	2;"	d
__MENTOC_MODS_BUILDER_SLOTTED_BUILDER_HEADER__	mods/builder/slotted-builder.hpp	2;"	d
__MENTOC_MODS_BUILDER_UTIL_HEADER__	mods/builder_util.hpp	2;"	d
__MENTOC_MODS_CALC_VISIBILITY_HEADER__	mods/calc-visibility.hpp	2;"	d
__MENTOC_MODS_CAMERA_HEADER__	mods/camera.hpp	2;"	d
__MENTOC_MODS_CAMERA_SOURCE__	mods/camera.cpp	2;"	d	file:
__MENTOC_MODS_CHARGEN_HEADER__	mods/chargen.hpp	2;"	d
__MENTOC_MODS_CHAT_HEADER__	mods/chat.hpp	2;"	d
__MENTOC_MODS_CLASSES_ADVANCE_LEVELS_HEADER__	mods/classes/advance-levels.hpp	2;"	d
__MENTOC_MODS_CLASSES_BASE_HEADER__	mods/classes/base.hpp	2;"	d
__MENTOC_MODS_CLASSES_BREACHER_HEADER__	mods/classes/breacher.hpp	2;"	d
__MENTOC_MODS_CLASSES_CONTAGION_HEADER__	mods/classes/contagion.hpp	2;"	d
__MENTOC_MODS_CLASSES_ENGINEER_HEADER__	mods/classes/engineer.hpp	2;"	d
__MENTOC_MODS_CLASSES_FORGE_HEADER__	mods/classes/forge.hpp	2;"	d
__MENTOC_MODS_CLASSES_GHOST_HEADER__	mods/classes/ghost.hpp	2;"	d
__MENTOC_MODS_CLASSES_MARINE_HEADER__	mods/classes/marine.hpp	2;"	d
__MENTOC_MODS_CLASSES_MEDIC_HEADER__	mods/classes/medic.hpp	2;"	d
__MENTOC_MODS_CLASSES_PSYOP_HEADER__	mods/classes/psyop.hpp	2;"	d
__MENTOC_MODS_CLASSES_PYREXIA_HEADER__	mods/classes/pyrexia.hpp	2;"	d
__MENTOC_MODS_CLASSES_SNIPER_HEADER__	mods/classes/sniper.hpp	2;"	d
__MENTOC_MODS_CLASSES_SUPER_USER_FIDDLER_HEADER__	mods/classes/super-user-fiddler.hpp	2;"	d
__MENTOC_MODS_CLASSES_SUPPORT_HEADER__	mods/classes/support.hpp	2;"	d
__MENTOC_MODS_CLASSES_SYNDROME_HEADER__	mods/classes/syndrome.hpp	2;"	d
__MENTOC_MODS_CLASSES_TYPES_HEADER__	mods/classes/types.hpp	2;"	d
__MENTOC_MODS_CLASS_ABILITIES_HEADER__	mods/class-abilities.hpp	2;"	d
__MENTOC_MODS_CLASS_COMMANDS_HEADER__	mods/classes/class-commands.hpp	2;"	d
__MENTOC_MODS_COLORS_HEADER__	mods/colors.hpp	2;"	d
__MENTOC_MODS_CONF_HEADER__	mods/conf.hpp	2;"	d
__MENTOC_MODS_CONTRACTS_HEADER__	mods/contracts.hpp	2;"	d
__MENTOC_MODS_CONTRACT_STEPS_HEADER__	mods/contract-steps.hpp	2;"	d
__MENTOC_MODS_CONTRACT_TRACKING_HEADER__	mods/contract-tracking.hpp	2;"	d
__MENTOC_MODS_CONTRACT_TYPES_HEADER__	mods/contract-types.hpp	2;"	d
__MENTOC_MODS_CRYPTO_HEADER__	mods/crypto.hpp	2;"	d
__MENTOC_MODS_DAMAGE_EVENT_HEADER__	mods/damage-event.hpp	2;"	d
__MENTOC_MODS_DATE_TIME_HEADER__	mods/date-time.hpp	2;"	d
__MENTOC_MODS_DB_LIB__	mods/db.hpp	2;"	d
__MENTOC_MODS_DB_REPORT_HEADER__	mods/db-report.hpp	2;"	d
__MENTOC_MODS_DEBUG_HEADER__	mods/debug.hpp	2;"	d
__MENTOC_MODS_DEBUG_PRE_GAME_HEADER__	mods/debug-pre-game.hpp	2;"	d
__MENTOC_MODS_DEEP_OBJECT_PARSER_HEADER__	mods/deep-object-parser.hpp	2;"	d
__MENTOC_MODS_DEMOLITIONS_HEADER__	mods/demolitions.hpp	2;"	d
__MENTOC_MODS_DOORS_HEADER__	mods/doors.hpp	2;"	d
__MENTOC_MODS_DRONE_HEADER__	mods/drone.hpp	2;"	d
__MENTOC_MODS_DRONE_SOURCE__	mods/drone.cpp	2;"	d	file:
__MENTOC_MODS_ELEVATOR_HEADER__	mods/elevator.hpp	2;"	d
__MENTOC_MODS_EVENTS_HEADER__	mods/events.hpp	2;"	d
__MENTOC_MODS_EXAMINE_HEADER__	mods/examine.hpp	2;"	d
__MENTOC_MODS_EXTRA_DESC_DATA_HEADER__	mods/extra_desc_data.hpp	2;"	d
__MENTOC_MODS_FILESYSTEM_HEADER__	mods/filesystem.hpp	2;"	d
__MENTOC_MODS_FLAGS_HEADER__	mods/flags.hpp	2;"	d
__MENTOC_MODS_FLASHBANG_HEADER__	mods/flashbang.hpp	2;"	d
__MENTOC_MODS_FLUXKRAFT_GENERATOR_HEADER__	mods/fluxkraft/generator.hpp	2;"	d
__MENTOC_MODS_FLUXKRAFT_shape_dictionary_HEADER__	mods/fluxkraft/shape-dictionary.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_ELEMENTAL_ENUM_HEADER__	mods/forge-engine/elemental-enum.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_GENERATED_ARMOR_HEADER__	mods/forge-engine/generated-armor.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_GENERATED_RIFLE_HEADER__	mods/forge-engine/generated-rifle.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_GENERATOR_HEADER__	mods/forge-engine/generator.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_GENERATOR_HEADER__	mods/forge-engine/item-type-chooser.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_PLAYER_CLASS_HEADER__	mods/forge-engine/player-class.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_REQUIREMENTS_HEADER__	mods/forge-engine/requirements.hpp	2;"	d
__MENTOC_MODS_FORGE_ENGINE_VALUE_SCALER_HEADER__	mods/forge-engine/value-scaler.hpp	2;"	d
__MENTOC_MODS_HELP_HEADER__	mods/help.hpp	2;"	d
__MENTOC_MODS_IMMORTAL_HEADER__	mods/immortal.hpp	2;"	d
__MENTOC_MODS_INIT_HEADER__	mods/init.hpp	2;"	d
__MENTOC_MODS_INJURE_HEADER__	mods/injure.hpp	2;"	d
__MENTOC_MODS_INTEGRAL_OBJECTS_DB_HEADER__	mods/integral-objects-db.hpp	2;"	d
__MENTOC_MODS_INTEGRAL_OBJECTS_HEADER__	mods/integral-objects.hpp	2;"	d
__MENTOC_MODS_INTEPRETER_HEADER__	mods/interpreter.hpp	2;"	d
__MENTOC_MODS_ITEM_HEADER__	mods/item.hpp	2;"	d
__MENTOC_MODS_ITEM_TYPES__	mods/item-types.hpp	2;"	d
__MENTOC_MODS_JS_HEADER__	mods/js.hpp	2;"	d
__MENTOC_MODS_JS_PATH_HEADER__	mods/js-path.hpp	2;"	d
__MENTOC_MODS_JS_PLAYER_SCAFFOLDING_HEADER__	mods/js-player-scaffolding.hpp	2;"	d
__MENTOC_MODS_JX_HEADER__	mods/jx.hpp	2;"	d
__MENTOC_MODS_KARMA_HEADER__	mods/karma.hpp	2;"	d
__MENTOC_MODS_LEVELS_HEADER__	mods/levels.hpp	2;"	d
__MENTOC_MODS_LMDB_HEADER__	mods/lmdb.hpp	2;"	d
__MENTOC_MODS_LOOPS_HEADER__	mods/loops.hpp	2;"	d
__MENTOC_MODS_LOOT_HEADER__	mods/loot.hpp	2;"	d
__MENTOC_MODS_LOOT_SHOW_DEBUG_OUTPUT__	mods/loot.cpp	4;"	d	file:
__MENTOC_MODS_MACRO_IMPL_HEADER__	mods/macro_impl.hpp	2;"	d
__MENTOC_MODS_META_UTILS_HEADER__	mods/meta_utils.hpp	2;"	d
__MENTOC_MODS_MIGRATIONS_HEADER__	mods/migrations.hpp	2;"	d
__MENTOC_MODS_MINI_GAMES_HEADER__	mods/mini-games.hpp	2;"	d
__MENTOC_MODS_MINI_GAMES_LINE_UP_HEADER__	mods/mini-games/line-up.hpp	2;"	d
__MENTOC_MODS_MINI_GAMES_WIRES_HEADER__	mods/mini-games/wires.hpp	2;"	d
__MENTOC_MODS_MOBS_EXTENDED_TYPES_HEADER__	mods/mobs/extended-types.hpp	2;"	d
__MENTOC_MODS_MOBS_HELPERS_HEADER__	mods/mobs/helpers.hpp	2;"	d
__MENTOC_MODS_MOBS_HELPERS_SHOW_DEBUG_OUTPUT__	mods/mob-equipment.cpp	7;"	d	file:
__MENTOC_MODS_MOBS_LOWLY_SECURITY_BEHAVIOUR_TREE_HEADER__	mods/mobs/lowly-security-behaviour-tree.hpp	2;"	d
__MENTOC_MODS_MOBS_LOWLY_SECURITY_HEADER__	mods/mobs/lowly-security.hpp	2;"	d
__MENTOC_MODS_MOBS_LOWLY_SECURITY_SHOW_DEBUG_OUTPUT__	mods/mobs/lowly-security.cpp	7;"	d	file:
__MENTOC_MODS_MOBS_MINI_GUNNER_BEHAVIOUR_TREE_HEADER__	mods/mobs/mini-gunner-behaviour-tree.hpp	2;"	d
__MENTOC_MODS_MOBS_MINI_GUNNER_BEHAVIOUR_TREE_SHOW_DEBUG_OUTPUT__	mods/mobs/mini-gunner-behaviour-tree.cpp	3;"	d	file:
__MENTOC_MODS_MOBS_MINI_GUNNER_HEADER__	mods/mobs/mini-gunner.hpp	2;"	d
__MENTOC_MODS_MOBS_MINI_GUNNER_SHOW_DEBUG_OUTPUT__	mods/mobs/mini-gunner.cpp	10;"	d	file:
__MENTOC_MODS_MOBS_ROOM_WATCHING_HEADER__	mods/mobs/room-watching.hpp	2;"	d
__MENTOC_MODS_MOBS_SMART_MOB_HEADER__	mods/mobs/smart-mob.hpp	2;"	d
__MENTOC_MODS_MOB_EQUIPMENT_HEADER__	mods/mob-equipment.hpp	2;"	d
__MENTOC_MODS_MOB_ROAM_HEADER__	mods/mob-roam.hpp	2;"	d
__MENTOC_MODS_NPC_HEADER__	mods/npc.hpp	2;"	d
__MENTOC_MODS_OBJECT_HEADER__	mods/object.hpp	2;"	d
__MENTOC_MODS_OBJECT_SOURCE__	mods/object.cpp	2;"	d	file:
__MENTOC_MODS_OBJECT_UTILS_HEADER__	mods/object-utils.hpp	2;"	d
__MENTOC_MODS_ORM_ARMOR_INDEX_HEADER__	mods/orm/armor-index.hpp	2;"	d
__MENTOC_MODS_ORM_BASE_HEADER__	mods/orm/base.hpp	2;"	d
__MENTOC_MODS_ORM_BASE_REWRITE_HEADER__	mods/orm/orm-base.hpp	2;"	d
__MENTOC_MODS_ORM_CAMERA_FEED_HEADER__	mods/orm/camera-feed.hpp	2;"	d
__MENTOC_MODS_ORM_CHARGEN_HEADER__	mods/orm/chargen.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_BREACHER_HEADER__	mods/orm/breacher.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_FORGE_HEADER__	mods/orm/forge.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_GHOST_HEADER__	mods/orm/ghost.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_MEDIC_HEADER__	mods/orm/medic.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_PYREXIA_HEADER__	mods/orm/pyrexia.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_STRIKER_HEADER__	mods/orm/striker.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_SUPPORT_HEADER__	mods/orm/support.hpp	2;"	d
__MENTOC_MODS_ORM_CLASS_SYNDROME_HEADER__	mods/orm/syndrome.hpp	2;"	d
__MENTOC_MODS_ORM_DOOR_EVENT_HEADER__	mods/orm/door-event.hpp	2;"	d
__MENTOC_MODS_ORM_ELEVATOR_HEADER__	mods/orm/elevator.hpp	2;"	d
__MENTOC_MODS_ORM_ENABLED_CLASSES_HEADER__	mods/orm/enabled-classes.hpp	2;"	d
__MENTOC_MODS_ORM_ENGINEER_HEADER__	mods/orm/engineer.hpp	2;"	d
__MENTOC_MODS_ORM_FACTORY_HEADER__	mods/orm/factory.hpp	2;"	d
__MENTOC_MODS_ORM_FETCH_HEADER__	mods/orm/fetcher.hpp	2;"	d
__MENTOC_MODS_ORM_HQ_HEADER__	mods/orm/hq.hpp	2;"	d
__MENTOC_MODS_ORM_INTEGRAL_OBJECTS_HEADER__	mods/orm/integral-object.hpp	2;"	d
__MENTOC_MODS_ORM_INVENTORY_HEADER__	mods/orm/inventory.hpp	2;"	d
__MENTOC_MODS_ORM_MARINE_HEADER__	mods/orm/marine.hpp	2;"	d
__MENTOC_MODS_ORM_MINI_GAME_HEADER__	mods/orm/mini-game.hpp	2;"	d
__MENTOC_MODS_ORM_MOB_EQUIPMENT_HEADER__	mods/orm/mob-equipment.hpp	2;"	d
__MENTOC_MODS_ORM_MOB_EQUIPMENT_MAP_HEADER__	mods/orm/mob-equipment-map.hpp	2;"	d
__MENTOC_MODS_ORM_MOB_ROAM_HEADER__	mods/orm/mob-roam.hpp	2;"	d
__MENTOC_MODS_ORM_PLAYER_BASE_ABILITY_HEADER__	mods/orm/player-base-ability.hpp	2;"	d
__MENTOC_MODS_ORM_QUOTES_HEADER__	mods/orm/quotes.hpp	2;"	d
__MENTOC_MODS_ORM_RIFLE_INDEX_HEADER__	mods/orm/rifle-index.hpp	2;"	d
__MENTOC_MODS_ORM_ROOM_HEADER__	mods/orm/room.hpp	2;"	d
__MENTOC_MODS_ORM_SHOP_HEADER__	mods/orm/shop.hpp	2;"	d
__MENTOC_MODS_ORM_SKILL_POINTS_HEADER__	mods/orm/skill-points.hpp	2;"	d
__MENTOC_MODS_ORM_SNIPER_HEADER__	mods/orm/sniper.hpp	2;"	d
__MENTOC_MODS_ORM_UTIL_HEADER__	mods/orm/util.hpp	2;"	d
__MENTOC_MODS_ORM_contract_steps_HEADER__	mods/orm/contract-steps.hpp	2;"	d
__MENTOC_MODS_ORM_contracts_HEADER__	mods/orm/contracts.hpp	2;"	d
__MENTOC_MODS_ORM_player_contract_state_HEADER__	mods/orm/player-contract-state.hpp	2;"	d
__MENTOC_MODS_ORM_player_skill_points_HEADER__	mods/orm/player-skill-points.hpp	2;"	d
__MENTOC_MODS_ORM_player_skill_usage_HEADER__	mods/orm/player-skill-usage.hpp	2;"	d
__MENTOC_MODS_ORM_rifle_attachment_HEADER__	mods/orm/rifle-attachment.hpp	2;"	d
__MENTOC_MODS_ORM_rifle_instance_HEADER__	mods/orm/rifle-instance.hpp	2;"	d
__MENTOC_MODS_ORM_skill_trees_HEADER__	mods/orm/skill-trees.hpp	2;"	d
__MENTOC_MODS_OVERHEAD_MAP_HEADER__	mods/overhead_map.hpp	2;"	d
__MENTOC_MODS_PFIND_HEADER__	mods/pfind.hpp	2;"	d
__MENTOC_MODS_PLAYERS_DB_LOAD_HEADER__	mods/players/db-load.hpp	2;"	d
__MENTOC_MODS_PLAYER_CONTRACT_INSTANCE_HEADER__	mods/player-contract-instance.hpp	2;"	d
__MENTOC_MODS_PLAYER_DESTROY_PLAYER_HEADER__	mods/players/destroy-player.hpp	2;"	d
__MENTOC_MODS_PLAYER_HEADER__	mods/mobs/mob.hpp	2;"	d
__MENTOC_MODS_PLAYER_HEADER__	mods/player.hpp	2;"	d
__MENTOC_MODS_PLAYER_MESSAGES_HEADER__	mods/players/messages.hpp	2;"	d
__MENTOC_MODS_PLAYER_REGISTRATION_HEADER__	mods/player-registration.hpp	2;"	d
__MENTOC_MODS_PLAYER_SCAFFOLDING_HEADER__	mods/player-scaffolding.hpp	2;"	d
__MENTOC_MODS_PLAYER_SOURCE__	mods/mobs/mob.cpp	2;"	d	file:
__MENTOC_MODS_PLAYER_SOURCE__	mods/player.cpp	2;"	d	file:
__MENTOC_MODS_PLAYER_UTILS_HEADER__	mods/player-utils.hpp	2;"	d
__MENTOC_MODS_PQXX_TYPES_HEADER__	mods/pqxx-types.hpp	2;"	d
__MENTOC_MODS_PQ_HEADER__	mods/pq.hpp	2;"	d
__MENTOC_MODS_PROJECTILE_HEADER__	mods/projectile.hpp	2;"	d
__MENTOC_MODS_QUERY_OBJECTS_HEADER__	mods/query-objects.hpp	2;"	d
__MENTOC_MODS_RADIO_HEADER__	mods/radio.hpp	2;"	d
__MENTOC_MODS_RANDOMIZED_ITEM_DROPS_HEADER__	mods/randomized-items.hpp	2;"	d
__MENTOC_MODS_RAND_HEADER__	mods/rand.hpp	2;"	d
__MENTOC_MODS_RARITY_HEADER__	mods/rarity.hpp	2;"	d
__MENTOC_MODS_RATE_LIMITING_HEADER__	mods/rate-limiting.hpp	2;"	d
__MENTOC_MODS_REPLENISH_HEADER__	mods/replenish.hpp	2;"	d
__MENTOC_MODS_RESPONSE_TEAM_HQ_LOCATIONS_HEADER__	mods/response-team/hq-locations.hpp	2;"	d
__MENTOC_MODS_RESPONSE_TEAM_RADIO_HEADER__	mods/response-team/radio.hpp	2;"	d
__MENTOC_MODS_RIFLE_ATTACHMENTS_HEADER__	mods/rifle-attachments.hpp	2;"	d
__MENTOC_MODS_RIFLE_INSTANCE_DATA_HEADER__	mods/rifle-instance-data.hpp	2;"	d
__MENTOC_MODS_ROOMS_HEADER__	mods/rooms.hpp	2;"	d
__MENTOC_MODS_SCAN_HEADER__	mods/scan.hpp	2;"	d
__MENTOC_MODS_SCHEMA_HEADER__	mods/schema.hpp	2;"	d
__MENTOC_MODS_SCREEN_SEARCHER_HEADER__	mods/screen-searcher.hpp	2;"	d
__MENTOC_MODS_SENSOR_GRENADE_HEADER__	mods/sensor-grenade.hpp	2;"	d
__MENTOC_MODS_SHOP_HEADER__	mods/shop.hpp	2;"	d
__MENTOC_MODS_SHOW_ELEMENTAL_DEBUG_OUTPUT__	mods/weapons/elemental.cpp	4;"	d	file:
__MENTOC_MODS_SKILLS_HEADER__	mods/skills.hpp	2;"	d
__MENTOC_MODS_SKILL_ORM_ADAPTOR_HEADER__	mods/skill-orm-adaptor.hpp	2;"	d
__MENTOC_MODS_SQL_HEADER__	mods/sql.hpp	9;"	d
__MENTOC_MODS_STAT_BONUSES_HEADER__	mods/stat-bonuses.hpp	2;"	d
__MENTOC_MODS_STRING_HEADER__	mods/string.hpp	2;"	d
__MENTOC_MODS_SUPER_USERS_HEADER__	mods/super-users.hpp	2;"	d
__MENTOC_MODS_TARGET_PRACTICE_DB_HEADER__	mods/target-practice-db.hpp	2;"	d
__MENTOC_MODS_TARGET_PRACTICE_HEADER__	mods/target-practice.hpp	2;"	d
__MENTOC_MODS_TESTING_INDEX_HEADER__	mods/testing_index.hpp	2;"	d
__MENTOC_MODS_VALUES_HEADER__	mods/values.hpp	5;"	d
__MENTOC_MODS_VALUES_SHOW_DEBUG_OUTPUT__	mods/stat-bonuses.cpp	10;"	d	file:
__MENTOC_MODS_VALUES_SHOW_DEBUG_OUTPUT__	mods/values.cpp	11;"	d	file:
__MENTOC_MODS_VALUES_SHOW_RADIO_OUTPUT__	mods/radio.cpp	3;"	d	file:
__MENTOC_MODS_WEAPONS_DAMAGE_CALCULATOR_HEADER__	mods/weapons/damage-calculator.hpp	2;"	d
__MENTOC_MODS_WEAPONS_DAMAGE_TYPES_HEADER__	mods/weapons/damage-types.hpp	2;"	d
__MENTOC_MODS_WEAPONS_ELEMENTAL_HEADER__	mods/weapons/elemental.hpp	2;"	d
__MENTOC_MODS_WEAPONS_HEAT_HEADER__	mods/weapons/heat.hpp	2;"	d
__MENTOC_MODS_WEAPONS_INTENT_HEADER__	mods/intent.hpp	2;"	d
__MENTOC_MODS_WEAPONS_PISTOL_CZP10_HEADER__	mods/weapons/pistol-czp10.hpp	2;"	d
__MENTOC_MODS_WEAPONS_RELOAD_HEADER__	mods/weapons/reload.hpp	2;"	d
__MENTOC_MODS_WEAPONS_SHOTGUN_SASG12_HEADER__	mods/weapons/shotgun-sasg12.hpp	2;"	d
__MENTOC_MODS_WEAPONS_SMG_HEADER__	mods/weapons/smg.hpp	2;"	d
__MENTOC_MODS_WEAPONS_SMG_MP5_HEADER__	mods/weapons/smg-mp5.hpp	2;"	d
__MENTOC_MODS_WEAPONS_SNIPER_RIFLE_HEADER__	mods/weapons/sniper-rifle.hpp	2;"	d
__MENTOC_MODS_WEAPONS_SNIPER_RIFLE_L96AW_HEADER__	mods/weapons/sniper-rifle-l96aw.hpp	2;"	d
__MENTOC_MODS_WEAPONS_SNIPER_RIFLE_PSG1_HEADER__	mods/weapons/sniper-rifle-psg1.hpp	2;"	d
__MENTOC_MODS_WEAPON_HEADER__	mods/weapon.hpp	2;"	d
__MENTOC_MODS_WEAPON_STAT_LIST_HEADER__	mods/weapon-stat-list.hpp	2;"	d
__MENTOC_MODS_WEAPON_TYPES_HEADER__	mods/weapon-types.hpp	2;"	d
__MENTOC_MODS_WORLD_CONFIGURATION_HEADER__	mods/world-configuration.hpp	2;"	d
__MENTOC_MODS_YAML_HEADER__	mods/yaml.hpp	2;"	d
__MENTOC_MODS_ZONE_HEADER__	mods/intimidate.hpp	2;"	d
__MENTOC_MODS_ZONE_HEADER__	mods/zone.hpp	2;"	d
__MENTOC_MODS_ai_state_HEADER__	mods/ai_state.hpp	2;"	d
__MENTOC_MODS_contract_events_HEADER__	mods/contract-events.hpp	2;"	d
__MENTOC_MODS_cron_HEADER__	mods/cron.hpp	2;"	d
__MENTOC_MODS_deferred_HEADER__	mods/deferred.hpp	2;"	d
__MENTOC_MODS_prefs_HEADER__	mods/prefs.hpp	2;"	d
__MENTOC_MODS_pregame_HEADER__	mods/pregame.hpp	2;"	d
__MENTOC_PLAYER_UTILS_HEADER__	mods/players/search.hpp	2;"	d
__MENTOC_PLAYER_UTILS_HEADER__	mods/players/util.hpp	2;"	d
__MENTOC_PLR	db.cpp	2159;"	d	file:
__MENTOC_RUN_MEDIC_INHERITANCE_SANITY_CHECKS__	mods/debug-pre-game.hpp	138;"	d
__MENTOC_RUN_MEDIC_PREGAME_TESTS__	mods/debug-pre-game.hpp	156;"	d
__MENTOC_RUN_PBA_CODE__	mods/debug-pre-game.hpp	23;"	d
__MENTOC_RUN_PREGAME_SKILL_CODE__	mods/debug-pre-game.hpp	7;"	d
__MENTOC_RUN_SNIPER_PREGAME_TESTS__	mods/debug-pre-game.hpp	145;"	d
__MENTOC_SHOW_BEHAVIOUR_TREE_MINI_GUNNER_BTREE_DEBUG_OUTPUT__	mods/mobs/mini-gunner-behaviour-tree.hpp	18;"	d
__MENTOC_SHOW_DAMAGE_CALCULATOR_DEBUG_OUTPUT__	mods/weapons/damage-calculator.cpp	14;"	d	file:
__MENTOC_SHOW_DISPOSE_PLAYER_DEBUG_OUTPUT__	globals.cpp	1231;"	d	file:
__MENTOC_SHOW_EQUIP_DEBUG_OUTPUT__	mods/player.cpp	35;"	d	file:
__MENTOC_SHOW_MODS_ARMOR_ADVANCED_PROTECTION_DEBUG_OUTPUT__	mods/armor/advanced-protection.cpp	4;"	d	file:
__MENTOC_SHOW_MODS_ARMOR_BP_DEBUG_OUTPUT__	mods/armor/basic-protection.cpp	4;"	d	file:
__MENTOC_SHOW_MODS_ARMOR_ELITE_PROTECTION_DEBUG_OUTPUT__	mods/armor/elite-protection.cpp	4;"	d	file:
__MENTOC_SHOW_MODS_EXPLODE_IN_FUTURE_DEBUG_OUTPUT__	mods/projectile.cpp	27;"	d	file:
__MENTOC_SHOW_MODS_PLAYERS_DB_LOAD_DEBUG_OUTPUT__	mods/players/db-load.cpp	14;"	d	file:
__MENTOC_SHOW_MODS_PLAYERS_DESTROY_PLAYER_DEBUG_OUTPUT__	mods/players/destroy-player.cpp	4;"	d	file:
__MENTOC_SHOW_MODS_PLAYERS_MESSAGES_DEBUG_OUTPUT__	mods/players/messages.cpp	6;"	d	file:
__MENTOC_SHOW_MODS_ROOMS_AFFECTS_DEBUG_OUTPUT__	mods/rooms.hpp	8;"	d
__MENTOC_SHOW_WEAR_DEBUG_OUTPUT__	act.item.cpp	29;"	d	file:
__MENTOC_STRING_LIT__	mods/util.hpp	11;"	d
__MENTOC_TYPES_HEADER__	types.hpp	2;"	d
__MENTOC_UNIT_TESTS_CONTRACTS__	mods/unit-tests/contracts.cpp	3;"	d	file:
__MENTOC_UNIT_TESTS_CONTRACT_TRACKING__	mods/unit-tests/player-contract-instance.cpp	3;"	d	file:
__MENTOC_UNIT_TESTS_DAMAGE_TYPES__	mods/unit-tests/damage-types.cpp	3;"	d	file:
__MENTOC_UNIT_TESTS_MOB_ROAM__	mods/unit-tests/mob-roam.cpp	3;"	d	file:
__MENTOC_UNIT_TESTS_RIFLE_ATTACHMENTS__	mods/unit-tests/rifle-attachments.cpp	3;"	d	file:
__MENTOC_UNIT_TESTS_RIFLE_INSTANCE__	mods/unit-tests/rifle-instance.cpp	3;"	d	file:
__MENTOC_UNIT_TESTS_SKILL_POINTS__	mods/unit-tests/skill-points.cpp	3;"	d	file:
__MENTOC_USE_LEGACY_SLEEP_CODE__	comm.cpp	71;"	d	file:
__MENTOC_USE_LMDB__	mods/lmdb.cpp	10;"	d	file:
__MENTOC_UTILS_HEADER__	mods/util.hpp	2;"	d
__MENTOC_UTILS_SOURCE__	mods/util.cpp	2;"	d	file:
__MENTOC_UTIL_CONF_HEADER__	mods/util-conf.hpp	2;"	d
__MENTOC_UTIL_MAP_HEADER__	mods/util-map.hpp	2;"	d
__MODS_COLORS_HEADER__	mods/acl/color.hpp	2;"	d
__MODS_INDEX_TYPES_HEADER__	mods/index-type.hpp	2;"	d
__PLCLASS_FIRST	mods/forge-engine/player-class.hpp	/^			__PLCLASS_FIRST = PLCLASS_SNIPER,$/;"	e	enum:mods::forge_engine::player_class_types_t
__PLCLASS_LAST	mods/forge-engine/player-class.hpp	/^			__PLCLASS_LAST = PLCLASS_SUPPORT$/;"	e	enum:mods::forge_engine::player_class_types_t
__PLR_FIRST	mods/flags.hpp	/^		__PLR_FIRST = KILLER,$/;"	e	enum:mods::flags::plr
__PLR_LAST	mods/flags.hpp	/^		__PLR_LAST = CRYO$/;"	e	enum:mods::flags::plr
__RIFLE_ATTRIBUTES_FIRST	mods/forge-engine/generator.hpp	/^		__RIFLE_ATTRIBUTES_FIRST = RIFLE_ATTRIBUTES_AMMO_MAX,$/;"	e	enum:mods::forge_engine::rifle_attributes_t
__RIFLE_ATTRIBUTES_LAST	mods/forge-engine/generator.hpp	/^		__RIFLE_ATTRIBUTES_LAST = RIFLE_ATTRIBUTES_DAMAGE_DICE_SIDES$/;"	e	enum:mods::forge_engine::rifle_attributes_t
__RIFLE_TYPE_FIRST	mods/forge-engine/generator.hpp	/^		__RIFLE_TYPE_FIRST=RIFLE_TYPE_SHOTGUN,$/;"	e	enum:mods::forge_engine::rifle_types_t
__RIFLE_TYPE_LAST	mods/forge-engine/generator.hpp	/^		__RIFLE_TYPE_LAST=RIFLE_TYPE_LIGHT_MACHINE_GUN$/;"	e	enum:mods::forge_engine::rifle_types_t
__SHM_CONFIG_HEADER__	mods/lmdb/shm-config.hpp	2;"	d
__SHOP_HEADER__	shop.h	12;"	d
__SKILL_TYPE_FIRST	mods/forge-engine/requirements.hpp	/^			__SKILL_TYPE_FIRST = SKILL_STR,$/;"	e	enum:mods::forge_engine::stat_types_t
__SKILL_TYPE_LAST	mods/forge-engine/requirements.hpp	/^			__SKILL_TYPE_LAST = SKILL_MEDICAL$/;"	e	enum:mods::forge_engine::stat_types_t
__SPELL_HEADER__	spells.h	2;"	d
__STATE_GUARD__	utils.h	29;"	d
__TYPE_ITEM_FIRST	mods/forge-engine/generator.hpp	/^		__TYPE_ITEM_FIRST = TYPE_ITEM_RIFLE,$/;"	e	enum:mods::forge_engine::item_types_t
__TYPE_ITEM_LAST	mods/forge-engine/generator.hpp	/^		__TYPE_ITEM_LAST = TYPE_ITEM_TRAP$/;"	e	enum:mods::forge_engine::item_types_t
__WEAPON_END__	mods/object.hpp	/^				__WEAPON_END__,$/;"	e	enum:mods::object::object_type_enum_t
__WEAPON_START__	mods/object.hpp	/^				__WEAPON_START__,$/;"	e	enum:mods::object::object_type_enum_t
__attribute__	sysdep.h	339;"	d
__find_player_by_name	mods/js.cpp	/^			static inline bool __find_player_by_name(player_ptr_t player_ptr,find_player_payload_t* param) {$/;"	f	namespace:mods::js::utils
_addrinfo	mods/lmdb/gethostbyname.cpp	/^typedef struct _addrinfo {$/;"	s	file:
_clrlevel	screen.h	26;"	d
_db_handle	mods/lmdb.cpp	/^	_db_handle::_db_handle(std::string directory,std::string db_name,const uint64_t & flags,const uint16_t & mode,bool unused) $/;"	f	class:mods::lmdb::_db_handle
_db_handle	mods/lmdb.hpp	/^	struct _db_handle {$/;"	s	namespace:mods::lmdb
_hostent	mods/lmdb/gethostbyname.cpp	/^typedef struct _hostent {       \\$/;"	s	file:
_parse_name	interpreter.cpp	/^int _parse_name(char *arg, char *name) {$/;"	f
_s	mods/lmdb.hpp	/^	inline static std::string operator "" _s(const char* str,std::size_t size){ $/;"	f	namespace:mods::lmdb
_s	mods/util.hpp	/^static inline std::string operator "" _s(const char* s,uint64_t i) {$/;"	f
_selector	mods/lmdb.hpp	/^	struct _selector {$/;"	s	namespace:mods::lmdb
_write_one_node	ban.cpp	/^void _write_one_node(FILE *fp, struct ban_list_element *node) {$/;"	f
a	random.cpp	48;"	d	file:
abort_txn	mods/lmdb.cpp	/^	_db_handle::tuple_return_type_t _db_handle::abort_txn(){$/;"	f	class:mods::lmdb::_db_handle
abs_val	bsd-snprintf.cpp	155;"	d	file:
accept_closing_bracket	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t> accept_closing_bracket(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
accept_comma	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t> accept_comma(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
accept_eol	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t> accept_eol(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
accept_open_bracket	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t> accept_open_bracket(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
accept_pkid	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,std::string,counter_t> accept_pkid(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
accept_yaml_file	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t> accept_yaml_file(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
access	mods/lmdb/shm.hpp	/^        static inline int access(size_t memory_size,char** out_ptr){$/;"	f	class:gdns::shm
access	mods/lmdb/shm.hpp	/^int shm::access(const char* memory_id,int project_id,size_t memory_size,char** out_ptr){$/;"	f	class:gdns::shm
access_level	mods/player.cpp	/^	player::access_level_t player::access_level() {$/;"	f	class:mods::player
account	structs.h	/^	int	account;$/;"	m	struct:rent_info
accumulate_from	mods/builder/slotted-builder.hpp	/^			std::string accumulate_from(const std::vector<std::string>& args,std::size_t index) {$/;"	f	struct:mods::builder::slotted_builder
accuracy	mods/weapon-types.hpp	/^		weapon_accuracy_t accuracy;$/;"	m	struct:mods::weapon::weapon_type_statistics_t
accuracy_map	mods/yaml.hpp	/^		std::array<float,MAX_ROOM_DISTANCE> accuracy_map;$/;"	m	struct:mods::yaml::melee_description_t
accuracy_map	mods/yaml.hpp	/^		std::array<float,MAX_ROOM_DISTANCE> accuracy_map;$/;"	m	struct:mods::yaml::rifle_description_t
accuracy_points	mods/rifle-attachments.hpp	/^			int16_t accuracy_points;$/;"	m	struct:mods::rifle_attachments_t
acl	mods/acl/config-parser.cpp	/^    namespace acl {$/;"	n	namespace:mods	file:
acl	mods/acl/config-parser.hpp	/^    namespace acl {$/;"	n	namespace:mods
acl	mods/acl/lambda.hpp	/^    namespace acl {$/;"	n	namespace:mods
acl_allowed	globals.cpp	/^		bool acl_allowed(char_data *ch,const char* command_name,const char* file,int cmd,const char* arg,int subcmd) {$/;"	f	namespace:mods::globals
acl_list	mods/acl_list.cpp	/^namespace mods::acl_list {$/;"	n	class:mods	file:
acl_list	mods/acl_list.hpp	/^namespace mods::acl_list {$/;"	n	class:mods
acl_list	mods/player.hpp	/^namespace mods::acl_list {$/;"	n	class:mods
acmd_function	mods/interpreter.hpp	/^	typedef void (*acmd_function)(char_data*, char*, int, int, player_ptr_t&);$/;"	t	namespace:mods::interpreter
act	comm.cpp	/^void act(const std::string& str, int hide_invisible, char_data *ch,$/;"	f
act_nr	act.social.cpp	/^	int act_nr;$/;"	m	struct:social_messg	file:
action	mods/mini-games.hpp	/^		std::string action;$/;"	m	struct:mods::mini_games::mini_game_payload_t
action_allowed	mods/acl/lambda.hpp	/^				bool action_allowed(struct ::char_data *ch,const char* command_name,const char* file_name,int cmd,const char* arg,int subcmd){$/;"	f	class:mods::acl::Lambda
action_bits	constants.cpp	/^const char *action_bits[] = {$/;"	v
action_bits	constants.hpp	/^const char *action_bits[] = {$/;"	v
action_bits_count	constants.cpp	/^        action_bits_count = sizeof(action_bits) \/ sizeof(action_bits[0]) - 1,$/;"	v
action_bits_count	constants.hpp	/^	action_bits_count = sizeof(action_bits) \/ sizeof(action_bits[0]) - 1,$/;"	v
action_description	mods/yaml.hpp	/^		std::string action_description;$/;"	m	struct:mods::yaml::yaml_description_t
action_description	structs.h	/^		mods::string action_description;      \/* What to write when used          *\/$/;"	m	struct:obj_data
action_strings	mods/rate-limiting.cpp	/^	static std::vector<std::string> action_strings;$/;"	m	namespace:mods::rate_limiting	file:
action_t	mods/rate-limiting.hpp	/^	enum action_t {$/;"	g	namespace:mods::rate_limiting
action_to_string	mods/rate-limiting.cpp	/^	std::string action_to_string(action_t action) {$/;"	f	namespace:mods::rate_limiting
active_item_types	mods/forge-engine/generator.hpp	/^	static const  std::vector<item_types_t> active_item_types = {$/;"	m	namespace:mods::forge_engine
add	mods/deferred.hpp	/^		uint64_t add;$/;"	m	struct:mods::chunk_affect_t
add	mods/super-users.cpp	/^	bool add(std::string_view name) {$/;"	f	namespace:mods::super_users
addRef	mods/catch.hpp	/^		virtual void addRef() const {$/;"	f	struct:Catch::SharedImpl
add_affected_by	mods/player.hpp	/^			std::vector<affected_type>& add_affected_by(affected_type&& add_this) {$/;"	f	struct:mods::player
add_callback	mods/rooms.cpp	/^	void add_callback(room_rnum room, affect_t affect, callback_t f) {$/;"	f	namespace:mods::rooms::affects
add_command	mods/interpreter.cpp	/^	void add_command(std::string command_string, byte position, acmd_function func, sh_int minimum_level,int subcmd){$/;"	f	namespace:mods::interpreter
add_follower	utils.cpp	/^void add_follower(char_data *ch, char_data *leader) {$/;"	f
add_player_inventory	mods/orm/inventory.cpp	/^		void add_player_inventory(uint64_t player_db_id, uint64_t object_db_id, uint16_t obj_type) {$/;"	f	namespace:mods::orm::inventory::lmdb
add_player_wear	mods/orm/inventory.cpp	/^		void add_player_wear(uint64_t player_db_id, uint64_t object_db_id, uint8_t object_type_id, uint8_t position) {$/;"	f	namespace:mods::orm::inventory::lmdb
add_private_publisher	mods/chat.cpp	/^	void channel::add_private_publisher(std::string_view user) {$/;"	f	class:mods::chat::channel
add_public_channel	mods/chat.cpp	/^	void add_public_channel(str_t channel,str_t verb) {$/;"	f	namespace:mods::chat
add_room	mods/mob-roam.cpp	/^	void roam_recorder::add_room(room_vnum room) {$/;"	f	class:mods::mob_roam::roam_recorder
add_room_dissolve_affect	mods/rooms.cpp	/^	void add_room_dissolve_affect(room_rnum room, affect_map_t& items) {$/;"	f	namespace:mods::rooms::affects
add_room_dissolve_affect_every_n_tick	mods/rooms.cpp	/^	void add_room_dissolve_affect_every_n_tick(room_rnum room, affect_t affect, affect_amount_t amt, uint32_t n_ticks) {$/;"	f	namespace:mods::rooms::affects
add_room_to_pavements	mods/builder.cpp	/^	void add_room_to_pavements(player_ptr_t& player, int room_id) {$/;"	f	namespace:mods::builder
add_subscriber	mods/chat.cpp	/^	void channel::add_subscriber(const socket_t& sock) {$/;"	f	class:mods::chat::channel
add_super_user	mods/js.cpp	/^		static duk_ret_t add_super_user(duk_context *ctx) {$/;"	f	namespace:mods::js
add_texture	structs.cpp	/^void room_data::add_texture(texture_type_t t) {$/;"	f	class:room_data
add_textures	structs.h	/^		void add_textures(std::set<texture_type_t> m) {$/;"	f
add_to_list	shop.cpp	/^int add_to_list(struct shop_buy_data *list, int type, int *len, int *val) {$/;"	f
add_tree	mods/behaviour_tree_impl.cpp	/^	void add_tree(std::string sv_tree_name,node& n) {$/;"	f	namespace:mods::behaviour_tree_impl
add_type	mods/object.cpp	/^	object& object::add_type(object_type_enum_t type){$/;"	f	class:mods::object
addrinfo	mods/lmdb/gethostbyname.cpp	/^} addrinfo;$/;"	t	typeref:struct:_addrinfo	file:
adhoc	act.builder.cpp	/^namespace mods::adhoc {$/;"	n	class:mods	file:
admin_fail	mods/player.cpp	/^	void player::admin_fail(std::string_view msg) {$/;"	f	class:mods::player
admin_section	mods/util.cpp	/^	std::string admin_section(std::string_view name) {$/;"	f	namespace:mods::util
admin_success	mods/player.cpp	/^	void player::admin_success(std::string_view msg) {$/;"	f	class:mods::player
advance	mods/player-contract-instance.cpp	/^	std::tuple<bool,std::string> player_contract_instance::advance() {$/;"	f	class:mods::contracts::player_contract_instance
advance_level	class.cpp	/^void advance_level(char_data *ch) {$/;"	f
advance_level	mods/levels.cpp	/^	void advance_level(player_ptr_t& player) {$/;"	f	namespace:mods::levels
advanced_protection	mods/armor/advanced-protection.cpp	/^	advanced_protection::advanced_protection(uuid_t player_uuid) {$/;"	f	class:mods::armor::advanced_protection
advanced_protection	mods/armor/advanced-protection.hpp	/^	struct advanced_protection {$/;"	s	namespace:mods::armor
aff	mods/flags.hpp	/^	enum aff {$/;"	g	namespace:mods::flags
aff_abils	mods/player.hpp	/^			char_ability_data& aff_abils() {	 \/* Abils with spells\/stones\/etc  *\/$/;"	f	struct:mods::player
aff_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,22> aff_flags = { {$/;"	m	namespace:mods::builder	file:
affect	mods/affects.hpp	/^			void affect(TAffects aff_id) {$/;"	f	struct:mods::affects::dissolver
affect	mods/affects.hpp	/^			void affect(TAffects affect,int amount) {$/;"	f	struct:mods::affects::dissolver
affect	mods/player.cpp	/^	void player::affect(uint64_t flag) {$/;"	f	class:mods::player
affect_every_n_ticks	mods/affects.hpp	/^			void affect_every_n_ticks(TAffects affect,uint32_t starting_amount, uint32_t every_n_ticks) {$/;"	f	struct:mods::affects::dissolver
affect_from_char	handler.cpp	/^void affect_from_char(char_data *ch, int type) {$/;"	f
affect_from_char	mods/js.cpp	/^		static duk_ret_t affect_from_char(duk_context *ctx) {$/;"	f	namespace:mods::js
affect_join	handler.cpp	/^void affect_join(char_data *ch, struct affected_type *af,$/;"	f
affect_map	mods/affects.hpp	/^			void affect_map(TAffectsMap affects) {$/;"	f	struct:mods::affects::dissolver
affect_modify	handler.cpp	/^void affect_modify(char_data *ch, byte loc, sbyte mod,$/;"	f
affect_player	mods/affects.cpp	/^	void affect_player(affect_vector_t a,player_ptr_t player) {$/;"	f	namespace:mods::affects
affect_player_for	mods/affects.cpp	/^	void affect_player_for(affect_vector_t a,player_ptr_t p,uint64_t ticks) {$/;"	f	namespace:mods::affects
affect_plr	mods/player.cpp	/^	void player::affect_plr(uint64_t flag) {$/;"	f	class:mods::player
affect_remove	handler.cpp	/^void affect_remove(char_data *ch, struct affected_type *af) {$/;"	f
affect_room	mods/flashbang.hpp	/^	inline void affect_room(room_rnum room, obj_ptr_t& object){$/;"	f	namespace:mods::flashbang
affect_room	mods/flashbang.hpp	/^	inline void affect_room(room_rnum room, uuid_t uuid){$/;"	f	namespace:mods::flashbang
affect_room_light	globals.cpp	/^		void affect_room_light(int room,int offset) {$/;"	f	namespace:mods::globals
affect_string_list	mods/affects.cpp	/^std::vector<std::string>& affect_string_list() {$/;"	f
affect_string_list_impl	mods/affects.cpp	/^	std::vector<std::string>& affect_string_list_impl() {$/;"	f	namespace:mods::affects
affect_t	mods/affects.hpp	/^	enum affect_t {$/;"	g	namespace:mods::affects
affect_to_char	handler.cpp	/^void affect_to_char(char_data *ch,affected_type *af) {$/;"	f
affect_total	handler.cpp	/^void affect_total(char_data *ch) {$/;"	f
affect_update	magic.cpp	/^void affect_update(void) {$/;"	f
affect_via	mods/affects.hpp	/^			void affect_via(TAffectsContainer affects) {$/;"	f	struct:mods::affects::dissolver
affected	structs.h	/^		obj_affected_type affected[MAX_OBJ_AFFECT];  \/* affects *\/$/;"	m	struct:obj_data
affected	structs.h	/^	struct obj_affected_type affected[MAX_OBJ_AFFECT];$/;"	m	struct:obj_file_elem	typeref:struct:obj_file_elem::obj_affected_type
affected_bits	constants.cpp	/^const char *affected_bits[] = {$/;"	v
affected_bits	constants.hpp	/^const char *affected_bits[] =$/;"	v
affected_bits_count	constants.cpp	/^        affected_bits_count = sizeof(affected_bits) \/ sizeof(affected_bits[0]) - 1,$/;"	v
affected_bits_count	constants.hpp	/^	affected_bits_count = sizeof(affected_bits) \/ sizeof(affected_bits[0]) - 1,$/;"	v
affected_by_spell	handler.cpp	/^bool affected_by_spell(char_data *ch, int type) {$/;"	f
affected_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,38> affected_flags = { {$/;"	m	namespace:mods::builder	file:
affects	mods/affects.cpp	/^namespace mods::affects {$/;"	n	class:mods	file:
affects	mods/affects.cpp	/^namespace mods::rooms::affects {$/;"	n	class:mods::rooms	file:
affects	mods/affects.hpp	/^namespace mods::affects {$/;"	n	class:mods
affects	mods/rooms.cpp	/^namespace mods::rooms::affects {$/;"	n	class:mods::rooms	file:
affects	mods/rooms.hpp	/^	namespace affects {$/;"	n	namespace:mods::rooms
affiliation_list	mods/builder/hqbuild.cpp	/^	std::string& affiliation_list() {$/;"	f	namespace:mods::builder::hqbuild
affiliation_map	mods/affiliations.hpp	/^	static inline const std::map<std::string_view,affiliation_t>& affiliation_map() {$/;"	f	namespace:mods
affiliation_t	mods/affiliations.hpp	/^	enum affiliation_t {$/;"	g	namespace:mods
age	db.h	/^		int	age;                \/* current age of this zone (minutes) *\/$/;"	m	struct:zone_data
age	utils.cpp	/^struct time_info_data *age(char_data *ch) {$/;"	f
aggressive_mob_on_a_leash	mobact.cpp	/^bool aggressive_mob_on_a_leash(char_data *slave,char_data *master,char_data *attack) {$/;"	f
ai_addr	mods/lmdb/gethostbyname.cpp	/^   struct sockaddr *ai_addr;		\\$/;"	m	struct:_addrinfo	typeref:struct:_addrinfo::sockaddr	file:
ai_addrlen	mods/lmdb/gethostbyname.cpp	/^   socklen_t        ai_addrlen;		\\$/;"	m	struct:_addrinfo	file:
ai_canonname	mods/lmdb/gethostbyname.cpp	/^   char            *ai_canonname;	\\$/;"	m	struct:_addrinfo	file:
ai_family	mods/lmdb/gethostbyname.cpp	/^   int              ai_family;		\\$/;"	m	struct:_addrinfo	file:
ai_flags	mods/lmdb/gethostbyname.cpp	/^   int              ai_flags;		\\$/;"	m	struct:_addrinfo	file:
ai_next	mods/lmdb/gethostbyname.cpp	/^   struct _addrinfo *ai_next;		\\$/;"	m	struct:_addrinfo	typeref:struct:_addrinfo::_addrinfo	file:
ai_protocol	mods/lmdb/gethostbyname.cpp	/^   int              ai_protocol;	\\$/;"	m	struct:_addrinfo	file:
ai_socktype	mods/lmdb/gethostbyname.cpp	/^   int              ai_socktype;	\\$/;"	m	struct:_addrinfo	file:
ai_state	mods/ai_state.hpp	/^			ai_state(char_data* ch,uint8_t st,uint32_t aggr) : m_char_data(ch), m_state(st), mpub_aggro(aggr) {$/;"	f	class:mods::ai_state
ai_state	mods/ai_state.hpp	/^	class ai_state {$/;"	c	namespace:mods
ai_state	structs.h	/^		uint8_t ai_state;$/;"	m	struct:obj_data
aimed_limb_accuracy_percent	mods/rifle-attachments.hpp	/^			int16_t aimed_limb_accuracy_percent;$/;"	m	struct:mods::rifle_attachments_t
algorithm_A	mods/weapons/damage-calculator.cpp	/^	namespace algorithm_A {$/;"	n	namespace:mods::weapons::damage_calculator	file:
alias	interpreter.h	/^	char *alias;$/;"	m	struct:alias_data
alias_data	interpreter.h	/^struct alias_data {$/;"	s
all_integral_flags	mods/doors.hpp	/^	static inline std::vector<exit_info_masks_t> all_integral_flags(int exit_info) {$/;"	f	namespace:mods::doors
all_string_flags	mods/doors.hpp	/^	static inline std::vector<std::string> all_string_flags(int exit_info) {$/;"	f	namespace:mods::doors
alloc	mods/lmdb/shm.hpp	/^        inline int alloc(size_t s,int f){ return alloc(::shm::memory_id,::shm::project_id,s,f); }$/;"	f	class:gdns::shm
alloc	mods/lmdb/shm.hpp	/^int shm::alloc(const char* memory_id,int project_id,size_t memory_size,int flags){$/;"	f	class:gdns::shm
allow	mods/player-registration.cpp	/^	void allow(bool on_off) {$/;"	f	namespace:mods::player_registration
allow	mods/weapon-types.hpp	/^		allow_shot_t allow;$/;"	m	struct:mods::weapon::weapon_type_statistics_t
allowed	mods/acl/config-parser.hpp	/^                bool allowed(const char* role,const char* file_or_command){$/;"	f	class:mods::acl::FileParser
allowed	mods/player-registration.cpp	/^	bool allowed() {$/;"	f	namespace:mods::player_registration
alt_value_map	mods/values.cpp	/^		std::map<value_key_t,variants_t> alt_value_map;$/;"	m	namespace:mods::values	file:
alternate_explosion_t	mods/yaml.hpp	/^enum alternate_explosion_t {$/;"	g
alwaysFalse	mods/catch.hpp	/^	inline bool alwaysFalse() {$/;"	f	namespace:Catch
alwaysTrue	mods/catch.hpp	/^	inline bool alwaysTrue() {$/;"	f	namespace:Catch
always_false	mods/catch2.hpp	/^    struct always_false : std::false_type {};$/;"	s	namespace:Catch
ammo	mods/player.hpp	/^			uint16_t ammo() {$/;"	f	struct:mods::player
ammo	mods/rifle-instance-data.hpp	/^		uint16_t ammo;$/;"	m	struct:rifle_instance_data
ammo	structs.h	/^	uint16_t ammo;$/;"	m	struct:obj_flag_data
ammo_adjustment	mods/mobs/mob.cpp	/^	void player::ammo_adjustment(int increment) {$/;"	f	class:mods::player
ammo_adjustment	mods/player.cpp	/^	void player::ammo_adjustment(int increment) {$/;"	f	class:mods::player
ammo_max	mods/weapon.hpp	/^			int ammo_max;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
ammo_max	structs.h	/^	uint16_t ammo_max;$/;"	m	struct:obj_flag_data
ammo_type	mods/weapon.hpp	/^			std::string ammo_type;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
ammo_type_adjustment	mods/mobs/mob.cpp	/^	int player::ammo_type_adjustment(int increment,const weapon_type_t& type) {$/;"	f	class:mods::player
ammo_type_adjustment	mods/player.cpp	/^	int player::ammo_type_adjustment(int increment,const weapon_type_t& type) {$/;"	f	class:mods::player
ammunition_amount	mods/rifle-attachments.hpp	/^			int16_t ammunition_amount;				\/** honored [ 2021-04-13 ] *\/$/;"	m	struct:mods::rifle_attachments_t
ammunition_amount	mods/weapons/damage-calculator.cpp	/^	int16_t ammunition_amount($/;"	f	namespace:mods::weapons::damage_calculator
amount	mods/deferred.hpp	/^		int64_t amount;$/;"	m	struct:mods::chunk_affect_t
another_hour	weather.cpp	/^void another_hour(int mode) {$/;"	f
anti_matter_damage	mods/weapons/elemental.cpp	/^	void anti_matter_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
anti_matter_damage_percent	mods/rifle-attachments.hpp	/^			int16_t anti_matter_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
anti_matter_resistance_percent	mods/player.cpp	/^	int16_t& player::anti_matter_resistance_percent() {$/;"	f	class:mods::player
any_one_arg	interpreter.cpp	/^char *any_one_arg(char *argument, char *first_arg) {$/;"	f
aoe	mods/aoe.hpp	/^namespace mods::aoe {$/;"	n	class:mods
aoe_triggers	mods/yaml.hpp	/^		std::array<aoe_type_t,MAX_AOE_TRIGGERS> aoe_triggers;$/;"	m	struct:mods::yaml::explosive_description_t
apcrit_debug	mods/injure.cpp	4;"	d	file:
apcrit_debug	mods/injure.cpp	6;"	d	file:
appear	fight.cpp	/^void appear(char_data *ch) {$/;"	f
append_child	mods/behaviour_tree_node.hpp	/^			void append_child(const child_node_t& child) {$/;"	f	struct:mods::behaviour_tree_node
applyEvaluator	mods/catch.hpp	/^		bool applyEvaluator(T1 const& lhs, T2 const& rhs) {$/;"	f	namespace:Catch::Internal
apply_ac	handler.cpp	/^int apply_ac(char_data *ch, int eq_pos) {$/;"	f
apply_saving_throw	mods/player.hpp	/^			sh_int& apply_saving_throw(std::size_t i) {$/;"	f	struct:mods::player
apply_saving_throw	mods/player.hpp	/^			sh_int* apply_saving_throw() {$/;"	f	struct:mods::player
apply_stealth_to	mods/classes/ghost.cpp	/^	void ghost::apply_stealth_to(obj_ptr_t& target){$/;"	f	class:mods::classes::ghost
apply_stealth_to_player	mods/classes/ghost.cpp	/^	void ghost::apply_stealth_to_player(player_ptr_t& target){$/;"	f	class:mods::classes::ghost
apply_tracked_bonus_damage	mods/affects.cpp	/^	int apply_tracked_bonus_damage(int damage) {$/;"	f	namespace:mods::affects
apply_types	constants.cpp	/^const char *apply_types[] = {$/;"	v
apply_types	constants.hpp	/^const char *apply_types[] = {$/;"	v
arcSafeRelease	mods/catch.hpp	/^inline void arcSafeRelease(NSObject* obj) {$/;"	f
arcSafeRelease	mods/catch.hpp	/^inline void arcSafeRelease(NSObject*) {}$/;"	f
arcSafeRelease	mods/catch2.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	mods/catch2.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arcon	mods/fluxkraft/arcon-bar.cpp	/^namespace mods::fluxkraft::arcon {$/;"	n	class:mods::fluxkraft	file:
arcon	mods/fluxkraft/arcon-bar.hpp	/^	namespace arcon {$/;"	n	namespace:mods::fluxkraft
arcon	mods/fluxkraft/arcon-metropolitan.cpp	/^namespace mods::fluxkraft::arcon {$/;"	n	class:mods::fluxkraft	file:
arcon	mods/fluxkraft/arcon-metropolitan.hpp	/^namespace mods::fluxkraft::arcon {$/;"	n	class:mods::fluxkraft
arcon_bar	mods/fluxkraft/arcon-bar.hpp	/^	namespace arcon_bar {$/;"	n	namespace:mods::fluxkraft
arcon_bar	mods/init.hpp	/^INIT(mods::fluxkraft::arcon_bar);$/;"	v
arg1	db.h	/^	int	arg1;		\/*                                      *\/$/;"	m	struct:reset_com
arg2	db.h	/^	int	arg2;		\/* Arguments to the command             *\/$/;"	m	struct:reset_com
arg3	db.h	/^	int	arg3;		\/*                                      *\/$/;"	m	struct:reset_com
arglist	mods/util.hpp	/^	T arglist(std::string in_arglist_argument) {$/;"	f	namespace:mods::util
argument_interpreter	interpreter.h	43;"	d
arguments	mods/builder.cpp	/^	size_t arguments;$/;"	m	struct:command_t	file:
armor	mods/armor/advanced-protection.cpp	/^namespace mods::armor {$/;"	n	class:mods	file:
armor	mods/armor/advanced-protection.hpp	/^namespace mods::armor {$/;"	n	class:mods
armor	mods/armor/basic-protection.cpp	/^namespace mods::armor {$/;"	n	class:mods	file:
armor	mods/armor/basic-protection.hpp	/^namespace mods::armor {$/;"	n	class:mods
armor	mods/armor/elite-protection.cpp	/^namespace mods::armor {$/;"	n	class:mods	file:
armor	mods/armor/elite-protection.hpp	/^namespace mods::armor {$/;"	n	class:mods
armor	mods/item-types.hpp	/^	enum armor {$/;"	g	namespace:mods::weapon::type
armor	mods/mobs/mob.hpp	/^			sh_int& armor() {$/;"	f	class:mods::player
armor	mods/player.hpp	/^			sh_int& armor() {$/;"	f	struct:mods::player
armor	mods/player.hpp	/^namespace mods::armor {$/;"	n	class:mods
armor_about	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_about = {};$/;"	m	namespace:mods::forge_engine	file:
armor_arms	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_arms = {};$/;"	m	namespace:mods::forge_engine	file:
armor_attributes_t	mods/forge-engine/generator.hpp	/^	enum armor_attributes_t {$/;"	g	namespace:mods::forge_engine
armor_backpack	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_backpack = {};$/;"	m	namespace:mods::forge_engine	file:
armor_body	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_body = {};$/;"	m	namespace:mods::forge_engine	file:
armor_classification_type_t	mods/yaml.hpp	/^	enum armor_classification_type_t {$/;"	g	namespace:mods::yaml
armor_description_t	mods/yaml.hpp	/^		armor_description_t() {$/;"	f	struct:mods::yaml::armor_description_t
armor_description_t	mods/yaml.hpp	/^	struct armor_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
armor_elbow	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_elbow = {};$/;"	m	namespace:mods::forge_engine	file:
armor_feet	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_feet = {};$/;"	m	namespace:mods::forge_engine	file:
armor_filename	mods/orm/armor-index.hpp	/^		std::string armor_filename;$/;"	m	struct:mods::orm::armor_index_record_t
armor_finger	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_finger = {};$/;"	m	namespace:mods::forge_engine	file:
armor_goggles	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_goggles = {};$/;"	m	namespace:mods::forge_engine	file:
armor_hands	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_hands = {};$/;"	m	namespace:mods::forge_engine	file:
armor_head	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_head = {};$/;"	m	namespace:mods::forge_engine	file:
armor_hold	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_hold = {};$/;"	m	namespace:mods::forge_engine	file:
armor_index	mods/orm/armor-index.hpp	/^		armor_index() : id(0) {$/;"	f	struct:mods::orm::armor_index
armor_index	mods/orm/armor-index.hpp	/^	struct armor_index : public mods::orm::orm_base<armor_index,std::string> {$/;"	s	namespace:mods::orm
armor_index_changed	mods/forge-engine/generated-armor.cpp	/^	void armor_index_changed() {$/;"	f	namespace:mods::forge_engine
armor_index_record_t	mods/orm/armor-index.hpp	/^	struct armor_index_record_t {$/;"	s	namespace:mods::orm
armor_legs	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_legs = {};$/;"	m	namespace:mods::forge_engine	file:
armor_locker_quota	mods/integral-objects.cpp	/^	std::size_t armor_locker_quota(const obj_ptr_t& object) {$/;"	f	namespace:mods::integral_objects
armor_neck	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_neck = {};$/;"	m	namespace:mods::forge_engine	file:
armor_pen	mods/projectile.cpp	/^			int armor_pen;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
armor_penetration_amount	mods/rifle-attachments.hpp	/^			int16_t armor_penetration_amount;	\/** honored partially (adds 10% bonus if it's non-zero. doesn't affect if lte zero) *\/$/;"	m	struct:mods::rifle_attachments_t
armor_percentages	mods/forge-engine/generator.hpp	/^	static const std::vector<armor_attributes_t> armor_percentages = {$/;"	m	namespace:mods::forge_engine
armor_quota	mods/integral-objects-db.cpp	/^	int armor_quota(room_vnum room){$/;"	f	namespace:mods::integral_objects_db
armor_secondary	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_secondary = {};$/;"	m	namespace:mods::forge_engine	file:
armor_shield	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_shield= {};$/;"	m	namespace:mods::forge_engine	file:
armor_shoulders	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_shoulders = {};$/;"	m	namespace:mods::forge_engine	file:
armor_type	mods/orm/armor-index.hpp	/^		std::string armor_type;$/;"	m	struct:mods::orm::armor_index
armor_type	mods/orm/armor-index.hpp	/^		std::string armor_type;$/;"	m	struct:mods::orm::armor_index_record_t
armor_types_t	mods/forge-engine/generator.hpp	/^	enum armor_types_t {$/;"	g	namespace:mods::forge_engine
armor_vest_pack	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_vest_pack  = {};$/;"	m	namespace:mods::forge_engine	file:
armor_waist	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_waist = {};$/;"	m	namespace:mods::forge_engine	file:
armor_wield	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_wield = {};$/;"	m	namespace:mods::forge_engine	file:
armor_wrist	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> armor_wrist = {};$/;"	m	namespace:mods::forge_engine	file:
array_end	mods/jx.hpp	/^			compositor& array_end() {$/;"	f	struct:mods::jx::compositor
array_start	mods/jx.hpp	/^			compositor& array_start(const std::string& key) {$/;"	f	struct:mods::jx::compositor
as_int	mods/pq.cpp	/^	int as_int(result& r,int index, int index_y) {$/;"	f	namespace:mods::pq
asciiflag_conv	db.cpp	/^bitvector_t asciiflag_conv(char *flag) {$/;"	f
assault_rifles	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> assault_rifles;$/;"	m	namespace:mods::forge_engine	file:
assert	sysdep.h	241;"	d
assert_sane_object	mods/object-utils.cpp	/^	bool assert_sane_object(std::string_view yaml) {$/;"	f	namespace:mods::object_utils
assign	mods/string.cpp	/^	void string::assign(const std::string & other){$/;"	f	class:mods::string
assign	mods/string.cpp	/^	void string::assign(mentoc_pqxx_result_t other){$/;"	f	class:mods::string
assign	mods/string.cpp	/^	void string::assign(mentoc_pqxx_result_t::reference str){$/;"	f	class:mods::string
assign	mods/string.cpp	/^	void string::assign(nullptr_t a){$/;"	f	class:mods::string
assign_kings_castle	castle.cpp	/^void assign_kings_castle(void) {$/;"	f
assign_m	mods/string.cpp	/^	void string::assign_m(const mods::string & other){$/;"	f	class:mods::string
assign_mobiles	mods/hell.hpp	/^	constexpr inline bool assign_mobiles = false;$/;"	m	namespace:mods::hell
assign_mobiles	spec_assign.cpp	/^void assign_mobiles() {$/;"	f
assign_objects	mods/hell.hpp	/^	constexpr inline bool assign_objects = false;$/;"	m	namespace:mods::hell
assign_objects	spec_assign.cpp	/^void assign_objects() {$/;"	f
assign_rooms	mods/hell.hpp	/^	constexpr inline bool assign_rooms = false;$/;"	m	namespace:mods::hell
assign_rooms	spec_assign.cpp	/^void assign_rooms(void) {$/;"	f
assign_the_shopkeepers	mods/hell.hpp	/^	constexpr inline bool assign_the_shopkeepers = false;$/;"	m	namespace:mods::hell
assign_the_shopkeepers	shop.cpp	/^void assign_the_shopkeepers(void) {$/;"	f
atexit_handler	comm.cpp	/^void atexit_handler() {$/;"	f
atrium	house.h	/^	room_vnum atrium;		\/* vnum of atrium		*\/$/;"	m	struct:house_control_rec
attach_flamethrower	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::attach_flamethrower(obj_ptr_t& weapon){$/;"	f	class:mods::classes::pyrexia
attach_flamethrower	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::attach_flamethrower(obj_ptr_t& weapon){$/;"	f	class:mods::orm::pyrexia
attach_incendiary_grenade_launcher	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::attach_incendiary_grenade_launcher(obj_ptr_t& weapon){$/;"	f	class:mods::classes::pyrexia
attach_incendiary_grenade_launcher	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::attach_incendiary_grenade_launcher(obj_ptr_t& weapon){$/;"	f	class:mods::orm::pyrexia
attach_point_t	mods/fluxkraft/arcon-bar.hpp	/^		struct attach_point_t {$/;"	s	namespace:mods::fluxkraft::arcon
attach_point_t	mods/fluxkraft/arcon-metropolitan.hpp	/^	struct attach_point_t {$/;"	s	namespace:mods::fluxkraft::arcon
attach_point_t	mods/fluxkraft/shape-dictionary.cpp	/^	struct attach_point_t {$/;"	s	namespace:mods::fluxkraft	file:
attach_points	mods/fluxkraft/arcon-bar.hpp	/^			std::vector<attach_point_t> attach_points;$/;"	m	struct:mods::fluxkraft::arcon::bar
attach_points	mods/fluxkraft/arcon-metropolitan.hpp	/^		std::vector<attach_point_t> attach_points;$/;"	m	struct:mods::fluxkraft::arcon::metro
attach_points	mods/fluxkraft/shape-dictionary.cpp	/^		std::vector<attach_point_t> attach_points;$/;"	m	struct:mods::fluxkraft::shape_description	file:
attachment	mods/item-types.hpp	/^	enum attachment {$/;"	g	namespace:mods::weapon::type
attachment_description_t	mods/yaml.hpp	/^		attachment_description_t() {$/;"	f	struct:mods::yaml::attachment_description_t
attachment_description_t	mods/yaml.hpp	/^	struct attachment_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
attachment_points	mods/fluxkraft/arcon-bar.hpp	/^			std::vector<char> attachment_points;$/;"	m	struct:mods::fluxkraft::arcon::attach_point_t
attachment_points	mods/fluxkraft/arcon-metropolitan.hpp	/^		std::vector<char> attachment_points;$/;"	m	struct:mods::fluxkraft::arcon::attach_point_t
attachment_points	mods/fluxkraft/shape-dictionary.cpp	/^		std::vector<char> attachment_points;$/;"	m	struct:mods::fluxkraft::attach_point_t	file:
attachment_t	mods/weapon.hpp	/^	enum attachment_t {$/;"	g	namespace:mods::weapon
attachment_types_t	mods/forge-engine/generator.hpp	/^	enum attachment_types_t {$/;"	g	namespace:mods::forge_engine
attachments	mods/rifle-instance-data.hpp	/^		std::deque<TAttachmentData> attachments;$/;"	m	struct:rifle_instance_data
attack_disorients	mods/weapons/damage-calculator.cpp	/^	bool attack_disorients($/;"	f	namespace:mods::weapons::damage_calculator
attack_hit_text	fight.cpp	/^struct attack_hit_type attack_hit_text[] = {$/;"	v	typeref:struct:attack_hit_type
attack_hit_type	spells.h	/^struct attack_hit_type {$/;"	s
attack_injures	mods/weapons/damage-types.cpp	/^	bool attack_injures(player_ptr_t& player,player_ptr_t& victim,obj_ptr_t& weapon,feedback_t feedback) {$/;"	f	namespace:mods::weapons::damage_types
attack_message	fight.cpp	/^int attack_message(mw_rifle type) {$/;"	f
attacker	mods/damage-event.hpp	/^	uuid_t attacker;$/;"	m	struct:feedback_t
attacking_with	mods/player.hpp	/^			obj_data_ptr_t attacking_with() {$/;"	f	struct:mods::player
attacking_with_type	mods/player.hpp	/^			int attacking_with_type() {$/;"	f	struct:mods::player
attempt_direction	mods/classes/breacher.cpp	/^		void breacher::attempt_direction(direction_t dir){$/;"	f	class:mods::classes::breacher
attempt_open	mods/doors.hpp	/^	static inline int8_t attempt_open(const room_rnum room,int8_t direction) {$/;"	f	namespace:mods::doors
attribute_list	mods/builder/hqbuild.cpp	/^	std::string& attribute_list() {$/;"	f	namespace:mods::builder::hqbuild
attributes	mods/forge-engine/generator.hpp	/^		std::vector<std::pair<explosive_attributes_t,uint32_t>> attributes;$/;"	m	struct:mods::forge_engine::generated_explosive_t
authenticated	mods/player.hpp	/^			bool authenticated() const {$/;"	f	struct:mods::player
authtype_names	telnet.h	/^char *authtype_names[] = {$/;"	v
auto_equip	objsave.cpp	/^void auto_equip(char_data *ch, struct obj_data *obj, int location) {$/;"	f
auto_login	mods/auto-login.cpp	/^namespace mods::auto_login {$/;"	n	class:mods	file:
auto_login	mods/auto-login.hpp	/^namespace mods::auto_login {$/;"	n	class:mods
auto_login_enabled	mods/auto-login.cpp	/^	bool auto_login_enabled(){ return mods::auto_login::get_user().length(); }$/;"	f	namespace:mods::auto_login
auto_save	config.cpp	/^int auto_save = YES;$/;"	v
automatically_clear_response	mods/builder/slotted-builder.hpp	/^			void automatically_clear_response(bool s) {$/;"	f	struct:mods::builder::slotted_builder
autosave_time	config.cpp	/^int autosave_time = 5;$/;"	v
award_contract	mods/contracts.cpp	/^	void award_contract(player_ptr_t& player,int contract_major) {$/;"	f	namespace:mods::contracts
award_practice_sessions	mods/levels.cpp	/^	uint8_t award_practice_sessions(uint8_t level) {$/;"	f	namespace:mods::levels
background	db.cpp	/^char *background = NULL;	\/* background story		 *\/$/;"	v
backstab_mult	class.cpp	/^int backstab_mult(int level) {$/;"	f
ban_list	ban.cpp	/^struct ban_list_element *ban_list = NULL;$/;"	v	typeref:struct:ban_list_element
ban_list_element	db.h	/^struct ban_list_element {$/;"	s
ban_system	mods/ban_system.hpp	/^	namespace ban_system {$/;"	n	namespace:mods
ban_types	ban.cpp	/^const char *ban_types[] = {$/;"	v
bank	spec_assign.cpp	/^SPECIAL(bank);$/;"	v
bank	spec_procs.cpp	/^SPECIAL(bank);$/;"	v
bankAccount	shop.h	/^	int	 bankAccount;		\/* Store all gold over 15000 (disabled)	*\/$/;"	m	struct:shop_data
bank_gold	mods/mobs/mob.hpp	/^			int& bank_gold() {$/;"	f	class:mods::player
bank_gold	mods/player.hpp	/^			int& bank_gold() {$/;"	f	struct:mods::player
banzaii	castle.cpp	/^int banzaii(char_data *ch) {$/;"	f
bar	mods/fluxkraft/arcon-bar.hpp	/^			bar(std::string_view shape_name,const std::vector<std::string>& directions) {$/;"	f	struct:mods::fluxkraft::arcon::bar
bar	mods/fluxkraft/arcon-bar.hpp	/^		struct bar {$/;"	s	namespace:mods::fluxkraft::arcon
barrel	mods/rifle-attachments.hpp	/^			obj_ptr_t barrel;$/;"	m	struct:mods::rifle_attachments_t
barrel_t	mods/weapon.hpp	/^	enum barrel_t {$/;"	g	namespace:mods::weapon
base	mods/classes/base.hpp	/^	struct base {$/;"	s	namespace:mods::classes
base	mods/orm/base.hpp	/^		base() : loaded(0) {}$/;"	f	struct:mods::orm::base
base	mods/orm/base.hpp	/^	struct base {$/;"	s	namespace:mods::orm
base_attributes	mods/orm/chargen.hpp	/^	const std::string base_attributes[] = {"STR","INT","DEX","WIS","CHA","CON","LCK"};$/;"	m	namespace:mods::orm
base_dispatch_new_command	mods/builder/slotted-builder.hpp	/^			bool base_dispatch_new_command(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
base_items	mods/yaml.cpp	/^	void base_items(std::ofstream* out_file,std::string_view name,std::string_view obj_type) {$/;"	f	namespace:mods::yaml
base_object	mods/rifle-attachments.hpp	/^			obj_ptr_t base_object;$/;"	m	struct:mods::rifle_attachments_t
base_quotes	mods/orm/quotes.hpp	/^		struct base_quotes : public base {$/;"	s	namespace:mods::orm
base_rifle_object	mods/weapon.cpp	/^	obj_data_ptr_t base_rifle_object() {$/;"	f	namespace:mods::weapon
base_stat_list	mods/yaml.hpp	/^		mods::weapon::weapon_stat_list_t* base_stat_list;$/;"	m	struct:mods::yaml::melee_description_t
base_stat_list	mods/yaml.hpp	/^		mods::weapon::weapon_stat_list_t* base_stat_list;$/;"	m	struct:mods::yaml::rifle_description_t
base_yaml_file	mods/rifle-attachments.cpp	/^	std::string& rifle_attachments_t::base_yaml_file() {$/;"	f	class:mods::rifle_attachments_t
basic_mud_log	utils.cpp	/^void basic_mud_log(const char *format, ...) {$/;"	f
basic_mud_vlog	utils.cpp	/^void basic_mud_vlog(const char *format, va_list args) {$/;"	f
basic_protection	mods/armor/basic-protection.cpp	/^	basic_protection::basic_protection(uuid_t player_uuid) {$/;"	f	class:mods::armor::basic_protection
basic_protection	mods/armor/basic-protection.hpp	/^	struct basic_protection {$/;"	s	namespace:mods::armor
beeps	mods/mini-games/wires.hpp	/^		std::vector<uint8_t> beeps;$/;"	m	struct:mods::mini_games::wires
begin	mods/catch2.hpp	/^        constexpr const_iterator begin() const { return m_start; }$/;"	f	class:Catch::StringRef
behaviour_tree	mods/behaviour_tree.hpp	/^		behaviour_tree() : m_tree_name("default") {}$/;"	f	struct:mods::behaviour_tree
behaviour_tree	mods/behaviour_tree.hpp	/^		behaviour_tree(const std::string_view & name) : m_tree_name(name) {}$/;"	f	struct:mods::behaviour_tree
behaviour_tree	mods/behaviour_tree.hpp	/^		behaviour_tree(const std::string_view & name,$/;"	f	struct:mods::behaviour_tree
behaviour_tree	mods/behaviour_tree.hpp	/^	struct behaviour_tree {$/;"	s	namespace:mods
behaviour_tree_impl	mods/behaviour_tree_impl.cpp	/^namespace mods::behaviour_tree_impl {$/;"	n	class:mods	file:
behaviour_tree_impl	mods/behaviour_tree_impl.hpp	/^namespace mods::behaviour_tree_impl {$/;"	n	class:mods
behaviour_tree_node	mods/behaviour_tree_node.hpp	/^			behaviour_tree_node(callback_t& c, const node_type_t& t) :$/;"	f	struct:mods::behaviour_tree_node
behaviour_tree_node	mods/behaviour_tree_node.hpp	/^			behaviour_tree_node(callback_t& c,const node_type_t& t, const children_t& ch) :$/;"	f	struct:mods::behaviour_tree_node
behaviour_tree_node	mods/behaviour_tree_node.hpp	/^			behaviour_tree_node(const node_type_t& t) :$/;"	f	struct:mods::behaviour_tree_node
behaviour_tree_node	mods/behaviour_tree_node.hpp	/^			behaviour_tree_node(const node_type_t& t,const children_t& ch) :$/;"	f	struct:mods::behaviour_tree_node
behaviour_tree_node	mods/behaviour_tree_node.hpp	/^	struct behaviour_tree_node {$/;"	s	namespace:mods
behaviour_tree_status	mods/behaviour_tree_status.hpp	/^	enum behaviour_tree_status {$/;"	g	namespace:mods
bfs_clear_queue	graph.cpp	/^void bfs_clear_queue(void) {$/;"	f
bfs_dequeue	graph.cpp	/^void bfs_dequeue(void) {$/;"	f
bfs_enqueue	graph.cpp	/^void bfs_enqueue(room_rnum room, int dir) {$/;"	f
bfs_queue_struct	graph.cpp	/^struct bfs_queue_struct {$/;"	s	file:
bg	mods/acl/color.hpp	/^        namespace bg {$/;"	n	namespace:mods::Color
bht_debug	mobact.cpp	45;"	d	file:
bht_debug	mobact.cpp	47;"	d	file:
bit	mods/deferred.hpp	/^		uint64_t bit;$/;"	m	struct:mods::chunk_affect_t
bitvector	shop.h	/^	bitvector_t	 bitvector;	\/* Can attack? Use bank? Cast here?	*\/$/;"	m	struct:shop_data
bitvector	structs.h	/^	long \/*bitvector_t*\/	bitvector;	\/* To set chars bits                *\/$/;"	m	struct:obj_flag_data
bitvector	structs.h	/^	long \/*bitvector_t*\/	bitvector;$/;"	m	struct:obj_file_elem
blacklist_zone	mods/builder.cpp	/^void blacklist_zone(int zone) {$/;"	f
blacklist_zone	mods/zone.cpp	/^	void blacklist_zone(int zone) {$/;"	f	namespace:mods::zone
blank_object	db.cpp	/^obj_ptr_t blank_object() {$/;"	f
blank_room	globals.cpp	/^		static mods::globals::player_list_t blank_room;$/;"	m	namespace:mods::globals	file:
bleed_chance	mods/rifle-attachments.hpp	/^			int16_t bleed_chance;$/;"	m	struct:mods::rifle_attachments_t
blind_chargen_take_over	mods/chargen.cpp	/^	void blind_chargen_take_over(player_ptr_t& player,std::string_view argument){$/;"	f	namespace:mods::chargen
blind_target	mods/projectile.cpp	/^		void blind_target(player_ptr_t victim) {$/;"	f	namespace:mods::projectile
blindness_clears_up	mods/projectile.cpp	/^		void blindness_clears_up(player_ptr_t victim) {$/;"	f	namespace:mods::projectile
block_for	mods/player.cpp	/^	void player::block_for(uint16_t ticks, uint32_t unblock_event,uuid_t optional_uuid) {$/;"	f	class:mods::player
block_type	mail.h	/^	long	block_type;		\/* -1 if header block, -2 if last data block$/;"	m	struct:data_block_type_d
block_type	mail.h	/^	long	block_type;		\/* is this a header or data block?	*\/$/;"	m	struct:header_block_type_d
block_way	castle.cpp	/^int block_way(char_data *ch, int cmd, char *arg, room_vnum iIn_room,$/;"	f
blockers	mods/intent.hpp	/^		std::vector<std::string> blockers;$/;"	m	struct:mods::intent::intent_t
blu_text	mods/acl/color.hpp	5;"	d
blue_str	mods/colors.hpp	/^static inline std::string blue_str(TStr str){$/;"	f	namespace:mods::colors
board_info	boards.cpp	/^struct board_info_type board_info[NUM_OF_BOARDS] = {$/;"	v	typeref:struct:board_info_type
board_info_type	boards.h	/^struct board_info_type {$/;"	s
board_msginfo	boards.h	/^struct board_msginfo {$/;"	s
body_content	mods/mini-games/line-up.hpp	/^		std::string body_content;$/;"	m	namespace:mods::mini_games
body_content	mods/mini-games/wires.hpp	/^		std::string body_content;$/;"	m	struct:mods::mini_games::wires
bookmarks	mods/builder-data.hpp	/^	std::map<std::string,room_rnum> bookmarks;$/;"	m	struct:builder_data_t
bookmarks	mods/builder/bookmarks.cpp	/^namespace mods::builder::bookmarks {$/;"	n	class:mods::builder	file:
bookmarks	mods/builder/bookmarks.hpp	/^namespace mods::builder::bookmarks {$/;"	n	class:mods::builder
bookmarks	mods/init.hpp	/^INIT(mods::builder::bookmarks);$/;"	v
bool	structs.h	/^typedef char			bool;$/;"	t
bool_types	mods/values.cpp	/^static const std::vector<value_key_t> bool_types = {$/;"	m	namespace:mods::values	file:
boot	mods/mob-roam.cpp	/^	void boot() {$/;"	f	namespace:mods::mob_roam
boot_db	db.cpp	/^void boot_db(void) {$/;"	f
boot_hell	db.cpp	/^void boot_hell(void) {$/;"	f
boot_social_messages	act.social.cpp	/^void boot_social_messages(void) {$/;"	f
boot_social_messages	mods/hell.hpp	/^	constexpr inline bool boot_social_messages = false;$/;"	m	namespace:mods::hell
boot_sql_shops	shop.cpp	/^void boot_sql_shops() {$/;"	f
boot_suite	mods/pregame.cpp	/^	void boot_suite(std::string_view suite){$/;"	f	namespace:mods::pregame
boot_the_shops	shop.cpp	/^void boot_the_shops() {$/;"	f
boot_time	db.cpp	/^time_t boot_time = 0;		\/* time of mud boot		 *\/$/;"	v
boot_type	globals.cpp	/^		boot_type_t boot_type;$/;"	m	namespace:mods::globals	file:
boot_type_hell	utils.cpp	/^bool boot_type_hell(){$/;"	f
boot_type_t	globals.hpp	/^		enum boot_type_t { BOOT_DB,BOOT_HELL };$/;"	g	namespace:mods::globals
boot_world	db.cpp	/^void boot_world(void) {$/;"	f
bootstrap_equipment	mods/mobs/smart-mob.cpp	/^	void smart_mob::bootstrap_equipment() {$/;"	f	class:mods::mobs::smart_mob
bootup_test_suite	globals.cpp	/^		std::string bootup_test_suite;$/;"	m	namespace:mods::globals	file:
bot	db.h	/^		uint64_t bot;           \/* starting room number for this zone *\/$/;"	m	struct:zone_data
bound_to	mods/weapons/pistol-czp10.hpp	/^			uint16_t bound_to;$/;"	m	struct:mods::weapons::pistol::czp10
bound_to	mods/weapons/shotgun-sasg12.hpp	/^			uint16_t bound_to;$/;"	m	struct:mods::weapons::shotgun::sasg12
bound_to	mods/weapons/smg-mp5.hpp	/^			uint16_t bound_to;$/;"	m	struct:mods::weapons::smg::mp5
bound_to	mods/weapons/sniper-rifle-l96aw.hpp	/^			uint16_t bound_to;$/;"	m	struct:mods::weapons::sniper_rifle::l96aw
bound_to	mods/weapons/sniper-rifle-psg1.hpp	/^			uint16_t bound_to;$/;"	m	struct:mods::weapons::sniper_rifle::psg1
breached	mods/doors.hpp	/^	static inline void breached(const room_rnum room,int8_t direction) {$/;"	f	namespace:mods::doors
breacher	mods/classes/breacher.cpp	/^		breacher::breacher(){$/;"	f	class:mods::classes::breacher
breacher	mods/classes/breacher.cpp	/^		breacher::breacher(player_ptr_t p){$/;"	f	class:mods::classes::breacher
breacher	mods/classes/breacher.hpp	/^	struct breacher : base {$/;"	s	namespace:mods::classes
breacher	mods/orm/breacher.hpp	/^		breacher() : id(0) {$/;"	f	struct:mods::orm::breacher
breacher	mods/orm/breacher.hpp	/^	struct breacher : public mods::orm::orm_base<breacher,mods::weapon::breacher::primary_choice_t> {$/;"	s	namespace:mods::orm
breacher	mods/player.cpp	/^	std::shared_ptr<mods::classes::breacher>& player::breacher() {$/;"	f	class:mods::player
breacher	mods/weapon.hpp	/^	namespace breacher {$/;"	n	namespace:mods::weapon
breacher_id	mods/orm/breacher.hpp	/^		uint64_t breacher_id;$/;"	m	struct:mods::orm::breacher
breacher_list	mods/replenish.cpp	/^	static std::vector<uuid_t> breacher_list;$/;"	m	namespace:mods::replenish	file:
breacher_player_id	mods/orm/breacher.hpp	/^		uint64_t breacher_player_id;$/;"	m	struct:mods::orm::breacher
breacher_ptrs	mods/replenish.cpp	/^	static std::map<uuid_t,breacher_ptr_t> breacher_ptrs;$/;"	m	namespace:mods::replenish	file:
breakline	mods/util.cpp	/^	void breakline() {$/;"	f	namespace:mods::util
bti_debug	mods/behaviour_tree_impl.cpp	19;"	d	file:
bti_debug	mods/behaviour_tree_impl.cpp	21;"	d	file:
buf_largecount	comm.cpp	/^int buf_largecount = 0;		\/* # of large buffers which exist *\/$/;"	v
buf_overflows	comm.cpp	/^int buf_overflows = 0;		\/* # of overflows of output *\/$/;"	v
buf_switches	comm.cpp	/^int buf_switches = 0;		\/* # of switches from small to large buf *\/$/;"	v
bufpool	comm.cpp	/^struct txt_block *bufpool = 0;	\/* pool of large output buffers *\/$/;"	v	typeref:struct:txt_block
bugs	comm.cpp	/^namespace mods::bugs {$/;"	n	class:mods	file:
bugs	mods/bugs-fixtures.cpp	/^namespace mods::bugs {$/;"	n	class:mods	file:
bugs	mods/bugs-fixtures.hpp	/^namespace mods::bugs {$/;"	n	class:mods
build_armor_locker	mods/intimidate.cpp	/^void build_armor_locker(room_vnum room){$/;"	f	namespace:mods::zone
build_armor_locker	mods/zone.cpp	/^	void build_armor_locker(room_vnum room) {$/;"	f	namespace:mods::zone
build_camera_feed	mods/intimidate.cpp	/^void build_camera_feed(room_vnum room){$/;"	f	namespace:mods::zone
build_camera_feed	mods/zone.cpp	/^	void build_camera_feed(room_vnum room) {$/;"	f	namespace:mods::zone
build_directions	mods/fluxkraft/arcon-bar.hpp	/^			std::vector<std::string> build_directions;$/;"	m	struct:mods::fluxkraft::arcon::bar
build_directions	mods/fluxkraft/arcon-metropolitan.hpp	/^		std::vector<std::string> build_directions;$/;"	m	struct:mods::fluxkraft::arcon::metro
build_directions	mods/fluxkraft/shape-dictionary.cpp	/^		std::vector<std::string> build_directions;$/;"	m	struct:mods::fluxkraft::shape_description	file:
build_dummy	mods/intimidate.cpp	/^void build_dummy(room_vnum room){$/;"	f	namespace:mods::zone
build_dummy	mods/zone.cpp	/^	void build_dummy(room_vnum room) {$/;"	f	namespace:mods::zone
build_player_index	db.cpp	/^void build_player_index(void) {$/;"	f
build_weapon_locker	mods/intimidate.cpp	/^void build_weapon_locker(room_vnum room){$/;"	f	namespace:mods::zone
build_weapon_locker	mods/zone.cpp	/^	void build_weapon_locker(room_vnum room) {$/;"	f	namespace:mods::zone
builder	act.builder.cpp	/^namespace builder {$/;"	n	file:
builder	mods/builder.cpp	/^namespace mods::builder {$/;"	n	class:mods	file:
builder	mods/builder.hpp	/^namespace mods::builder {$/;"	n	class:mods
builder	mods/builder/conbuild.hpp	/^namespace mods::builder {$/;"	n	class:mods
builder	mods/builder/encode.cpp	/^namespace mods::builder {$/;"	n	class:mods	file:
builder	mods/builder/encode.hpp	/^namespace mods::builder {$/;"	n	class:mods
builder	mods/builder/hqbuild.hpp	/^namespace mods::builder {$/;"	n	class:mods
builder	mods/builder/meqbuild.hpp	/^namespace mods::builder {$/;"	n	class:mods
builder	mods/builder/slotted-builder.cpp	/^namespace mods::builder {$/;"	n	class:mods	file:
builder	mods/builder/slotted-builder.hpp	/^namespace mods::builder {$/;"	n	class:mods
builder	mods/init.hpp	/^INIT(builder);$/;"	v
builder	mods/init.hpp	/^INIT(mods::builder);$/;"	v
builder	mods/mob-roam.hpp	/^			uuid_t builder() {$/;"	f	struct:mods::mob_roam::roam_recorder
builder_data	mods/builder.hpp	/^			std::shared_ptr<builder_data_t> builder_data() {$/;"	f	struct:mods::builder::sandbox_data_t
builder_data	mods/player.hpp	/^			std::shared_ptr<builder_data_t> builder_data;$/;"	m	struct:mods::player
builder_data_t	mods/builder-data.cpp	/^builder_data_t::builder_data_t(int type,int start_room,int start_zone) {$/;"	f	class:builder_data_t
builder_data_t	mods/builder-data.hpp	/^	builder_data_t() : room_pave_mode(false),zone_pave_mode(false),$/;"	f	struct:builder_data_t
builder_data_t	mods/builder-data.hpp	/^struct builder_data_t {$/;"	s
builder_mode	mods/player.cpp	/^	bool player::builder_mode() const {$/;"	f	class:mods::player
builder_util	mods/builder_util.hpp	/^namespace mods::builder_util {$/;"	n	class:mods
builders	mods/acl_list.cpp	/^		static player_acl_list_t builders;$/;"	m	namespace:mods::acl_list::list_container	file:
built_on	house.h	/^	time_t built_on;		\/* date this house was built	*\/$/;"	m	struct:house_control_rec
buy_item	mods/shop.hpp	/^	void buy_item(player_ptr_t& player, TShopMap& shop_map, std::string_view argument) {$/;"	f	namespace:mods::shop
buy_price	shop.cpp	/^int buy_price(struct obj_data *obj, int shop_nr, char_data *keeper, char_data *buyer) {$/;"	f
by_mob_vnum	mods/builder/meqbuild.cpp	/^		std::vector<std::shared_ptr<mods::orm::mob_equipment_map>> by_mob_vnum(const uint64_t& vnum) {$/;"	f	namespace:mods::builder::meqbuild::map
by_name	mods/pfind.cpp	/^	player_ptr_t by_name(const char* player_name){$/;"	f	namespace:mods::pfind
by_player	mods/rifle-attachments.cpp	/^		std::vector<std::shared_ptr<mods::rifle_attachments_t>> by_player(player_ptr_t& player) {$/;"	f	namespace:mods::rifle_attachments
by_profile_vnum	mods/builder/conbuild.cpp	/^		std::deque<std::shared_ptr<mods::orm::contract_steps>> by_profile_vnum(const uint64_t& vnum) {$/;"	f	namespace:mods::builder::conbuild::map
by_profile_vnum	mods/builder/meqbuild.cpp	/^		std::vector<std::shared_ptr<mods::orm::mob_equipment_map>> by_profile_vnum(const uint64_t& vnum) {$/;"	f	namespace:mods::builder::meqbuild::map
by_uuid	mods/pfind.cpp	/^	player_ptr_t by_uuid(uuid_t player_uuid){$/;"	f	namespace:mods::pfind
by_uuid	mods/rifle-attachments.cpp	/^		std::shared_ptr<mods::rifle_attachments_t> by_uuid(const uuid_t& uuid) {$/;"	f	namespace:mods::rifle_attachments
by_vnum	mods/builder/conbuild.cpp	/^		std::optional<std::shared_ptr<conbuild_orm_type>> by_vnum(conbuild_vnum_t vnum) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
by_vnum	mods/builder/hqbuild.cpp	/^	std::optional<std::shared_ptr<mods::orm::hq>> by_vnum(const uint32_t& vnum) {$/;"	f	namespace:mods::builder::hqbuild
by_vnum	mods/builder/meqbuild.cpp	/^		std::optional<std::shared_ptr<meqbuild_orm_type>> by_vnum(meqbuild_vnum_t vnum) {$/;"	f	struct:mods::builder::meqbuild::meqbuild_interface
byte	structs.h	/^typedef signed char			byte;$/;"	t
c_description	mods/orm/contracts.hpp	/^		std::string c_description;$/;"	m	struct:mods::orm::contracts
c_str	mods/string.cpp	/^	const char* string::c_str() const {$/;"	f	class:mods::string
c_title	mods/orm/contracts.hpp	/^		std::string c_title;$/;"	m	struct:mods::orm::contracts
c_vnum	mods/orm/contracts.hpp	/^		contract_vnum_t c_vnum;$/;"	m	struct:mods::orm::contracts
cached_room_distance	mods/scan.cpp	/^	std::tuple<bool,distance_t> cached_room_distance(const room_rnum& hunters_room,$/;"	f	namespace:mods::scan
calc_visibility	mods/calc-visibility.cpp	/^namespace mods::calc_visibility {$/;"	n	class:mods	file:
calc_visibility	mods/calc-visibility.hpp	/^namespace mods::calc_visibility {$/;"	n	class:mods
calculate	mods/forge-engine/value-scaler.cpp	/^	void value_scaler::calculate(player_ptr_t& player) {$/;"	f	class:mods::forge_engine::value_scaler
calculate	mods/weapons/damage-calculator.cpp	/^		int16_t calculate($/;"	f	namespace:mods::weapons::damage_calculator::algorithm_A
calculate	mods/weapons/damage-calculator.cpp	/^	int16_t calculate($/;"	f	namespace:mods::weapons::damage_calculator
calculate_available_practice_sessions	mods/levels.cpp	/^	uint8_t calculate_available_practice_sessions(uint8_t level) {$/;"	f	namespace:mods::levels
calculate_based_on_triads	mods/levels.cpp	/^	std::array<float,STAT_INDEXES_SIZE> calculate_based_on_triads(std::array<uint8_t,5> triads,int level) {$/;"	f	namespace:mods::levels
calculate_bonus_damage	mods/weapons/damage-calculator.cpp	/^	int16_t calculate_bonus_damage($/;"	f	namespace:mods::weapons::damage_calculator
calculate_bonus_hp_gain	mods/levels.cpp	/^	int calculate_bonus_hp_gain(int dice,int sides,int greater_than,int player_level) {$/;"	f	namespace:mods::levels
calculate_bonus_move_gain	mods/levels.cpp	/^	int calculate_bonus_move_gain(int dice,int sides,int greater_than,int player_level) {$/;"	f	namespace:mods::levels
calculate_critical_damage	mods/armor/advanced-protection.cpp	/^	float advanced_protection::calculate_critical_damage(feedback_t& damage) {$/;"	f	class:mods::armor::advanced_protection
calculate_critical_damage	mods/armor/basic-protection.cpp	/^	float basic_protection::calculate_critical_damage(feedback_t& damage) {$/;"	f	class:mods::armor::basic_protection
calculate_critical_damage	mods/armor/elite-protection.cpp	/^	float elite_protection::calculate_critical_damage(feedback_t& damage) {$/;"	f	class:mods::armor::elite_protection
calculate_explosive_damage	mods/armor/basic-protection.cpp	/^	int basic_protection::calculate_explosive_damage(obj_ptr_t& explosive,int damage) {$/;"	f	class:mods::armor::basic_protection
calculate_explosive_damage	mods/projectile.cpp	/^		explosive_damage_t calculate_explosive_damage(player_ptr_t victim, obj_ptr_t item) {$/;"	f	namespace:mods::projectile
calculate_headshot_damage	mods/armor/advanced-protection.cpp	/^	float advanced_protection::calculate_headshot_damage(feedback_t& damage) {$/;"	f	class:mods::armor::advanced_protection
calculate_headshot_damage	mods/armor/basic-protection.cpp	/^	float basic_protection::calculate_headshot_damage(feedback_t& damage) {$/;"	f	class:mods::armor::basic_protection
calculate_headshot_damage	mods/armor/elite-protection.cpp	/^	float elite_protection::calculate_headshot_damage(feedback_t& damage) {$/;"	f	class:mods::armor::elite_protection
calculate_hp	mods/unit-tests/elemental.cpp	/^int calculate_hp(int starting_hp,int requested_damage,int resistance, int incendiary_damage_percent) {$/;"	f
calculate_limb_damage	mods/armor/advanced-protection.cpp	/^	float advanced_protection::calculate_limb_damage(feedback_t& damage,int where) {$/;"	f	class:mods::armor::advanced_protection
calculate_limb_damage	mods/armor/basic-protection.cpp	/^	float basic_protection::calculate_limb_damage(feedback_t& damage,int where) {$/;"	f	class:mods::armor::basic_protection
calculate_limb_damage	mods/armor/elite-protection.cpp	/^	float elite_protection::calculate_limb_damage(feedback_t& damage,int where) {$/;"	f	class:mods::armor::elite_protection
calculate_shrapnel_rooms	mods/projectile.cpp	/^		rooms_away_t calculate_shrapnel_rooms(room_rnum room, obj_ptr_t held_object,std::size_t blast_radius) {$/;"	f	namespace:mods::projectile
calculate_skill_points_by_level	mods/orm/skill-points.cpp	/^	uint16_t skill_points::calculate_skill_points_by_level(uint16_t player_level) {$/;"	f	class:mods::orm::skill_points
calculate_spray_chance	mods/weapons/damage-types.cpp	/^	uint8_t calculate_spray_chance(player_ptr_t& player) {$/;"	f	namespace:mods::weapons::damage_types
calculate_tracked_damage	mods/weapons/damage-types.cpp	/^	int calculate_tracked_damage(player_ptr_t& player,int original_damage) {$/;"	f	namespace:mods::weapons::damage_types
call_magic	spell_parser.cpp	/^int call_magic(char_data *caster, char_data *cvict,$/;"	f
callback	mods/projectile.hpp	/^		typedef std::function<void (room_rnum,int)> callback;$/;"	t	namespace:mods::projectile
camera	mods/camera.cpp	/^	camera::camera(uuid_t  owner, uuid_t  obj) :$/;"	f	class:mods::camera
camera	mods/camera.cpp	/^	camera::camera(uuid_t  owner, uuid_t  obj, uint16_t time) :$/;"	f	class:mods::camera
camera	mods/camera.hpp	/^	class camera {$/;"	c	namespace:mods
camera_feed	mods/orm/camera-feed.hpp	/^		camera_feed() : id(0) {$/;"	f	struct:mods::orm::camera_feed
camera_feed	mods/orm/camera-feed.hpp	/^	struct camera_feed : public mods::orm::orm_base<camera_feed,std::string> {$/;"	s	namespace:mods::orm
camera_feed_t	mods/integral-objects.hpp	/^	struct camera_feed_t {$/;"	s	namespace:mods::integral_objects
camera_viewing	mods/player.cpp	/^	bool player::camera_viewing() {$/;"	f	class:mods::player
can	globals.hpp	/^static inline bool can(player_ptr_t& player,int skill) {$/;"	f
can	mods/player.cpp	/^	bool player::can(std::string_view c) {$/;"	f	class:mods::player
can	structs.h	/^		bool can(std::size_t val) {$/;"	f	struct:obj_data
can_attack	mods/intent.cpp	/^	bool can_attack(intent_t & i){$/;"	f	namespace:mods::intent
can_attack_same_room	mods/object-utils.hpp	/^	bool can_attack_same_room(T& obj) {$/;"	f	namespace:mods::object_utils
can_be_injured	mods/weapons/damage-types.cpp	/^	bool can_be_injured(player_ptr_t& victim) {$/;"	f	namespace:mods::weapons::damage_types
can_carry_n	act.item.cpp	/^int can_carry_n(player_ptr_t player) {$/;"	f
can_flee	mods/intent.cpp	/^	bool can_flee(intent_t & i){$/;"	f	namespace:mods::intent
can_modify	olc.cpp	/^int can_modify(char_data *ch, int vnum) {$/;"	f
can_roam_to	mods/mob-roam.cpp	/^	bool can_roam_to(char_data* npc, room_rnum room_id) {$/;"	f	namespace:mods::mob_roam
can_see_player	mods/sensor-grenade.cpp	/^	bool can_see_player(uuid_t nade,player_ptr_t& target) {$/;"	f	namespace:mods::sensor_grenade
can_see_through_fire	mods/rooms.hpp	/^	static inline bool can_see_through_fire(room_rnum room) {$/;"	f	namespace:mods::rooms
can_snipe	mods/mobs/mob.cpp	/^	bool player::can_snipe(char_data *target) {$/;"	f	class:mods::player
can_snipe	mods/player.cpp	/^	bool player::can_snipe(player_ptr_t target) {$/;"	f	class:mods::player
can_still_see_target	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto can_still_see_target() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
can_still_see_target	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto can_still_see_target() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
can_take_obj	act.item.cpp	/^int can_take_obj(char_data *ch, struct obj_data *obj) {$/;"	f
cancel_block	mods/player.cpp	/^	void player::cancel_block() {$/;"	f	class:mods::player
cancel_event	mods/deferred.cpp	/^	void deferred::cancel_event(event_queue_iterator it){$/;"	f	class:mods::deferred
cancel_lambda	mods/deferred.cpp	/^	void deferred::cancel_lambda(lambda_queue_iterator it){$/;"	f	class:mods::deferred
cap_t	mods/weapon-types.hpp	/^	enum cap_t {$/;"	g	namespace:mods::weapon::capabilities
capabilities	mods/weapon-types.hpp	/^namespace mods::weapon::capabilities {$/;"	n	class:mods::weapon
capabilities	structs.h	/^		capability_list_t& capabilities() {$/;"	f	struct:obj_data
capability_t	mods/item.hpp	/^	enum capability_t {$/;"	g	namespace:mods::item
capture_output	mods/mobs/mob.cpp	/^	void player::capture_output(bool capture_status) {$/;"	f	class:mods::player
capture_output	mods/player.cpp	/^	void player::capture_output(bool capture_status) {$/;"	f	class:mods::player
capturedExpression	mods/catch.hpp	/^		std::string capturedExpression;$/;"	m	struct:Catch::AssertionInfo
capturedExpression	mods/catch2.hpp	/^        StringRef capturedExpression;$/;"	m	struct:Catch::AssertionInfo
carried_by	structs.h	/^		char_data *carried_by;  \/* Carried by :NULL in room\/conta   *\/$/;"	m	struct:obj_data
carry	mods/player.cpp	/^	void player::carry(obj_ptr_t obj) {$/;"	f	class:mods::player
carry_items	mods/player.hpp	/^			byte& carry_items() {$/;"	f	struct:mods::player
carry_weight	mods/player.hpp	/^			int&	carry_weight() {$/;"	f	struct:mods::player
carrying	mods/player.cpp	/^	obj_data* player::carrying() {$/;"	f	class:mods::player
carrying_ammo_of_type	mods/mobs/mob.cpp	/^	bool player::carrying_ammo_of_type(const weapon_type_t& type) {$/;"	f	class:mods::player
carrying_ammo_of_type	mods/player.cpp	/^	bool player::carrying_ammo_of_type(const weapon_type_t& type) {$/;"	f	class:mods::player
cast_spell	spell_parser.cpp	/^int cast_spell(char_data *ch, char_data *tch,$/;"	f
castle_cleaner	castle.cpp	/^int castle_cleaner(char_data *ch, int cmd, int gripe) {$/;"	f
castle_mob_spec	castle.cpp	/^void castle_mob_spec(mob_vnum mobnum, SPECIAL(*specproc)) {$/;"	f
castle_real_room	castle.cpp	/^room_rnum castle_real_room(room_vnum roomoffset) {$/;"	f
castle_twin_proc	castle.cpp	/^int castle_twin_proc(char_data *ch, int cmd, char *arg, int ctlnum, const char *twinname) {$/;"	f
castle_virtual	castle.cpp	/^mob_vnum castle_virtual(mob_vnum offset) {$/;"	f
cd	mods/drone.hpp	/^			char_data* cd() const {$/;"	f	struct:mods::drone_impl
cd	mods/mobs/mini-gunner.cpp	/^	char_data* mini_gunner::cd() {$/;"	f	class:mods::mobs::mini_gunner
cd	mods/mobs/mob.hpp	/^			char_data* cd() const {$/;"	f	class:mods::player
cd	mods/mobs/smart-mob.cpp	/^	char_data* smart_mob::cd() {$/;"	f	class:mods::mobs::smart_mob
cd	mods/player.hpp	/^			char_data* cd() const {$/;"	f	struct:mods::player
ch	mods/scan.hpp	/^			char_data* ch;$/;"	m	struct:mods::scan::__anon4
ch_time	mods/player.hpp	/^			time_data& ch_time() {$/;"	f	struct:mods::player
chan	mods/chat.cpp	/^	static std::vector<mods::chat::channel> chan;$/;"	m	namespace:mods::chat	file:
chan_verbs	mods/chat.cpp	/^	static std::vector<std::string> chan_verbs;$/;"	m	namespace:mods::chat	file:
chance	mods/rand.cpp	/^	bool chance(uint8_t chance){$/;"	f	namespace:mods::rand
chance_to_injure	mods/weapon.hpp	/^			float chance_to_injure;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
change_alignment	fight.cpp	/^void change_alignment(char_data *ch, char_data *victim) {$/;"	f
change_visibility	mods/object-utils.cpp	/^	void change_visibility(obj_ptr_t& object, int amount) {$/;"	f	namespace:mods::object_utils
change_visibility	mods/player-utils.hpp	/^	static inline void change_visibility(T& player,int amount){$/;"	f	namespace:mods::player_utils
channel	mods/chat.hpp	/^			channel(std::string_view name,std::string_view verb,bool b_private) :$/;"	f	struct:mods::chat::channel
channel	mods/chat.hpp	/^	struct channel {$/;"	s	namespace:mods::chat
char_auto	act.social.cpp	/^	char *char_auto;$/;"	m	struct:social_messg	file:
char_data	mods/ai_state.hpp	/^typedef struct char_data char_data;$/;"	t	typeref:struct:char_data
char_data	structs.cpp	/^char_data::char_data(char_data* o) {$/;"	f	class:char_data
char_exists	db.cpp	/^bool char_exists(const std::string& name) {$/;"	f
char_exists	db.cpp	/^bool char_exists(const std::string& name, aligned_int_t& meta_int_id) {$/;"	f
char_exists	db.cpp	/^bool char_exists(player_ptr_t player_ptr) {$/;"	f
char_found	act.social.cpp	/^	char *char_found;		\/* if NULL, read no further, ignore args *\/$/;"	m	struct:social_messg	file:
char_from_room	globals.cpp	/^			void char_from_room(char_data* ch) {$/;"	f	namespace:mods::globals::rooms
char_from_room	handler.cpp	/^void	char_from_room(player_ptr_t player) {$/;"	f
char_from_room	handler.cpp	/^void char_from_room(char_data *ch) {$/;"	f
char_from_room	mods/js.cpp	/^		static duk_ret_t char_from_room(duk_context *ctx) {$/;"	f	namespace:mods::js
char_move_to	mods/movement.cpp	/^	bool char_move_to(player_ptr_t& player,const room_rnum& room) {$/;"	f	namespace:mods::movement
char_no_arg	act.social.cpp	/^	char *char_no_arg;$/;"	m	struct:social_messg	file:
char_player_data	structs.cpp	/^char_player_data::char_player_data() {$/;"	f	class:char_player_data
char_specials	mods/player.hpp	/^			char_special_data& char_specials() {$/;"	f	struct:mods::player
char_to_int	bsd-snprintf.cpp	154;"	d	file:
char_to_room	globals.cpp	/^			void char_to_room(const room_rnum& room,char_data* ch) {$/;"	f	namespace:mods::globals::rooms
char_to_room	handler.cpp	/^void	char_to_room(player_ptr_t player, room_rnum room) {$/;"	f
char_to_room	handler.cpp	/^void char_to_room(char_data *ch, room_rnum room) {$/;"	f
char_to_room	mods/builder-data.cpp	/^void room_recorder_t::char_to_room(const room_rnum& r) {$/;"	f	class:room_recorder_t
character_list	globals.cpp	/^char_data* character_list = NULL;$/;"	v
chargen	mods/chargen.cpp	/^namespace mods::chargen {$/;"	n	class:mods	file:
chargen	mods/chargen.hpp	/^namespace mods::chargen {$/;"	n	class:mods
chargen_triads_for	mods/chargen.cpp	/^	std::string chargen_triads_for(player_class_t pclass){$/;"	f	namespace:mods::chargen
charisma	mods/player.hpp	/^			uint16_t& charisma() {$/;"	f	struct:mods::player
chat	globals.cpp	/^namespace mods::chat {$/;"	n	class:mods	file:
chat	mods/chat.cpp	/^namespace mods::chat {$/;"	n	class:mods	file:
chat	mods/chat.hpp	/^namespace mods::chat {$/;"	n	class:mods
chclass	mods/player.hpp	/^			uint8_t& chclass() {$/;"	f	struct:mods::player
chdir	sysdep.h	355;"	d
check_bitvector_names	db.cpp	/^int check_bitvector_names(bitvector_t bits, size_t namecount, const char *whatami, const char *whatbits) {$/;"	f
check_idle_passwords	comm.cpp	/^void check_idle_passwords(void) {$/;"	f
check_idling	limits.cpp	/^void check_idling(player_ptr_t player) {$/;"	f
check_killer	fight.cpp	/^void check_killer(char_data *ch, char_data *vict) {$/;"	f
check_object	db.cpp	/^int check_object(struct obj_data *obj) {$/;"	f
check_object_level	db.cpp	/^int check_object_level(struct obj_data *obj, int val) {$/;"	f
check_object_spell_number	db.cpp	/^int check_object_spell_number(struct obj_data *obj, int val) {$/;"	f
check_start_rooms	db.cpp	/^void check_start_rooms(void) {$/;"	f
checkpointing	comm.cpp	/^RETSIGTYPE checkpointing(int sig) {$/;"	f
chemical	mods/projectile.cpp	/^			int chemical;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
chemical_damage	mods/projectile.cpp	/^		int chemical_damage(player_ptr_t victim, obj_ptr_t item) {$/;"	f	namespace:mods::projectile
chemistry	mods/player.hpp	/^			uint16_t& chemistry() {$/;"	f	struct:mods::player
chunk	mods/deferred.hpp	/^		std::size_t chunk;$/;"	m	struct:mods::chunk_affect_t
chunk_affect_t	mods/deferred.hpp	/^	struct chunk_affect_t {$/;"	s	namespace:mods
chunk_type_t	mods/flags.hpp	/^	enum chunk_type_t {$/;"	g	namespace:mods::flags
circle_follow	utils.cpp	/^bool circle_follow(char_data *ch, char_data *victim) {$/;"	f
circle_random	random.cpp	/^unsigned long circle_random(void) {$/;"	f
circle_reboot	comm.cpp	/^int circle_reboot = 0;		\/* reboot the game after a shutdown *\/$/;"	v
circle_restrict	db.cpp	/^int circle_restrict = 0;	\/* level of game restriction	 *\/$/;"	v
circle_shutdown	comm.cpp	/^int circle_shutdown = 0;	\/* clean shutdown *\/$/;"	v
circle_sleep	comm.cpp	/^void circle_sleep(struct timeval *timeout) {$/;"	f
circle_srandom	random.cpp	/^void circle_srandom(unsigned long initial_seed) {$/;"	f
circlemud_version	constants.cpp	/^const char *circlemud_version =$/;"	v
circlemud_version	constants.hpp	/^constexpr const char *circlemud_version =$/;"	v
cityguard	spec_assign.cpp	/^SPECIAL(cityguard);$/;"	v
cityguard	spec_procs.cpp	/^SPECIAL(cityguard);$/;"	v
class_abbrevs	class.cpp	/^const char *class_abbrevs[] = {$/;"	v
class_abilities	mods/class-abilities.cpp	/^namespace mods::class_abilities {$/;"	n	class:mods	file:
class_abilities	mods/class-abilities.hpp	/^namespace mods::class_abilities {$/;"	n	class:mods
class_abilities	mods/init.hpp	/^INIT(mods::class_abilities);$/;"	v
class_capability_t	mods/mobs/mob.hpp	/^			typedef std::vector<class_type> class_capability_t;$/;"	t	class:mods::player
class_info_t	mods/mobs/mob.hpp	/^			typedef std::vector<std::shared_ptr<mods::classes::base>> class_info_t;$/;"	t	class:mods::player
class_is_implemented	mods/levels.hpp	/^	static inline bool class_is_implemented(player_class_t pc) {$/;"	f	namespace:mods::levels
classes	mods/chargen.cpp	/^		static std::vector<std::string> classes;$/;"	m	namespace:mods::chargen	file:
classes	mods/classes/advance-levels.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/base.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/base.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/breacher.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/breacher.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/contagion.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/contagion.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/engineer.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/engineer.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/forge.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/forge.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/ghost.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/ghost.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/marine.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/marine.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/medic.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/medic.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/psyop.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/psyop.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/pyrexia.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/pyrexia.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/sentinel.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/sentinel.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/sniper.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/sniper.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/super-user-fiddler.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/super-user-fiddler.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/support.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/support.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/syndrome.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/classes/syndrome.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/classes/types.hpp	/^namespace mods::classes {$/;"	n	class:mods
classes	mods/init.hpp	/^INIT(mods::classes);$/;"	v
classes	mods/player.cpp	/^namespace mods::classes {$/;"	n	class:mods	file:
classes	mods/player.hpp	/^	namespace classes {$/;"	n	namespace:mods
classification_enum	mods/yaml.hpp	/^		armor_classification_type_t classification_enum;$/;"	m	struct:mods::yaml::armor_description_t
claymore_count	mods/classes/ghost.cpp	/^	uint8_t ghost::claymore_count() const{$/;"	f	class:mods::classes::ghost
claymore_count	mods/classes/sniper.cpp	/^	uint8_t sniper::claymore_count() const {$/;"	f	class:mods::classes::sniper
claymore_installed_at	mods/object-utils.hpp	/^	int8_t claymore_installed_at(T& obj) {$/;"	f	namespace:mods::object_utils
claymores_in	mods/demolitions.cpp	/^	std::vector<uuid_t> claymores_in(const room_rnum& room) {$/;"	f	namespace:mods::demolitions
cleaning	castle.cpp	/^SPECIAL(cleaning);$/;"	v
clear	mods/affects.hpp	/^			void clear(TAffectsContainer affects) {$/;"	f	struct:mods::affects::dissolver
clear	mods/builder-data.cpp	/^void room_recorder_t::clear() {$/;"	f	class:room_recorder_t
clear	mods/builder/conbuild.cpp	/^		void clear() {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
clear	mods/builder/hqbuild.cpp	/^	void clear() {$/;"	f	namespace:mods::builder::hqbuild
clear	mods/builder/meqbuild.cpp	/^		void clear() {$/;"	f	struct:mods::builder::meqbuild::meqbuild_interface
clear	mods/sql.hpp	/^			compositor<T>& clear() {$/;"	f	struct:mods::sql::compositor
clear	mods/string.cpp	/^	void string::clear(){$/;"	f	class:mods::string
clearMemory	mobact.cpp	/^void clearMemory(char_data *ch) {$/;"	f
clear_all_affected	mods/player.cpp	/^	void player::clear_all_affected() {$/;"	f	class:mods::player
clear_all_affected_flags	mods/js.cpp	/^		static duk_ret_t clear_all_affected_flags(duk_context *ctx) {$/;"	f	namespace:mods::js
clear_all_affected_plr	mods/player.cpp	/^	void player::clear_all_affected_plr() {$/;"	f	class:mods::player
clear_all_custom_commands	mods/builder/slotted-builder.hpp	/^			void clear_all_custom_commands() {$/;"	f	struct:mods::builder::slotted_builder
clear_all_plr_flags	mods/js.cpp	/^		static duk_ret_t clear_all_plr_flags(duk_context *ctx) {$/;"	f	namespace:mods::js
clear_attacking_with	mods/player.hpp	/^			void clear_attacking_with() {$/;"	f	struct:mods::player
clear_behaviour_tree	structs.cpp	/^void mob_special_data::clear_behaviour_tree() {$/;"	f	class:mob_special_data
clear_camera	mods/player.cpp	/^	void player::clear_camera() {$/;"	f	class:mods::player
clear_capabilities	structs.h	/^		void clear_capabilities() {$/;"	f	struct:obj_data
clear_captured_output	mods/mobs/mob.cpp	/^	void player::clear_captured_output() {$/;"	f	class:mods::player
clear_captured_output	mods/player.cpp	/^	void player::clear_captured_output() {$/;"	f	class:mods::player
clear_custom_command	mods/builder/slotted-builder.hpp	/^			void clear_custom_command(std::string verb) {$/;"	f	struct:mods::builder::slotted_builder
clear_free_list	mail.cpp	/^void clear_free_list(void) {$/;"	f
clear_obj_ptrs	mods/armor/advanced-protection.cpp	/^	void advanced_protection::clear_obj_ptrs() {$/;"	f	class:mods::armor::advanced_protection
clear_obj_ptrs	mods/armor/basic-protection.cpp	/^	void basic_protection::clear_obj_ptrs() {$/;"	f	class:mods::armor::basic_protection
clear_obj_ptrs	mods/armor/elite-protection.cpp	/^	void elite_protection::clear_obj_ptrs() {$/;"	f	class:mods::armor::elite_protection
clear_object	db.cpp	/^void clear_object(struct obj_data *obj) {$/;"	f
clear_pluck_filter	mods/lmdb.cpp	/^	void _db_handle::clear_pluck_filter(){$/;"	f	class:mods::lmdb::_db_handle
clear_response	mods/builder/slotted-builder.hpp	/^			void clear_response() {$/;"	f	struct:mods::builder::slotted_builder
clear_rooms	mods/mob-roam.cpp	/^	void roam_recorder::clear_rooms() {$/;"	f	class:mods::mob_roam::roam_recorder
clear_watching	mods/mobs/helpers.hpp	/^	static inline void clear_watching(Tuuid u){$/;"	f	namespace:mods::mobs::helpers
clear_who_line	mods/super-users.cpp	/^	void clear_who_line(std::string_view player_name) {$/;"	f	namespace:mods::super_users
clear_yaml_exceptions	mods/object-utils.hpp	/^	static inline void clear_yaml_exceptions() {$/;"	f	namespace:mods::object_utils
client	mods/lmdb/db.hpp	/^				client(gsl::not_null<const char*> file,gsl::not_null<const char*> db_name){$/;"	f	struct:gdns::lmdb::client
client	mods/lmdb/db.hpp	/^		struct client {$/;"	s	namespace:gdns::lmdb
clip_size	mods/weapon.hpp	/^			int clip_size;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
clip_size	structs.h	/^	uint16_t clip_size;$/;"	m	struct:obj_flag_data
close	mods/bugs-fixtures.cpp	/^	void close(){$/;"	f	namespace:mods::bugs
close	mods/db-report.hpp	/^	static inline void close(){$/;"	f	namespace:mods::db_report
close	mods/lmdb.cpp	/^	void _db_handle::close(){$/;"	f	class:mods::lmdb::_db_handle
close1	shop.h	/^	int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close2	shop.h	/^	int	 close1, close2;	\/* When does the shop close?		*\/$/;"	m	struct:shop_data
close_socket	comm.cpp	/^void close_socket(mods::descriptor_data& d) {$/;"	f
clr	screen.h	28;"	d
clr_affected_by	mods/player.hpp	/^			void clr_affected_by() {$/;"	f	struct:mods::player
cm_key	mods/acl/config-parser.hpp	/^                typedef std::string cm_key;$/;"	t	class:mods::acl::FileParser
cm_value	mods/acl/config-parser.hpp	/^                typedef uint64_t cm_value;$/;"	t	class:mods::acl::FileParser
cmd	act.wizard.cpp	/^	const char *cmd;$/;"	m	struct:set_struct	file:
cmd	db.h	/^		std::deque<reset_com> cmd;   \/* command table for reset	          *\/$/;"	m	struct:zone_data
cmd	mods/js.cpp	/^		static duk_ret_t cmd(duk_context *ctx) {$/;"	f	namespace:mods::js
cmd_door	act.movement.cpp	/^const char *cmd_door[] = {$/;"	v
cmd_emote	shop.cpp	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_exec	mods/js.cpp	/^		static duk_ret_t cmd_exec(duk_context *ctx) {$/;"	f	namespace:mods::js
cmd_info	interpreter.cpp	/^cpp_extern const struct command_info cmd_info[] = {$/;"	v	typeref:struct:command_info
cmd_puke	shop.cpp	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_say	shop.cpp	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_slap	shop.cpp	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
cmd_sort_info	act.informative.cpp	/^int *cmd_sort_info;$/;"	v
cmd_tell	shop.cpp	/^int cmd_say, cmd_tell, cmd_emote, cmd_slap, cmd_puke;$/;"	v
code	mods/acl/color.hpp	/^			Code code;$/;"	m	class:mods::Color::Modifier
cold_blooded_index	mods/karma.hpp	/^		float cold_blooded_index;$/;"	m	struct:mods::karma
color_eval	globals.cpp	/^		std::string color_eval(std::string_view buffer) {$/;"	f	namespace:mods::globals
color_liquid	constants.cpp	/^const char *color_liquid[] = {$/;"	v
color_liquid	constants.hpp	/^const char *color_liquid[] =$/;"	v
colors	mods/acl/color.hpp	/^    namespace colors {$/;"	n	namespace:mods
colors	mods/colors.hpp	/^namespace mods::colors {$/;"	n	class:mods
column	mods/lmdb.hpp	/^		key_type_t column;$/;"	m	struct:mods::lmdb::_selector
column_list	mods/orm/contract-steps.hpp	/^		static const std::vector<std::string>& column_list() {$/;"	f	struct:mods::orm::contract_steps
column_mappings	mods/builder.cpp	/^	str_map_t column_mappings;$/;"	m	struct:command_t	file:
column_prefix	mods/orm/armor-index.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::armor_index
column_prefix	mods/orm/breacher.hpp	/^		std::string column_prefix() const { return "breacher_"; }$/;"	f	struct:mods::orm::breacher
column_prefix	mods/orm/camera-feed.hpp	/^		std::string column_prefix() const { return "feed_"; }$/;"	f	struct:mods::orm::camera_feed
column_prefix	mods/orm/contract-steps.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::contract_steps
column_prefix	mods/orm/contracts.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::contracts
column_prefix	mods/orm/door-event.hpp	/^		std::string column_prefix() const { return "event_"; }$/;"	f	struct:mods::orm::door_event
column_prefix	mods/orm/elevator.hpp	/^		std::string column_prefix() const { return "feed_"; }$/;"	f	struct:mods::orm::elevator
column_prefix	mods/orm/engineer.hpp	/^		std::string column_prefix() const { return "engineer_"; }$/;"	f	struct:mods::orm::engineer
column_prefix	mods/orm/forge.hpp	/^		std::string column_prefix(){ return "forge_"; }$/;"	f	struct:mods::orm::forge
column_prefix	mods/orm/ghost.hpp	/^		std::string column_prefix(){ return "ghost_"; }$/;"	f	struct:mods::orm::ghost
column_prefix	mods/orm/hq.hpp	/^		std::string column_prefix() {$/;"	f	struct:mods::orm::hq
column_prefix	mods/orm/integral-object.hpp	/^		std::string column_prefix() const { return "object_"; }$/;"	f	struct:mods::orm::integral_object
column_prefix	mods/orm/marine.hpp	/^		std::string column_prefix() const { return "marine_"; }$/;"	f	struct:mods::orm::marine
column_prefix	mods/orm/medic.hpp	/^		std::string column_prefix() const { return "medic_"; }$/;"	f	struct:mods::orm::medic
column_prefix	mods/orm/mini-game.hpp	/^		std::string column_prefix() const { return "game_"; }$/;"	f	struct:mods::orm::mini_game
column_prefix	mods/orm/mob-equipment-map.hpp	/^		std::string column_prefix() {$/;"	f	struct:mods::orm::mob_equipment_map
column_prefix	mods/orm/mob-equipment.hpp	/^		std::string column_prefix() {$/;"	f	struct:mods::orm::mob_equipment
column_prefix	mods/orm/mob-roam.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::mob_roam
column_prefix	mods/orm/orm-base.hpp	/^		virtual std::string column_prefix() {$/;"	f	struct:mods::orm::orm_base
column_prefix	mods/orm/player-base-ability.hpp	/^		std::string column_prefix(){ return "pba_"; }$/;"	f	struct:mods::orm::player_base_ability
column_prefix	mods/orm/player-contract-state.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::player_contract_state
column_prefix	mods/orm/player-skill-points.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::player_skill_points
column_prefix	mods/orm/player-skill-usage.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::player_skill_usage
column_prefix	mods/orm/pyrexia.hpp	/^		std::string column_prefix(){ return "pyrexia_"; }$/;"	f	struct:mods::orm::pyrexia
column_prefix	mods/orm/rifle-attachment.hpp	/^		std::string column_prefix() {$/;"	f	struct:mods::orm::rifle_attachment
column_prefix	mods/orm/rifle-index.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::rifle_index
column_prefix	mods/orm/rifle-instance.hpp	/^		std::string column_prefix() {$/;"	f	struct:mods::orm::rifle_instance
column_prefix	mods/orm/skill-points.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::skill_points
column_prefix	mods/orm/skill-trees.hpp	/^		std::string column_prefix() const {$/;"	f	struct:mods::orm::skill_trees
column_prefix	mods/orm/sniper.hpp	/^		std::string column_prefix() {$/;"	f	struct:mods::orm::sniper
column_prefix	mods/orm/striker.hpp	/^		std::string column_prefix(){ return "striker_"; }$/;"	f	struct:mods::orm::striker
column_prefix	mods/orm/support.hpp	/^		std::string column_prefix() const { return "support_"; }$/;"	f	struct:mods::orm::support
column_prefix	mods/orm/syndrome.hpp	/^		std::string column_prefix(){ return "syndrome_"; }$/;"	f	struct:mods::orm::syndrome
column_prefix	mods/pq.hpp	/^	virtual std::string column_prefix() {$/;"	f	struct:orm_base
combat_list	fight.cpp	/^char_data *combat_list = NULL;	\/* head of l-list of fighting chars *\/$/;"	v
command	db.h	/^	char	command;   \/* current command                      *\/$/;"	m	struct:reset_com
command	interpreter.h	/^	const char* command;$/;"	m	struct:command_info
command_info	interpreter.h	/^struct command_info {$/;"	s
command_interpreter	globals.cpp	/^		bool command_interpreter(player_ptr_t player,std::string_view in_argument) {$/;"	f	namespace:mods::globals
command_interpreter	interpreter.cpp	/^void command_interpreter(player_ptr_t& player, std::string in_argument) {$/;"	f
command_map	mods/acl/config-parser.hpp	/^                typedef std::map<cm_key,cm_value> command_map;$/;"	t	class:mods::acl::FileParser
command_pointer	interpreter.h	/^	void	(*command_pointer)$/;"	m	struct:command_info
command_t	mods/builder.cpp	/^	command_t($/;"	f	struct:command_t
command_t	mods/builder.cpp	/^struct command_t {$/;"	s	file:
commit	mods/lmdb.cpp	/^	_db_handle::tuple_return_type_t _db_handle::commit(){$/;"	f	class:mods::lmdb::_db_handle
commit	mods/pq.cpp	/^	void commit(transaction& txn) {$/;"	f	namespace:mods::pq
common_weaponry_skillset	class.cpp	/^std::string common_weaponry_skillset() {$/;"	f
communicate	mods/chat.hpp	/^	void communicate(TPlayer obj,TActionString type,TActionString message) {$/;"	f	namespace:mods::chat
compare	mods/catch.hpp	/^		bool compare(T1 const& lhs, T2 const& rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(T* lhs, int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(T* lhs, long long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(T* lhs, long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(T* lhs, std::nullptr_t) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(int lhs, T* rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(long lhs, T* rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(long long lhs, T* rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op, typename T> bool compare(std::nullptr_t, T* rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(int lhs, unsigned char rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(int lhs, unsigned int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(int lhs, unsigned long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(long lhs, unsigned char rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(long lhs, unsigned int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(long lhs, unsigned long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(long long lhs, unsigned char rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(long long lhs, unsigned int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(long long lhs, unsigned long long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(long long lhs, unsigned long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned char lhs, int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned char lhs, long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned int lhs, int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned int lhs, long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned long lhs, int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned long lhs, long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned long long lhs, char rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned long long lhs, int rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned long long lhs, long long rhs) {$/;"	f	namespace:Catch::Internal
compare	mods/catch.hpp	/^		template<Operator Op> bool compare(unsigned long long lhs, long rhs) {$/;"	f	namespace:Catch::Internal
compare_spells	spec_procs.cpp	/^int compare_spells(const void *x, const void *y) {$/;"	f
compile_yaml_path_from_type_and_file	mods/util.cpp	/^	std::string compile_yaml_path_from_type_and_file(int type, std::string_view file) {$/;"	f	namespace:mods::util
complete_key	mods/contracts.cpp	/^	std::string complete_key(player_ptr_t& player,room_vnum room,int n_index) {$/;"	f	namespace:mods::contracts
compositor	mods/jx.hpp	/^			compositor() : m_current_level(0) {$/;"	f	struct:mods::jx::compositor
compositor	mods/jx.hpp	/^	struct compositor {$/;"	s	namespace:mods::jx
compositor	mods/sql.hpp	/^			compositor(str_object table, T* txn_ptr) :$/;"	f	struct:mods::sql::compositor
compositor	mods/sql.hpp	/^	struct compositor {$/;"	s	namespace:mods::sql
compute_armor_class	fight.cpp	/^int compute_armor_class(char_data *ch) {$/;"	f
compute_thaco	fight.cpp	/^int compute_thaco(char_data *ch, char_data *victim) {$/;"	f
con_app	constants.cpp	/^cpp_extern const struct con_app_type con_app[] = {$/;"	v	typeref:struct:con_app_type
con_app	constants.hpp	/^cpp_extern const struct con_app_type con_app[] = {$/;"	v	typeref:struct:con_app_type
conbuild	mods/builder/conbuild.cpp	/^namespace mods::builder::conbuild {$/;"	n	class:mods::builder	file:
conbuild	mods/init.hpp	/^INIT(mods::builder::conbuild);$/;"	v
conbuild_interface	mods/builder/conbuild.cpp	/^		conbuild_interface() {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
conbuild_interface	mods/builder/conbuild.cpp	/^	struct conbuild_interface : public slotted_builder<conbuild_vnum_t,conbuild_orm_type> {$/;"	s	namespace:mods::builder::conbuild	file:
conbuilder	mods/builder/conbuild.cpp	/^	static conbuild_interface& conbuilder(player_ptr_t player) {$/;"	f	namespace:mods::builder::conbuild
concat	mods/string.cpp	/^	void string::concat(const std::string & str){$/;"	f	class:mods::string
concat	mods/string.cpp	/^	void string::concat(int ch){$/;"	f	class:mods::string
conf	mods/conf.cpp	/^namespace mods::conf {$/;"	n	class:mods	file:
conf	mods/conf.hpp	/^namespace mods::conf {$/;"	n	class:mods
conf	mods/lmdb/conf.hpp	/^	struct conf {$/;"	s	namespace:gdns
conf	mods/lmdb/conf.hpp	/^conf(){$/;"	f	struct:gdns::conf
conf	mods/lmdb/conf.hpp	/^conf(const std::string & config_file) : $/;"	f	struct:gdns::conf
conf	mods/util-conf.hpp	/^		namespace conf {$/;"	n	namespace:mods::util
conf_map	mods/lmdb/conf.hpp	/^	typedef std::unordered_map<std::string,std::string> conf_map;$/;"	t	struct:gdns::conf
config	config.cpp	/^namespace config {$/;"	n	file:
config	config.hpp	/^namespace config {$/;"	n
config	globals.cpp	/^namespace config {$/;"	n	file:
connected_types	constants.cpp	/^const char *connected_types[] = {$/;"	v
connected_types	constants.hpp	/^const char *connected_types[] = {$/;"	v
constitution	mods/player.hpp	/^			uint16_t& constitution() {$/;"	f	struct:mods::player
consumable	mods/item-types.hpp	/^	enum consumable {$/;"	g	namespace:mods::weapon::type
consumable_description_t	mods/yaml.hpp	/^		consumable_description_t() {$/;"	f	struct:mods::yaml::consumable_description_t
consumable_description_t	mods/yaml.hpp	/^	struct consumable_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
consume	mods/sensor-grenade.cpp	/^	void consume(uuid_t nade_uuid) {$/;"	f	namespace:mods::sensor_grenade
consume_all	mods/players/messages.cpp	/^	void consume_all() {$/;"	f	namespace:mods::players::messages
consume_from_carrying	mods/player.cpp	/^	void player::consume_from_carrying(obj_ptr_t& item) {$/;"	f	class:mods::player
consume_scripted_response	mods/player.hpp	/^			std::string consume_scripted_response() {$/;"	f	struct:mods::player
contact_hq_for_camera_spots	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto contact_hq_for_camera_spots() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
contagion	mods/classes/contagion.cpp	/^	contagion::contagion(){$/;"	f	class:mods::classes::contagion
contagion	mods/classes/contagion.cpp	/^	contagion::contagion(player_ptr_t p){$/;"	f	class:mods::classes::contagion
contagion	mods/classes/contagion.hpp	/^	struct contagion : base {$/;"	s	namespace:mods::classes
contagion	mods/weapon.hpp	/^	namespace contagion {$/;"	n	namespace:mods::weapon
container	mods/item-types.hpp	/^	enum container {$/;"	g	namespace:mods::weapon::type
container_bits	constants.cpp	/^const char *container_bits[] = {$/;"	v
container_bits	constants.hpp	/^const char *container_bits[] = {$/;"	v
container_description_t	mods/yaml.hpp	/^		container_description_t() {$/;"	f	struct:mods::yaml::container_description_t
container_description_t	mods/yaml.hpp	/^	struct container_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
contains	structs.h	/^		obj_data *contains;     \/* Contains objects                 *\/$/;"	m	struct:obj_data
contents	structs.h	/^		obj_data *contents;   \/* List of items in room              *\/$/;"	v
contents_container	structs.h	/^		std::deque<std::shared_ptr<obj_data>>& contents_container() {$/;"	f
contextual_eval_string	mods/js.cpp	/^		void contextual_eval_string(char_data* player,duk_context* ctx,const std::string& str) {$/;"	f	namespace:mods::js
contextual_eval_string	mods/js.cpp	/^		void contextual_eval_string(mods::player* player,duk_context* ctx,const std::string& str) {$/;"	f	namespace:mods::js
contract	mods/contract-types.hpp	/^		contract(contract_vnum_t c_vnum,std::string in_title,std::string desc) : vnum(c_vnum), title(in_title), description(desc) {$/;"	f	struct:mods::contracts::contract
contract	mods/contract-types.hpp	/^	struct contract {$/;"	s	namespace:mods::contracts
contract	structs.h	/^		bool contract;$/;"	m	struct:obj_data
contract	structs.h	/^		bool contract;$/;"	m	struct:room_data
contract	structs.h	/^	bool contract;$/;"	m	struct:room_direction_data
contract_abort	mods/contracts.cpp	/^	static duk_ret_t contract_abort(duk_context *ctx) {$/;"	f	namespace:mods::contracts
contract_complete	mods/contracts.cpp	/^	static duk_ret_t contract_complete(duk_context *ctx) {$/;"	f	namespace:mods::contracts
contract_destroy_item	mods/player.cpp	/^	void player::contract_destroy_item(const uuid_t& item_uuid) {$/;"	f	class:mods::player
contract_destroyed_door	mods/player.cpp	/^	void player::contract_destroyed_door(const room_rnum& room_id,const int8_t& direction) {$/;"	f	class:mods::player
contract_events	mods/contract-events.hpp	/^namespace mods::contract_events {$/;"	n	class:mods
contract_find_door	mods/player.cpp	/^	void player::contract_find_door(const room_rnum& room_id,const int8_t& direction) {$/;"	f	class:mods::player
contract_find_item	mods/player.cpp	/^	void player::contract_find_item(const uuid_t& obj_uuid) {$/;"	f	class:mods::player
contract_find_mob	mods/player.cpp	/^	void player::contract_find_mob(const uuid_t& mob_uuid) {$/;"	f	class:mods::player
contract_find_room	mods/player.cpp	/^	void player::contract_find_room(const room_rnum& room_id) {$/;"	f	class:mods::player
contract_gain_entry	mods/player.cpp	/^	void player::contract_gain_entry(const room_rnum& room_id) {$/;"	f	class:mods::player
contract_install_item	mods/player.cpp	/^	void player::contract_install_item(const uuid_t& item_uuid) {$/;"	f	class:mods::player
contract_kill_mob	mods/player.cpp	/^	void player::contract_kill_mob(const uuid_t& mob_uuid) {$/;"	f	class:mods::player
contract_master_list	mods/contracts.cpp	/^	std::deque<std::shared_ptr<contract>>& contract_master_list() {$/;"	f	namespace:mods::contracts
contract_quota_destroyed_door	mods/player.cpp	/^	void player::contract_quota_destroyed_door(const room_rnum& room_id,const int8_t& direction) {$/;"	f	class:mods::player
contract_quota_item_find_increase	mods/player.cpp	/^	void player::contract_quota_item_find_increase(const uuid_t& item_uuid) {$/;"	f	class:mods::player
contract_quota_kill_mob_increase	mods/player.cpp	/^	void player::contract_quota_kill_mob_increase(const uuid_t& mob_uuid) {$/;"	f	class:mods::player
contract_retrieve_item	mods/player.cpp	/^	void player::contract_retrieve_item(const uuid_t& item_uuid) {$/;"	f	class:mods::player
contract_step	mods/contract-steps.hpp	/^	struct contract_step {$/;"	s	namespace:mods::contracts
contract_steps	mods/orm/contract-steps.hpp	/^		contract_steps() {$/;"	f	struct:mods::orm::contract_steps
contract_steps	mods/orm/contract-steps.hpp	/^		contract_steps(const contract_vnum_t& contract_vnum) {$/;"	f	struct:mods::orm::contract_steps
contract_steps	mods/orm/contract-steps.hpp	/^	struct contract_steps : public mods::orm::orm_base<contract_steps,std::string> {$/;"	s	namespace:mods::orm
contract_steps_list	mods/orm/contract-steps.cpp	/^	std::deque<std::shared_ptr<contract_steps>>& contract_steps_list() {$/;"	f	namespace:mods::orm
contract_steps_record_t	mods/orm/contract-steps.hpp	/^	struct contract_steps_record_t {$/;"	s	namespace:mods::orm
contract_steps_table_name	mods/orm/contract-steps.hpp	/^	static constexpr std::string_view contract_steps_table_name = "contract_steps";$/;"	m	namespace:mods::orm
contract_talk_to	mods/player.cpp	/^	void player::contract_talk_to(const uuid_t& mob_uuid) {$/;"	f	class:mods::player
contract_tracking	mods/contract-tracking.hpp	/^namespace mods::contract_tracking {$/;"	n	class:mods
contract_vnum	mods/player-contract-instance.hpp	/^			const auto& contract_vnum() const {$/;"	f	struct:mods::contracts::player_contract_instance
contracts	mods/contract-steps.cpp	/^namespace mods::contracts {$/;"	n	class:mods	file:
contracts	mods/contract-steps.hpp	/^namespace mods::contracts {$/;"	n	class:mods
contracts	mods/contract-tracking.cpp	/^namespace mods::contracts {$/;"	n	class:mods	file:
contracts	mods/contract-types.hpp	/^namespace mods::contracts {$/;"	n	class:mods
contracts	mods/contracts.cpp	/^namespace mods::contracts {$/;"	n	class:mods	file:
contracts	mods/contracts.hpp	/^	namespace contracts {$/;"	n	namespace:mods
contracts	mods/init.hpp	/^INIT(mods::contracts);$/;"	v
contracts	mods/orm/contracts.hpp	/^		contracts() {$/;"	f	struct:mods::orm::contracts
contracts	mods/orm/contracts.hpp	/^		contracts(const pqxx::row& row) {$/;"	f	struct:mods::orm::contracts
contracts	mods/orm/contracts.hpp	/^	struct contracts : public mods::orm::orm_base<contracts,std::string> {$/;"	s	namespace:mods::orm
contracts	mods/player-contract-instance.cpp	/^namespace mods::contracts {$/;"	n	class:mods	file:
contracts	mods/player-contract-instance.hpp	/^namespace mods::contracts {$/;"	n	class:mods
contracts	mods/player.hpp	/^			std::deque<std::shared_ptr<mods::contracts::player_contract_instance>>& contracts() {$/;"	f	struct:mods::player
contracts	mods/player.hpp	/^namespace mods::contracts {$/;"	n	class:mods
contracts_file_to_lmdb	mods/contracts.cpp	/^	int contracts_file_to_lmdb(player_ptr_t& player,const std::string& contracts_file,const std::string& lmdb_key) {$/;"	f	namespace:mods::contracts
contracts_table_name	mods/orm/contracts.hpp	/^	static constexpr std::string_view contracts_table_name = "contracts";$/;"	m	namespace:mods::orm
convert	mods/catch.hpp	/^			static std::string convert(T const& _value) {$/;"	f	struct:Catch::Detail::StringMakerBase
convert	mods/catch.hpp	/^			static std::string convert(T const& v) {$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	mods/catch.hpp	/^			static std::string convert(T const& v) {$/;"	f	struct:Catch::Detail::StringMakerBase
convert	mods/catch.hpp	/^			static std::string convert(T const&) {$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	mods/catch.hpp	/^		static std::string convert(R C::* p) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch.hpp	/^		static std::string convert(U* p) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^            convert( const Fake& value ) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^            convert(const Fake& value) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(NSObject* nsObject) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(NSString * nsstring) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(R C::* p) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(U* p) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(char const* str) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(const std::optional<T>& optional) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(const std::pair<T1, T2>& pair) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(signed char const* str) {$/;"	f	struct:Catch::StringMaker
convert	mods/catch2.hpp	/^        static std::string convert(unsigned char const* str) {$/;"	f	struct:Catch::StringMaker
convertUnknownEnumToString	mods/catch2.hpp	/^        std::string convertUnknownEnumToString( E e ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	mods/catch2.hpp	/^         std::string>::type convertUnstreamable(T const& ex) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	mods/catch2.hpp	/^        , std::string>::type convertUnstreamable( T const& value ) {$/;"	f	namespace:Catch::Detail
convertUnstreamable	mods/catch2.hpp	/^        std::string>::type convertUnstreamable( T const& ) {$/;"	f	namespace:Catch::Detail
convert_to_array	mods/orm/mob-equipment.cpp	/^	std::array<std::string,NUM_WEARS> mob_equipment::convert_to_array() const {$/;"	f	class:mods::orm::mob_equipment
convert_to_fire_nade	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::convert_to_fire_nade(obj_ptr_t& object){$/;"	f	class:mods::classes::pyrexia
convert_to_fire_nade	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::convert_to_fire_nade(obj_ptr_t& object){$/;"	f	class:mods::orm::pyrexia
cooldown_between_shots	mods/weapon.hpp	/^			float cooldown_between_shots;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
coordinates	mods/builder/coordinates.hpp	/^namespace mods::builder::coordinates {$/;"	n	class:mods::builder
core_dump	utils.h	56;"	d
core_dump_real	utils.cpp	/^void core_dump_real(const char *who, int line) {$/;"	f
corrosive_damage	mods/weapons/elemental.cpp	/^	void corrosive_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
corrosive_damage_percent	mods/rifle-attachments.hpp	/^			int16_t corrosive_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
corrosive_resistance_percent	mods/player.cpp	/^	int16_t& player::corrosive_resistance_percent() {$/;"	f	class:mods::player
cost	structs.h	/^	int	cost;		\/* Value when sold (gp.)            *\/$/;"	m	struct:obj_flag_data
cost_per_day	structs.h	/^	int	cost_per_day;	\/* Cost to keep pr. real day        *\/$/;"	m	struct:obj_flag_data
count	db.h	/^	int32_t count;$/;"	m	struct:reset_com
count	mods/pq.cpp	/^	int count(std::string_view query) {$/;"	f	namespace:mods::pq
count_alias_records	db.cpp	/^int count_alias_records(FILE *fl) {$/;"	f
count_contracts	mods/unit-tests/contracts.cpp	/^int count_contracts() {$/;"	f
count_gathering	mods/sensor-grenade.cpp	/^	static count_gathering_t count_gathering;$/;"	m	namespace:mods::sensor_grenade	file:
count_hash_records	db.cpp	/^int count_hash_records(FILE *fl) {$/;"	f
count_pages	modify.cpp	/^int count_pages(char *str) {$/;"	f
cpp_extern	sysdep.h	400;"	d
cpp_extern	sysdep.h	402;"	d
crash_file_timeout	config.cpp	/^int crash_file_timeout = 10;$/;"	v
crawl_blast_radius	mods/sensor-grenade.cpp	/^	void crawl_blast_radius($/;"	f	namespace:mods::sensor_grenade
crawl_lambda	mods/overhead_map.cpp	/^	void crawl_lambda($/;"	f	namespace:mods::overhead_map
create	mods/behaviour_tree_node.hpp	/^			static child_node_t create(callback_t& c,node_type_t n_type) {$/;"	f	struct:mods::behaviour_tree_node
create	mods/behaviour_tree_node.hpp	/^			static child_node_t create(callback_t& c,node_type_t n_type,children_t& ch) {$/;"	f	struct:mods::behaviour_tree_node
create	mods/behaviour_tree_node.hpp	/^			static child_node_t create(node_type_t n_type) {$/;"	f	struct:mods::behaviour_tree_node
create	mods/drone.cpp	/^		player_ptr_t create(uuid_t owner_uuid) {$/;"	f	namespace:mods::drone
create	mods/events.cpp	/^			void create(uuid_t uuid){$/;"	f	namespace:mods::events::publish::objects
create	mods/events.cpp	/^			void create(uuid_t uuid){$/;"	f	namespace:mods::events::publish::players
create	mods/lmdb/db.hpp	/^			int create(gsl::not_null<const char*> file,gsl::not_null<const char*> dbi_name,int flags,int permissions,bool b_create,unsigned int max_dbs){$/;"	f	struct:gdns::lmdb::db
create	mods/mobs/lowly-security.cpp	/^	void lowly_security::create(uuid_t mob_uuid, std::string variation) {$/;"	f	class:mods::mobs::lowly_security
create	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::create(uuid_t mob_uuid,std::string variation) {$/;"	f	class:mods::mobs::mini_gunner
create	mods/orm/orm-base.hpp	/^		static inline std::tuple<int16_t,std::string,uint64_t> create(TClass* c) {$/;"	f	struct:mods::orm::orm_base
create	mods/pq.hpp	/^	static inline std::tuple<int16_t,std::string,uint64_t> create(TClass* c) {$/;"	f	struct:orm_base
create	mods/sql.hpp	/^			compositor<T>& create() {$/;"	f	struct:mods::sql::compositor
create_breacher	mods/classes/breacher.cpp	/^		std::shared_ptr<breacher> create_breacher(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_builder	mods/unit-tests/mob-roam.cpp	/^player_ptr_t create_builder() {$/;"	f
create_char_from_registration	mods/chargen.cpp	/^	int create_char_from_registration(player_ptr_t& p,std::string argument){$/;"	f	namespace:mods::chargen
create_contagion	mods/classes/contagion.cpp	/^	std::shared_ptr<contagion> create_contagion(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_direction	mods/builder.cpp	/^	bool create_direction(room_rnum room_id,byte direction,room_rnum to_room) {$/;"	f	namespace:mods::builder
create_engineer	mods/classes/engineer.cpp	/^	std::shared_ptr<engineer> create_engineer(player_ptr_t& in_player) {$/;"	f	namespace:mods::classes
create_forge	mods/classes/forge.cpp	/^	std::shared_ptr<forge> create_forge(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_game	mods/orm/mini-game.hpp	/^		auto create_game(mods::mini_games::mini_game_payload_t game){$/;"	f	struct:mods::orm::mini_game
create_ghost	mods/classes/ghost.cpp	/^	std::shared_ptr<ghost> create_ghost(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_leaf	mods/behaviour_tree_node.hpp	/^			static child_node_t create_leaf(callback_t c) {$/;"	f	struct:mods::behaviour_tree_node
create_marine	mods/classes/marine.cpp	/^	std::shared_ptr<marine> create_marine(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_medic	mods/classes/medic.cpp	/^	std::shared_ptr<medic> create_medic(player_ptr_t& in_player) {$/;"	f	namespace:mods::classes
create_money	handler.cpp	/^obj_ptr_t create_money(int amount) {$/;"	f
create_muted_player_target	mods/player-scaffolding.cpp	/^	player_ptr_t player_scaffolding::create_muted_player_target() {$/;"	f	class:mods::player_scaffolding
create_new_context	mods/js.cpp	/^		void create_new_context() {$/;"	f	namespace:mods::js
create_object	db.cpp	/^obj_ptr_t create_object(int type,std::string yaml_file) {$/;"	f
create_object_from_index	db.cpp	/^obj_ptr_t create_object_from_index(std::size_t proto_index) {$/;"	f
create_object_opt	db.cpp	/^std::tuple<bool,obj_ptr_t> create_object_opt(int type,std::string yaml_file) {$/;"	f
create_pkid_object	mods/util.cpp	/^	obj_ptr_t create_pkid_object(std::string_view in_schema) {$/;"	f	namespace:mods::util
create_player	mods/player-scaffolding.cpp	/^	player_ptr_t player_scaffolding::create_player() {$/;"	f	class:mods::player_scaffolding
create_psyop	mods/classes/psyop.cpp	/^	std::shared_ptr<psyop> create_psyop(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_pyrexia	mods/classes/pyrexia.cpp	/^		std::shared_ptr<pyrexia> create_pyrexia(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_selector	mods/behaviour_tree_node.hpp	/^			static child_node_t create_selector(const children_t& ch) {$/;"	f	struct:mods::behaviour_tree_node
create_sentinel	mods/classes/sentinel.cpp	/^		std::shared_ptr<sentinel> create_sentinel(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_sequence	mods/behaviour_tree_node.hpp	/^			static child_node_t create_sequence(const children_t& ch) {$/;"	f	struct:mods::behaviour_tree_node
create_shop_from_index	db.cpp	/^shop_ptr_t create_shop_from_index(std::size_t proto_index) {$/;"	f
create_sniper	mods/classes/sniper.cpp	/^	std::shared_ptr<sniper> create_sniper(player_ptr_t& in_player) {$/;"	f	namespace:mods::classes
create_step	mods/builder/conbuild.cpp	/^		std::shared_ptr<mods::orm::contract_steps> create_step(conbuild_vnum_t vnum) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
create_support	mods/classes/support.cpp	/^	std::shared_ptr<support> create_support(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_syndrome	mods/classes/syndrome.cpp	/^		std::shared_ptr<syndrome> create_syndrome(player_ptr_t &in_player){$/;"	f	namespace:mods::classes
create_wall_of_fire	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::create_wall_of_fire(uint8_t direction){$/;"	f	class:mods::classes::pyrexia
create_wall_of_fire	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::create_wall_of_fire(uint8_t direction){$/;"	f	class:mods::orm::pyrexia
created_at	mods/classes/forge.hpp	/^		long created_at;$/;"	m	struct:mods::classes::forge
created_at	mods/classes/ghost.hpp	/^		long created_at;$/;"	m	struct:mods::classes::ghost
created_at	mods/intent.hpp	/^		uint64_t						created_at;$/;"	m	struct:mods::intent::intent_t
created_at	mods/orm/breacher.hpp	/^		long created_at;$/;"	m	struct:mods::orm::breacher
created_at	mods/orm/camera-feed.hpp	/^		long created_at;$/;"	m	struct:mods::orm::camera_feed
created_at	mods/orm/contract-steps.hpp	/^		long created_at;$/;"	m	struct:mods::orm::contract_steps
created_at	mods/orm/contract-steps.hpp	/^		long created_at;$/;"	m	struct:mods::orm::contract_steps_record_t
created_at	mods/orm/contracts.hpp	/^		long created_at;$/;"	m	struct:mods::orm::contracts
created_at	mods/orm/door-event.hpp	/^		long created_at;$/;"	m	struct:mods::orm::door_event
created_at	mods/orm/elevator.hpp	/^		long created_at;$/;"	m	struct:mods::orm::elevator
created_at	mods/orm/engineer.hpp	/^		long created_at;$/;"	m	struct:mods::orm::engineer
created_at	mods/orm/forge.hpp	/^		long created_at;$/;"	m	struct:mods::orm::forge
created_at	mods/orm/ghost.hpp	/^		long created_at;$/;"	m	struct:mods::orm::ghost
created_at	mods/orm/hq.hpp	/^		long created_at;$/;"	m	struct:mods::orm::hq
created_at	mods/orm/integral-object.hpp	/^		long created_at;$/;"	m	struct:mods::orm::integral_object
created_at	mods/orm/marine.hpp	/^		long created_at;$/;"	m	struct:mods::orm::marine
created_at	mods/orm/medic.hpp	/^		long created_at;$/;"	m	struct:mods::orm::medic
created_at	mods/orm/mini-game.hpp	/^		long created_at;$/;"	m	struct:mods::orm::mini_game
created_at	mods/orm/mob-equipment-map.hpp	/^		long created_at;$/;"	m	struct:mods::orm::mob_equipment_map
created_at	mods/orm/mob-equipment.hpp	/^		long created_at;$/;"	m	struct:mods::orm::mob_equipment
created_at	mods/orm/orm-base.hpp	/^		long created_at;$/;"	m	struct:mods::orm::orm_base
created_at	mods/orm/player-base-ability.hpp	/^		long created_at;$/;"	m	struct:mods::orm::player_base_ability
created_at	mods/orm/player-contract-state.hpp	/^		long created_at;$/;"	m	struct:mods::orm::player_contract_state
created_at	mods/orm/pyrexia.hpp	/^		long created_at;$/;"	m	struct:mods::orm::pyrexia
created_at	mods/orm/rifle-attachment.hpp	/^		long created_at;$/;"	m	struct:mods::orm::rifle_attachment
created_at	mods/orm/rifle-instance.hpp	/^		long created_at;$/;"	m	struct:mods::orm::rifle_instance
created_at	mods/orm/sniper.hpp	/^		long created_at;$/;"	m	struct:mods::orm::sniper
created_at	mods/orm/striker.hpp	/^		long created_at;$/;"	m	struct:mods::orm::striker
created_at	mods/orm/support.hpp	/^		long created_at;$/;"	m	struct:mods::orm::support
created_at	mods/orm/syndrome.hpp	/^		long created_at;$/;"	m	struct:mods::orm::syndrome
created_at	mods/pq.hpp	/^	long created_at;$/;"	m	struct:orm_base
credits	db.cpp	/^char *credits = NULL;		\/* game credits			 *\/$/;"	v
crit	mods/values.hpp	/^			static inline void crit(T& p){$/;"	f	namespace:mods::values::msg
critical	mods/projectile.cpp	/^			int critical;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
critical_chance	mods/weapon.hpp	/^			float critical_chance;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
critical_range	mods/weapon.hpp	/^			int critical_range;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
cron	mods/cron.hpp	/^			cron(uint64_t tick_resolution) : m_tres(tick_resolution) {$/;"	f	class:mods::cron
cron	mods/cron.hpp	/^	class cron {$/;"	c	namespace:mods
cryogenic_damage	mods/weapons/elemental.cpp	/^	void cryogenic_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
cryogenic_damage_percent	mods/rifle-attachments.hpp	/^			int16_t cryogenic_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
cryogenic_grenade_count	mods/classes/ghost.cpp	/^	uint8_t ghost::cryogenic_grenade_count() const {$/;"	f	class:mods::classes::ghost
cryogenic_resistance_percent	mods/player.cpp	/^	int16_t& player::cryogenic_resistance_percent() {$/;"	f	class:mods::player
cryogenicist	objsave.cpp	/^SPECIAL(cryogenicist);$/;"	v
cryogenicist	spec_assign.cpp	/^SPECIAL(cryogenicist);$/;"	v
crypto	mods/crypto.cpp	/^namespace mods::crypto {$/;"	n	class:mods	file:
crypto	mods/crypto.hpp	/^namespace mods::crypto {$/;"	n	class:mods
cstr	globals.hpp	89;"	d
csv_export_report	mods/levels.cpp	/^	int csv_export_report() {$/;"	f	namespace:mods::levels
ctypes	act.informative.cpp	/^const char *ctypes[] = {$/;"	v
cure_levels_t	mods/classes/sentinel.hpp	/^		enum cure_levels_t {$/;"	g	struct:mods::classes::sentinel
current_block	mods/player.cpp	/^	uint32_t player::current_block() {$/;"	f	class:mods::player
current_contract	mods/contracts.cpp	/^	std::string current_contract(player_ptr_t& player) {$/;"	f	namespace:mods::contracts
current_contract_key	mods/contracts.cpp	/^	std::string current_contract_key(player_ptr_t& player) {$/;"	f	namespace:mods::contracts
current_contract_value	mods/contracts.cpp	/^	std::string current_contract_value(room_vnum room,int t_index) {$/;"	f	namespace:mods::contracts
current_player	globals.cpp	/^		player_ptr_t current_player;$/;"	m	namespace:mods::globals	file:
current_room_number	mods/builder-data.hpp	/^	room_vnum current_room_number;$/;"	m	struct:room_pavement_t
current_row	mods/mini-games/wires.hpp	/^		uint8_t current_row;$/;"	m	struct:mods::mini_games::wires
current_tick	globals.hpp	/^static inline uint64_t current_tick() {$/;"	f
current_value_map	mods/values.cpp	/^		std::map<value_key_t,variants_t> current_value_map;$/;"	m	namespace:mods::values	file:
current_working_dir	mods/js.cpp	/^		std::string current_working_dir() {$/;"	f	namespace:mods::js
current_working_dir	mods/yaml.hpp	/^	static inline std::string current_working_dir() {$/;"	f	namespace:mods::yaml
currently_hacking	mods/player.cpp	/^	std::tuple<uint32_t,uint8_t> player::currently_hacking() {$/;"	f	class:mods::player
currently_paving	mods/builder.cpp	/^	bool currently_paving(player_ptr_t& player) {$/;"	f	namespace:mods::builder
custom_cmd_info_list	mods/interpreter.cpp	/^	std::deque<command_info>& custom_cmd_info_list(){$/;"	f	namespace:mods::interpreter
custom_color_eval	globals.cpp	/^		std::string custom_color_eval(std::string_view buffer,std::map<std::string_view,std::string_view> custom_color_map) {$/;"	f	namespace:mods::globals
custom_who_lines	mods/interpreter.cpp	/^	static std::map<std::string,std::string> custom_who_lines;$/;"	m	namespace:mods::interpreter	file:
custom_who_lines	mods/super-users.cpp	/^	static std::map<std::string,std::string> custom_who_lines;$/;"	m	namespace:mods::super_users	file:
customer_string	shop.cpp	/^char *customer_string(int shop_nr, int detailed) {$/;"	f
czp10	mods/weapons/pistol-czp10.hpp	/^		struct czp10 {$/;"	s	namespace:mods::weapons::pistol
d	globals.hpp	53;"	d
d	globals.hpp	56;"	d
d	structs.h	47;"	d
d	structs.h	50;"	d
dam_message	fight.cpp	/^void dam_message(int dam, char_data *ch, char_data *victim,$/;"	f
damage	fight.cpp	/^int damage(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f
damage	mods/damage-event.hpp	/^	int damage;$/;"	m	struct:feedback_t
damage	mods/projectile.cpp	/^			int damage;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
damage	mods/weapon-types.hpp	/^		weapon_damage_t damage;$/;"	m	struct:mods::weapon::weapon_type_statistics_t
damage	mods/weapons/damage-types.cpp	/^		int damage(char_data *attacker, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
damage	mods/yaml.hpp	/^		int damage;$/;"	m	struct:mods::yaml::drone_description_t
damage	mods/yaml.hpp	/^		int damage;$/;"	m	struct:mods::yaml::explosive_description_t
damage_calculator	mods/weapons/damage-calculator.cpp	/^namespace mods::weapons::damage_calculator {$/;"	n	class:mods::weapons	file:
damage_calculator	mods/weapons/damage-calculator.hpp	/^namespace mods::weapons::damage_calculator {$/;"	n	class:mods::weapons
damage_event	mods/damage-event.hpp	/^	damage_event_t damage_event;$/;"	m	struct:feedback_t
damage_event	mods/player.cpp	/^	void player::damage_event(feedback_t feedback) {$/;"	f	class:mods::player
damage_info	mods/damage-event.hpp	/^	std::vector<std::tuple<uuid_t,int,uint32_t>> damage_info;$/;"	m	struct:feedback_t
damage_map	mods/weapon.hpp	/^			std::array<float,MAX_ROOM_DISTANCE> damage_map;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
damage_map	mods/yaml.hpp	/^		std::array<float,MAX_ROOM_DISTANCE> damage_map;	\/** Percent per room *\/$/;"	m	struct:mods::yaml::melee_description_t
damage_map	mods/yaml.hpp	/^		std::array<float,MAX_ROOM_DISTANCE> damage_map;	\/** Percent per room *\/$/;"	m	struct:mods::yaml::rifle_description_t
damage_per_second	mods/weapon.hpp	/^			int damage_per_second;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
damage_percent_bonus	mods/rifle-attachments.hpp	/^			int16_t damage_percent_bonus;			\/** honored [ 2021-04-13 ] *\/$/;"	m	struct:mods::rifle_attachments_t
damage_types	mods/init.hpp	/^INIT(mods::weapons::damage_types);$/;"	v
damage_types	mods/projectile.cpp	/^namespace mods::weapons::damage_types {$/;"	n	class:mods::weapons	file:
damage_types	mods/weapons/damage-types.cpp	/^namespace mods::weapons::damage_types {$/;"	n	class:mods::weapons	file:
damage_types	mods/weapons/damage-types.hpp	/^namespace mods::weapons::damage_types {$/;"	n	class:mods::weapons
damroll	mods/mobs/mob.hpp	/^			sbyte& damroll() {$/;"	f	class:mods::player
damroll	mods/player.hpp	/^			sbyte& damroll() {$/;"	f	struct:mods::player
data	shop.h	/^	int data[100];$/;"	m	struct:stack_data
data_block_type	mail.h	/^typedef struct data_block_type_d data_block_type;$/;"	t	typeref:struct:data_block_type_d
data_block_type_d	mail.h	/^struct data_block_type_d {$/;"	s
date	db.h	/^	time_t date;$/;"	m	struct:ban_list_element
date_time	mods/date-time.cpp	/^namespace mods::date_time {$/;"	n	class:mods	file:
date_time	mods/date-time.hpp	/^namespace mods::date_time {$/;"	n	class:mods
date_time	mods/init.hpp	/^INIT(mods::date_time);$/;"	v
date_time_string	mods/date-time.hpp	/^		static inline std::string date_time_string(){ return date_to_string(); }$/;"	f	namespace:mods::date_time::irl
date_to_string	mods/date-time.cpp	/^	std::string date_to_string() {$/;"	f	namespace:mods::date_time::irl
day	mods/date-time.cpp	/^	static uint8_t day;$/;"	m	namespace:mods::date_time	file:
db	db.h	/^namespace mods::db {$/;"	n	class:mods
db	globals.cpp	/^		std::unique_ptr<lmdb_db> db;$/;"	m	namespace:mods::globals	file:
db	mods/chargen.cpp	/^namespace db {$/;"	n	file:
db	mods/db.cpp	/^namespace mods::db {$/;"	n	class:mods	file:
db	mods/db.hpp	/^namespace mods::db{$/;"	n	class:mods
db	mods/lmdb/db.hpp	/^			db() : m_good(false) {} $/;"	f	struct:gdns::lmdb::db
db	mods/lmdb/db.hpp	/^			db(gsl::not_null<const char*> file, gsl::not_null<const char*> dbi_name,int flags,int permissions,bool b_create,unsigned int max_dbs =1){$/;"	f	struct:gdns::lmdb::db
db	mods/lmdb/db.hpp	/^		struct db { $/;"	s	namespace:gdns::lmdb
db	mods/schema.hpp	/^	static schema_list_t db = {$/;"	m	namespace:mods::schema
db_commit	mods/js.cpp	/^		static duk_ret_t db_commit(duk_context *ctx) {$/;"	f	namespace:mods::js
db_create	mods/mobs/mini-gunner.hpp	/^		static inline int db_create(mob_vnum mob_vnum,str_map_t values) {$/;"	f	namespace:mods::mobs::mg::orm
db_create	mods/pq.hpp	/^static inline int db_create(std::string_view table, str_map_t values) {$/;"	f
db_exists	mods/mobs/mini-gunner.hpp	/^		static inline bool db_exists(mob_vnum mob_vnum) {$/;"	f	namespace:mods::mobs::mg::orm
db_exists	mods/pq.hpp	/^static inline bool db_exists(std::string_view table, std::string_view primary_key,std::string_view field,std::string_view operator_type, std::string_view value) {$/;"	f
db_get	mods/js.cpp	/^		static duk_ret_t db_get(duk_context *ctx) {$/;"	f	namespace:mods::js
db_get	mods/lmdb.cpp	/^std::string db_get(std::string key){$/;"	f
db_get_all	mods/lmdb.cpp	/^mods::pq::result db_get_all(std::string table){$/;"	f
db_get_all_pluck	mods/lmdb.cpp	/^auto db_get_all_pluck(std::string table,const std::vector<std::string>& pluck){$/;"	f
db_get_by_meta	mods/lmdb.cpp	/^pqxx::result db_get_by_meta(std::string table, std::string col,const pqxx::result::reference & value){$/;"	f
db_get_by_meta	mods/lmdb.cpp	/^pqxx::result db_get_by_meta(std::string table, std::string col,const std::string & value){$/;"	f
db_get_by_meta_multi	mods/lmdb.hpp	/^pqxx::result db_get_by_meta_multi(std::string table, std::string col,const TIDListContainer& values){$/;"	f
db_geti	mods/js.cpp	/^		static duk_ret_t db_geti(duk_context *ctx) {$/;"	f	namespace:mods::js
db_has_been_booted	db.cpp	/^bool db_has_been_booted = false;$/;"	v
db_id	mods/orm/shop.cpp	/^	int64_t				shop::db_id() const { return shop_id; }$/;"	f	class:mods::orm::shop
db_id	mods/player.hpp	/^			aligned_int_t db_id() const {$/;"	f	struct:mods::player
db_id	mods/yaml.hpp	/^		uint64_t db_id() {$/;"	f	struct:mods::yaml::yaml_description_t
db_id	structs.h	/^		uint64_t db_id() {$/;"	f	struct:obj_data
db_id_to_uuid_map	globals.cpp	/^		std::map<uint64_t,uuid_t> db_id_to_uuid_map;$/;"	m	namespace:mods::globals	file:
db_key	mods/lmdb.cpp	/^std::string db_key(const std::vector<std::string> & parts){$/;"	f
db_load	mods/players/db-load.cpp	/^namespace mods::players::db_load {$/;"	n	class:mods::players	file:
db_load	mods/players/db-load.hpp	/^namespace mods::players::db_load {$/;"	n	class:mods::players
db_meta_array_values	mods/schema.hpp	/^	static schema_list_t db_meta_array_values = {$/;"	m	namespace:mods::schema
db_meta_values	mods/schema.hpp	/^	static schema_list_t db_meta_values = {$/;"	m	namespace:mods::schema
db_put	mods/lmdb.cpp	/^void db_put(std::string key,std::string value){$/;"	f
db_renew_txn	mods/js.cpp	/^		static duk_ret_t db_renew_txn(duk_context *ctx) {$/;"	f	namespace:mods::js
db_renew_txn	mods/lmdb.cpp	/^void db_renew_txn(){$/;"	f
db_report	mods/db-report.hpp	/^namespace mods::db_report {$/;"	n	class:mods
db_set	mods/js.cpp	/^		static duk_ret_t db_set(duk_context *ctx) {$/;"	f	namespace:mods::js
db_seti	mods/js.cpp	/^		static duk_ret_t db_seti(duk_context *ctx) {$/;"	f	namespace:mods::js
db_update	mods/mobs/mini-gunner.hpp	/^		static inline int db_update(mob_vnum mob_vnum,str_map_t values) {$/;"	f	namespace:mods::mobs::mg::orm
db_update	mods/pq.hpp	/^static inline int db_update(std::string_view table, str_map_t values,std::string_view field,std::string_view operator_type,std::string_view value) {$/;"	f
dbg	mods/acl/config-parser.hpp	20;"	d
dbg	mods/player.cpp	553;"	d	file:
dbg	mods/player.cpp	578;"	d	file:
dbg	mods/player.cpp	581;"	d	file:
dbg	mods/player.cpp	628;"	d	file:
dbg_blu	mods/acl/config-parser.hpp	25;"	d
dbg_grn	mods/acl/config-parser.hpp	24;"	d
dbg_print	mods/contract-events.cpp	6;"	d	file:
dbg_print	mods/contract-events.cpp	8;"	d	file:
dbg_print	mods/contract-tracking.cpp	6;"	d	file:
dbg_print	mods/contract-tracking.cpp	8;"	d	file:
dbg_print	mods/contracts.cpp	10;"	d	file:
dbg_print	mods/contracts.cpp	12;"	d	file:
dbg_print	mods/player-contract-instance.cpp	7;"	d	file:
dbg_print	mods/player-contract-instance.cpp	9;"	d	file:
dbg_red	mods/acl/config-parser.hpp	26;"	d
dbi	mods/lmdb/db.hpp	/^			MDB_dbi dbi; 	\/* this is just an unsigned int *\/$/;"	m	struct:gdns::lmdb::gdns_dbi
dbi	mods/lmdb/db.hpp	/^			std::unique_ptr<gdns_dbi> dbi;$/;"	m	struct:gdns::lmdb::db
dd	act.informative.cpp	554;"	d	file:
dd	act.informative.cpp	714;"	d	file:
deactivate_account	mods/player.cpp	/^	void player::deactivate_account() {$/;"	f	class:mods::player
deal_damage	mods/weapons/damage-types.cpp	/^		void deal_damage(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
deal_hp_damage	mods/weapons/damage-types.cpp	/^	void deal_hp_damage(player_ptr_t& player, uint16_t damage) {$/;"	f	namespace:mods::weapons::damage_types
death_cry	fight.cpp	/^void death_cry(char_data *ch) {$/;"	f
debug	mods/db.hpp	10;"	d
debug	mods/db.hpp	8;"	d
debug	mods/debug.cpp	/^namespace mods::debug {$/;"	n	class:mods	file:
debug	mods/debug.hpp	/^namespace mods::debug {$/;"	n	class:mods
debug	mods/lmdb/gethostbyname.cpp	/^void debug(const char* f){$/;"	f
debug_echo	mods/yaml.cpp	31;"	d	file:
debug_echo	mods/yaml.cpp	33;"	d	file:
debug_echo_tree_name	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto debug_echo_tree_name(str_t name) {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
debug_echo_tree_name	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto debug_echo_tree_name(str_t name) {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
debug_state	mods/debug.cpp	/^	std::unique_ptr<state> debug_state;$/;"	m	namespace:mods::debug	file:
decomposedExpression	mods/catch.hpp	/^		mutable DecomposedExpression const* decomposedExpression;$/;"	m	struct:Catch::AssertionResultData
decorate	mods/mob-equipment.cpp	/^	void decorate(const uuid_t& mob_uuid) {$/;"	f	namespace:mods::mob_equipment
decorate	mods/mobs/extended-types.cpp	/^	void decorate(uuid_t mob_id) {$/;"	f	namespace:mods::mobs
decorate_door_issues	mods/intent.cpp	/^	uint8_t decorate_door_issues(intent_t& i){$/;"	f	namespace:mods::intent
decrease_single_shot_ammo	mods/weapons/damage-types.cpp	/^	void decrease_single_shot_ammo(player_ptr_t& attacker,obj_ptr_t& weapon) {$/;"	f	namespace:mods::weapons::damage_types
decrease_spray_shot_ammo	mods/weapons/damage-types.cpp	/^	void decrease_spray_shot_ammo(player_ptr_t& attacker,obj_ptr_t& weapon) {$/;"	f	namespace:mods::weapons::damage_types
decrypt	mods/crypto.cpp	/^int decrypt(unsigned char *ciphertext, int ciphertext_len, unsigned char *key,$/;"	f	namespace:mods::crypto
decrypt_buffer	mods/crypto.cpp	/^	std::string decrypt_buffer(std::string_view in_ciphertext,std::string_view in_key,std::string in_iv,std::string buffer){$/;"	f	namespace:mods::crypto
deep_object_parser_t	mods/deep-object-parser.hpp	/^	struct deep_object_parser_t {$/;"	s	namespace:mods
deep_object_parser_test	mods/debug-pre-game.hpp	/^	void deep_object_parser_test() {$/;"	f	namespace:mods::debug::pre_game
default_colors	globals.cpp	/^		static const std::map<std::string_view,std::string_view> default_colors = {$/;"	m	namespace:mods::globals	file:
default_yaml_file	structs.cpp	/^static inline std::string default_yaml_file(const std::string& type) {$/;"	f	file:
defer_queue	globals.cpp	/^		std::unique_ptr<mods::deferred> defer_queue;$/;"	m	namespace:mods::globals	file:
deferred	mods/deferred.hpp	/^			deferred(uint64_t tick_resolution) : $/;"	f	class:mods::deferred
deferred	mods/deferred.hpp	/^	class deferred {$/;"	c	namespace:mods
definition	mods/sql.hpp	/^			compositor<T>& definition(const std::vector<std::string>& members) {$/;"	f	struct:mods::sql::compositor
del	mods/lmdb.cpp	/^	int _db_handle::del(std::string key){$/;"	f	class:mods::lmdb::_db_handle
del	mods/sql.hpp	/^			compositor<T>& del() {$/;"	f	struct:mods::sql::compositor
del_affected_by	mods/player.hpp	/^			std::vector<affected_type>& del_affected_by(const affected_type& af) {$/;"	f	struct:mods::player
del_affected_by	mods/player.hpp	/^			std::vector<affected_type>& del_affected_by(const std::size_t& idx) {$/;"	f	struct:mods::player
deleteAll	mods/catch.hpp	/^	inline void deleteAll(ContainerT& container) {$/;"	f	namespace:Catch
deleteAllValues	mods/catch.hpp	/^	inline void deleteAllValues(AssociativeContainerT& container) {$/;"	f	namespace:Catch
delete_aliases	alias.cpp	/^void delete_aliases(const char *charname) {$/;"	f
delete_by_armor_type	mods/orm/armor-index.cpp	/^	std::tuple<int16_t,std::string> armor_index::delete_by_armor_type(std::string_view armor_type_name) {$/;"	f	class:mods::orm::armor_index
delete_by_contract_vnum	mods/orm/contract-steps.cpp	/^	std::tuple<int16_t,std::string> contract_steps::delete_by_contract_vnum(const contract_vnum_t& in_contract_vnum) {$/;"	f	class:mods::orm::contract_steps
delete_by_contract_vnum	mods/orm/contracts.cpp	/^	std::tuple<int16_t,std::string> contracts::delete_by_contract_vnum(const contract_vnum_t& in_c_vnum) {$/;"	f	class:mods::orm::contracts
delete_by_id	mods/orm/player-contract-state.cpp	/^	std::tuple<int16_t,std::string> player_contract_state::delete_by_id(const uint64_t& row_id) {$/;"	f	class:mods::orm::player_contract_state
delete_by_level	mods/orm/skill-points.cpp	/^	std::tuple<int16_t,std::string> skill_points::delete_by_level(uint16_t level) {$/;"	f	class:mods::orm::skill_points
delete_by_mob_vnum	mods/orm/mob-roam.cpp	/^	std::tuple<int16_t,std::string> mob_roam::delete_by_mob_vnum(mob_vnum mob) {$/;"	f	class:mods::orm::mob_roam
delete_by_player	mods/orm/player-skill-points.cpp	/^	std::tuple<int16_t,std::string> player_skill_points::delete_by_player(const uint64_t& player_id) {$/;"	f	class:mods::orm::player_skill_points
delete_by_player	mods/orm/player-skill-usage.cpp	/^	std::tuple<int16_t,std::string> player_skill_usage::delete_by_player(const uint64_t& player_id) {$/;"	f	class:mods::orm::player_skill_usage
delete_by_player_class	mods/orm/skill-trees.cpp	/^	std::tuple<int16_t,std::string> skill_trees::delete_by_player_class(std::string_view player_class) {$/;"	f	class:mods::orm::skill_trees
delete_by_player_id	mods/orm/rifle-attachment.cpp	/^	std::tuple<int16_t,std::string> rifle_attachment::delete_by_player_id(const uint64_t& player_id) {$/;"	f	class:mods::orm::rifle_attachment
delete_by_player_id_contract_vnum	mods/orm/player-contract-state.cpp	/^	std::tuple<int16_t,std::string> player_contract_state::delete_by_player_id_contract_vnum(const uint64_t& player_id,const contract_vnum_t& c_vnum) {$/;"	f	class:mods::orm::player_contract_state
delete_by_profile_name	mods/orm/mob-roam.cpp	/^	std::tuple<int16_t,std::string> mob_roam::delete_by_profile_name(std::string_view profile) {$/;"	f	class:mods::orm::mob_roam
delete_by_rifle_type	mods/orm/rifle-index.cpp	/^	std::tuple<int16_t,std::string> rifle_index::delete_by_rifle_type(std::string_view rifle_type_name) {$/;"	f	class:mods::orm::rifle_index
delete_by_room_vnum	mods/builder/hqbuild.cpp	/^	bool delete_by_room_vnum(const room_vnum vnum) {$/;"	f	namespace:mods::builder::hqbuild
delete_by_vnum	mods/builder/conbuild.cpp	/^		bool delete_by_vnum(conbuild_vnum_t vnum) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
delete_by_vnum	mods/builder/conbuild.cpp	/^		bool delete_by_vnum(const uint64_t& vnum) {$/;"	f	namespace:mods::builder::conbuild::map
delete_by_vnum	mods/builder/meqbuild.cpp	/^		bool delete_by_vnum(const uint64_t& vnum) {$/;"	f	namespace:mods::builder::meqbuild::map
delete_by_vnum	mods/builder/meqbuild.cpp	/^		bool delete_by_vnum(meqbuild_vnum_t vnum) {$/;"	f	struct:mods::builder::meqbuild::meqbuild_interface
delete_char	mods/players/db-load.cpp	/^	int16_t delete_char(player_ptr_t& player) {$/;"	f	namespace:mods::players::db_load
delete_doubledollar	interpreter.cpp	/^char *delete_doubledollar(char *string) {$/;"	f
delete_foobar_profile	mods/orm/mob-roam.cpp	/^	void mob_roam::delete_foobar_profile() {$/;"	f	class:mods::orm::mob_roam
delete_from	mods/orm/base.hpp	/^		static inline std::tuple<int16_t,std::string> delete_from(TObject& obj) {$/;"	f	struct:mods::orm::base
delete_from	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> delete_from(TObject* obj) {$/;"	f	namespace:mods::orm::util
delete_from	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> delete_from(TObject& obj) {$/;"	f
delete_section_vector	mods/db.cpp	/^	int delete_section_vector(std::string_view section_name,std::string prefix) {$/;"	f	namespace:mods::db
delete_shop_objects	mods/orm/shop.cpp	/^	void delete_shop_objects(shop_vnum shop_vnum_id){$/;"	f	namespace:mods::orm
delete_shop_record	mods/orm/shop.cpp	/^	int16_t       shop::delete_shop_record(){$/;"	f	class:mods::orm::shop
delete_shop_rooms	mods/orm/shop.cpp	/^	void delete_shop_rooms(shop_vnum shop_vnum_id){$/;"	f	namespace:mods::orm
delete_where	mods/orm/base.hpp	/^		static inline std::tuple<int16_t,std::string> delete_where($/;"	f	struct:mods::orm::base
delete_where	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> delete_where($/;"	f	namespace:mods::orm::util
delete_where	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> delete_where($/;"	f
delete_zone	mods/builder.cpp	/^	bool delete_zone(int id) {$/;"	f	namespace:mods::builder
demolitions	act.demolitions.cpp	/^namespace demolitions {$/;"	n	file:
demolitions	mods/demolitions.cpp	/^namespace mods::demolitions {$/;"	n	class:mods	file:
demolitions	mods/demolitions.hpp	/^namespace mods::demolitions {$/;"	n	class:mods
demolitions	mods/init.hpp	/^INIT(demolitions);$/;"	v
demolitions	mods/player.hpp	/^			uint16_t& demolitions() {$/;"	f	struct:mods::player
deny_entry_levels_t	mods/classes/sentinel.hpp	/^		enum deny_entry_levels_t {$/;"	g	struct:mods::classes::sentinel
deploy_shrapnel_at	mods/projectile.cpp	/^		int deploy_shrapnel_at(player_ptr_t& victim, int dice_count,int dice_sides,int from_direction) {$/;"	f	namespace:mods::projectile
deregister_player	comm.cpp	/^void deregister_player(player_ptr_t player_obj) {$/;"	f
desc	mods/mobs/extended-types.hpp	/^	namespace desc {$/;"	n	namespace:mods::mobs
desc	mods/mobs/mob.hpp	/^			descriptor_data& desc(){ return *m_desc; }$/;"	f	class:mods::player
desc	mods/player.cpp	/^	descriptor_data& player::desc() {$/;"	f	class:mods::player
description	mods/aoe.hpp	/^	static inline std::string description(const types_t& type) {$/;"	f	namespace:mods::aoe
description	mods/builder.cpp	/^	bool description(room_rnum room_id,std::string_view str_description) {$/;"	f	namespace:mods::builder
description	mods/catch.hpp	/^		const char* description;$/;"	m	struct:Catch::NameAndDesc
description	mods/classes/pyrexia.hpp	/^				std::string description;$/;"	m	struct:mods::classes::pyrexia::skillset_info_t
description	mods/contract-steps.hpp	/^		std::string 		description;$/;"	m	namespace:mods::contracts
description	mods/contract-types.hpp	/^		std::string description;$/;"	m	struct:mods::contracts::contract
description	mods/extra_desc_data.hpp	/^		mods::string description;$/;"	m	struct:mods::extra_desc_data
description	mods/mobs/extended-types.cpp	/^	std::string description(extended_types_t type) {$/;"	f	namespace:mods::mobs::extended_types
description	mods/mobs/extended-types.cpp	/^	std::string description(std::string str) {$/;"	f	namespace:mods::mobs::extended_types
description	mods/orm/room.hpp	/^		std::string description;$/;"	m	struct:mods::orm::room
description	mods/player.hpp	/^			mods::string& description() {$/;"	f	struct:mods::player
description	mods/yaml.hpp	/^		std::string description;$/;"	m	struct:mods::yaml::yaml_description_t
description	shop.h	/^	mods::string description;$/;"	m	struct:shop_data
description	structs.h	/^		mods::string	description;           \/* Shown when entered                 *\/$/;"	v
description	structs.h	/^		mods::string description;		  \/* When in room                     *\/$/;"	m	struct:obj_data
description	structs.h	/^	mods::string description;             \/* What to see                      *\/$/;"	m	struct:extra_descr_data
description_strings	mods/mobs/extended-types.hpp	/^	static std::map<extended_types_t,std::string> description_strings = {$/;"	m	namespace:mods::mobs
desert_eagle	mods/weapon.cpp	/^	obj_data_ptr_t desert_eagle() {$/;"	f	namespace:mods::weapon
destroy	mods/classes/sentinel.cpp	/^		int16_t destroy(player_ptr_t& player){$/;"	f	namespace:mods::classes
destroy	mods/events.cpp	/^			void destroy(uuid_t uuid){$/;"	f	namespace:mods::events::publish::objects
destroy	mods/events.cpp	/^			void destroy(uuid_t uuid){$/;"	f	namespace:mods::events::publish::players
destroy	mods/lmdb/shm.hpp	/^int shm::destroy(){$/;"	f	class:gdns::shm
destroy	mods/orm/contract-steps.cpp	/^	void contract_steps::destroy() {$/;"	f	class:mods::orm::contract_steps
destroy	mods/orm/contracts.cpp	/^	void contracts::destroy() {$/;"	f	class:mods::orm::contracts
destroy	mods/orm/hq.cpp	/^	bool hq::destroy() {$/;"	f	class:mods::orm::hq
destroy	mods/orm/mob-equipment-map.cpp	/^	bool mob_equipment_map::destroy() {$/;"	f	class:mods::orm::mob_equipment_map
destroy	mods/orm/mob-equipment.cpp	/^	bool mob_equipment::destroy() {$/;"	f	class:mods::orm::mob_equipment
destroy_db	db.cpp	/^void destroy_db(void) {$/;"	f
destroy_direction	mods/builder.cpp	/^	bool destroy_direction(room_rnum room_id,int direction) {$/;"	f	namespace:mods::builder
destroy_door	mods/player-contract-instance.cpp	/^	void player_contract_instance::destroy_door(const room_rnum& room_id,const int8_t& direction) {$/;"	f	class:mods::contracts::player_contract_instance
destroy_item	mods/player-contract-instance.cpp	/^	void player_contract_instance::destroy_item(const uuid_t& item_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
destroy_player	comm.cpp	/^int destroy_player(player_ptr_t&& player) {$/;"	f
destroy_player	mods/players/destroy-player.cpp	/^	void destroy_player(uuid_t player_uuid){$/;"	f	namespace:mods::players::destroy_player
destroy_player	mods/players/destroy-player.cpp	/^namespace mods::players::destroy_player {$/;"	n	class:mods::players	file:
destroy_player	mods/players/destroy-player.hpp	/^namespace mods::players::destroy_player {$/;"	n	class:mods::players
destroy_player	mods/replenish.cpp	/^	void destroy_player(uuid_t player_uuid){$/;"	f	namespace:mods::replenish
destroy_shops	shop.cpp	/^void destroy_shops(void) {$/;"	f
destroy_socket	comm.cpp	/^void destroy_socket(socket_t sock_fd) {$/;"	f
destroy_status	mods/orm/contract-steps.hpp	/^		std::tuple<int16_t,std::string> destroy_status;$/;"	m	struct:mods::orm::contract_steps
destroy_status	mods/orm/contracts.hpp	/^		std::tuple<int16_t,std::string> destroy_status;$/;"	m	struct:mods::orm::contracts
destroyed	mods/orm/mob-equipment-map.hpp	/^		bool destroyed;$/;"	m	struct:mods::orm::mob_equipment_map
destroyed_pieces_of_armor	mods/armor/advanced-protection.cpp	/^	vec_t<uuid_t>& advanced_protection::destroyed_pieces_of_armor() {$/;"	f	class:mods::armor::advanced_protection
destroyed_pieces_of_armor	mods/armor/basic-protection.cpp	/^	vec_t<uuid_t>& basic_protection::destroyed_pieces_of_armor() {$/;"	f	class:mods::armor::basic_protection
destroyed_pieces_of_armor	mods/armor/elite-protection.cpp	/^	vec_t<uuid_t>& elite_protection::destroyed_pieces_of_armor() {$/;"	f	class:mods::armor::elite_protection
destruct_now	mods/camera.cpp	/^	void camera::destruct_now() {$/;"	f	class:mods::camera
destruct_object	globals.cpp	/^		void destruct_object(uuid_t uuid) {$/;"	f	namespace:mods::globals
detach	mods/lmdb/shm.hpp	/^int shm::detach(){$/;"	f	class:gdns::shm
detail	mods/util.hpp	/^	namespace detail {$/;"	n	namespace:mods::util
detect_size	mods/lmdb/shm.hpp	/^        inline size_t detect_size(){$/;"	f	class:gdns::shm
detect_size	mods/lmdb/shm.hpp	/^size_t shm::detect_size(const char* memory_id,int project_id){$/;"	f	class:gdns::shm
detexturize_room	mods/deferred.cpp	/^	void deferred::detexturize_room(uint64_t ticks_in_future,room_rnum room_id,room_data::texture_type_t texture){$/;"	f	class:mods::deferred
detexturize_room	mods/util.cpp	/^	void detexturize_room(room_rnum room_id, room_data::texture_type_t texture_type) {$/;"	f	namespace:mods::util
device_exists	mods/mini-games.cpp	/^	bool device_exists(room_vnum vnum,int device_id) {$/;"	f	namespace:mods::mini_games
device_id	mods/mini-games/line-up.cpp	/^	int line_up::device_id(){$/;"	f	class:mods::mini_games::line_up
device_id	mods/mini-games/wires.cpp	/^	int wires::device_id(){$/;"	f	class:mods::mini_games::wires
devices	mods/mini-games.cpp	/^	static std::map<room_vnum,std::deque<line_up>> devices;$/;"	m	namespace:mods::mini_games	file:
dex_app	constants.cpp	/^cpp_extern const struct dex_app_type dex_app[] = {$/;"	v	typeref:struct:dex_app_type
dex_app	constants.hpp	/^cpp_extern const struct dex_app_type dex_app[] = {$/;"	v	typeref:struct:dex_app_type
dex_app_skill	constants.cpp	/^cpp_extern const struct dex_skill_type dex_app_skill[] = {$/;"	v	typeref:struct:dex_skill_type
dex_app_skill	constants.hpp	/^cpp_extern const struct dex_skill_type dex_app_skill[] = {$/;"	v	typeref:struct:dex_skill_type
dexterity	mods/player.hpp	/^			uint16_t& dexterity() {$/;"	f	struct:mods::player
diag_char_to_char	act.informative.cpp	/^void diag_char_to_char(char_data *i, char_data *ch) {$/;"	f
dice	mods/rand.cpp	/^int dice(int num,int size){$/;"	f
die	fight.cpp	/^void die(char_data *ch) {$/;"	f
die	fight.cpp	/^void die(char_data* killer,char_data *victim) {$/;"	f
die_follower	utils.cpp	/^void die_follower(char_data *ch) {$/;"	f
dimensions_t	mods/builder/rectangle-layouts.hpp	/^	struct dimensions_t {$/;"	s	namespace:mods::builder::rectangle_layouts
dir	graph.cpp	/^	char dir;$/;"	m	struct:bfs_queue_struct	file:
dir	mods/util.hpp	/^		int dir;$/;"	m	struct:mods::util::objdir_struct
dir_exists	mods/util.cpp	/^	bool dir_exists(const char* dir) {$/;"	f	namespace:mods::util
dir_int	globals.cpp	/^		int dir_int(char dir) {$/;"	f	namespace:mods::globals
dir_option	mods/builder.cpp	/^	std::optional<std::string> dir_option(room_rnum room_id,int direction,std::optional<std::string_view> description,$/;"	f	namespace:mods::builder
dir_option	structs.h	/^		room_direction_data *dir_option[NUM_OF_DIRS]; \/* Directions *\/$/;"	v
dir_to_str	globals.cpp	/^		std::string dir_to_str(int dir, bool adjective) {$/;"	f	namespace:mods::globals
direction	mods/intent.hpp	/^		uint8_t 						direction;$/;"	m	struct:mods::intent::intent_t
direction	mods/scan.hpp	/^			int direction;$/;"	m	struct:mods::scan::find_results_t
direction	mods/scan.hpp	/^			uint8_t direction;$/;"	m	struct:mods::scan::__anon4
directional_dirstr	mods/doors.hpp	/^	static inline std::string directional_dirstr(const int& direction) {$/;"	f	namespace:mods::doors
directions	mods/scan.cpp	/^	int directions[] = { NORTH,EAST,SOUTH,WEST,UP,DOWN };$/;"	m	namespace:mods::scan	file:
directions	structs.cpp	/^const std::vector<uint8_t>& room_data::directions() const {$/;"	f	class:room_data
dirs	constants.cpp	/^const char *dirs[] = {$/;"	v
dirs	constants.hpp	/^const char *dirs[] =$/;"	v
dirstr	globals.cpp	/^std::string dirstr(int dir) {$/;"	f
dirstr	mods/doors.hpp	/^	static inline std::string dirstr(const int& direction) {$/;"	f	namespace:mods::doors
disable_all_zone_resets	mods/zone.cpp	/^	static bool disable_all_zone_resets = false;$/;"	m	namespace:mods::zone	file:
disable_electronics	mods/projectile.cpp	/^		void disable_electronics(room_rnum room) {$/;"	f	namespace:mods::projectile
disable_zone_resets	mods/builder.cpp	/^void disable_zone_resets() {$/;"	f
disable_zone_resets	mods/zone.cpp	/^	void disable_zone_resets(bool b) {$/;"	f	namespace:mods::zone
discrete_load	db.cpp	/^void discrete_load(FILE *fl, int mode, char *filename) {$/;"	f
disengage	mods/classes/sniper.cpp	/^	std::tuple<bool,std::string> sniper::disengage() {$/;"	f	class:mods::classes::sniper
disorient_amount	mods/rifle-attachments.hpp	/^			int16_t disorient_amount;$/;"	m	struct:mods::rifle_attachments_t
disorient_amount	mods/weapon.hpp	/^			int disorient_amount;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
disorient_clears_up	mods/projectile.cpp	/^		void disorient_clears_up(player_ptr_t victim) {$/;"	f	namespace:mods::projectile
disorient_person	mods/projectile.cpp	/^		void disorient_person(player_ptr_t victim) {$/;"	f	namespace:mods::projectile
disorient_target	mods/projectile.cpp	/^		void disorient_target(player_ptr_t player) {$/;"	f	namespace:mods::projectile
disorient_ticks	mods/weapons/damage-calculator.cpp	/^	int16_t disorient_ticks($/;"	f	namespace:mods::weapons::damage_calculator
dispatch	mods/ai_state.cpp	/^	uint32_t ai_state::dispatch(char_data* ch) {$/;"	f	class:mods::ai_state
dispatch	mods/behaviour_tree_impl.cpp	/^	int8_t dispatch(uuid_t mob_uuid) {$/;"	f	namespace:mods::behaviour_tree_impl
dispatch_event	mods/player.cpp	/^	void player::dispatch_event(feedback_t feedback) {$/;"	f	class:mods::player
dispatch_help	mods/builder/slotted-builder.hpp	/^			bool dispatch_help(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_help_message	mods/response-team/radio.cpp	/^	void dispatch_help_message(uuid_t mob_uuid,std::string_view message, severity_t severity) {$/;"	f	namespace:mods::response_team::radio
dispatch_list_extract_action	mods/builder/slotted-builder.hpp	/^			bool dispatch_list_extract_action(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_multi_vnum_action	mods/builder/slotted-builder.hpp	/^			bool dispatch_multi_vnum_action(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_new_command	mods/builder/conbuild.cpp	/^		status_response_t dispatch_new_command(const std::vector<std::string>& cmd_args,std::string argument) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
dispatch_new_command	mods/builder/meqbuild.cpp	/^		status_response_t dispatch_new_command(const std::vector<std::string>& cmd_args,std::string argument) {$/;"	f	struct:mods::builder::meqbuild::meqbuild_interface
dispatch_paginate_action	mods/builder/slotted-builder.hpp	/^			bool dispatch_paginate_action(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_ptr	mods/behaviour_tree_impl.cpp	/^	int8_t dispatch_ptr(argument_type& ch) {$/;"	f	namespace:mods::behaviour_tree_impl
dispatch_reload_all_action	mods/builder/slotted-builder.hpp	/^			bool dispatch_reload_all_action(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_remove_slot	mods/builder/slotted-builder.hpp	/^			bool dispatch_remove_slot(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_show_action	mods/builder/slotted-builder.hpp	/^			bool dispatch_show_action(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_slot	mods/builder/slotted-builder.hpp	/^			bool dispatch_slot(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
dispatch_status_t	mods/behaviour_tree_impl.hpp	/^	enum dispatch_status_t {$/;"	g	namespace:mods::behaviour_tree_impl
display_signatures	mods/builder/slotted-builder.hpp	/^			void display_signatures() {$/;"	f	struct:mods::builder::slotted_builder
display_slot_list	mods/builder/slotted-builder.hpp	/^			void display_slot_list() {$/;"	f	struct:mods::builder::slotted_builder
display_user_skills	mods/skills.cpp	/^void display_user_skills(player_ptr_t& player) {$/;"	f
dispose_breach	mods/doors.hpp	/^	static inline void dispose_breach(uuid_t obj_uuid) {$/;"	f	namespace:mods::doors
dispose_object	globals.cpp	/^		void dispose_object(uuid_t obj_uuid) {$/;"	f	namespace:mods::globals
dispose_player	globals.cpp	/^		void dispose_player(uuid_t pl_uuid) {$/;"	f	namespace:mods::globals
dissipate	mods/classes/ghost.cpp	/^	std::tuple<bool,std::string> ghost::dissipate(){$/;"	f	class:mods::classes::ghost
dissipate_usage	mods/classes/ghost.cpp	/^	static constexpr const char* dissipate_usage = "usage: dissipate";$/;"	m	namespace:mods::class_abilities::ghost	file:
dissipate_wears_off	mods/classes/ghost.cpp	/^	void ghost::dissipate_wears_off(){$/;"	f	class:mods::classes::ghost
dissolver	mods/affects.hpp	/^			dissolver() {$/;"	f	struct:mods::affects::dissolver
dissolver	mods/affects.hpp	/^			dissolver(TAffectsContainer affects) {$/;"	f	struct:mods::affects::dissolver
dissolver	mods/affects.hpp	/^			dissolver(TAffectsMap affects) {$/;"	f	struct:mods::affects::dissolver
dissolver	mods/affects.hpp	/^	struct dissolver {$/;"	s	namespace:mods::affects
dissolver_queue	globals.cpp	/^		std::set<player_ptr_t> dissolver_queue;$/;"	m	namespace:mods::globals	file:
distance	mods/scan.hpp	/^			uint16_t distance;$/;"	m	struct:mods::scan::__anon4
distance	mods/scan.hpp	/^			uint16_t distance;$/;"	m	struct:mods::scan::find_results_t
distance_cache	mods/scan.cpp	/^	static std::map<std::pair<room_rnum,room_rnum>,distance_t> distance_cache;$/;"	m	namespace:mods::scan	file:
distance_to	mods/scan.cpp	/^	std::tuple<bool,distance_t> distance_to(chptr player_hunter,chptr player_hunted) {$/;"	f	namespace:mods::scan
dm	mods/acl/config-parser.hpp	28;"	d
do_action	act.informative.cpp	/^ACMD(do_action);$/;"	v
do_action	act.social.cpp	/^ACMD(do_action);$/;"	v
do_action	interpreter.cpp	/^ACMD(do_action);$/;"	v
do_action	mobact.cpp	/^ACMD(do_action);$/;"	v
do_action	objsave.cpp	/^ACMD(do_action);$/;"	v
do_action	shop.cpp	/^ACMD(do_action);$/;"	v
do_action	spec_procs.cpp	/^ACMD(do_action);$/;"	v
do_add_super_user	mods/super-users.hpp	/^ACMD(do_add_super_user);$/;"	v
do_advance	act.wizard.cpp	/^SUPERCMD(do_advance);$/;"	v
do_advance	interpreter.cpp	/^ACMD(do_advance);$/;"	v
do_affect_me	interpreter.cpp	/^ACMD(do_affect_me);$/;"	v
do_alias	interpreter.cpp	/^ACMD(do_alias);$/;"	v
do_assist	interpreter.cpp	/^ACMD(do_assist);$/;"	v
do_at	act.wizard.cpp	/^SUPERCMD(do_at);$/;"	v
do_at	interpreter.cpp	/^ACMD(do_at);$/;"	v
do_auto_exits	act.informative.cpp	/^void do_auto_exits(char_data *ch) {$/;"	f
do_backstab	interpreter.cpp	/^ACMD(do_backstab);$/;"	v
do_ban	ban.cpp	/^SUPERCMD(do_ban);$/;"	v
do_ban	interpreter.cpp	/^ACMD(do_ban);$/;"	v
do_bash	interpreter.cpp	/^ACMD(do_bash);$/;"	v
do_breach	interpreter.cpp	/^ACMD(do_breach);$/;"	v
do_buy	interpreter.cpp	/^ACMD(do_buy);	\/** in shop.cpp *\/$/;"	v
do_cancel	interpreter.cpp	/^ACMD(do_cancel);$/;"	v
do_cast	interpreter.cpp	/^ACMD(do_cast);$/;"	v
do_cast	spell_parser.cpp	/^SUPERCMD(do_cast);$/;"	v
do_chanmgr	interpreter.cpp	/^ACMD(do_chanmgr);$/;"	v
do_clear_who_line	interpreter.cpp	/^ACMD(do_clear_who_line);$/;"	v
do_color	act.informative.cpp	/^ACMD(do_color);$/;"	v
do_color	interpreter.cpp	/^ACMD(do_color);$/;"	v
do_commands	act.informative.cpp	/^ACMD(do_commands);$/;"	v
do_commands	interpreter.cpp	/^ACMD(do_commands);$/;"	v
do_conceal	mods/classes/class-commands.hpp	/^ACMD(do_conceal); \/\/ apply_stealth_to_*$/;"	v
do_consider	act.informative.cpp	/^ACMD(do_consider);$/;"	v
do_consider	interpreter.cpp	/^ACMD(do_consider);$/;"	v
do_credits	interpreter.cpp	/^ACMD(do_credits);$/;"	v
do_critical_roll	mods/injure.cpp	/^	bool do_critical_roll(int chance) {$/;"	f	namespace:mods::injure
do_date	act.wizard.cpp	/^SUPERCMD(do_date);$/;"	v
do_date	interpreter.cpp	/^ACMD(do_date);$/;"	v
do_dc	act.wizard.cpp	/^SUPERCMD(do_dc);$/;"	v
do_dc	interpreter.cpp	/^ACMD(do_dc);$/;"	v
do_diagnose	act.informative.cpp	/^ACMD(do_diagnose);$/;"	v
do_diagnose	interpreter.cpp	/^ACMD(do_diagnose);$/;"	v
do_disable_registration	interpreter.cpp	/^ACMD(do_disable_registration);$/;"	v
do_display	act.other.cpp	/^ACMD(do_display);$/;"	v
do_display	interpreter.cpp	/^ACMD(do_display);$/;"	v
do_doorcmd	act.movement.cpp	/^void do_doorcmd(char_data *ch, struct obj_data *obj, int door, int scmd) {$/;"	f
do_drink	act.item.cpp	/^ACMD(do_drink);$/;"	v
do_drink	interpreter.cpp	/^ACMD(do_drink);$/;"	v
do_drone	act.informative.cpp	/^ACMD(do_drone);$/;"	v
do_drone	interpreter.cpp	/^ACMD(do_drone);$/;"	v
do_drop	act.item.cpp	/^ACMD(do_drop);$/;"	v
do_drop	interpreter.cpp	/^ACMD(do_drop);$/;"	v
do_drop	spec_procs.cpp	/^ACMD(do_drop);$/;"	v
do_eat	act.item.cpp	/^ACMD(do_eat);$/;"	v
do_eat	interpreter.cpp	/^ACMD(do_eat);$/;"	v
do_echo	act.wizard.cpp	/^SUPERCMD(do_echo);$/;"	v
do_echo	interpreter.cpp	/^ACMD(do_echo);$/;"	v
do_echo	shop.cpp	/^ACMD(do_echo);$/;"	v
do_enable_registration	interpreter.cpp	/^ACMD(do_enable_registration);$/;"	v
do_enter	act.movement.cpp	/^ACMD(do_enter);$/;"	v
do_enter	interpreter.cpp	/^ACMD(do_enter);$/;"	v
do_equipment	act.informative.cpp	/^ACMD(do_equipment);$/;"	v
do_equipment	interpreter.cpp	/^ACMD(do_equipment);$/;"	v
do_examine	act.informative.cpp	/^ACMD(do_examine);$/;"	v
do_examine	interpreter.cpp	/^ACMD(do_examine);$/;"	v
do_exit	interpreter.cpp	/^ACMD(do_exit);$/;"	v
do_exits	act.informative.cpp	/^ACMD(do_exits);$/;"	v
do_exits	interpreter.cpp	/^ACMD(do_exits);$/;"	v
do_feed_player	interpreter.cpp	/^ACMD(do_feed_player);$/;"	v
do_feign_death	mods/classes/class-commands.hpp	/^ACMD(do_feign_death);$/;"	v
do_flee	fight.cpp	/^ACMD(do_flee);$/;"	v
do_flee	interpreter.cpp	/^ACMD(do_flee);$/;"	v
do_flush_holding	interpreter.cpp	/^ACMD(do_flush_holding);$/;"	v
do_flush_player	interpreter.cpp	/^ACMD(do_flush_player);$/;"	v
do_follow	act.movement.cpp	/^ACMD(do_follow);$/;"	v
do_follow	castle.cpp	/^ACMD(do_follow);$/;"	v
do_follow	interpreter.cpp	/^ACMD(do_follow);$/;"	v
do_force	act.wizard.cpp	/^SUPERCMD(do_force);$/;"	v
do_force	interpreter.cpp	/^ACMD(do_force);$/;"	v
do_gecho	act.wizard.cpp	/^SUPERCMD(do_gecho);$/;"	v
do_gecho	interpreter.cpp	/^ACMD(do_gecho);$/;"	v
do_gen_comm	act.comm.cpp	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	act.other.cpp	/^ACMD(do_gen_comm);$/;"	v
do_gen_comm	interpreter.cpp	/^ACMD(do_gen_comm);$/;"	v
do_gen_door	act.movement.cpp	/^ACMD(do_gen_door);$/;"	v
do_gen_door	castle.cpp	/^ACMD(do_gen_door);$/;"	v
do_gen_door	interpreter.cpp	/^ACMD(do_gen_door);$/;"	v
do_gen_door	mods/intent.cpp	/^ACMD(do_gen_door);$/;"	v
do_gen_door	spec_procs.cpp	/^ACMD(do_gen_door);$/;"	v
do_gen_ps	act.informative.cpp	/^ACMD(do_gen_ps);$/;"	v
do_gen_ps	interpreter.cpp	/^ACMD(do_gen_ps);$/;"	v
do_gen_tog	act.other.cpp	/^ACMD(do_gen_tog);$/;"	v
do_gen_tog	interpreter.cpp	/^ACMD(do_gen_tog);$/;"	v
do_gen_write	act.other.cpp	/^ACMD(do_gen_write);$/;"	v
do_gen_write	interpreter.cpp	/^ACMD(do_gen_write);$/;"	v
do_get	act.item.cpp	/^ACMD(do_get);$/;"	v
do_get	interpreter.cpp	/^ACMD(do_get);$/;"	v
do_get	mobact.cpp	/^ACMD(do_get);$/;"	v
do_get_super_user_list	mods/super-users.hpp	/^ACMD(do_get_super_user_list);$/;"	v
do_get_ticks_per_minute	interpreter.cpp	/^ACMD(do_get_ticks_per_minute);$/;"	v
do_give	act.item.cpp	/^ACMD(do_give);$/;"	v
do_give	interpreter.cpp	/^ACMD(do_give);$/;"	v
do_giveme_camera	interpreter.cpp	/^ACMD(do_giveme_camera);$/;"	v
do_giveme_emp_grenades	interpreter.cpp	/^ACMD(do_giveme_emp_grenades);$/;"	v
do_giveme_flashbang_grenades	interpreter.cpp	/^ACMD(do_giveme_flashbang_grenades);$/;"	v
do_giveme_frag_grenades	interpreter.cpp	/^ACMD(do_giveme_frag_grenades);$/;"	v
do_giveme_incendiary_grenades	interpreter.cpp	/^ACMD(do_giveme_incendiary_grenades);$/;"	v
do_giveme_night_vision_camera	interpreter.cpp	/^ACMD(do_giveme_night_vision_camera);$/;"	v
do_giveme_sensor_grenades	interpreter.cpp	/^ACMD(do_giveme_sensor_grenades);$/;"	v
do_giveme_smoke_grenades	interpreter.cpp	/^ACMD(do_giveme_smoke_grenades);$/;"	v
do_giveme_sniper_rifle	interpreter.cpp	/^ACMD(do_giveme_sniper_rifle);$/;"	v
do_giveme_thermal_camera	interpreter.cpp	/^ACMD(do_giveme_thermal_camera);$/;"	v
do_givemegold	act.informative.cpp	/^ACMD(do_givemegold);$/;"	v
do_givemegold	interpreter.cpp	/^ACMD(do_givemegold);$/;"	v
do_givemenades	act.debug.hpp	/^ACMD(do_givemenades);$/;"	v
do_givemenades	interpreter.cpp	/^ACMD(do_givemenades);$/;"	v
do_go_dark	mods/classes/class-commands.hpp	/^ACMD(do_go_dark); \/\/ calls go_stealth$/;"	v
do_go_invisible	interpreter.cpp	/^ACMD(do_go_invisible);$/;"	v
do_go_visible	interpreter.cpp	/^ACMD(do_go_visible);$/;"	v
do_gold	act.informative.cpp	/^ACMD(do_gold);$/;"	v
do_gold	interpreter.cpp	/^ACMD(do_gold);$/;"	v
do_goto	act.wizard.cpp	/^SUPERCMD(do_goto);$/;"	v
do_goto	interpreter.cpp	/^ACMD(do_goto);$/;"	v
do_grab	act.item.cpp	/^ACMD(do_grab);$/;"	v
do_grab	interpreter.cpp	/^ACMD(do_grab);$/;"	v
do_group	act.other.cpp	/^ACMD(do_group);$/;"	v
do_group	interpreter.cpp	/^ACMD(do_group);$/;"	v
do_gsay	act.comm.cpp	/^ACMD(do_gsay);$/;"	v
do_gsay	interpreter.cpp	/^ACMD(do_gsay);$/;"	v
do_hack	mods/mini-games.hpp	/^ACMD(do_hack);$/;"	v
do_hcontrol	house.cpp	/^ACMD(do_hcontrol);$/;"	v
do_hcontrol	interpreter.cpp	/^ACMD(do_hcontrol);$/;"	v
do_heal	interpreter.cpp	/^ACMD(do_heal);$/;"	v
do_help	act.informative.cpp	/^ACMD(do_help);$/;"	v
do_help_throw	interpreter.cpp	/^ACMD(do_help_throw);$/;"	v
do_hide	act.other.cpp	/^ACMD(do_hide);$/;"	v
do_hide	interpreter.cpp	/^ACMD(do_hide);$/;"	v
do_histfile	interpreter.cpp	/^ACMD(do_histfile);$/;"	v
do_hit	interpreter.cpp	/^ACMD(do_hit);$/;"	v
do_hold_anything	interpreter.cpp	/^ACMD(do_hold_anything);$/;"	v
do_house	house.cpp	/^ACMD(do_house);$/;"	v
do_house	interpreter.cpp	/^ACMD(do_house);$/;"	v
do_idle	interpreter.cpp	/^ACMD(do_idle);$/;"	v
do_injure_roll	mods/injure.cpp	/^	bool do_injure_roll(uint8_t chance) {$/;"	f	namespace:mods::injure
do_install	interpreter.cpp	/^ACMD(do_install);$/;"	v
do_install_minigame	mods/mini-games.hpp	/^ACMD(do_install_minigame);$/;"	v
do_install_weapon_locker	interpreter.cpp	/^ACMD(do_install_weapon_locker);$/;"	v
do_insult	act.informative.cpp	/^ACMD(do_insult);$/;"	v
do_insult	act.social.cpp	/^ACMD(do_insult);$/;"	v
do_insult	interpreter.cpp	/^ACMD(do_insult);$/;"	v
do_inventory	act.informative.cpp	/^ACMD(do_inventory);$/;"	v
do_inventory	interpreter.cpp	/^ACMD(do_inventory);$/;"	v
do_invis	act.wizard.cpp	/^SUPERCMD(do_invis);$/;"	v
do_invis	interpreter.cpp	/^ACMD(do_invis);$/;"	v
do_js	act.informative.cpp	/^ACMD(do_js);$/;"	v
do_js	interpreter.cpp	/^ACMD(do_js);$/;"	v
do_js_help	interpreter.cpp	/^SUPERCMD(do_js_help);$/;"	v
do_jstest	interpreter.cpp	/^ACMD(do_jstest);$/;"	v
do_kick	interpreter.cpp	/^ACMD(do_kick);$/;"	v
do_kill	interpreter.cpp	/^ACMD(do_kill);$/;"	v
do_kill_now	interpreter.cpp	/^ACMD(do_kill_now);$/;"	v
do_last	act.wizard.cpp	/^SUPERCMD(do_last);$/;"	v
do_last	interpreter.cpp	/^ACMD(do_last);$/;"	v
do_leave	act.movement.cpp	/^ACMD(do_leave);$/;"	v
do_leave	interpreter.cpp	/^ACMD(do_leave);$/;"	v
do_levels	act.informative.cpp	/^ACMD(do_levels);$/;"	v
do_levels	interpreter.cpp	/^ACMD(do_levels);$/;"	v
do_list	interpreter.cpp	/^ACMD(do_list);	\/** in shop.cpp *\/$/;"	v
do_list_minigame	mods/mini-games.hpp	/^ACMD(do_list_minigame);$/;"	v
do_load	act.wizard.cpp	/^SUPERCMD(do_load);$/;"	v
do_load	interpreter.cpp	/^ACMD(do_load);$/;"	v
do_look	act.informative.cpp	/^ACMD(do_look);$/;"	v
do_look	interpreter.cpp	/^ACMD(do_look);$/;"	v
do_mbuild	interpreter.cpp	/^ACMD(do_mbuild);$/;"	v
do_move	interpreter.h	/^ACMD(do_move);$/;"	v
do_my_uuid	interpreter.cpp	/^ACMD(do_my_uuid);$/;"	v
do_newjs	interpreter.cpp	/^ACMD(do_newjs);$/;"	v
do_next_mob_number	interpreter.cpp	/^ACMD(do_next_mob_number);$/;"	v
do_next_object_number	interpreter.cpp	/^ACMD(do_next_object_number);$/;"	v
do_next_room_number	interpreter.cpp	/^ACMD(do_next_room_number);$/;"	v
do_next_row	interpreter.cpp	/^ACMD(do_next_row);$/;"	v
do_next_row	mods/mini-games.hpp	/^ACMD(do_next_row);$/;"	v
do_not_buy	shop.h	/^	mods::string do_not_buy;		\/* If keeper dosn't buy such things	*\/$/;"	m	struct:shop_data
do_not_here	act.other.cpp	/^ACMD(do_not_here);$/;"	v
do_not_here	interpreter.cpp	/^ACMD(do_not_here);$/;"	v
do_npc_rescue	castle.cpp	/^int do_npc_rescue( char_data *ch,  char_data *ch_victim) {$/;"	f
do_obuild	interpreter.cpp	/^ACMD(do_obuild);$/;"	v
do_olc	interpreter.cpp	/^ACMD(do_olc);$/;"	v
do_olc	olc.cpp	/^SUPERCMD(do_olc);$/;"	v
do_one_punch	interpreter.cpp	/^ACMD(do_one_punch);$/;"	v
do_order	interpreter.cpp	/^ACMD(do_order);$/;"	v
do_page	act.comm.cpp	/^ACMD(do_page);$/;"	v
do_place_object	mods/builder/object-placement.hpp	/^SUPERCMD(do_place_object);$/;"	v
do_plug_cable	mods/mini-games.hpp	/^ACMD(do_plug_cable);$/;"	v
do_pmw_obj_from_room	interpreter.cpp	/^ACMD(do_pmw_obj_from_room);$/;"	v
do_point_update	act.debug.hpp	/^ACMD(do_point_update);$/;"	v
do_point_update	interpreter.cpp	/^ACMD(do_point_update);$/;"	v
do_poofset	act.wizard.cpp	/^SUPERCMD(do_poofset);$/;"	v
do_poofset	interpreter.cpp	/^ACMD(do_poofset);$/;"	v
do_pour	act.item.cpp	/^ACMD(do_pour);$/;"	v
do_pour	interpreter.cpp	/^ACMD(do_pour);$/;"	v
do_practice	act.other.cpp	/^ACMD(do_practice);$/;"	v
do_practice	interpreter.cpp	/^ACMD(do_practice);$/;"	v
do_pref	interpreter.cpp	/^ACMD(do_pref);$/;"	v
do_pref	mods/prefs.hpp	/^ACMD(do_pref);$/;"	v
do_preferences	act.informative.cpp	/^ACMD(do_preferences);$/;"	v
do_purge	act.wizard.cpp	/^SUPERCMD(do_purge);$/;"	v
do_purge	interpreter.cpp	/^ACMD(do_purge);$/;"	v
do_put	act.item.cpp	/^ACMD(do_put);$/;"	v
do_put	interpreter.cpp	/^ACMD(do_put);$/;"	v
do_qcomm	act.comm.cpp	/^ACMD(do_qcomm);$/;"	v
do_qcomm	interpreter.cpp	/^ACMD(do_qcomm);$/;"	v
do_quit	act.other.cpp	/^ACMD(do_quit);$/;"	v
do_quit	interpreter.cpp	/^ACMD(do_quit);$/;"	v
do_rbuild	interpreter.cpp	/^ACMD(do_rbuild);$/;"	v
do_rbuild_sandbox	interpreter.cpp	/^ACMD(do_rbuild_sandbox);$/;"	v
do_reboot	db.cpp	/^SUPERCMD(do_reboot);$/;"	v
do_reboot	interpreter.cpp	/^ACMD(do_reboot);$/;"	v
do_recall	act.informative.cpp	/^ACMD(do_recall);$/;"	v
do_recall	interpreter.cpp	/^ACMD(do_recall);$/;"	v
do_registration_status	interpreter.cpp	/^ACMD(do_registration_status);$/;"	v
do_remove	act.item.cpp	/^ACMD(do_remove);$/;"	v
do_remove	interpreter.cpp	/^ACMD(do_remove);$/;"	v
do_remove_super_user	mods/super-users.hpp	/^ACMD(do_remove_super_user);$/;"	v
do_reply	act.comm.cpp	/^ACMD(do_reply);$/;"	v
do_reply	interpreter.cpp	/^ACMD(do_reply);$/;"	v
do_report	act.other.cpp	/^ACMD(do_report);$/;"	v
do_report	interpreter.cpp	/^ACMD(do_report);$/;"	v
do_reputation	mods/karma.hpp	/^ACMD(do_reputation);$/;"	v
do_rescue	interpreter.cpp	/^ACMD(do_rescue);$/;"	v
do_reset_game	interpreter.cpp	/^ACMD(do_reset_game);$/;"	v
do_reset_hack	mods/mini-games.hpp	/^ACMD(do_reset_hack);$/;"	v
do_rest	act.movement.cpp	/^ACMD(do_rest);$/;"	v
do_rest	interpreter.cpp	/^ACMD(do_rest);$/;"	v
do_restore	act.wizard.cpp	/^SUPERCMD(do_restore);$/;"	v
do_restore	interpreter.cpp	/^ACMD(do_restore);$/;"	v
do_return	act.wizard.cpp	/^SUPERCMD(do_return);$/;"	v
do_return	handler.cpp	/^ACMD(do_return);$/;"	v
do_return	interpreter.cpp	/^ACMD(do_return);$/;"	v
do_revive	interpreter.cpp	/^ACMD(do_revive);$/;"	v
do_rnumlist	interpreter.cpp	/^ACMD(do_rnumlist);$/;"	v
do_rnumlist	mods/immortal.hpp	/^ACMD(do_rnumlist);$/;"	v
do_rnumtele	interpreter.cpp	/^ACMD(do_rnumtele);$/;"	v
do_rnumtele	mods/immortal.hpp	/^ACMD(do_rnumtele);$/;"	v
do_room_dark	interpreter.cpp	/^ACMD(do_room_dark);$/;"	v
do_room_fire	interpreter.cpp	/^ACMD(do_room_fire);$/;"	v
do_room_list	interpreter.cpp	/^ACMD(do_room_list);$/;"	v
do_room_list_uuid	interpreter.cpp	/^ACMD(do_room_list_uuid);$/;"	v
do_room_vnum	interpreter.cpp	/^ACMD(do_room_vnum);$/;"	v
do_rotate_left	interpreter.cpp	/^ACMD(do_rotate_left);$/;"	v
do_rotate_left	mods/mini-games.hpp	/^ACMD(do_rotate_left);$/;"	v
do_rotate_right	interpreter.cpp	/^ACMD(do_rotate_right);$/;"	v
do_rotate_right	mods/mini-games.hpp	/^ACMD(do_rotate_right);$/;"	v
do_save	act.other.cpp	/^ACMD(do_save);$/;"	v
do_save	interpreter.cpp	/^ACMD(do_save);$/;"	v
do_say	act.comm.cpp	/^ACMD(do_say);$/;"	v
do_say	graph.cpp	/^ACMD(do_say);$/;"	v
do_say	interpreter.cpp	/^ACMD(do_say);$/;"	v
do_say	mods/ai_state.cpp	/^EXTERN_ACT(do_say);$/;"	v
do_say	shop.cpp	/^ACMD(do_say);$/;"	v
do_say	spec_procs.cpp	/^ACMD(do_say);$/;"	v
do_sbuild	interpreter.cpp	/^ACMD(do_sbuild);$/;"	v
do_scan	interpreter.cpp	/^ACMD(do_scan);$/;"	v
do_score	act.informative.cpp	/^ACMD(do_score);$/;"	v
do_score	interpreter.cpp	/^ACMD(do_score);$/;"	v
do_send	act.wizard.cpp	/^SUPERCMD(do_send);$/;"	v
do_send	interpreter.cpp	/^ACMD(do_send);$/;"	v
do_send_report	interpreter.cpp	/^ACMD(do_send_report);$/;"	v
do_set	act.wizard.cpp	/^SUPERCMD(do_set);$/;"	v
do_set	interpreter.cpp	/^ACMD(do_set);$/;"	v
do_set_ammo	interpreter.cpp	/^ACMD(do_set_ammo);$/;"	v
do_set_npc_position	interpreter.cpp	/^ACMD(do_set_npc_position);$/;"	v
do_set_position	act.debug.hpp	/^ACMD(do_set_position);$/;"	v
do_set_position	interpreter.cpp	/^ACMD(do_set_position);$/;"	v
do_set_who_line	interpreter.cpp	/^ACMD(do_set_who_line);$/;"	v
do_set_who_line	mods/super-users.hpp	/^ACMD(do_set_who_line);$/;"	v
do_shoot	interpreter.cpp	/^ACMD(do_shoot);	\/* just an alias of snipe *\/$/;"	v
do_show	act.wizard.cpp	/^SUPERCMD(do_show);$/;"	v
do_show	interpreter.cpp	/^ACMD(do_show);$/;"	v
do_show_tics	interpreter.cpp	/^ACMD(do_show_tics);$/;"	v
do_shutdown	act.wizard.cpp	/^SUPERCMD(do_shutdown);$/;"	v
do_shutdown	interpreter.cpp	/^ACMD(do_shutdown);$/;"	v
do_simple_move	act.movement.cpp	/^int do_simple_move(char_data *ch, int dir, int need_specials_check) {$/;"	f
do_sit	act.movement.cpp	/^ACMD(do_sit);$/;"	v
do_sit	interpreter.cpp	/^ACMD(do_sit);$/;"	v
do_skills	interpreter.cpp	/^ACMD(do_skills);$/;"	v
do_skillset	modify.cpp	/^ACMD(do_skillset);$/;"	v
do_sleep	act.movement.cpp	/^ACMD(do_sleep);$/;"	v
do_sleep	interpreter.cpp	/^ACMD(do_sleep);$/;"	v
do_sneak	act.other.cpp	/^ACMD(do_sneak);$/;"	v
do_sneak	interpreter.cpp	/^ACMD(do_sneak);$/;"	v
do_snipe	interpreter.cpp	/^ACMD(do_snipe);$/;"	v
do_snipe_object	interpreter.cpp	/^ACMD(do_snipe_object);$/;"	v
do_snoop	act.wizard.cpp	/^SUPERCMD(do_snoop);$/;"	v
do_snoop	interpreter.cpp	/^ACMD(do_snoop);$/;"	v
do_spec_comm	act.comm.cpp	/^ACMD(do_spec_comm);$/;"	v
do_spec_comm	interpreter.cpp	/^ACMD(do_spec_comm);$/;"	v
do_split	act.other.cpp	/^ACMD(do_split);$/;"	v
do_split	interpreter.cpp	/^ACMD(do_split);$/;"	v
do_spray	interpreter.cpp	/^ACMD(do_spray);$/;"	v
do_stand	act.movement.cpp	/^ACMD(do_stand);$/;"	v
do_stand	interpreter.cpp	/^ACMD(do_stand);$/;"	v
do_start	class.cpp	/^void do_start(char_data *ch) {$/;"	f
do_stat	act.wizard.cpp	/^SUPERCMD(do_stat);$/;"	v
do_stat	interpreter.cpp	/^ACMD(do_stat);$/;"	v
do_stat_character	act.wizard.cpp	/^void do_stat_character(char_data *ch, char_data *k) {$/;"	f
do_stat_object	act.wizard.cpp	/^void do_stat_object(char_data *ch, struct obj_data *j) {$/;"	f
do_stat_room	act.wizard.cpp	/^void do_stat_room(char_data *ch) {$/;"	f
do_steal	act.other.cpp	/^ACMD(do_steal);$/;"	v
do_steal	interpreter.cpp	/^ACMD(do_steal);$/;"	v
do_summon_extraction	mods/classes/class-commands.hpp	/^ACMD(do_summon_extraction);$/;"	v
do_switch	act.wizard.cpp	/^SUPERCMD(do_switch);$/;"	v
do_switch	interpreter.cpp	/^ACMD(do_switch);$/;"	v
do_syslog	act.wizard.cpp	/^SUPERCMD(do_syslog);$/;"	v
do_syslog	interpreter.cpp	/^ACMD(do_syslog);$/;"	v
do_teep	mods/classes/class-commands.hpp	/^ACMD(do_teep);$/;"	v
do_teleport	act.wizard.cpp	/^SUPERCMD(do_teleport);$/;"	v
do_teleport	interpreter.cpp	/^ACMD(do_teleport);$/;"	v
do_tell	act.comm.cpp	/^ACMD(do_tell);$/;"	v
do_tell	interpreter.cpp	/^ACMD(do_tell);$/;"	v
do_tell	mods/ai_state.cpp	/^EXTERN_ACT(do_tell);$/;"	v
do_tell	objsave.cpp	/^ACMD(do_tell);$/;"	v
do_tell	shop.cpp	/^ACMD(do_tell);$/;"	v
do_thermite	interpreter.cpp	/^ACMD(do_thermite);$/;"	v
do_throw	interpreter.cpp	/^ACMD(do_throw);$/;"	v
do_time	act.informative.cpp	/^ACMD(do_time);$/;"	v
do_time	interpreter.cpp	/^ACMD(do_time);$/;"	v
do_title	act.other.cpp	/^ACMD(do_title);$/;"	v
do_title	interpreter.cpp	/^ACMD(do_title);$/;"	v
do_toggle	act.informative.cpp	/^ACMD(do_toggle);$/;"	v
do_toggle	interpreter.cpp	/^ACMD(do_toggle);$/;"	v
do_toggle_obj_from_room	interpreter.cpp	/^ACMD(do_toggle_obj_from_room);$/;"	v
do_track	graph.cpp	/^ACMD(do_track);$/;"	v
do_track	interpreter.cpp	/^ACMD(do_track);$/;"	v
do_trans	act.wizard.cpp	/^SUPERCMD(do_trans);$/;"	v
do_trans	interpreter.cpp	/^ACMD(do_trans);$/;"	v
do_unban	ban.cpp	/^SUPERCMD(do_unban);$/;"	v
do_unban	interpreter.cpp	/^ACMD(do_unban);$/;"	v
do_ungroup	act.other.cpp	/^ACMD(do_ungroup);$/;"	v
do_ungroup	interpreter.cpp	/^ACMD(do_ungroup);$/;"	v
do_uninstall	interpreter.cpp	/^ACMD(do_uninstall);$/;"	v
do_uninstall_minigame	mods/mini-games.hpp	/^ACMD(do_uninstall_minigame);$/;"	v
do_use	act.other.cpp	/^ACMD(do_use);$/;"	v
do_use	interpreter.cpp	/^ACMD(do_use);$/;"	v
do_users	act.informative.cpp	/^ACMD(do_users);$/;"	v
do_users	interpreter.cpp	/^ACMD(do_users);$/;"	v
do_uuid	act.debug.hpp	/^ACMD(do_uuid);$/;"	v
do_uuid	interpreter.cpp	/^ACMD(do_uuid);$/;"	v
do_view	interpreter.cpp	/^ACMD(do_view);$/;"	v
do_visible	act.other.cpp	/^ACMD(do_visible);$/;"	v
do_visible	interpreter.cpp	/^ACMD(do_visible);$/;"	v
do_vnum	act.wizard.cpp	/^SUPERCMD(do_vnum);$/;"	v
do_vnum	interpreter.cpp	/^ACMD(do_vnum);$/;"	v
do_vstat	act.wizard.cpp	/^SUPERCMD(do_vstat);$/;"	v
do_vstat	interpreter.cpp	/^ACMD(do_vstat);$/;"	v
do_wake	act.movement.cpp	/^ACMD(do_wake);$/;"	v
do_wake	interpreter.cpp	/^ACMD(do_wake);$/;"	v
do_wear	act.item.cpp	/^ACMD(do_wear);$/;"	v
do_wear	interpreter.cpp	/^ACMD(do_wear);$/;"	v
do_weather	act.informative.cpp	/^ACMD(do_weather);$/;"	v
do_weather	interpreter.cpp	/^ACMD(do_weather);$/;"	v
do_where	act.informative.cpp	/^ACMD(do_where);$/;"	v
do_where	interpreter.cpp	/^ACMD(do_where);$/;"	v
do_who	act.informative.cpp	/^ACMD(do_who);$/;"	v
do_who	interpreter.cpp	/^ACMD(do_who);$/;"	v
do_wield	act.item.cpp	/^ACMD(do_wield);$/;"	v
do_wield	interpreter.cpp	/^ACMD(do_wield);$/;"	v
do_wimpy	act.other.cpp	/^ACMD(do_wimpy);$/;"	v
do_wimpy	interpreter.cpp	/^ACMD(do_wimpy);$/;"	v
do_wiz_quote	interpreter.cpp	/^ACMD(do_wiz_quote);$/;"	v
do_wizlock	act.wizard.cpp	/^SUPERCMD(do_wizlock);$/;"	v
do_wizlock	interpreter.cpp	/^ACMD(do_wizlock);$/;"	v
do_wiznet	act.wizard.cpp	/^SUPERCMD(do_wiznet);$/;"	v
do_wiznet	interpreter.cpp	/^ACMD(do_wiznet);$/;"	v
do_wizutil	act.wizard.cpp	/^SUPERCMD(do_wizutil);$/;"	v
do_wizutil	interpreter.cpp	/^ACMD(do_wizutil);$/;"	v
do_write	act.comm.cpp	/^ACMD(do_write);$/;"	v
do_write	interpreter.cpp	/^ACMD(do_write);$/;"	v
do_xray_shot	mods/classes/class-commands.hpp	/^ACMD(do_xray_shot);$/;"	v
do_yaml_example	interpreter.cpp	/^ACMD(do_yaml_example);$/;"	v
do_yaml_import	interpreter.cpp	/^ACMD(do_yaml_import);$/;"	v
do_yaml_log	interpreter.cpp	/^ACMD(do_yaml_log);$/;"	v
do_yaml_log_clear	interpreter.cpp	/^ACMD(do_yaml_log_clear);$/;"	v
do_yaml_log_save	interpreter.cpp	/^ACMD(do_yaml_log_save);$/;"	v
do_zbuild	interpreter.cpp	/^ACMD(do_zbuild);$/;"	v
do_zero_socket	act.debug.hpp	/^ACMD(do_zero_socket);$/;"	v
do_zero_socket	interpreter.cpp	/^ACMD(do_zero_socket);$/;"	v
do_zreset	act.wizard.cpp	/^SUPERCMD(do_zreset);$/;"	v
do_zreset	interpreter.cpp	/^ACMD(do_zreset);$/;"	v
donation_room_1	config.cpp	/^room_vnum donation_room_1 = 3063;$/;"	v
donation_room_2	config.cpp	/^room_vnum donation_room_2 = NOWHERE;	\/* unused - room for expansion *\/$/;"	v
donation_room_3	config.cpp	/^room_vnum donation_room_3 = NOWHERE;	\/* unused - room for expansion *\/$/;"	v
done	mods/player.cpp	/^	void player::done() {$/;"	f	class:mods::player
door_event	mods/orm/door-event.hpp	/^		door_event() : id(0) {$/;"	f	struct:mods::orm::door_event
door_event	mods/orm/door-event.hpp	/^	struct door_event : public mods::orm::orm_base<door_event,std::string> {$/;"	s	namespace:mods::orm
door_explosion_event	mods/doors.hpp	/^	static inline void door_explosion_event(uuid_t player_uuid,uuid_t obj_uuid,int8_t direction) {$/;"	f	namespace:mods::doors
doors	mods/doors.hpp	/^namespace mods::doors  {$/;"	n	class:mods
dopr	bsd-snprintf.cpp	/^dopr(char *buffer, size_t maxlen, const char *format, va_list args) {$/;"	f	file:
dopr_outch	bsd-snprintf.cpp	/^dopr_outch(char *buffer, size_t *currlen, size_t maxlen, char c) {$/;"	f	file:
drench_object_in_gasoline	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::drench_object_in_gasoline(uuid_t npc){$/;"	f	class:mods::classes::pyrexia
drench_object_in_gasoline	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::drench_object_in_gasoline(uuid_t npc){$/;"	f	class:mods::orm::pyrexia
drench_room_in_gasoline	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::drench_room_in_gasoline(uuid_t npc){$/;"	f	class:mods::classes::pyrexia
drench_room_in_gasoline	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::drench_room_in_gasoline(uuid_t npc){$/;"	f	class:mods::orm::pyrexia
drink_aff	constants.cpp	/^int drink_aff[][3] = {$/;"	v
drink_aff	constants.hpp	/^int drink_aff[][3] = {$/;"	v
drinknames	constants.cpp	/^const char *drinknames[] = {$/;"	v
drinknames	constants.hpp	/^const char *drinknames[] =$/;"	v
drinks	constants.cpp	/^const char *drinks[] = {$/;"	v
drinks	constants.hpp	/^const char *drinks[] =$/;"	v
drone	mods/drone.cpp	/^	namespace drone {$/;"	n	namespace:mods	file:
drone	mods/drone.hpp	/^	namespace drone {$/;"	n	namespace:mods
drone	mods/item-types.hpp	/^	enum drone {$/;"	g	namespace:mods::weapon::type
drone	mods/weapon.cpp	/^	mw_drone drone(obj_data_ptr_t& object) {$/;"	f	namespace:mods::weapon
drone_bomb	mods/classes/engineer.cpp	/^	std::tuple<bool,std::string> engineer::drone_bomb(direction_t direction,uint8_t depth) {$/;"	f	class:mods::classes::engineer
drone_bomb_usage	mods/classes/engineer.cpp	/^	static constexpr const char* drone_bomb_usage = "usage: drone_bomb <direction> <distance>";$/;"	m	namespace:mods::class_abilities::engineer	file:
drone_description_t	mods/yaml.hpp	/^		drone_description_t() {$/;"	f	struct:mods::yaml::drone_description_t
drone_description_t	mods/yaml.hpp	/^	struct drone_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
drone_impl	mods/drone.cpp	/^	drone_impl::drone_impl(uuid_t ch) : m_char_data(nullptr) { };$/;"	f	class:mods::drone_impl
drone_impl	mods/drone.hpp	/^	struct drone_impl {$/;"	s	namespace:mods
drone_scan_room	mods/scan.cpp	/^	std::vector<uuid_t> drone_scan_room(room_rnum room) {$/;"	f	namespace:mods::scan
drone_simulate	mods/player.hpp	/^			bool& drone_simulate() {$/;"	f	struct:mods::player
drone_uuid	mods/player.hpp	/^			uuid_t& drone_uuid() {$/;"	f	struct:mods::player
dts_are_dumps	config.cpp	/^int dts_are_dumps = YES;$/;"	v
dty_debug	mods/weapons/damage-calculator.cpp	16;"	d	file:
dty_debug	mods/weapons/damage-calculator.cpp	18;"	d	file:
dty_debug	mods/weapons/damage-types.cpp	13;"	d	file:
dty_debug	mods/weapons/reload.cpp	5;"	d	file:
duktape_context	mods/js.cpp	/^		static duk_context* duktape_context;$/;"	m	namespace:mods::js	file:
dummy_mob	db.cpp	/^struct player_special_data dummy_mob;	\/* dummy spec area for mobs	*\/$/;"	v	typeref:struct:player_special_data
dummy_queue	mods/target-practice-db.cpp	/^	static std::vector<room_vnum> dummy_queue;$/;"	m	namespace:mods::target_practice_db	file:
dummy_t	mods/target-practice.hpp	/^	struct dummy_t {$/;"	s	namespace:mods::target_practice
dump	db.h	/^		void dump() {$/;"	f	struct:zone_data
dump	db.h	/^	void dump() {$/;"	f	struct:reset_com
dump	mods/builder/encode.cpp	/^	std::string dump(const strmap_t& data) {$/;"	f	namespace:mods::builder
dump	mods/forge-engine/value-scaler.cpp	/^	void value_scaler::dump() {$/;"	f	class:mods::forge_engine::value_scaler
dump	mods/orm/contract-steps.hpp	/^		std::string& dump() {$/;"	f	struct:mods::orm::contract_steps
dump	mods/orm/orm-base.hpp	/^		std::string dump() {$/;"	f	struct:mods::orm::orm_base
dump	mods/orm/player-base-ability.cpp	/^	void player_base_ability::dump() {$/;"	f	class:mods::orm::player_base_ability
dump	mods/util-map.hpp	/^			static inline void dump(std::map<TKey,TVal> m){$/;"	f	namespace:mods::util::maps
dump	spec_assign.cpp	/^SPECIAL(dump);$/;"	v
dump	spec_procs.cpp	/^SPECIAL(dump);$/;"	v
dump_cols	mods/orm/room.cpp	/^	std::string room::dump_cols() {$/;"	f	class:mods::orm::room
dump_cols	mods/orm/room.cpp	/^	std::string room::dump_cols(std::vector<std::string> columns) {$/;"	f	class:mods::orm::room
dump_fields	mods/orm/orm-base.hpp	/^		std::string dump_fields(const std::vector<std::string>& field_list) {$/;"	f	struct:mods::orm::orm_base
dump_list	mods/lmdb/conf.hpp	/^void dump_list(void){ }$/;"	f	struct:gdns::conf
dump_rules	mods/acl/config-parser.cpp	/^        inline void FileParser::dump_rules(rule r){$/;"	f	class:mods::acl::FileParser
dump_status	mods/lmdb.cpp	/^	void _db_handle::dump_status() const {$/;"	f	class:mods::lmdb::_db_handle
dump_step	mods/builder/conbuild.cpp	/^		void dump_step(std::shared_ptr<mods::orm::contract_steps> s) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
dump_step	mods/player-contract-instance.cpp	/^	std::string_view player_contract_instance::dump_step() {$/;"	f	class:mods::contracts::player_contract_instance
dump_tree	mods/acl/config-parser.cpp	/^        void FileParser::dump_tree(void){$/;"	f	class:mods::acl::FileParser
duplicate	db.h	/^	int duplicate;$/;"	m	struct:help_index_element
durability_profile	mods/rifle-attachments.hpp	/^			int16_t durability_profile;$/;"	m	struct:mods::rifle_attachments_t
durability_profile_enum	mods/yaml.hpp	/^		durability_profile_type_t durability_profile_enum;$/;"	m	struct:mods::yaml::armor_description_t
durability_profile_enum	mods/yaml.hpp	/^		durability_profile_type_t durability_profile_enum;$/;"	m	struct:mods::yaml::gadget_description_t
durability_profile_type_t	mods/yaml.hpp	/^	enum durability_profile_type_t {$/;"	g	namespace:mods::yaml
dynamic_fetch	mods/orm/inventory.cpp	/^	obj_data_ptr_t dynamic_fetch(mentoc_pqxx_result_t row) { \/\/int id, std::string_view in_type){$/;"	f	namespace:mods::orm::inventory
dynamic_get	mods/prefs.cpp	/^	std::string prefs::dynamic_get(const std::string& key,const std::string& section,char_data* ch) {$/;"	f	class:mods::prefs
dynamic_namify	mods/prefs.cpp	/^	std::string prefs::dynamic_namify(const std::string& key,const std::string& section,char_data* c) {$/;"	f	class:mods::prefs
dynamic_set	mods/prefs.cpp	/^	void prefs::dynamic_set(const std::string& key,const std::string& value,const std::string& section,char_data* ch) {$/;"	f	class:mods::prefs
e_commit	mods/db.hpp	/^	constexpr static int_status_t e_commit = -2;$/;"	m	namespace:mods::lmdb::error
e_get	mods/db.hpp	/^	constexpr static int_status_t e_get = -3;$/;"	m	namespace:mods::lmdb::error
e_put	mods/db.hpp	/^	constexpr static int_status_t e_put = -1;$/;"	m	namespace:mods::lmdb::error
echo_off	comm.cpp	/^void echo_off(mods::descriptor_data& d) {$/;"	f
echo_on	comm.cpp	/^void echo_on(mods::descriptor_data& d) {$/;"	f
effective_firing_range	mods/weapon.hpp	/^			int effective_firing_range; \/\/ feet$/;"	m	struct:mods::weapon::yaml::rifle_description_t
eif_debug	mods/projectile.cpp	29;"	d	file:
eif_debug	mods/projectile.cpp	31;"	d	file:
electric	mods/projectile.cpp	/^			int electric;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
electronics	mods/player.hpp	/^			uint16_t& electronics() {$/;"	f	struct:mods::player
elemental	mods/weapons/elemental.cpp	/^namespace mods::weapons::elemental {$/;"	n	class:mods::weapons	file:
elemental	mods/weapons/elemental.hpp	/^namespace mods::weapons::elemental {$/;"	n	class:mods::weapons
elemental_damage	mods/weapons/elemental.cpp	/^	void elemental_damage(player_ptr_t& player,std::string_view message,int damage) {$/;"	f	namespace:mods::weapons::elemental
elemental_damages	mods/forge-engine/generator.hpp	/^		std::vector<std::pair<elemental_types_t,std::variant<uint32_t,float>>> elemental_damages;$/;"	m	struct:mods::forge_engine::generated_explosive_t
elemental_resistances	mods/forge-engine/generator.hpp	/^		std::vector<std::pair<elemental_types_t,std::variant<uint32_t,float>>> elemental_resistances;$/;"	m	struct:mods::forge_engine::generated_explosive_t
elemental_types_t	mods/forge-engine/elemental-enum.hpp	/^	enum elemental_types_t {$/;"	g	namespace:mods::forge_engine
elemental_types_t	mods/item-types.hpp	/^	enum elemental_types_t {$/;"	g	namespace:mods
elevator	mods/elevator.cpp	/^namespace mods::elevator {$/;"	n	class:mods	file:
elevator	mods/elevator.hpp	/^namespace mods::elevator {$/;"	n	class:mods
elevator	mods/orm/elevator.hpp	/^		elevator() : id(0) {$/;"	f	struct:mods::orm::elevator
elevator	mods/orm/elevator.hpp	/^	struct elevator : public mods::orm::orm_base<elevator,std::string> {$/;"	s	namespace:mods::orm
elite_protection	mods/armor/elite-protection.cpp	/^	elite_protection::elite_protection(uuid_t player_uuid) {$/;"	f	class:mods::armor::elite_protection
elite_protection	mods/armor/elite-protection.hpp	/^	struct elite_protection {$/;"	s	namespace:mods::armor
emergency_unban	comm.cpp	/^byte emergency_unban;		\/* signal: SIGUSR2 *\/$/;"	v
emp_damage	mods/projectile.cpp	/^		void emp_damage(room_rnum& room_id,obj_ptr_t object) {$/;"	f	namespace:mods::projectile
emp_damage	mods/weapons/elemental.cpp	/^	void emp_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
emp_damage_percent	mods/rifle-attachments.hpp	/^			int16_t emp_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
emp_resistance_percent	mods/player.cpp	/^	int16_t& player::emp_resistance_percent() {$/;"	f	class:mods::player
empty	mods/forge-engine/generated-armor.cpp	/^	static std::vector<std::string> empty = {};$/;"	m	namespace:mods::forge_engine	file:
empty	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> empty;$/;"	m	namespace:mods::forge_engine	file:
empty_elemental_types	mods/forge-engine/generator.hpp	/^	static const std::vector<elemental_types_t> empty_elemental_types = { };$/;"	m	namespace:mods::forge_engine
empty_make	mods/weapon-types.hpp	/^	std::unique_ptr<AttributesType> empty_make() {$/;"	f	namespace:mods::weapon_types
enable_zone_resets	mods/builder.cpp	/^void enable_zone_resets() {$/;"	f
encode	mods/builder/encode.cpp	/^	std::string encode(std::string_view data) {$/;"	f	namespace:mods::builder
encode	mods/orm/orm-base.hpp	/^		std::string encode() {$/;"	f	struct:mods::orm::orm_base
encode_fields	mods/orm/orm-base.hpp	/^		std::string encode_fields(const std::vector<std::string>& field_list) {$/;"	f	struct:mods::orm::orm_base
encode_map	mods/builder/encode.cpp	/^	std::string encode_map(const strmap_t& data) {$/;"	f	namespace:mods::builder
encode_scripted_response	mods/builder.cpp	/^	void encode_scripted_response(player_ptr_t& player, std::string_view encoded) {$/;"	f	namespace:mods::builder
encode_scripted_response	mods/builder.cpp	/^	void encode_scripted_response(player_ptr_t& player, str_map_t&& map) {$/;"	f	namespace:mods::builder
encode_scripted_response_safe	mods/builder.cpp	/^	void encode_scripted_response_safe(player_ptr_t& player, std::string_view encoded) {$/;"	f	namespace:mods::builder
encode_step_data	mods/player-contract-instance.cpp	/^	std::string player_contract_instance::encode_step_data(std::string_view data) {$/;"	f	class:mods::contracts::player_contract_instance
encoded_response	mods/builder/slotted-builder.hpp	/^			std::vector<std::string>& encoded_response() {$/;"	f	struct:mods::builder::slotted_builder
encrypt	mods/crypto.cpp	/^int encrypt(unsigned char *plaintext, int plaintext_len, unsigned char *key,$/;"	f	namespace:mods::crypto
encrypt_buffer	mods/crypto.cpp	/^	std::string encrypt_buffer(std::string_view in_key,std::string_view in_iv,std::string_view buffer) {$/;"	f	namespace:mods::crypto
encrypt_names	telnet.h	/^char *encrypt_names[] = {$/;"	v
enctype_names	telnet.h	/^char *enctype_names[] = {$/;"	v
end	mods/catch2.hpp	/^        constexpr const_iterator end() const { return m_start + m_size; }$/;"	f	class:Catch::StringRef
end_read_list	shop.cpp	/^int end_read_list(struct shop_buy_data *list, int len, int error) {$/;"	f
enemy_spotted	mods/mobs/lowly-security.cpp	/^	void lowly_security::enemy_spotted(room_rnum room,uuid_t player) {$/;"	f	class:mods::mobs::lowly_security
enemy_spotted	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::enemy_spotted(room_rnum room,uuid_t player) {$/;"	f	class:mods::mobs::mini_gunner
enemy_spotted	mods/mobs/smart-mob.cpp	/^	void smart_mob::enemy_spotted(room_rnum room,uuid_t player) {$/;"	f	class:mods::mobs::smart_mob
engage	mods/classes/sniper.cpp	/^	std::tuple<bool,std::string> sniper::engage() {$/;"	f	class:mods::classes::sniper
engage_hostile	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto engage_hostile() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
engineer	mods/classes/engineer.cpp	/^	engineer::engineer() {$/;"	f	class:mods::classes::engineer
engineer	mods/classes/engineer.cpp	/^	engineer::engineer(player_ptr_t p) {$/;"	f	class:mods::classes::engineer
engineer	mods/classes/engineer.cpp	/^namespace mods::class_abilities::engineer {$/;"	n	class:mods::class_abilities	file:
engineer	mods/classes/engineer.hpp	/^	struct engineer : base {$/;"	s	namespace:mods::classes
engineer	mods/init.hpp	/^INIT(mods::class_abilities::engineer);$/;"	v
engineer	mods/orm/engineer.hpp	/^		engineer() : id(0) {$/;"	f	struct:mods::orm::engineer
engineer	mods/orm/engineer.hpp	/^	struct engineer : public mods::orm::orm_base<engineer,mods::weapon::engineer::primary_choice_t> {$/;"	s	namespace:mods::orm
engineer	mods/player.cpp	/^	std::shared_ptr<mods::classes::engineer>& player::engineer() {$/;"	f	class:mods::player
engineer	mods/weapon.hpp	/^	namespace engineer {$/;"	n	namespace:mods::weapon
engineer_id	mods/orm/engineer.hpp	/^		uint64_t engineer_id;$/;"	m	struct:mods::orm::engineer
engineer_list	mods/replenish.cpp	/^	static std::vector<uuid_t> engineer_list;$/;"	m	namespace:mods::replenish	file:
engineer_player_id	mods/orm/engineer.hpp	/^		uint64_t engineer_player_id;$/;"	m	struct:mods::orm::engineer
engineer_ptrs	mods/replenish.cpp	/^	static std::map<uuid_t,engineer_ptr_t> engineer_ptrs;$/;"	m	namespace:mods::replenish	file:
engineer_skillset	class.cpp	/^std::string engineer_skillset() {$/;"	f
entry	db.h	/^	char *entry;$/;"	m	struct:help_index_element
env	mods/lmdb/db.hpp	/^			MDB_env* env;$/;"	m	struct:gdns::lmdb::gdns_env
env	mods/lmdb/db.hpp	/^			std::unique_ptr<gdns_env> env;$/;"	m	struct:gdns::lmdb::db
epoch_string	mods/date-time.cpp	/^	std::string epoch_string() {$/;"	f	namespace:mods::date_time::irl
epoll_ev	comm.cpp	/^epoll_event epoll_ev;$/;"	v
epoll_fd	comm.cpp	/^int epoll_fd = -1;$/;"	v
equip	mods/armor/advanced-protection.cpp	/^	void advanced_protection::equip(int where,uuid_t obj) {$/;"	f	class:mods::armor::advanced_protection
equip	mods/armor/basic-protection.cpp	/^	void basic_protection::equip(int where,uuid_t obj) {$/;"	f	class:mods::armor::basic_protection
equip	mods/armor/elite-protection.cpp	/^	void elite_protection::equip(int where,uuid_t obj) {$/;"	f	class:mods::armor::elite_protection
equip	mods/player.cpp	/^	void player::equip(obj_ptr_t in_object,int pos) {$/;"	f	class:mods::player
equip	mods/player.cpp	/^	void player::equip(uuid_t obj_uuid,int pos) {$/;"	f	class:mods::player
equip_char	handler.cpp	/^void equip_char(player_ptr_t player,obj_ptr_t in_object,int pos) {$/;"	f
equipment	mods/player.cpp	/^	obj_ptr_t player::equipment(int pos) {$/;"	f	class:mods::player
equipment	mods/player.hpp	/^			const std::array<obj_ptr_t,NUM_WEARS>& equipment() const {$/;"	f	struct:mods::player
equipment_types	constants.cpp	/^const char *equipment_types[] = {$/;"	v
equipment_types	constants.hpp	/^const char *equipment_types[] = {$/;"	v
erase	mods/rifle-attachments.cpp	/^		void erase(const uuid_t& uuid) {$/;"	f	namespace:mods::rifle_attachments
erase_queued_items	mods/affects.hpp	/^			void erase_queued_items() {$/;"	f	struct:mods::affects::dissolver
err	mods/util.cpp	/^namespace mods::util::err {$/;"	n	class:mods::util	file:
err	mods/util.hpp	/^namespace mods::util::err {$/;"	n	class:mods::util
error	mods/db.hpp	/^namespace mods::lmdb::error { $/;"	n	class:mods::lmdb
error	mods/mobs/mini-gunner.hpp	/^			bool error;$/;"	m	struct:mods::mobs::mini_gunner
error	mods/mobs/smart-mob.hpp	/^			bool error;$/;"	m	struct:mods::mobs::smart_mob
error	mods/player.hpp	/^			void error(std::string_view msg) {$/;"	f	struct:mods::player
errorln	mods/player.hpp	/^			void errorln(std::string_view msg) {$/;"	f	struct:mods::player
eval_string	mods/js.cpp	/^		void eval_string(duk_context* ctx,const std::string& str) {$/;"	f	namespace:mods::js
eval_string	mods/js.cpp	/^		void eval_string(std::string_view str) {$/;"	f	namespace:mods::js
evaluate	mods/catch.hpp	/^			static bool evaluate(T1 const& lhs, T2 const& rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate_expression	shop.cpp	/^int evaluate_expression(struct obj_data *obj, char *expr) {$/;"	f
evaluate_operation	shop.cpp	/^void evaluate_operation(struct stack_data *ops, struct stack_data *vals) {$/;"	f
event	mods/ai_state.cpp	/^	uint32_t ai_state::event(char_data* ch,event_type_t ev) {$/;"	f	class:mods::ai_state
event_enum	mods/events.hpp	/^	enum event_enum {$/;"	g	namespace:mods::events
event_id	mods/orm/door-event.hpp	/^		id_type_t event_id;$/;"	m	struct:mods::orm::door_event
event_order	mods/orm/door-event.hpp	/^		event_order_t event_order;$/;"	m	struct:mods::orm::door_event
event_room_vnum	mods/orm/armor-index.hpp	/^		room_vnum_t event_room_vnum;$/;"	m	struct:mods::orm::armor_index
event_room_vnum	mods/orm/door-event.hpp	/^		room_vnum_t event_room_vnum;$/;"	m	struct:mods::orm::door_event
event_room_vnum	mods/orm/mob-roam.hpp	/^		room_vnum_t event_room_vnum;$/;"	m	struct:mods::orm::mob_roam
event_room_vnum	mods/orm/rifle-index.hpp	/^		room_vnum_t event_room_vnum;$/;"	m	struct:mods::orm::rifle_index
event_type	mods/orm/door-event.hpp	/^		std::string event_type;$/;"	m	struct:mods::orm::door_event
event_type_t	mods/ai_state.hpp	/^			enum event_type_t {$/;"	g	class:mods::ai_state
event_vnum	mods/orm/door-event.hpp	/^		event_vnum_t event_vnum;$/;"	m	struct:mods::orm::door_event
events	globals.cpp	/^namespace mods::mobs::room_watching::events {$/;"	n	class:mods::mobs::room_watching	file:
events	mods/events.cpp	/^namespace mods::events {$/;"	n	class:mods	file:
events	mods/events.hpp	/^namespace mods::events {$/;"	n	class:mods
events	mods/mobs/room-watching.cpp	/^	namespace events {$/;"	n	namespace:mods::mobs::room_watching	file:
events	mods/mobs/room-watching.hpp	/^	namespace events {$/;"	n	namespace:mods::mobs::room_watching
ex_description	mods/orm/room.hpp	/^		std::string ex_description;$/;"	m	struct:mods::orm::room
ex_description	structs.h	/^		std::vector<extra_descr_data> ex_description; \/* extra descriptions     *\/$/;"	m	struct:obj_data
ex_descriptions	structs.cpp	/^std::vector<mods::extra_desc_data>& room_data::ex_descriptions() {$/;"	f	class:room_data
ex_keyword	mods/orm/room.hpp	/^		std::string ex_keyword;$/;"	m	struct:mods::orm::room
examine	mods/examine.cpp	/^namespace mods::examine {$/;"	n	class:mods	file:
examine	mods/examine.hpp	/^namespace mods::examine {$/;"	n	class:mods
examine	mods/rifle-attachments.cpp	/^	std::string rifle_attachments_t::examine() {$/;"	f	class:mods::rifle_attachments_t
example_grammar	mods/deep-object-parser.cpp	/^	const std::string example_grammar = "rifle\/g36c.yml{sight:acog.yml,muzzle:compensator.yml,under_barrel:gm32grenadelauncher.yml}#level:32";$/;"	m	namespace:mods	file:
example_grammar	mods/rifle-attachments.cpp	/^	const std::string example_grammar = "g36c.yml{sight:acog.yml,muzzle:compensator.yml,under_barrel:gm32grenadelauncher.yml}";$/;"	m	namespace:mods	file:
exec	mods/js.cpp	/^		static duk_ret_t exec(duk_context *ctx) {$/;"	f	namespace:mods::js
exec	mods/pq.cpp	/^	pqxx::result exec(transaction& txn,std::string_view query) {$/;"	f	namespace:mods::pq
executing_js	mods/mobs/mob.cpp	/^	void player::executing_js(bool true_false) {$/;"	f	class:mods::player
executing_js	mods/player.cpp	/^	void player::executing_js(bool true_false) {$/;"	f	class:mods::player
exists	mods/filesystem.hpp	/^	static inline bool exists(const std::string& path){$/;"	f	namespace:mods::filesystem
exists	mods/lmdb.cpp	/^	bool _db_handle::exists(std::string key){$/;"	f	class:mods::lmdb::_db_handle
exists	mods/lmdb/conf.cpp	/^bool conf::exists(void){$/;"	f	class:gdns::conf
exists	mods/lmdb/conf.hpp	/^bool exists(void){$/;"	f	struct:gdns::conf
exists	mods/util.hpp	/^	bool exists(const ContainerType * container_ptr,$/;"	f	namespace:mods::util
exit_bits	constants.cpp	/^const char *exit_bits[] = {$/;"	v
exit_bits	constants.hpp	/^const char *exit_bits[] = {$/;"	v
exit_info	structs.h	/^	uint32_t exit_info;	\/* Exit info			*\/$/;"	m	struct:room_direction_data
exit_info_masks_t	mods/doors.hpp	/^	enum exit_info_masks_t {$/;"	g	namespace:mods::doors
exit_num	house.h	/^	sh_int exit_num;		\/* direction of house's exit	*\/$/;"	m	struct:house_control_rec
exits	mods/mobs/mob.cpp	/^	void player::exits() {$/;"	f	class:mods::player
exp	mods/mobs/mob.hpp	/^			int& exp() {$/;"	f	class:mods::player
exp	mods/player.hpp	/^			int& exp() {$/;"	f	struct:mods::player
expect_integer	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t> expect_integer(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
expect_item_declaration	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t,parsed_type_t> expect_item_declaration(const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
expect_slot_name	mods/deep-object-parser.cpp	/^	std::tuple<bool,std::string,counter_t> expect_slot_name(const std::vector<std::string>& acceptable_slot_names,const std::string& line, counter_t in_counter) {$/;"	f	namespace:mods
explain_make	mods/builder/coordinates.cpp	/^	std::string_view explain_make(){$/;"	f	namespace:mods::builder::rectangle_layouts
explain_make	mods/builder/rectangle-layouts.cpp	/^	std::string_view explain_make(){$/;"	f	namespace:mods::builder::rectangle_layouts
explode	mods/projectile.cpp	/^		void explode(room_rnum room_id,uuid_t object_uuid,uuid_t player_uuid) {$/;"	f	namespace:mods::projectile
explode	mods/util.cpp	/^	std::vector<std::string> explode(char delim,std::string& haystack) {$/;"	f	namespace:mods::util
explode_debug	mods/projectile.cpp	15;"	d	file:
explode_debug	mods/projectile.cpp	17;"	d	file:
explode_in_future	mods/projectile.cpp	/^		void explode_in_future(int room_id, int ticks, uuid_t object_uuid,uuid_t player_uuid) {$/;"	f	namespace:mods::projectile
explosive	mods/injure.cpp	/^	namespace explosive {$/;"	n	namespace:mods::injure	file:
explosive	mods/injure.hpp	/^	namespace explosive {$/;"	n	namespace:mods::injure
explosive	mods/item-types.hpp	/^	enum explosive {$/;"	g	namespace:mods::weapon::type
explosive	mods/projectile.cpp	/^	namespace explosive {$/;"	n	namespace:mods::injure	file:
explosive	mods/weapon.cpp	/^	mw_explosive explosive(obj_data_ptr_t& object) {$/;"	f	namespace:mods::weapon
explosive_attributes_t	mods/forge-engine/generator.hpp	/^	enum explosive_attributes_t {$/;"	g	namespace:mods::forge_engine
explosive_damage	mods/projectile.cpp	/^		int explosive_damage(player_ptr_t victim, obj_ptr_t item) {$/;"	f	namespace:mods::projectile
explosive_damage	mods/weapons/elemental.cpp	/^	void explosive_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
explosive_damage_percent	mods/rifle-attachments.hpp	/^			int16_t explosive_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
explosive_damage_t	mods/projectile.cpp	/^			explosive_damage_t() :$/;"	f	struct:mods::projectile::explosive_damage_t
explosive_damage_t	mods/projectile.cpp	/^		struct explosive_damage_t {$/;"	s	namespace:mods::projectile	file:
explosive_description_t	mods/yaml.hpp	/^		explosive_description_t() {$/;"	f	struct:mods::yaml::explosive_description_t
explosive_description_t	mods/yaml.hpp	/^	struct explosive_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
explosive_resistance_percent	mods/player.cpp	/^	int16_t& player::explosive_resistance_percent() {$/;"	f	class:mods::player
explosive_shot	mods/classes/breacher.cpp	/^		std::tuple<bool,std::string> breacher::explosive_shot(direction_t direction){$/;"	f	class:mods::classes::breacher
explosive_types_t	mods/forge-engine/generator.hpp	/^	enum explosive_types_t {$/;"	g	namespace:mods::forge_engine
export_class	mods/orm/armor-index.cpp	/^	strmap_t armor_index::export_class() {$/;"	f	class:mods::orm::armor_index
export_class	mods/orm/armor-index.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::armor_index_record_t
export_class	mods/orm/breacher.cpp	/^	strmap_t breacher::export_class() {$/;"	f	class:mods::orm::breacher
export_class	mods/orm/camera-feed.cpp	/^	strmap_t camera_feed::export_class() {$/;"	f	class:mods::orm::camera_feed
export_class	mods/orm/contract-steps.cpp	/^	strmap_t contract_steps::export_class() {$/;"	f	class:mods::orm::contract_steps
export_class	mods/orm/contract-steps.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::contract_steps_record_t
export_class	mods/orm/contracts.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::contracts
export_class	mods/orm/door-event.cpp	/^	strmap_t door_event::export_class() {$/;"	f	class:mods::orm::door_event
export_class	mods/orm/elevator.cpp	/^	strmap_t elevator::export_class() {$/;"	f	class:mods::orm::elevator
export_class	mods/orm/engineer.cpp	/^	strmap_t engineer::export_class() {$/;"	f	class:mods::orm::engineer
export_class	mods/orm/forge.cpp	/^	strmap_t forge::export_class() {$/;"	f	class:mods::orm::forge
export_class	mods/orm/ghost.cpp	/^	strmap_t ghost::export_class() {$/;"	f	class:mods::orm::ghost
export_class	mods/orm/hq.cpp	/^	strmap_t hq::export_class() {$/;"	f	class:mods::orm::hq
export_class	mods/orm/integral-object.cpp	/^	strmap_t integral_object::export_class() {$/;"	f	class:mods::orm::integral_object
export_class	mods/orm/marine.cpp	/^	strmap_t marine::export_class() {$/;"	f	class:mods::orm::marine
export_class	mods/orm/medic.cpp	/^	strmap_t medic::export_class() {$/;"	f	class:mods::orm::medic
export_class	mods/orm/mini-game.cpp	/^		strmap_t mini_game::export_class() {$/;"	f	class:mods::orm::mini_game
export_class	mods/orm/mob-equipment-map.cpp	/^	strmap_t mob_equipment_map::export_class() {$/;"	f	class:mods::orm::mob_equipment_map
export_class	mods/orm/mob-equipment.cpp	/^	strmap_t mob_equipment::export_class() {$/;"	f	class:mods::orm::mob_equipment
export_class	mods/orm/mob-roam.cpp	/^	strmap_t mob_roam::export_class() {$/;"	f	class:mods::orm::mob_roam
export_class	mods/orm/mob-roam.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::mob_roam_record_t
export_class	mods/orm/orm-base.hpp	/^		virtual strmap_t export_class() {$/;"	f	struct:mods::orm::orm_base
export_class	mods/orm/player-base-ability.cpp	/^	strmap_t player_base_ability::export_class() {$/;"	f	class:mods::orm::player_base_ability
export_class	mods/orm/player-contract-state.cpp	/^	strmap_t player_contract_state::export_class() {$/;"	f	class:mods::orm::player_contract_state
export_class	mods/orm/player-skill-points.cpp	/^	strmap_t player_skill_points::export_class() {$/;"	f	class:mods::orm::player_skill_points
export_class	mods/orm/player-skill-points.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::player_skill_points_record_t
export_class	mods/orm/player-skill-usage.cpp	/^	strmap_t player_skill_usage::export_class() {$/;"	f	class:mods::orm::player_skill_usage
export_class	mods/orm/player-skill-usage.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::player_skill_usage_record_t
export_class	mods/orm/pyrexia.cpp	/^	strmap_t pyrexia::export_class() {$/;"	f	class:mods::orm::pyrexia
export_class	mods/orm/rifle-attachment.cpp	/^	strmap_t rifle_attachment::export_class() {$/;"	f	class:mods::orm::rifle_attachment
export_class	mods/orm/rifle-attachment.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::rifle_attachment_record_t
export_class	mods/orm/rifle-index.cpp	/^	strmap_t rifle_index::export_class() {$/;"	f	class:mods::orm::rifle_index
export_class	mods/orm/rifle-index.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::rifle_index_record_t
export_class	mods/orm/rifle-instance.cpp	/^	strmap_t rifle_instance::export_class() {$/;"	f	class:mods::orm::rifle_instance
export_class	mods/orm/room.cpp	/^	sql_save_map_t room::export_class() {$/;"	f	class:mods::orm::room
export_class	mods/orm/skill-points.cpp	/^	strmap_t skill_points::export_class() {$/;"	f	class:mods::orm::skill_points
export_class	mods/orm/skill-points.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::skill_points_record_t
export_class	mods/orm/skill-trees.cpp	/^	strmap_t skill_trees::export_class() {$/;"	f	class:mods::orm::skill_trees
export_class	mods/orm/skill-trees.hpp	/^		strmap_t export_class() {$/;"	f	struct:mods::orm::skill_trees_record_t
export_class	mods/orm/sniper.cpp	/^	strmap_t sniper::export_class() {$/;"	f	class:mods::orm::sniper
export_class	mods/orm/striker.cpp	/^	strmap_t striker::export_class() {$/;"	f	class:mods::orm::striker
export_class	mods/orm/support.cpp	/^	strmap_t support::export_class() {$/;"	f	class:mods::orm::support
export_class	mods/orm/syndrome.cpp	/^	strmap_t syndrome::export_class() {$/;"	f	class:mods::orm::syndrome
export_class	mods/pq.hpp	/^	virtual strmap_t export_class() {$/;"	f	struct:orm_base
export_insert	mods/orm/room.cpp	/^	sql_save_map_t room::export_insert() {$/;"	f	class:mods::orm::room
export_objects	mods/rifle-attachments.cpp	/^	rifle_attachments_t::encoding_t rifle_attachments_t::export_objects() {$/;"	f	class:mods::rifle_attachments_t
export_shop	shop.cpp	/^std::map<std::string,std::string> shop_data<TOrmType,T,R>::export_shop() {$/;"	f	class:shop_data
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::armor_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::attachment_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::consumable_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::container_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::drone_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::explosive_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::gadget_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::melee_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::rifle_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::trap_description_t
exported	mods/yaml.hpp	/^		std::map<std::string,std::string> exported;$/;"	m	struct:mods::yaml::vehicle_description_t
ext_map	mods/mobs/extended-types.hpp	/^	static std::map<extended_types_t,std::string> ext_map = {$/;"	m	namespace:mods::mobs
extended_item_vnum	structs.h	/^		uint64_t extended_item_vnum;$/;"	m	struct:obj_data
extended_type	structs.h	/^		int extended_type; \/** i.e. mw_rifle::SUB_MACHINE_GUN *\/$/;"	m	struct:obj_data
extended_types	mods/mobs/extended-types.cpp	/^namespace mods::mobs::extended_types {$/;"	n	class:mods::mobs	file:
extended_types	mods/mobs/extended-types.hpp	/^	namespace extended_types {$/;"	n	namespace:mods::mobs
extra_bits	constants.cpp	/^const char *extra_bits[] = {$/;"	v
extra_bits	constants.hpp	/^const char *extra_bits[] = {$/;"	v
extra_bits_count	constants.cpp	/^        extra_bits_count = sizeof(extra_bits) \/ sizeof(extra_bits[0]) - 1,$/;"	v
extra_bits_count	constants.hpp	/^	extra_bits_count = sizeof(extra_bits) \/ sizeof(extra_bits[0]) - 1,$/;"	v
extra_desc_data	mods/extra_desc_data.cpp	/^	extra_desc_data::extra_desc_data($/;"	f	class:mods::extra_desc_data
extra_desc_data	mods/extra_desc_data.cpp	/^	extra_desc_data::extra_desc_data() : $/;"	f	class:mods::extra_desc_data
extra_desc_data	mods/extra_desc_data.hpp	/^	struct extra_desc_data {$/;"	s	namespace:mods
extra_descr_data	structs.h	/^	extra_descr_data() : keyword(""), description("") {}$/;"	f	struct:extra_descr_data
extra_descr_data	structs.h	/^	extra_descr_data(mentoc_pqxx_result_t k,mentoc_pqxx_result_t d) :$/;"	f	struct:extra_descr_data
extra_descr_data	structs.h	/^	extra_descr_data(pqxx::field k,pqxx::field d) :$/;"	f	struct:extra_descr_data
extra_descr_data	structs.h	/^	extra_descr_data(std::string_view k,std::string_view d) :$/;"	f	struct:extra_descr_data
extra_descr_data	structs.h	/^struct extra_descr_data {$/;"	s
extra_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,17> extra_flags = { {$/;"	m	namespace:mods::builder	file:
extra_flags	structs.h	/^	int \/*bitvector_t*\/	extra_flags;	\/* If it hums, glows, etc.	    *\/$/;"	m	struct:obj_flag_data
extra_flags	structs.h	/^	int \/*bitvector_t*\/	extra_flags;$/;"	m	struct:obj_file_elem
extra_flags_t	structs.h	/^enum extra_flags_t {$/;"	g
extract_after	mods/util.cpp	/^	std::string extract_after(std::string_view target, char this_char) {$/;"	f	namespace:mods::util
extract_base_yaml_file	mods/rifle-attachments.cpp	/^	std::string rifle_attachments_t::extract_base_yaml_file(const encoding_t& line) {$/;"	f	class:mods::rifle_attachments_t
extract_char	handler.cpp	/^void extract_char(char_data *ch) {$/;"	f
extract_char_final	handler.cpp	/^void extract_char_final(char_data *ch) {$/;"	f
extract_character	mods/players/db-load.cpp	/^	void extract_character(player_ptr_t& player_ptr) {$/;"	f	namespace:mods::players::db_load
extract_deep_reward	mods/util.cpp	/^	std::tuple<bool,int,std::string,strmap_t> extract_deep_reward(std::string reward) {$/;"	f	namespace:mods::util
extract_int	mods/builder/slotted-builder.hpp	/^			std::optional<TExtractType> extract_int(std::string verb,std::string argument,std::size_t index) {$/;"	f	struct:mods::builder::slotted_builder
extract_line_items	mods/deep-object-parser.cpp	/^	str_map_t deep_object_parser_t::extract_line_items(const std::string& line, const std::vector<std::string>& slot_names) {$/;"	f	class:mods::deep_object_parser_t
extract_obj	handler.cpp	/^void extract_obj(struct obj_data *obj) {$/;"	f
extract_pending_chars	handler.cpp	/^void extract_pending_chars() {$/;"	f
extract_profile	mods/builder/slotted-builder.hpp	/^			optional_orm_t extract_profile(std::string verb,std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
extract_profile	mods/builder/slotted-builder.hpp	/^			optional_orm_t extract_profile(std::string verb,std::string argument,std::size_t index) {$/;"	f	struct:mods::builder::slotted_builder
extract_reference_field_from_meta_key	mods/meta_utils.cpp	/^	std::string extract_reference_field_from_meta_key(const std::string& key){$/;"	f	namespace:mods::meta_utils
extract_until	mods/util.cpp	/^	std::string extract_until(std::string_view target, char this_char) {$/;"	f	namespace:mods::util
extract_yaml_info_from_path	mods/util.cpp	/^	std::tuple<int,std::string> extract_yaml_info_from_path(std::string_view path) {$/;"	f	namespace:mods::util
extract_yaml_reward	mods/util.cpp	/^	std::tuple<bool,int,std::string> extract_yaml_reward(std::string reward) {$/;"	f	namespace:mods::util
extractions_pending	handler.cpp	/^int extractions_pending = 0;$/;"	v
f_import_rooms	globals.cpp	/^		bool f_import_rooms;$/;"	m	namespace:mods::globals	file:
face_direction	mods/mobs/mini-gunner.hpp	/^		static inline std::string face_direction(std::string value) {$/;"	f	namespace:mods::mobs::mg::orm
factory	mods/orm/factory.hpp	/^namespace mods::orm::factory {$/;"	n	class:mods::orm
false_type	mods/catch2.hpp	/^            static auto test(...)->std::false_type;$/;"	m	class:Catch::Detail::IsStreamInsertable::std
feed	mods/forge-engine/item-type-chooser.cpp	/^	int16_t generator::feed(const pqxx::result::reference & r){$/;"	f	class:mods::forge_engine::generator
feed	mods/orm/base.cpp	/^	int16_t base::feed(const pqxx::result::reference & r){$/;"	f	class:mods::orm::base
feed	mods/orm/breacher.cpp	/^	int16_t breacher::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::breacher
feed	mods/orm/camera-feed.cpp	/^	int16_t camera_feed::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::camera_feed
feed	mods/orm/chargen.cpp	/^	int16_t player_classes::feed(const pqxx::result::reference & result){$/;"	f	class:mods::orm::player_classes
feed	mods/orm/chargen.cpp	/^	int16_t player_generated_data::feed(const pqxx::result::reference & result){$/;"	f	class:mods::orm::player_generated_data
feed	mods/orm/chargen.cpp	/^	int16_t player_race_perks::feed(const pqxx::result::reference & result){$/;"	f	class:mods::orm::player_race_perks
feed	mods/orm/chargen.cpp	/^	int16_t player_races::feed(const pqxx::result::reference & result){$/;"	f	class:mods::orm::player_races
feed	mods/orm/chargen.cpp	/^	int16_t player_skill_trees_unlocked::feed(const pqxx::result::reference & result){$/;"	f	class:mods::orm::player_skill_trees_unlocked
feed	mods/orm/chargen.cpp	/^	int16_t skill_trees::feed(const pqxx::result::reference & result){$/;"	f	class:mods::orm::skill_trees
feed	mods/orm/chargen.cpp	/^	int16_t specialty_skills::feed(const pqxx::result::reference & result){$/;"	f	class:mods::orm::specialty_skills
feed	mods/orm/contract-steps.cpp	/^	int16_t contract_steps::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::contract_steps
feed	mods/orm/contracts.cpp	/^	int16_t contracts::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::contracts
feed	mods/orm/door-event.cpp	/^	int16_t door_event::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::door_event
feed	mods/orm/elevator.cpp	/^	int16_t elevator::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::elevator
feed	mods/orm/engineer.cpp	/^	int16_t engineer::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::engineer
feed	mods/orm/forge.cpp	/^	int16_t forge::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::forge
feed	mods/orm/ghost.cpp	/^	int16_t ghost::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::ghost
feed	mods/orm/hq.cpp	/^	int16_t hq::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::hq
feed	mods/orm/integral-object.cpp	/^	int16_t integral_object::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::integral_object
feed	mods/orm/marine.cpp	/^	int16_t marine::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::marine
feed	mods/orm/medic.cpp	/^	int16_t medic::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::medic
feed	mods/orm/mob-equipment-map.cpp	/^	int16_t mob_equipment_map::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::mob_equipment_map
feed	mods/orm/mob-equipment.cpp	/^	int16_t mob_equipment::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::mob_equipment
feed	mods/orm/orm-base.hpp	/^		virtual int16_t feed(const pqxx::result::reference&) {$/;"	f	struct:mods::orm::orm_base
feed	mods/orm/player-base-ability.cpp	/^	int16_t player_base_ability::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::player_base_ability
feed	mods/orm/player-contract-state.hpp	/^		int16_t feed(const pqxx::result::reference&) {$/;"	f	struct:mods::orm::player_contract_state
feed	mods/orm/pyrexia.cpp	/^	int16_t pyrexia::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::pyrexia
feed	mods/orm/rifle-attachment.cpp	/^	int16_t rifle_attachment::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::rifle_attachment
feed	mods/orm/rifle-instance.cpp	/^	int16_t rifle_instance::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::rifle_instance
feed	mods/orm/room.cpp	/^	int16_t room::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::room
feed	mods/orm/shop.cpp	/^	int16_t shop::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::shop
feed	mods/orm/sniper.cpp	/^	int16_t sniper::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::sniper
feed	mods/orm/striker.cpp	/^	int16_t striker::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::striker
feed	mods/orm/support.cpp	/^	int16_t support::feed(const pqxx::result::reference& row) {$/;"	f	class:mods::orm::support
feed	mods/orm/syndrome.cpp	/^	int16_t syndrome::feed(const pqxx::result::reference & row){$/;"	f	class:mods::orm::syndrome
feed	mods/pq.hpp	/^	virtual int16_t feed(const pqxx::result::reference&) {$/;"	f	struct:orm_base
feed	mods/weapon-types.hpp	/^	std::tuple<std::unique_ptr<AttributesType>,uint64_t> feed(std::string_view file) {$/;"	f	namespace:mods::weapon_types
feed	mods/weapons/pistol-czp10.cpp	/^	void czp10::feed(const mods::pq::row_type & row){$/;"	f	class:mods::weapons::pistol::czp10
feed	mods/weapons/shotgun-sasg12.cpp	/^	void sasg12::feed(const mods::pq::row_type & row){$/;"	f	class:mods::weapons::shotgun::sasg12
feed	mods/weapons/smg-mp5.cpp	/^	void mp5::feed(const mods::pq::row_type & row){$/;"	f	class:mods::weapons::smg::mp5
feed	mods/weapons/sniper-rifle-l96aw.cpp	/^	void l96aw::feed(const mods::pq::row_type & row){$/;"	f	class:mods::weapons::sniper_rifle::l96aw
feed	mods/weapons/sniper-rifle-psg1.cpp	/^	void psg1::feed(const mods::pq::row_type & row){$/;"	f	class:mods::weapons::sniper_rifle::psg1
feed	mods/yaml.cpp	/^	int16_t armor_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::armor_description_t
feed	mods/yaml.cpp	/^	int16_t attachment_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::attachment_description_t
feed	mods/yaml.cpp	/^	int16_t consumable_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::consumable_description_t
feed	mods/yaml.cpp	/^	int16_t container_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::container_description_t
feed	mods/yaml.cpp	/^	int16_t drone_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::drone_description_t
feed	mods/yaml.cpp	/^	int16_t explosive_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::explosive_description_t
feed	mods/yaml.cpp	/^	int16_t gadget_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::gadget_description_t
feed	mods/yaml.cpp	/^	int16_t melee_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::melee_description_t
feed	mods/yaml.cpp	/^	int16_t rifle_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::rifle_description_t
feed	mods/yaml.cpp	/^	int16_t trap_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::trap_description_t
feed	mods/yaml.cpp	/^	int16_t vehicle_description_t::feed(std::string_view in_file) {$/;"	f	class:mods::yaml::vehicle_description_t
feed	shop.cpp	/^void shop_data<mods::orm::shop,mods::orm::shop_rooms,mods::orm::shop_objects>::feed(const pqxx::result::reference& in_row)$/;"	f	class:shop_data
feed	structs.cpp	/^int16_t obj_data::feed(int16_t in_type,std::string_view feed_file) {$/;"	f	class:obj_data
feed	structs.cpp	/^void obj_flag_data::feed(const pqxx::result::reference& row) {$/;"	f	class:obj_flag_data
feed_ability_data	mods/orm/player-base-ability.cpp	/^	void player_base_ability::feed_ability_data(char_ability_data& data) {$/;"	f	class:mods::orm::player_base_ability
feed_armor_locker	mods/integral-objects.cpp	/^	void feed_armor_locker(room_vnum room) {$/;"	f	namespace:mods::integral_objects
feed_by_file	mods/weapons/pistol-czp10.cpp	/^	obj_data_ptr_t czp10::feed_by_file(std::string_view file){$/;"	f	class:mods::weapons::pistol::czp10
feed_by_file	mods/weapons/shotgun-sasg12.cpp	/^	obj_data_ptr_t sasg12::feed_by_file(std::string_view file){$/;"	f	class:mods::weapons::shotgun::sasg12
feed_by_file	mods/weapons/smg-mp5.cpp	/^	obj_data_ptr_t mp5::feed_by_file(std::string_view file){$/;"	f	class:mods::weapons::smg::mp5
feed_camera_feed	mods/integral-objects.cpp	/^	void feed_camera_feed(room_vnum room_v_num) {$/;"	f	namespace:mods::integral_objects
feed_caps	mods/weapon.hpp	/^	static inline void feed_caps(TObj& obj, T type) {$/;"	f	namespace:mods::weapon
feed_file	mods/yaml.hpp	/^		std::string feed_file;$/;"	m	struct:mods::yaml::yaml_description_t
feed_file	structs.h	/^		std::string_view feed_file() {$/;"	f	struct:obj_data
feed_from_po_record	mods/yaml.cpp	/^	int16_t gadget_description_t::feed_from_po_record(mentoc_pqxx_result_t yaml_file) {$/;"	f	class:mods::yaml::gadget_description_t
feed_from_po_record	mods/yaml.cpp	/^	int16_t melee_description_t::feed_from_po_record(mentoc_pqxx_result_t yaml_file) {$/;"	f	class:mods::yaml::melee_description_t
feed_from_po_record	mods/yaml.cpp	/^	int16_t rifle_description_t::feed_from_po_record(mentoc_pqxx_result_t yaml_file) {$/;"	f	class:mods::yaml::rifle_description_t
feed_from_po_record	mods/yaml.cpp	/^	int16_t vehicle_description_t::feed_from_po_record(mentoc_pqxx_result_t yaml_file) {$/;"	f	class:mods::yaml::vehicle_description_t
feed_id	mods/orm/camera-feed.hpp	/^		id_type_t feed_id;$/;"	m	struct:mods::orm::camera_feed
feed_id	mods/orm/elevator.hpp	/^		id_type_t feed_id;$/;"	m	struct:mods::orm::elevator
feed_multi	mods/orm/armor-index.cpp	/^	void armor_index::feed_multi(pqxx::result& in_rows) {$/;"	f	class:mods::orm::armor_index
feed_multi	mods/orm/mini-game.hpp	/^		int16_t feed_multi(TResultSet rows){$/;"	f	struct:mods::orm::mini_game
feed_multi	mods/orm/mob-roam.cpp	/^	void mob_roam::feed_multi(pqxx::result& in_rows) {$/;"	f	class:mods::orm::mob_roam
feed_multi	mods/orm/player-skill-points.cpp	/^	void player_skill_points::feed_multi(pqxx::result& in_rows) {$/;"	f	class:mods::orm::player_skill_points
feed_multi	mods/orm/player-skill-usage.cpp	/^	void player_skill_usage::feed_multi(pqxx::result& in_rows) {$/;"	f	class:mods::orm::player_skill_usage
feed_multi	mods/orm/rifle-index.cpp	/^	void rifle_index::feed_multi(pqxx::result& in_rows) {$/;"	f	class:mods::orm::rifle_index
feed_multi	mods/orm/skill-points.cpp	/^	void skill_points::feed_multi(pqxx::result& in_rows) {$/;"	f	class:mods::orm::skill_points
feed_multi	mods/orm/skill-trees.cpp	/^	void skill_trees::feed_multi(pqxx::result& in_rows) {$/;"	f	class:mods::orm::skill_trees
feed_order	mods/orm/camera-feed.hpp	/^		feed_order_t feed_order;$/;"	m	struct:mods::orm::camera_feed
feed_order	mods/orm/elevator.hpp	/^		feed_order_t feed_order;$/;"	m	struct:mods::orm::elevator
feed_player	mods/orm/inventory.cpp	/^			int16_t feed_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory::lmdb::yaml
feed_player	mods/orm/inventory.cpp	/^		int16_t feed_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory::lmdb
feed_player	mods/orm/inventory.cpp	/^		int16_t feed_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory::sql
feed_player	mods/orm/inventory.cpp	/^	int16_t feed_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory
feed_player	mods/orm/player-base-ability.cpp	/^	void player_base_ability::feed_player(player_ptr_t& player) {$/;"	f	class:mods::orm::player_base_ability
feed_player_by_uuid	mods/orm/inventory.cpp	/^	int16_t feed_player_by_uuid(uuid_t uuid) {$/;"	f	namespace:mods::orm::inventory
feed_room_vnum	mods/orm/camera-feed.hpp	/^		room_vnum_t feed_room_vnum;$/;"	m	struct:mods::orm::camera_feed
feed_room_vnum	mods/orm/elevator.hpp	/^		room_vnum_t feed_room_vnum;$/;"	m	struct:mods::orm::elevator
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::armor_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::attachment_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::consumable_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::container_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::drone_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::explosive_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::gadget_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::melee_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::rifle_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::trap_description_t
feed_status	mods/yaml.hpp	/^		int16_t feed_status;$/;"	m	struct:mods::yaml::vehicle_description_t
feed_status	structs.h	/^		int16_t feed_status;$/;"	m	struct:obj_data
feed_type	mods/orm/camera-feed.hpp	/^		std::string feed_type;$/;"	m	struct:mods::orm::camera_feed
feed_type	mods/orm/elevator.hpp	/^		std::string feed_type;$/;"	m	struct:mods::orm::elevator
feed_vnum	mods/orm/camera-feed.hpp	/^		feed_vnum_t feed_vnum;$/;"	m	struct:mods::orm::camera_feed
feed_vnum	mods/orm/elevator.hpp	/^		feed_vnum_t feed_vnum;$/;"	m	struct:mods::orm::elevator
feed_weapon_locker	mods/integral-objects.cpp	/^	void feed_weapon_locker(room_vnum room) {$/;"	f	namespace:mods::integral_objects
feedback_t	mods/damage-event.hpp	/^struct feedback_t {$/;"	s
feign_death	mods/classes/ghost.cpp	/^	std::pair<int16_t,std::string> ghost::feign_death(){$/;"	f	class:mods::classes::ghost
feign_death_done	mods/classes/ghost.cpp	/^	void ghost::feign_death_done(){$/;"	f	class:mods::classes::ghost
feign_death_levels_t	mods/orm/striker.hpp	/^		enum feign_death_levels_t {$/;"	g	struct:mods::orm::striker
fetch	mods/forge-engine/util.hpp	/^	int16_t fetch(std::variant<uint32_t,float>& v,TOriginalValue original) {$/;"	f	namespace:mods::forge_engine
fetch_builder_help	mods/help.cpp	/^	void fetch_builder_help(std::vector<std::string>& screen) {$/;"	f	namespace:mods::help
fetch_by_meta	mods/orm/fetcher.hpp	/^	std::vector<TRowType>&& fetch_by_meta(std::string_view column,std::string_view value) {$/;"	f	namespace:mods::orm
fetch_by_meta	mods/orm/fetcher.hpp	/^	uint64_t fetch_by_meta(std::string_view table_name,$/;"	f	namespace:mods::orm::generator
fetch_list_by_mob_vnum	mods/mob-equipment.cpp	/^	std::array<std::string,NUM_WEARS> fetch_list_by_mob_vnum(mob_vnum mobvnum) {$/;"	f	namespace:mods::mob_equipment
fetch_mortal_help	mods/help.cpp	/^	void fetch_mortal_help(std::vector<std::string>& screen) {$/;"	f	namespace:mods::help
fetch_valid_elemental_types	mods/forge-engine/elemental-enum.hpp	/^	static inline const std::vector<elemental_types_t>& fetch_valid_elemental_types() {$/;"	f	namespace:mods::forge_engine
fg	mods/acl/color.hpp	/^        namespace fg {$/;"	n	namespace:mods::Color
fiddler	mods/super-users.hpp	/^	static std::shared_ptr<mods::classes::super_user_fiddler> fiddler;$/;"	m	namespace:mods::super_users
fido	spec_assign.cpp	/^SPECIAL(fido);$/;"	v
fido	spec_procs.cpp	/^SPECIAL(fido);$/;"	v
field_type_t	mods/builder.cpp	/^enum field_type_t {$/;"	g	file:
fields_fed_so_far	mods/object-utils.hpp	/^		std::vector<std::string> fields_fed_so_far;$/;"	m	struct:mods::object_utils::YamlFeedExceptionInfo
fields_to_grab	mods/lmdb.cpp	/^	std::vector<std::string> _db_handle::fields_to_grab(const std::string& table){$/;"	f	class:mods::lmdb::_db_handle
fight_messages	db.cpp	/^struct message_list fight_messages[MAX_MESSAGES];	\/* fighting messages	 *\/$/;"	v	typeref:struct:message_list
fighting	mods/player.hpp	/^			player_ptr_t fighting() {$/;"	f	struct:mods::player
file	mods/catch.hpp	/^		char const* file;$/;"	m	struct:Catch::SourceLineInfo
file	mods/catch2.hpp	/^        char const* file;$/;"	m	struct:Catch::SourceLineInfo
file_end_pos	mail.cpp	/^long file_end_pos = 0;			\/* length of file *\/$/;"	v
file_exists	mods/filesystem.hpp	/^	static inline bool file_exists(const std::string& path){$/;"	f	namespace:mods::filesystem
file_get_contents	mods/filesystem.hpp	/^	static inline int file_get_contents(std::string_view path, std::string& guts,std::string& error){$/;"	f	namespace:mods::filesystem
file_to_lmdb	globals.cpp	/^		int file_to_lmdb(const std::string& file, const std::string& key) {$/;"	f	namespace:mods::globals
filename	boards.h	/^	char	filename[50];	\/* file to save this board to *\/$/;"	m	struct:board_info_type
filesystem	mods/filesystem.hpp	/^namespace mods::filesystem {$/;"	n	class:mods
fill	interpreter.cpp	/^const char *fill[] = {$/;"	v
fill	mods/forge-engine/generated-armor.cpp	/^	void generated_armor_t::fill(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_armor_t
fill	mods/forge-engine/generated-rifle.cpp	/^	void generated_rifle_t::fill(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_rifle_t
fill	mods/orm/contract-steps.hpp	/^		void fill(mods::contracts::contract& c) {$/;"	f	struct:mods::orm::contract_steps
fill_armor_attributes_generic	mods/forge-engine/util.hpp	/^	void fill_armor_attributes_generic(obj_ptr_t& obj,TAttributeContainer& attribute_list,TObjDataExtendedTypePointer* attributes) {$/;"	f	namespace:mods::forge_engine
fill_attributes	mods/forge-engine/generated-armor.cpp	/^	void generated_armor_t::fill_attributes(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_armor_t
fill_attributes	mods/forge-engine/generated-rifle.cpp	/^	void generated_rifle_t::fill_attributes(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_rifle_t
fill_elemental	mods/forge-engine/generated-armor.cpp	/^	void generated_armor_t::fill_elemental(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_armor_t
fill_elemental	mods/forge-engine/generated-rifle.cpp	/^	void generated_rifle_t::fill_elemental(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_rifle_t
fill_elemental_damage_generic	mods/forge-engine/util.hpp	/^	void fill_elemental_damage_generic(obj_ptr_t& obj,TAttributeContainer& damages, TObjDataExtendedTypePointer* attributes) {$/;"	f	namespace:mods::forge_engine
fill_elemental_resistances_generic	mods/forge-engine/util.hpp	/^	void fill_elemental_resistances_generic(obj_ptr_t& obj,TAttributeContainer& resistances, TObjDataExtendedTypePointer* attributes) {$/;"	f	namespace:mods::forge_engine
fill_flags	mods/yaml.cpp	/^	void armor_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::armor_description_t
fill_flags	mods/yaml.cpp	/^	void attachment_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::attachment_description_t
fill_flags	mods/yaml.cpp	/^	void consumable_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::consumable_description_t
fill_flags	mods/yaml.cpp	/^	void container_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::container_description_t
fill_flags	mods/yaml.cpp	/^	void drone_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::drone_description_t
fill_flags	mods/yaml.cpp	/^	void explosive_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::explosive_description_t
fill_flags	mods/yaml.cpp	/^	void gadget_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::gadget_description_t
fill_flags	mods/yaml.cpp	/^	void melee_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::melee_description_t
fill_flags	mods/yaml.cpp	/^	void rifle_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::rifle_description_t
fill_flags	mods/yaml.cpp	/^	void trap_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::trap_description_t
fill_flags	mods/yaml.cpp	/^	void vehicle_description_t::fill_flags(obj_data* o) {$/;"	f	class:mods::yaml::vehicle_description_t
fill_rifle_attributes_generic	mods/forge-engine/util.hpp	/^	void fill_rifle_attributes_generic(obj_ptr_t& obj,TAttributeContainer& attribute_list,TObjDataExtendedTypePointer* attributes) {$/;"	f	namespace:mods::forge_engine
fill_stats	mods/forge-engine/generated-armor.cpp	/^	void generated_armor_t::fill_stats(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_armor_t
fill_stats	mods/forge-engine/generated-rifle.cpp	/^	void generated_rifle_t::fill_stats(obj_ptr_t& obj) {$/;"	f	class:mods::forge_engine::generated_rifle_t
fill_stats_generic	mods/forge-engine/util.hpp	/^	void fill_stats_generic(obj_ptr_t& obj,TAttributeType& stats,TAttributesPointer* attributes) {$/;"	f	namespace:mods::forge_engine
fill_word	interpreter.cpp	/^int fill_word(char *argument) {$/;"	f
find	mods/orm/fetcher.hpp	/^	TRowType&& find(const uint64_t& id){$/;"	f	namespace:mods::orm
find	mods/orm/fetcher.hpp	/^	uint64_t find(std::string_view table_name,const uint64_t& id,TFunctionCallback callback){$/;"	f	namespace:mods::orm::generator
find_action	act.social.cpp	/^int find_action(int cmd) {$/;"	f
find_alias	interpreter.cpp	/^struct alias_data *find_alias(struct alias_data *alias_list, char *str) {$/;"	f
find_all_dots	handler.cpp	/^int find_all_dots(char *arg) {$/;"	f
find_board	boards.cpp	/^int find_board(char_data *ch) {$/;"	f
find_by_column	mods/orm/fetcher.hpp	/^	uint64_t find_by_column(std::string_view table_name,const uint64_t& id,TFunctionCallback callback,std::string_view column){$/;"	f	namespace:mods::orm::generator
find_char_in_index	mail.cpp	/^mail_index_type *find_char_in_index(long searchee) {$/;"	f
find_class_bitvector	class.cpp	/^bitvector_t find_class_bitvector(const char *arg) {$/;"	f
find_command	interpreter.cpp	/^int find_command(const char *command) {$/;"	f
find_door	act.movement.cpp	/^int find_door(char_data *ch, const char *type, char *dir, const char *cmdname) {$/;"	f
find_door	mods/player-contract-instance.cpp	/^	void player_contract_instance::find_door(const room_rnum& room_id,const int8_t& direction) {$/;"	f	class:mods::contracts::player_contract_instance
find_eq_pos	act.item.cpp	/^int find_eq_pos(char_data *ch, struct obj_data *obj, char *arg) {$/;"	f
find_exdesc	act.informative.cpp	/^char * find_exdesc(char *word,room_data& r) {$/;"	f
find_exdesc	act.informative.cpp	/^char* find_exdesc(std::string_view word,std::vector<extra_descr_data>& in_list) {$/;"	f
find_exdesc_equipment	act.informative.cpp	/^const char* find_exdesc_equipment(std::string_view word,const char_data* ch,const std::size_t& position) {$/;"	f
find_first_step	graph.cpp	/^int find_first_step(room_rnum src, room_rnum target) {$/;"	f
find_guard	castle.cpp	/^char_data * find_guard(char_data *ch) {$/;"	f
find_house	house.cpp	/^int find_house(room_vnum vnum) {$/;"	f
find_item	mods/player-contract-instance.cpp	/^	void player_contract_instance::find_item(const uuid_t& item_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
find_local_step_by_id	mods/builder/conbuild.cpp	/^		std::optional<std::shared_ptr<mods::orm::contract_steps>> find_local_step_by_id(const uint64_t& step_id) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
find_mob	mods/player-contract-instance.cpp	/^	void player_contract_instance::find_mob(const uuid_t& mob_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
find_multi	mods/orm/fetcher.hpp	/^	std::vector<TRowType>&& find_multi(TIterable & id_list){$/;"	f	namespace:mods::orm
find_multi	mods/orm/fetcher.hpp	/^	uint64_t find_multi(std::string_view table_name,TIdList id_list, TFunctionCallback callback){$/;"	f	namespace:mods::orm::generator
find_multi_by_column	mods/orm/fetcher.hpp	/^	uint64_t find_multi_by_column($/;"	f	namespace:mods::orm::generator
find_nickname	mods/rooms.cpp	/^	std::optional<room_rnum> find_nickname(std::string_view nick) {$/;"	f	namespace:mods::rooms
find_npc_by_name	castle.cpp	/^char_data *find_npc_by_name(char_data *ch,$/;"	f
find_oper_num	shop.cpp	/^int find_oper_num(char token) {$/;"	f
find_player_by_name	mods/examine.cpp	/^	uuid_t find_player_by_name(player_ptr_t& player, std::string_view arg) {$/;"	f	namespace:mods::examine
find_player_by_name	mods/js.cpp	/^			player_ptr_t find_player_by_name(std::string_view name,bool& found) {$/;"	f	namespace:mods::js::utils
find_player_by_name	mods/players/search.hpp	/^			std::optional<uuid_t> find_player_by_name(std::string_view name){$/;"	f	namespace:mods::player::util
find_player_by_name	mods/players/util.hpp	/^			std::optional<uuid_t> find_player_by_name(std::string_view name){$/;"	f	namespace:mods::players::util
find_player_payload_t	mods/js.cpp	/^				find_player_payload_t(std::string_view name) : player_name(name.data()), found(false) {$/;"	f	struct:mods::js::utils::find_player_payload_t
find_player_payload_t	mods/js.cpp	/^			struct find_player_payload_t {$/;"	s	namespace:mods::js::utils	file:
find_results_t	mods/scan.hpp	/^		struct find_results_t {$/;"	s	namespace:mods::scan
find_roam_profile	mods/mob-roam.cpp	/^	std::optional<std::shared_ptr<mods::mob_roam::roam_recorder>> find_roam_profile(std::string_view profile_name) {$/;"	f	namespace:mods::mob_roam
find_room	mods/player-contract-instance.cpp	/^	void player_contract_instance::find_room(const room_rnum& room_id) {$/;"	f	class:mods::contracts::player_contract_instance
find_skill_num	spell_parser.cpp	/^int find_skill_num(char *name) {$/;"	f
find_slot	boards.cpp	/^int find_slot(void) {$/;"	f
find_target_room	act.wizard.cpp	/^room_rnum find_target_room(char_data *ch, char *rawroomstr) {$/;"	f
find_targets	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto find_targets() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
find_targets	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto find_targets() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
find_targets_with_compromised_line_of_sight	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto find_targets_with_compromised_line_of_sight() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
find_type_t	mods/scan.hpp	/^		enum find_type_t {$/;"	g	namespace:mods::scan
finished	mods/player-contract-instance.cpp	/^	bool player_contract_instance::finished() {$/;"	f	class:mods::contracts::player_contract_instance
fire	mods/projectile.cpp	/^			int fire;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
fire_damage	mods/projectile.cpp	/^		int fire_damage(player_ptr_t victim,obj_ptr_t projectile) {$/;"	f	namespace:mods::projectile
fire_penetrating_shot_at	mods/classes/ghost.cpp	/^	std::tuple<uint32_t,std::string> ghost::fire_penetrating_shot_at(uuid_t npc_uuid){$/;"	f	class:mods::classes::ghost
fire_status	structs.h	/^		fire_status_t& fire_status() {$/;"	f
fire_status_start	structs.h	/^		void fire_status_start() {$/;"	f
fire_weapon	mods/rifle-instance-data.hpp	/^	void fire_weapon(){$/;"	f	struct:heat
first_alpha_is_any	mods/util.cpp	/^	bool first_alpha_is_any(std::string_view line,std::string_view any) {$/;"	f	namespace:mods::util
first_or_create	mods/integral-objects-db.cpp	/^	obj_ptr_t first_or_create(room_vnum room,std::string query, int type, std::string yaml_file){$/;"	f	namespace:mods::integral_objects_db
first_values	mods/mini-games/line-up.hpp	/^		std::vector<uint8_t> first_values;$/;"	m	namespace:mods::mini_games
fixtures	mods/bugs-fixtures.cpp	/^	void fixtures(std::string from, std::string msg){$/;"	f	namespace:mods::bugs
fixtures	mods/bugs-fixtures.cpp	/^	void fixtures(std::string_view msg){$/;"	f	namespace:mods::bugs
flag_group	mods/flags.hpp	/^	enum flag_group {$/;"	g	namespace:mods::flags
flag_help	mods/builder_util.hpp	/^	void flag_help($/;"	f	namespace:mods::builder_util
flagged	mods/behaviour_tree_impl.hpp	/^	bool inline flagged(argument_type& mob) {$/;"	f	namespace:mods::behaviour_tree_impl
flagged	mods/behaviour_tree_impl.hpp	/^	bool inline flagged(argument_type& mob,const type& type) {$/;"	f	namespace:mods::behaviour_tree_impl
flagged	structs.cpp	/^bool obj_data::flagged(int value) {$/;"	f	class:obj_data
flags	mods/flags.hpp	/^namespace mods::flags {$/;"	n	class:mods
flags	shop.h	/^	uint64_t flags;$/;"	m	struct:shop_data
flags_door	act.movement.cpp	/^const int flags_door[] = {$/;"	v
flashbang	mods/flashbang.hpp	/^namespace mods::flashbang {$/;"	n	class:mods
float_types	mods/values.cpp	/^static const std::vector<value_key_t> float_types = {$/;"	m	namespace:mods::values	file:
flush	mods/builder/slotted-builder.hpp	/^			void flush() {$/;"	f	struct:mods::builder::slotted_builder
flush_output	structs.cpp	/^	size_t mods::descriptor_data::flush_output() {$/;"	f	class:mods::mods::descriptor_data
flush_player	mods/orm/inventory.cpp	/^			int16_t flush_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory::lmdb::yaml
flush_player	mods/orm/inventory.cpp	/^		int16_t flush_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory::lmdb
flush_player	mods/orm/inventory.cpp	/^		int16_t flush_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory::sql
flush_player	mods/orm/inventory.cpp	/^	int16_t flush_player(player_ptr_t& player) {$/;"	f	namespace:mods::orm::inventory
flush_player_by_uuid	mods/orm/inventory.cpp	/^	int16_t flush_player_by_uuid(uuid_t uuid) {$/;"	f	namespace:mods::orm::inventory
flush_player_rifle_attachments	mods/orm/rifle-attachment.cpp	/^	std::tuple<int16_t,std::string> flush_player_rifle_attachments(player_ptr_t player) {$/;"	f	namespace:mods::orm
flush_to_db	mods/builder.cpp	/^	bool flush_to_db(char_data *ch,int room) {$/;"	f	namespace:mods::builder
flush_to_db	mods/yaml.cpp	/^	uint64_t armor_description_t::flush_to_db() {$/;"	f	class:mods::yaml::armor_description_t
flush_to_db	mods/yaml.cpp	/^	uint64_t container_description_t::flush_to_db() {$/;"	f	class:mods::yaml::container_description_t
flush_to_db	mods/yaml.cpp	/^	uint64_t explosive_description_t::flush_to_db() {$/;"	f	class:mods::yaml::explosive_description_t
flush_to_db	mods/yaml.cpp	/^	uint64_t gadget_description_t::flush_to_db() {$/;"	f	class:mods::yaml::gadget_description_t
flush_to_db	mods/yaml.cpp	/^	uint64_t melee_description_t::flush_to_db() {$/;"	f	class:mods::yaml::melee_description_t
flush_to_db	mods/yaml.cpp	/^	uint64_t rifle_description_t::flush_to_db() {$/;"	f	class:mods::yaml::rifle_description_t
flush_to_db	mods/yaml.cpp	/^	uint64_t vehicle_description_t::flush_to_db() {$/;"	f	class:mods::yaml::vehicle_description_t
fluxkraft	mods/fluxkraft/arcon-bar.hpp	/^namespace mods::fluxkraft {$/;"	n	class:mods
fluxkraft	mods/fluxkraft/generator.cpp	/^namespace mods::fluxkraft {$/;"	n	class:mods	file:
fluxkraft	mods/fluxkraft/generator.hpp	/^namespace mods::fluxkraft {$/;"	n	class:mods
fluxkraft	mods/fluxkraft/shape-dictionary.cpp	/^namespace mods::fluxkraft {$/;"	n	class:mods	file:
fluxkraft	mods/fluxkraft/shape-dictionary.hpp	/^namespace mods::fluxkraft {$/;"	n	class:mods
fluxkraft	mods/init.hpp	/^INIT(mods::fluxkraft);$/;"	v
fmtfp	bsd-snprintf.cpp	/^fmtfp(char *buffer, size_t *currlen, size_t maxlen, long double fvalue,$/;"	f	file:
fmtint	bsd-snprintf.cpp	/^fmtint(char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtstr	bsd-snprintf.cpp	/^fmtstr(char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fname	handler.cpp	/^char *fname(const char *namelist) {$/;"	f
foobar	mods/orm/room.cpp	/^	void foobar() {$/;"	f	namespace:mods::orm
footer	mods/builder/slotted-builder.hpp	/^			std::string& footer() {$/;"	f	struct:mods::builder::slotted_builder
force_dark	mods/rooms.hpp	/^		static inline void force_dark(TRoom room) {$/;"	f	namespace:mods::rooms::gods
force_weapon_overheat	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::force_weapon_overheat(room_rnum room_id){$/;"	f	class:mods::orm::pyrexia
foreach_all	mods/loops.hpp	/^		static inline PointerType* foreach_all(function_with_return_t<PointerType> func,PointerType* param){$/;"	f	namespace:mods::loops::shptr
foreach_all	mods/loops.hpp	/^		static inline void foreach_all(function_t func){$/;"	f	namespace:mods::loops::shptr
foreach_all	mods/loops.hpp	/^	static inline void foreach_all(all_function_t func){$/;"	f	namespace:mods::loops
foreach_all_chars	mods/loops.cpp	/^	void foreach_all_chars(all_function_t func){$/;"	f	namespace:mods::loops
foreach_in_room	mods/loops.cpp	/^	void foreach_in_room(std::size_t room,player_function_t func){$/;"	f	namespace:mods::loops
foreach_mob	mods/loops.cpp	/^	void foreach_mob(mob_function_t func){$/;"	f	namespace:mods::loops
foreach_mob	mods/loops.cpp	/^	void foreach_mob(mods_npc_function_t func){$/;"	f	namespace:mods::loops
foreach_mob	mods/loops.hpp	/^		static inline PointerType* foreach_mob(function_with_return_t<PointerType> func,PointerType* param){$/;"	f	namespace:mods::loops::shptr
foreach_mob	mods/loops.hpp	/^		static inline void foreach_mob(npc_function_t func){$/;"	f	namespace:mods::loops::shptr
foreach_mob_as_player	mods/loops.hpp	/^		static inline void foreach_mob_as_player(function_t func){$/;"	f	namespace:mods::loops::shptr
foreach_player	mods/loops.cpp	/^	void foreach_player(player_function_t func){$/;"	f	namespace:mods::loops
foreach_player	mods/loops.hpp	/^		static inline PointerType* foreach_player(function_with_return_t<PointerType> func,PointerType* param){$/;"	f	namespace:mods::loops::shptr
foreach_player	mods/loops.hpp	/^		static inline void foreach_player(function_t func){$/;"	f	namespace:mods::loops::shptr
foreach_player	mods/loops.hpp	/^	static inline PointerType* foreach_player(mods_player_function_t<PointerType> func,PointerType* param){$/;"	f	namespace:mods::loops
foreach_step_do	mods/builder/conbuild.cpp	/^		std::pair<unsigned,unsigned> foreach_step_do(std::vector<int> list,std::string mode) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
forge	mods/classes/forge.cpp	/^	forge::forge(){$/;"	f	class:mods::classes::forge
forge	mods/classes/forge.cpp	/^	forge::forge(player_ptr_t p){$/;"	f	class:mods::classes::forge
forge	mods/classes/forge.cpp	/^namespace mods::class_abilities::forge {$/;"	n	class:mods::class_abilities	file:
forge	mods/classes/forge.hpp	/^	struct forge : base {$/;"	s	namespace:mods::classes
forge	mods/init.hpp	/^INIT(mods::class_abilities::forge);$/;"	v
forge	mods/orm/forge.hpp	/^		forge() : id(0) { this->init(); loaded = 0; }$/;"	f	struct:mods::orm::forge
forge	mods/orm/forge.hpp	/^	struct forge : public mods::orm::orm_base<forge,mods::weapon::ghost::primary_choice_t> {$/;"	s	namespace:mods::orm
forge	mods/player.cpp	/^	std::shared_ptr<mods::classes::forge>& player::forge() {$/;"	f	class:mods::player
forge_advance_level	mods/classes/forge.cpp	/^	void forge_advance_level(player_ptr_t& player){$/;"	f	namespace:mods::classes
forge_craft_ammunition_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_craft_ammunition_level;$/;"	m	struct:mods::orm::forge
forge_craft_armor_plating_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_craft_armor_plating_level;$/;"	m	struct:mods::orm::forge
forge_craft_flash_underbarrel_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_craft_flash_underbarrel_level;$/;"	m	struct:mods::orm::forge
forge_craft_high_velocity_ammo_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_craft_high_velocity_ammo_level;$/;"	m	struct:mods::orm::forge
forge_craft_incendiary_underbarrel_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_craft_incendiary_underbarrel_level;$/;"	m	struct:mods::orm::forge
forge_craft_shotgun_underbarrel_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_craft_shotgun_underbarrel_level;$/;"	m	struct:mods::orm::forge
forge_craft_silencer_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_craft_silencer_level;$/;"	m	struct:mods::orm::forge
forge_dismantle_weapon_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_dismantle_weapon_level;$/;"	m	struct:mods::orm::forge
forge_engine	mods/forge-engine/elemental-enum.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/forge-engine/generated-armor.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_engine	mods/forge-engine/generated-armor.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/forge-engine/generated-rifle.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_engine	mods/forge-engine/generated-rifle.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/forge-engine/generator.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_engine	mods/forge-engine/generator.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/forge-engine/item-type-chooser.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_engine	mods/forge-engine/player-class.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/forge-engine/requirements.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/forge-engine/util.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_engine	mods/forge-engine/util.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/forge-engine/value-scaler.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_engine	mods/forge-engine/value-scaler.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/loot.hpp	/^namespace mods::forge_engine {$/;"	n	class:mods
forge_engine	mods/orm/armor-index.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_engine	mods/orm/rifle-index.cpp	/^namespace mods::forge_engine {$/;"	n	class:mods	file:
forge_id	mods/orm/forge.hpp	/^		uint64_t forge_id;$/;"	m	struct:mods::orm::forge
forge_player_id	mods/orm/forge.hpp	/^		uint64_t forge_player_id;$/;"	m	struct:mods::orm::forge
forge_reinforce_weapon_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_reinforce_weapon_level;$/;"	m	struct:mods::orm::forge
forge_repair_armor_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_repair_armor_level;$/;"	m	struct:mods::orm::forge
forge_repair_weapon_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_repair_weapon_level;$/;"	m	struct:mods::orm::forge
forge_trade_attribute_level	mods/orm/forge.hpp	/^		skill_familiarity_t forge_trade_attribute_level;$/;"	m	struct:mods::orm::forge
forget	mobact.cpp	/^void forget(char_data *ch,char_data *victim) {$/;"	f
forget	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::forget(uuid_t player) {$/;"	f	class:mods::mobs::mini_gunner
forget	mods/mobs/smart-mob.cpp	/^	void smart_mob::forget(uuid_t player) {$/;"	f	class:mods::mobs::smart_mob
format	mods/builder.cpp	/^	str_t format;$/;"	m	struct:command_t	file:
found	mods/js.cpp	/^				bool found;$/;"	m	struct:mods::js::utils::find_player_payload_t	file:
found	mods/scan.hpp	/^			bool found;$/;"	m	struct:mods::scan::find_results_t
fp	mods/lmdb/conf.cpp	/^static FILE* fp = NULL;$/;"	m	namespace:gdns	file:
fread_action	act.social.cpp	/^char *fread_action(FILE *fl, int nr) {$/;"	f
free_alias	interpreter.cpp	/^void free_alias(struct alias_data *a) {$/;"	f
free_ammo_chance	mods/rifle-attachments.hpp	/^			int16_t free_ammo_chance; 				\/** honored [ 2021-04-13 ] *\/$/;"	m	struct:mods::rifle_attachments_t
free_char	db.cpp	/^void free_char(char_data *ch) {$/;"	f
free_extra_descriptions	db.cpp	/^void free_extra_descriptions(struct extra_descr_data *edesc) {$/;"	f
free_help	db.cpp	/^void free_help(void) {$/;"	f
free_list	mail.cpp	/^position_list_type *free_list = NULL;	\/* list of free positions in file *\/$/;"	v
free_messages	fight.cpp	/^void free_messages(void) {$/;"	f
free_messages_type	fight.cpp	/^void free_messages_type(struct msg_type *msg) {$/;"	f
free_mob	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::free_mob(uuid_t u) {$/;"	f	class:mods::mobs::mini_gunner
free_obj	db.cpp	/^void free_obj(struct obj_data *obj) {$/;"	f
free_player_index	db.cpp	/^void free_player_index(void) {$/;"	f
free_rent	config.cpp	/^int free_rent = YES;$/;"	v
free_social_messages	act.social.cpp	/^void free_social_messages(void) {$/;"	f
free_text_files	db.cpp	/^void free_text_files(void) {$/;"	f
friendly_map	mods/rifle-attachments.cpp	/^	std::map<std::string,std::string> rifle_attachments_t::friendly_map() {$/;"	f	class:mods::rifle_attachments_t
from	mail.h	/^	long from;			\/* idnum of the mail's sender		*\/$/;"	m	struct:header_data_type
from	mods/sql.hpp	/^			compositor<T>& from(str_object table) {$/;"	f	struct:mods::sql::compositor
from_direction	mods/damage-event.hpp	/^	uint8_t from_direction;$/;"	m	struct:feedback_t
from_direction	structs.h	/^		uint8_t from_direction;$/;"	m	struct:obj_data
from_dirstr	mods/doors.hpp	/^	static inline std::string from_dirstr(const int& direction) {$/;"	f	namespace:mods::doors
from_room_id	mods/intent.hpp	/^		room_rnum						from_room_id;$/;"	m	struct:mods::intent::intent_t
from_string	mods/doors.hpp	/^	static inline int from_string(std::string_view i) {$/;"	f	namespace:mods::doors
from_string	mods/mobs/extended-types.cpp	/^	std::optional<extended_types_t> from_string(std::string str) {$/;"	f	namespace:mods::mobs::extended_types
from_string_to_rifle	mods/weapon.hpp	/^	static inline weapon_rifle_t from_string_to_rifle(std::string_view rifle_type) {$/;"	f	namespace:mods::weapon
from_string_to_skill_id	mods/skills.cpp	/^std::optional<uint32_t> from_string_to_skill_id($/;"	f
fromdirstr	mods/projectile.cpp	/^		std::string fromdirstr(int direction,bool prefix, bool suffix) {$/;"	f	namespace:mods::projectile
frozen_start_room	config.cpp	/^room_vnum frozen_start_room = 0;$/;"	v
fry_victim	castle.cpp	/^void fry_victim(char_data *ch) {$/;"	f
fs	act.builder.cpp	/^namespace mods::fs {$/;"	n	class:mods	file:
fullness	constants.cpp	/^const char *fullness[] = {$/;"	v
fullness	constants.hpp	/^const char *fullness[] =$/;"	v
func	shop.h	/^	SPECIAL(*func);		\/* Secondary spec_proc for shopkeeper	*\/$/;"	m	struct:shop_data
func	structs.h	/^		SPECIAL(*func);$/;"	v
future_tick	globals.hpp	/^static inline uint64_t future_tick(uint64_t add) {$/;"	f
fuzzy_match	mods/util.cpp	/^	bool fuzzy_match(const std::string& _needle,const std::string& _haystack) {$/;"	f	namespace:mods::util
gadget	mods/item-types.hpp	/^	enum gadget {$/;"	g	namespace:mods::weapon::type
gadget_description_t	mods/yaml.hpp	/^		gadget_description_t() {$/;"	f	struct:mods::yaml::gadget_description_t
gadget_description_t	mods/yaml.hpp	/^	struct gadget_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
gadget_shield_levels_t	mods/classes/sentinel.hpp	/^		enum gadget_shield_levels_t {$/;"	g	struct:mods::classes::sentinel
gain_condition	limits.cpp	/^void gain_condition(char_data *ch, int condition, int value) {$/;"	f
gain_entry	mods/player-contract-instance.cpp	/^	void player_contract_instance::gain_entry(const room_rnum& room_id) {$/;"	f	class:mods::contracts::player_contract_instance
gain_exp	limits.cpp	/^void gain_exp(char_data *ch, int gain) {$/;"	f	namespace:legacy
gain_exp	mods/levels.cpp	/^	int gain_exp(player_ptr_t& player,int gain) {$/;"	f	namespace:mods::levels
gain_exp_regardless	limits.cpp	/^void gain_exp_regardless(char_data *ch, int gain) {$/;"	f	namespace:legacy
game	mods/mini-games.cpp	/^	line_up& game(room_vnum vnum,int id) {$/;"	f	namespace:mods::mini_games
game_action	mods/orm/mini-game.hpp	/^		std::string game_action;$/;"	m	struct:mods::orm::mini_game
game_entry	mods/players/db-load.cpp	/^	void game_entry(player_ptr_t& player) {$/;"	f	namespace:mods::players::db_load
game_id	mods/orm/mini-game.hpp	/^		id_type_t game_id;$/;"	m	struct:mods::orm::mini_game
game_loop	comm.cpp	/^void game_loop(socket_t mother_desc) {$/;"	f
game_name	mods/orm/mini-game.hpp	/^		std::string game_name;$/;"	m	struct:mods::orm::mini_game
game_order	mods/orm/mini-game.hpp	/^		int game_order;$/;"	m	struct:mods::orm::mini_game
game_room_vnum	mods/mini-games.hpp	/^		int game_room_vnum;$/;"	m	struct:mods::mini_games::mini_game_payload_t
game_room_vnum	mods/orm/mini-game.hpp	/^		room_vnum_t game_room_vnum;$/;"	m	struct:mods::orm::mini_game
game_room_vnum_list	mods/orm/mini-game.hpp	/^		std::vector<room_vnum_t> game_room_vnum_list;$/;"	m	struct:mods::orm::mini_game
game_type	mods/orm/mini-game.hpp	/^		std::string game_type;$/;"	m	struct:mods::orm::mini_game
game_vnum	mods/orm/mini-game.hpp	/^		game_vnum_t game_vnum;$/;"	m	struct:mods::orm::mini_game
gather_contract_steps_by_contract_vnum	mods/orm/contract-steps.cpp	/^	std::tuple<int16_t,std::string> gather_contract_steps_by_contract_vnum(const contract_vnum_t& contract_vnum,std::deque<std::shared_ptr<mods::orm::contract_steps>>* in_list_ptr) {$/;"	f	namespace:mods::orm
gather_room	mods/sensor-grenade.cpp	/^	void gather_room(uuid_t nade_uuid,room_rnum& room,uint8_t from_direction) {$/;"	f	namespace:mods::sensor_grenade
gdns	mods/lmdb/conf.cpp	/^namespace gdns {$/;"	n	file:
gdns	mods/lmdb/conf.hpp	/^namespace gdns {$/;"	n
gdns	mods/lmdb/db.hpp	/^namespace gdns {$/;"	n
gdns	mods/lmdb/shm.hpp	/^namespace gdns {$/;"	n
gdns_dbi	mods/lmdb/db.hpp	/^			gdns_dbi(MDB_dbi d) : dbi(d) {}$/;"	f	struct:gdns::lmdb::gdns_dbi
gdns_dbi	mods/lmdb/db.hpp	/^		struct gdns_dbi{$/;"	s	namespace:gdns::lmdb
gdns_dump_list	mods/lmdb/conf.cpp	/^void gdns_dump_list(void){$/;"	f	namespace:gdns
gdns_env	mods/lmdb/db.hpp	/^			gdns_env(MDB_env* e) : env(e) {}$/;"	f	struct:gdns::lmdb::gdns_env
gdns_env	mods/lmdb/db.hpp	/^		struct gdns_env{ $/;"	s	namespace:gdns::lmdb
gdns_txn	mods/lmdb/db.hpp	/^			gdns_txn() : txn(nullptr){}$/;"	f	struct:gdns::lmdb::gdns_txn
gdns_txn	mods/lmdb/db.hpp	/^			gdns_txn(MDB_txn* t) : txn(t) {}$/;"	f	struct:gdns::lmdb::gdns_txn
gdns_txn	mods/lmdb/db.hpp	/^		struct gdns_txn{$/;"	s	namespace:gdns::lmdb
gen_board	boards.cpp	/^SPECIAL(gen_board);$/;"	v
gen_board	spec_assign.cpp	/^SPECIAL(gen_board);$/;"	v
gen_receptionist	objsave.cpp	/^int gen_receptionist(char_data *ch, char_data *recep,$/;"	f
genders	constants.cpp	/^const char *genders[] = {$/;"	v
genders	constants.hpp	/^const char *genders[] =$/;"	v
general_description	structs.h	/^	mods::string general_description;       \/* When look DIR.			*\/$/;"	m	struct:room_direction_data
generate	mods/overhead_map.cpp	/^	std::string generate(mods::player* out,const room_rnum& room_number) {$/;"	f	namespace:mods::overhead_map
generate	mods/overhead_map.hpp	/^	std::string generate(OutputDevice out,const room_rnum& room_number) {$/;"	f	namespace:mods::overhead_map
generate_armor_attributes	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<armor_attributes_t, std::variant<uint32_t, float>>> generator::generate_armor_attributes($/;"	f	class:mods::forge_engine::generator
generate_armor_elemental_boosts	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<elemental_types_t, std::variant<uint32_t, float>>> generator::generate_armor_elemental_boosts($/;"	f	class:mods::forge_engine::generator
generate_armor_elemental_resistances	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<elemental_types_t, std::variant<uint32_t, float>>> generator::generate_armor_elemental_resistances($/;"	f	class:mods::forge_engine::generator
generate_armor_stat_boosts	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<stat_types_t, std::variant<uint32_t, float>>> generator::generate_armor_stat_boosts($/;"	f	class:mods::forge_engine::generator
generate_explosive_attributes	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<explosive_attributes_t, std::variant<uint32_t, float>>> generator::generate_explosive_attributes($/;"	f	class:mods::forge_engine::generator
generate_map	mods/yaml.cpp	/^	void armor_description_t::generate_map() {$/;"	f	class:mods::yaml::armor_description_t
generate_map	mods/yaml.cpp	/^	void container_description_t::generate_map() {$/;"	f	class:mods::yaml::container_description_t
generate_map	mods/yaml.cpp	/^	void explosive_description_t::generate_map() {$/;"	f	class:mods::yaml::explosive_description_t
generate_map	mods/yaml.cpp	/^	void gadget_description_t::generate_map() {$/;"	f	class:mods::yaml::gadget_description_t
generate_map	mods/yaml.cpp	/^	void melee_description_t::generate_map() {$/;"	f	class:mods::yaml::melee_description_t
generate_map	mods/yaml.cpp	/^	void rifle_description_t::generate_map() {$/;"	f	class:mods::yaml::rifle_description_t
generate_random	mods/forge-engine/generator.hpp	/^			std::vector<std::pair<TEnumType,TMeasurementType>> generate_random($/;"	f	struct:mods::forge_engine::generator
generate_random_class	mods/forge-engine/generator.hpp	/^			player_class_types_t generate_random_class(player_ptr_t& player) {$/;"	f	struct:mods::forge_engine::generator
generate_random_mixed	mods/forge-engine/generator.hpp	/^			std::vector<std::pair<TEnumType,std::variant<TUintWidth,float>>> generate_random_mixed($/;"	f	struct:mods::forge_engine::generator
generate_requirements	mods/forge-engine/generator.cpp	/^	requirements_t generator::generate_requirements(player_ptr_t& player) {$/;"	f	class:mods::forge_engine::generator
generate_rifle_attributes	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<rifle_attributes_t, std::variant<uint32_t, float>>> generator::generate_rifle_attributes($/;"	f	class:mods::forge_engine::generator
generate_rifle_elemental_boosts	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<elemental_types_t, std::variant<uint32_t, float>>> generator::generate_rifle_elemental_boosts($/;"	f	class:mods::forge_engine::generator
generate_rifle_stat_boosts	mods/forge-engine/generator.cpp	/^	std::vector<std::pair<stat_types_t, std::variant<uint32_t, float>>> generator::generate_rifle_stat_boosts($/;"	f	class:mods::forge_engine::generator
generate_stat_page	structs.cpp	/^std::string obj_data::generate_stat_page() {$/;"	f	class:obj_data
generated_armor_t	mods/forge-engine/generated-armor.cpp	/^	generated_armor_t::generated_armor_t (player_ptr_t& player) {$/;"	f	class:mods::forge_engine::generated_armor_t
generated_armor_t	mods/forge-engine/generated-armor.hpp	/^	struct generated_armor_t {$/;"	s	namespace:mods::forge_engine
generated_explosive_t	mods/forge-engine/generator.hpp	/^	struct generated_explosive_t {$/;"	s	namespace:mods::forge_engine
generated_rifle_t	mods/forge-engine/generated-rifle.cpp	/^	generated_rifle_t::generated_rifle_t (player_ptr_t& player) {$/;"	f	class:mods::forge_engine::generated_rifle_t
generated_rifle_t	mods/forge-engine/generated-rifle.hpp	/^	struct generated_rifle_t {$/;"	s	namespace:mods::forge_engine
generator	mods/fluxkraft/generator.cpp	/^	generator::generator() {$/;"	f	class:mods::fluxkraft::generator
generator	mods/fluxkraft/generator.hpp	/^	struct generator {$/;"	s	namespace:mods::fluxkraft
generator	mods/forge-engine/generator.cpp	/^	generator::generator() {$/;"	f	class:mods::forge_engine::generator
generator	mods/forge-engine/generator.hpp	/^	struct generator {$/;"	s	namespace:mods::forge_engine
generator	mods/forge-engine/item-type-chooser.hpp	/^		generator() : loaded(0) {}$/;"	f	struct:mods::orm::generator
generator	mods/forge-engine/item-type-chooser.hpp	/^	struct generator {$/;"	s	namespace:mods::orm
generator	mods/orm/fetcher.hpp	/^namespace generator {$/;"	n	namespace:mods::orm
generic_advance	mods/levels.cpp	/^	void generic_advance(player_ptr_t& player) {$/;"	f	namespace:mods::levels
generic_find	handler.cpp	/^int generic_find(char *arg, bitvector_t bitvector, char_data *ch,$/;"	f
generic_import	act.builder.cpp	/^void generic_import(player_ptr_t& player,std::string_view type, const std::vector<std::string>& vec_args, std::string_view usage) {$/;"	f
genstr	mods/util-conf.hpp	/^			bool genstr(const std::string& file_name,$/;"	f	namespace:mods::util::conf
get	mods/catch.hpp	/^			T* get() const {$/;"	f	class:Catch::Ptr
get	mods/jx.hpp	/^			std::string get() {$/;"	f	struct:mods::jx::compositor
get	mods/lmdb.cpp	/^	int _db_handle::get(std::string key,std::string & in_value){$/;"	f	class:mods::lmdb::_db_handle
get	mods/lmdb.cpp	/^	std::string _db_handle::get(std::string key){$/;"	f	class:mods::lmdb::_db_handle
get	mods/lmdb/db.hpp	/^				inline int get(const std::string & key,std::string & value){$/;"	f	struct:gdns::lmdb::client
get	mods/lmdb/db.hpp	/^			inline int get(const std::string & key,std::string & value){$/;"	f	struct:gdns::lmdb::server
get	mods/lmdb/db.hpp	/^			int get(const std::string& key,std::string & in_value){$/;"	f	struct:gdns::lmdb::db
get	mods/lmdb/db.hpp	/^		std::string get(const StringType& host){$/;"	f	struct:gdns::lmdb::resolver
get	mods/players/search.hpp	/^					ResultType get(const ResultType& _search) {$/;"	f	class:mods::player::util::search
get	mods/prefs.cpp	/^	std::string prefs::get(const std::string& key,char_data* ch) {$/;"	f	class:mods::prefs
getFile	mods/acl/config-parser.hpp	/^                const char* getFile() const { return m_file_name.c_str(); }$/;"	f	class:mods::acl::FileParser
getName	mods/catch.hpp	/^			static const char* getName() {$/;"	f	struct:Catch::Internal::OperatorTraits
get_ada_data	mods/player.cpp	/^	std::map<std::string,std::string>& player::get_ada_data() {$/;"	f	class:mods::player
get_affect_dissolver	mods/player.cpp	/^	player::affect_dissolver_t& player::get_affect_dissolver() {$/;"	f	class:mods::player
get_affected	mods/player.cpp	/^	aligned_int_t player::get_affected() {$/;"	f	class:mods::player
get_affected_by	mods/player.hpp	/^			std::vector<affected_type>& get_affected_by() {$/;"	f	struct:mods::player
get_affected_plr	mods/player.cpp	/^	aligned_int_t player::get_affected_plr() {$/;"	f	class:mods::player
get_affects	mods/affects.hpp	/^			TAffectsMap& get_affects() {$/;"	f	struct:mods::affects::dissolver
get_all	mods/lmdb.cpp	/^		result_container_t transaction_t::get_all(T consumer){$/;"	f	class:mods::lmdb::transaction_t
get_all_meta_values	mods/meta_utils.cpp	/^	std::vector<std::string> get_all_meta_values($/;"	f	namespace:mods::meta_utils
get_ammo	mods/mobs/mob.cpp	/^	obj_data* player::get_ammo(const weapon_type_t& type) {$/;"	f	class:mods::player
get_ammo	mods/object-utils.hpp	/^	uint16_t get_ammo(T& weapon) {$/;"	f	namespace:mods::object_utils
get_ammo	mods/object-utils.hpp	/^	uint16_t get_ammo(obj_ptr_t& weapon) {$/;"	f	namespace:mods::object_utils
get_ammo	mods/player.cpp	/^	obj_data* player::get_ammo(const weapon_type_t& type) {$/;"	f	class:mods::player
get_ammo_for	mods/player.cpp	/^	obj_ptr_t player::get_ammo_for(obj_ptr_t& weapon) {$/;"	f	class:mods::player
get_attacker	mods/player.hpp	/^			uuid_t get_attacker() {$/;"	f	struct:mods::player
get_auto_clear_response_flag	mods/builder/slotted-builder.hpp	/^			bool get_auto_clear_response_flag() {$/;"	f	struct:mods::builder::slotted_builder
get_bad_password_count	mods/player.cpp	/^	int player::get_bad_password_count() {$/;"	f	class:mods::player
get_base_damage	mods/weapons/damage-calculator.cpp	/^		float get_base_damage(player_ptr_t& attacker) {$/;"	f	namespace:mods::weapons::damage_calculator::algorithm_A
get_bind_addr	comm.cpp	/^struct in_addr *get_bind_addr() {$/;"	f
get_body	mods/mini-games/line-up.cpp	/^	std::string line_up::get_body(){$/;"	f	class:mods::mini_games::line_up
get_body	mods/mini-games/wires.cpp	/^	std::string wires::get_body(){$/;"	f	class:mods::mini_games::wires
get_bui_mode	mods/player.hpp	/^			bool get_bui_mode() {$/;"	f	struct:mods::player
get_camera	mods/player.cpp	/^	std::shared_ptr<mods::camera> player::get_camera() const {$/;"	f	class:mods::player
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_armor type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_attachment type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_consumable type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_drone type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_explosive type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_gadget type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_melee m) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_rifle type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_trap type) {$/;"	f	namespace:mods::weapon
get_caps	mods/weapon.cpp	/^	std::vector<cap_t> get_caps(mw_vehicle m) {$/;"	f	namespace:mods::weapon
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::armor_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::attachment_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::consumable_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::container_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::drone_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::explosive_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::gadget_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::melee_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::rifle_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::trap_description_t
get_caps	mods/yaml.hpp	/^		std::vector<cap_t> get_caps() {$/;"	f	struct:mods::yaml::vehicle_description_t
get_captured_output	mods/mobs/mob.cpp	/^	std::string_view player::get_captured_output() {$/;"	f	class:mods::player
get_captured_output	mods/player.cpp	/^	std::string_view player::get_captured_output() {$/;"	f	class:mods::player
get_char_num	handler.cpp	/^char_data *get_char_num(mob_rnum nr) {$/;"	f
get_char_pk_id	mods/js.cpp	/^		static duk_ret_t get_char_pk_id(duk_context *ctx) {$/;"	f	namespace:mods::js
get_char_room	handler.cpp	/^char_data *get_char_room(char *name, int *number, room_rnum room) {$/;"	f
get_char_room_vis	handler.cpp	/^char_data * get_char_room_vis(char_data *ch, char *name, int *number) {$/;"	f
get_char_vis	handler.cpp	/^char_data *get_char_vis(char_data *ch, char *name, int *number, int where) {$/;"	f
get_char_vis	handler.cpp	/^player_ptr_t get_char_vis(player_ptr_t player, char *name, int *number, int where) {$/;"	f
get_char_world_vis	handler.cpp	/^char_data *get_char_world_vis(char_data *ch, char *name, int *number) {$/;"	f
get_check_money	act.item.cpp	/^void get_check_money(char_data *ch, struct obj_data *obj) {$/;"	f
get_children	mods/behaviour_tree_node.hpp	/^			children_t& get_children() const {$/;"	f	struct:mods::behaviour_tree_node
get_chunk	mods/player.hpp	/^			aligned_int_t get_chunk(chunk_type_t chunk) const {$/;"	f	struct:mods::player
get_class	mods/mobs/mob.cpp	/^	std::shared_ptr<mods::classes::base>& player::get_class(class_type c_type) {$/;"	f	class:mods::player
get_class	mods/player.cpp	/^	player_class_t player::get_class() {$/;"	f	class:mods::player
get_class_description	mods/chargen.cpp	/^	std::string get_class_description(player_class_t p_class){$/;"	f	namespace:mods::chargen
get_class_string	mods/player.cpp	/^	mods::string player::get_class_string() const {$/;"	f	class:mods::player
get_clip_by_name	mods/weapon.cpp	/^	obj_ptr_t get_clip_by_name(player_ptr_t& player, std::string_view arg) {$/;"	f	namespace:mods::weapon
get_command	mods/interpreter.cpp	/^	command_info& get_command(std::string_view arg, player_ptr_t& player){$/;"	f	namespace:mods::interpreter
get_compound_list	mods/orm/mob-roam.cpp	/^	void mob_roam::get_compound_list() {$/;"	f	class:mods::orm::mob_roam
get_context	mods/js.hpp	/^				inline duk_context* get_context() {$/;"	f	struct:mods::js::include
get_current_player	mods/js.cpp	/^		static duk_ret_t get_current_player(duk_context *ctx) {$/;"	f	namespace:mods::js
get_damage	mods/weapons/damage-types.cpp	/^		int get_damage(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
get_day	mods/date-time.cpp	/^	std::string get_day() {$/;"	f	namespace:mods::date_time
get_day	mods/js.cpp	/^		static duk_ret_t get_day(duk_context *ctx) {$/;"	f	namespace:mods::js
get_db_id	mods/player.cpp	/^	aligned_int_t player::get_db_id() const {$/;"	f	class:mods::player
get_dir	mods/js.hpp	/^				inline std::string_view get_dir() {$/;"	f	struct:mods::js::include
get_drone	mods/drone.cpp	/^		void get_drone(uuid_t  owner_uuid) {$/;"	f	namespace:mods::drone
get_dump	mods/forge-engine/generated-armor.cpp	/^	std::string generated_armor_t::get_dump() {$/;"	f	class:mods::forge_engine::generated_armor_t
get_dump	mods/forge-engine/generated-rifle.cpp	/^	std::string generated_rifle_t::get_dump() {$/;"	f	class:mods::forge_engine::generated_rifle_t
get_dump	mods/forge-engine/value-scaler.cpp	/^	std::string value_scaler::get_dump() {$/;"	f	class:mods::forge_engine::value_scaler
get_dump	mods/orm/rifle-instance.cpp	/^	std::string& rifle_instance::get_dump() {$/;"	f	class:mods::orm::rifle_instance
get_existing	mods/drone.cpp	/^		uuid_t  get_existing(uuid_t  owner_uuid) {$/;"	f	namespace:mods::drone
get_explosive_type	mods/object-utils.hpp	/^	inline mw_explosive get_explosive_type<uuid_t>(uuid_t& obj_uuid) {$/;"	f	namespace:mods::object_utils
get_explosive_type	mods/object-utils.hpp	/^	static inline mw_explosive get_explosive_type(T& obj) {$/;"	f	namespace:mods::object_utils
get_file	mods/js.hpp	/^				inline std::string_view get_file() {$/;"	f	struct:mods::js::include
get_filename	utils.cpp	/^int get_filename(char *filename, size_t fbufsize, int mode, const char *orig_name) {$/;"	f
get_fire_status	mods/rooms.hpp	/^	static inline fire_status_t get_fire_status(TRoom room) {$/;"	f	namespace:mods::rooms
get_first_ammo_of_type	mods/mobs/mob.cpp	/^	obj_data* player::get_first_ammo_of_type(const weapon_type_t& type) const {$/;"	f	class:mods::player
get_first_ammo_of_type	mods/player.cpp	/^	obj_data* player::get_first_ammo_of_type(const weapon_type_t& type) const {$/;"	f	class:mods::player
get_from_container	act.item.cpp	/^void get_from_container(char_data *ch, struct obj_data *cont,$/;"	f
get_from_q	comm.cpp	/^int get_from_q(mods::descriptor_data& d, char *dest, int *aliased) {$/;"	f
get_from_room	act.item.cpp	/^void get_from_room(char_data *ch, char *arg, int howmany) {$/;"	f
get_frozen_room_vnum	mods/world-configuration.cpp	/^	int get_frozen_room_vnum(){$/;"	f	namespace:mods::world_conf
get_hash_obj_vis	shop.cpp	/^struct obj_data *get_hash_obj_vis(char_data *ch, char *name,$/;"	f
get_heading	mods/mobs/mini-gunner.hpp	/^			int get_heading() const {$/;"	f	struct:mods::mobs::mini_gunner
get_heading	mods/mobs/smart-mob.hpp	/^			int get_heading() const {$/;"	f	struct:mods::mobs::smart_mob
get_hostile_targets	mods/mobs/smart-mob.cpp	/^	const vec_t<uuid_t> smart_mob::get_hostile_targets() const {$/;"	f	class:mods::mobs::smart_mob
get_hour	mods/date-time.cpp	/^	std::string get_hour() {$/;"	f	namespace:mods::date_time
get_hunting	mods/mobs/mini-gunner.cpp	/^	uuidvec_t& mini_gunner::get_hunting() {$/;"	f	class:mods::mobs::mini_gunner
get_hunting	mods/mobs/smart-mob.cpp	/^	uuidvec_t& smart_mob::get_hunting() {$/;"	f	class:mods::mobs::smart_mob
get_id	db.h	/^		int64_t get_id() const {$/;"	f	struct:zone_data
get_id_by_name	db.cpp	/^long get_id_by_name(const char *name) {$/;"	f
get_iday	mods/date-time.cpp	/^	uint8_t get_iday() {$/;"	f	namespace:mods::date_time
get_iday	mods/js.cpp	/^		static duk_ret_t get_iday(duk_context *ctx) {$/;"	f	namespace:mods::js
get_idle_room_vnum	mods/world-configuration.cpp	/^	int get_idle_room_vnum(){$/;"	f	namespace:mods::world_conf
get_ihour	mods/date-time.cpp	/^	uint8_t get_ihour() {$/;"	f	namespace:mods::date_time
get_ihour	mods/js.cpp	/^		static duk_ret_t get_ihour(duk_context *ctx) {$/;"	f	namespace:mods::js
get_immortal_start_room_vnum	mods/world-configuration.cpp	/^	int get_immortal_start_room_vnum(){$/;"	f	namespace:mods::world_conf
get_imonth	mods/date-time.cpp	/^	uint8_t get_imonth() {$/;"	f	namespace:mods::date_time
get_imonth	mods/js.cpp	/^		static duk_ret_t get_imonth(duk_context *ctx) {$/;"	f	namespace:mods::js
get_imp_mode	mods/player.hpp	/^			bool get_imp_mode() {$/;"	f	struct:mods::player
get_iyear	mods/date-time.cpp	/^	uint8_t get_iyear() {$/;"	f	namespace:mods::date_time
get_iyear	mods/js.cpp	/^		static duk_ret_t get_iyear(duk_context *ctx) {$/;"	f	namespace:mods::js
get_last_error	mods/player-scaffolding.cpp	/^	std::vector<std::string>* player_scaffolding::get_last_error(){$/;"	f	class:mods::player_scaffolding
get_last_seen	mods/mobs/mini-gunner.cpp	/^	tick_t mini_gunner::get_last_seen(uuid_t player) {$/;"	f	class:mods::mobs::mini_gunner
get_last_seen	mods/mobs/smart-mob.cpp	/^	tick_t smart_mob::get_last_seen(uuid_t player) {$/;"	f	class:mods::mobs::smart_mob
get_last_seen_diff	mods/mobs/mini-gunner.cpp	/^	tick_t mini_gunner::get_last_seen_diff(uuid_t player) {$/;"	f	class:mods::mobs::mini_gunner
get_last_seen_diff	mods/mobs/smart-mob.cpp	/^	tick_t smart_mob::get_last_seen_diff(uuid_t player) {$/;"	f	class:mods::mobs::smart_mob
get_legacy_attack_type	mods/weapons/damage-types.cpp	/^	int get_legacy_attack_type(obj_ptr_t& weapon) {$/;"	f	namespace:mods::weapons::damage_types
get_lense	mods/player.hpp	/^			auto get_lense() {$/;"	f	struct:mods::player
get_level	mods/rifle-attachments.hpp	/^			uint16_t get_level() const {$/;"	f	struct:mods::rifle_attachments_t
get_level_damage	mods/weapons/damage-calculator.cpp	/^		float get_level_damage($/;"	f	namespace:mods::weapons::damage_calculator::algorithm_A
get_line	utils.cpp	/^int get_line(FILE *fl, char *buf) {$/;"	f
get_list	mods/super-users.cpp	/^	std::string get_list() {$/;"	f	namespace:mods::super_users
get_logic	mods/behaviour_tree_node.hpp	/^			callback_t& get_logic() const {$/;"	f	struct:mods::behaviour_tree_node
get_max_players	comm.cpp	/^int get_max_players(void) {$/;"	f
get_misc_pref	mods/player.hpp	/^			bool get_misc_pref(misc_pref_enum_t bit) {$/;"	f	struct:mods::player
get_mode	mods/mob-roam.hpp	/^			mode_t get_mode() const {$/;"	f	struct:mods::mob_roam::roam_recorder
get_month	mods/date-time.cpp	/^	std::string get_month() {$/;"	f	namespace:mods::date_time
get_month	mods/js.cpp	/^		static duk_ret_t get_month(duk_context *ctx) {$/;"	f	namespace:mods::js
get_moon_phase	mods/date-time.cpp	/^	std::string get_moon_phase() {$/;"	f	namespace:mods::date_time
get_moon_phase	mods/js.cpp	/^		static duk_ret_t get_moon_phase(duk_context *ctx) {$/;"	f	namespace:mods::js
get_mortal_start_room_vnum	mods/world-configuration.cpp	/^	int get_mortal_start_room_vnum(){$/;"	f	namespace:mods::world_conf
get_name	mods/chat.cpp	/^	std::string_view channel::get_name() const {$/;"	f	class:mods::chat::channel
get_name_by_id	db.cpp	/^char *get_name_by_id(long id) {$/;"	f
get_node	mods/behaviour_tree.hpp	/^		node & get_node() const {$/;"	f	struct:mods::behaviour_tree
get_number	handler.cpp	/^int get_number(char **name) {$/;"	f
get_obj_from_room	mods/world-configuration.cpp	/^		bool get_obj_from_room(){ return mods::world_conf::toggle::status_obj_from_room; }$/;"	f	namespace:mods::world_conf::toggle
get_obj_in_equip_vis	handler.cpp	/^struct obj_data *get_obj_in_equip_vis(char_data *ch, char *arg, int *number, struct obj_data *equipment[]) {$/;"	f
get_obj_in_list_num	handler.cpp	/^obj_data *get_obj_in_list_num(int num, struct obj_data *list) {$/;"	f
get_obj_in_list_vis	handler.cpp	/^struct obj_data *get_obj_in_list_vis(char_data *ch, char *name, int *number, struct obj_data *list) {$/;"	f
get_obj_num	handler.cpp	/^struct obj_data *get_obj_num(obj_rnum nr) {$/;"	f
get_obj_pos_in_equip_vis	handler.cpp	/^int get_obj_pos_in_equip_vis(char_data *ch, char *arg, int *number, struct obj_data *equipment[]) {$/;"	f
get_obj_vis	handler.cpp	/^struct obj_data *get_obj_vis(char_data *ch, char *name, int *number) {$/;"	f
get_one_line	db.cpp	/^void get_one_line(FILE *fl, char *buf) {$/;"	f
get_overhead_map_height	mods/player.hpp	/^			uint8_t get_overhead_map_height() const {$/;"	f	struct:mods::player
get_overhead_map_width	mods/player.hpp	/^			uint8_t get_overhead_map_width() const {$/;"	f	struct:mods::player
get_owner	structs.h	/^		uuid_t get_owner() {$/;"	f	struct:obj_data
get_password	mods/auto-login.cpp	/^	const std::string& get_password() { return mods::auto_login::password; }$/;"	f	namespace:mods::auto_login
get_password	mods/player.cpp	/^	std::string player::get_password() {$/;"	f	class:mods::player
get_player_levels	mods/orm/player-skill-points.cpp	/^	std::map<uint32_t,uint16_t> player_skill_points::get_player_levels(const uint64_t& player_id, std::string_view player_class) {$/;"	f	class:mods::orm::player_skill_points
get_player_levels	mods/orm/player-skill-usage.cpp	/^	std::map<uint64_t,uint16_t> player_skill_usage::get_player_levels(const uint64_t& player_id, std::string_view player_class) {$/;"	f	class:mods::orm::player_skill_usage
get_player_map	mods/db.cpp	/^int get_player_map(std::string_view player_name,std::string prefix, std::map<std::string,std::string>& values) {$/;"	f
get_player_map	mods/skill-orm-adaptor.cpp	/^	int get_player_map(player_ptr_t& player, std::vector<std::string,std::string>& skills) {$/;"	f	namespace:mods::skill_orm_adaptor
get_player_vector	mods/db.cpp	/^int get_player_vector(std::string_view player_name,std::string prefix, std::vector<std::string>& values) {$/;"	f
get_player_vis	handler.cpp	/^char_data *get_player_vis(char_data *ch, char *name, int *number, int inroom) {$/;"	f
get_pluck_filter	mods/lmdb.cpp	/^	const std::vector<std::string> & _db_handle::get_pluck_filter() const {$/;"	f	class:mods::lmdb::_db_handle
get_practice_dump	mods/levels.cpp	/^	std::string get_practice_dump() {$/;"	f	namespace:mods::levels
get_prefs	mods/player.hpp	/^			auto get_prefs() {$/;"	f	struct:mods::player
get_private	mods/chat.hpp	/^			bool get_private() const {$/;"	f	struct:mods::chat::channel
get_private_publishers	mods/chat.hpp	/^			const std::vector<std::string>& get_private_publishers() const {$/;"	f	struct:mods::chat::channel
get_proficiency_by_name	mods/classes/forge.cpp	/^	std::string forge::get_proficiency_by_name(std::string_view prof) const {$/;"	f	class:mods::classes::forge
get_proficiency_by_name	mods/classes/ghost.cpp	/^	std::string ghost::get_proficiency_by_name(std::string_view prof) const {$/;"	f	class:mods::classes::ghost
get_ptable_by_name	db.cpp	/^long get_ptable_by_name(const char *name) {$/;"	f
get_purchase_obj	shop.cpp	/^struct obj_data *get_purchase_obj(char_data *ch, char *arg,$/;"	f
get_rate_limit_data	mods/player.cpp	/^	player::rate_limit_data_t& player::get_rate_limit_data(int action) {$/;"	f	class:mods::player
get_rate_limit_types_help	mods/rate-limiting.cpp	/^	static const char* get_rate_limit_types_help = "usage: get_rate_limit_types";$/;"	m	namespace:mods::rate_limiting	file:
get_requirements_string	mods/forge-engine/util.cpp	/^	std::string get_requirements_string(requirements_t& requirements) {$/;"	f	namespace:mods::forge_engine
get_roam_recorder_data	mods/mob-roam.cpp	/^	std::vector<std::shared_ptr<roam_recorder>> get_roam_recorder_data(player_ptr_t& player) {$/;"	f	namespace:mods::mob_roam
get_roam_recorder_data_by_profile_name	mods/mob-roam.cpp	/^	std::vector<std::shared_ptr<roam_recorder>> get_roam_recorder_data_by_profile_name(player_ptr_t& player,std::string_view profile_name) {$/;"	f	namespace:mods::mob_roam
get_room_by_coordinates	globals.cpp	/^		coordinate_type_t get_room_by_coordinates(coordinate_type_t target_x,coordinate_type_t target_y,coordinate_type_t target_z) {$/;"	f	namespace:mods::globals
get_room_by_coordinates	mods/rooms.cpp	/^	coordinate_type_t get_room_by_coordinates(coordinate_type_t target_x,coordinate_type_t target_y,coordinate_type_t target_z) {$/;"	f	namespace:mods::rooms
get_room_flag_strings	mods/rooms.hpp	/^	static inline std::vector<std::string> get_room_flag_strings() {$/;"	f	namespace:mods::rooms
get_room_flags_from_room	mods/rooms.hpp	/^	static inline std::vector<std::string> get_room_flags_from_room(room_rnum r) {$/;"	f	namespace:mods::rooms
get_room_list	globals.cpp	/^		player_list_t& get_room_list(player_ptr_t& player) {$/;"	f	namespace:mods::globals
get_room_list	globals.cpp	/^		player_list_t& get_room_list(room_rnum room) {$/;"	f	namespace:mods::globals
get_rounds	mods/weapon.hpp	/^	static inline auto get_rounds(TObject& obj) {$/;"	f	namespace:mods::weapon
get_scanned	mods/classes/ghost.cpp	/^	std::vector<uuid_t> ghost::get_scanned() const {$/;"	f	class:mods::classes::ghost
get_section_map	mods/db.cpp	/^	int get_section_map(std::string_view section_name,std::string prefix, std::map<std::string,std::string>& values) {$/;"	f	namespace:mods::db
get_section_vector	mods/db.cpp	/^	int get_section_vector(std::string_view section_name,std::string prefix, std::vector<std::string>& values) {$/;"	f	namespace:mods::db
get_selling_obj	shop.cpp	/^struct obj_data *get_selling_obj(char_data *ch, char *name, char_data *keeper, int shop_nr, int msg) {$/;"	f
get_shared_ptr	mods/object.cpp	/^	std::shared_ptr<obj_data> object::get_shared_ptr(){$/;"	f	class:mods::object
get_signatures	mods/builder/slotted-builder.hpp	/^			std::map<std::string,std::string>& get_signatures() {$/;"	f	struct:mods::builder::slotted_builder
get_slide_obj_vis	shop.cpp	/^struct obj_data *get_slide_obj_vis(char_data *ch, char *name,$/;"	f
get_slot_list	mods/orm/contracts.hpp	/^		static inline std::vector<std::string> get_slot_list() {$/;"	f	struct:mods::orm::contracts
get_slot_list	mods/orm/hq.hpp	/^		static std::vector<std::string> get_slot_list() {$/;"	f	struct:mods::orm::hq
get_slot_list	mods/orm/mob-equipment.hpp	/^		static std::vector<std::string> get_slot_list() {$/;"	f	struct:mods::orm::mob_equipment
get_string	mods/util.cpp	/^	std::string get_string(int _errno) {$/;"	f	namespace:mods::util::err
get_string_from_target	mods/contract-steps.hpp	/^	static inline std::string get_string_from_target(target_t target) {$/;"	f
get_string_list_from_task_flags	mods/contract-steps.hpp	/^	static inline std::vector<std::string> get_string_list_from_task_flags(task_t task) {$/;"	f
get_super_user_list	mods/js.cpp	/^		static duk_ret_t get_super_user_list(duk_context *ctx) {$/;"	f	namespace:mods::js
get_targets_scanned_by_drone	mods/classes/ghost.cpp	/^	std::vector<uuid_t> ghost::get_targets_scanned_by_drone(){$/;"	f	class:mods::classes::ghost
get_ticks_per_minute	mods/affects.cpp	/^	uint32_t get_ticks_per_minute() {$/;"	f	namespace:mods::affects
get_ticks_per_minute	mods/deferred.cpp	/^ 	uint32_t deferred::get_ticks_per_minute(){$/;"	f	class:mods::deferred
get_time_birth	mods/player.cpp	/^	time_t player::get_time_birth() const {$/;"	f	class:mods::player
get_time_login	mods/player.cpp	/^	time_t player::get_time_login() const {$/;"	f	class:mods::player
get_time_played	mods/player.cpp	/^	int player::get_time_played() const {$/;"	f	class:mods::player
get_triads_by_class	mods/levels.cpp	/^	std::array<uint8_t,5> get_triads_by_class(player_class_t c) {$/;"	f	namespace:mods::levels
get_type	mods/weapon.cpp	/^	std::variant<mw_rifle,mw_explosive,mw_drone> get_type(obj_data_ptr_t& o) {$/;"	f	namespace:mods::weapon
get_type_string	mods/player.cpp	/^	std::string player::get_type_string() {$/;"	f	class:mods::player
get_user	mods/auto-login.cpp	/^	const std::string& get_user() { return mods::auto_login::user; }$/;"	f	namespace:mods::auto_login
get_verb	mods/chat.cpp	/^	std::string_view channel::get_verb() const {$/;"	f	class:mods::chat::channel
get_victim	castle.cpp	/^char_data *get_victim( char_data *ch) {$/;"	f
get_watching	mods/player.hpp	/^			direction_t get_watching() {$/;"	f	struct:mods::player
get_weapon_damage	mods/weapons/damage-calculator.cpp	/^		int16_t get_weapon_damage($/;"	f	namespace:mods::weapons::damage_calculator::algorithm_A
get_weapon_heat	mods/mobs/mini-gunner.hpp	/^			int get_weapon_heat() const {$/;"	f	struct:mods::mobs::mini_gunner
get_weapon_heat	mods/mobs/smart-mob.hpp	/^			int get_weapon_heat() const {$/;"	f	struct:mods::mobs::smart_mob
get_yaml_exception_list	mods/object-utils.hpp	/^	static inline auto& get_yaml_exception_list() {$/;"	f	namespace:mods::object_utils
get_yaml_file	mods/object-utils.cpp	/^	std::string get_yaml_file(std::string& yaml) {$/;"	f	namespace:mods::object_utils
get_yaml_transaction_id	mods/object-utils.hpp	/^	static inline uint32_t get_yaml_transaction_id() {$/;"	f	namespace:mods::object_utils
get_yaml_type	mods/object-utils.cpp	/^	int get_yaml_type(std::string& yaml) {$/;"	f	namespace:mods::object_utils
getaddrinfo	mods/lmdb/gethostbyname.cpp	/^int getaddrinfo(char* node,$/;"	f
gethostbyname	mods/lmdb/gethostbyname.cpp	/^hostent * gethostbyname(char* name){$/;"	f
gethostbyname_r	mods/lmdb/gethostbyname.cpp	/^int gethostbyname_r(char* name,$/;"	f
ghost	mods/classes/ghost.cpp	/^	ghost::ghost(){$/;"	f	class:mods::classes::ghost
ghost	mods/classes/ghost.cpp	/^	ghost::ghost(player_ptr_t p){$/;"	f	class:mods::classes::ghost
ghost	mods/classes/ghost.cpp	/^namespace mods::class_abilities::ghost {$/;"	n	class:mods::class_abilities	file:
ghost	mods/classes/ghost.hpp	/^	struct ghost : base {$/;"	s	namespace:mods::classes
ghost	mods/init.hpp	/^INIT(mods::class_abilities::ghost);$/;"	v
ghost	mods/orm/ghost.hpp	/^		ghost() : id(0) { this->init(); loaded = 0; }$/;"	f	struct:mods::orm::ghost
ghost	mods/orm/ghost.hpp	/^	struct ghost : public mods::orm::orm_base<ghost,mods::weapon::ghost::primary_choice_t> {$/;"	s	namespace:mods::orm
ghost	mods/player.cpp	/^	std::shared_ptr<mods::classes::ghost>& player::ghost() {$/;"	f	class:mods::player
ghost	mods/weapon.hpp	/^	namespace ghost {$/;"	n	namespace:mods::weapon
ghost_advance_level	mods/classes/ghost.cpp	/^	void ghost_advance_level(player_ptr_t& player){$/;"	f	namespace:mods::classes
ghost_id	mods/orm/ghost.hpp	/^		uint64_t ghost_id;$/;"	m	struct:mods::orm::ghost
ghost_list	mods/replenish.cpp	/^	static std::vector<uuid_t> ghost_list;$/;"	m	namespace:mods::replenish	file:
ghost_player_id	mods/orm/ghost.hpp	/^		uint64_t ghost_player_id;$/;"	m	struct:mods::orm::ghost
ghost_ptrs	mods/replenish.cpp	/^	static std::map<uuid_t,ghost_ptr_t> ghost_ptrs;$/;"	m	namespace:mods::replenish	file:
give_find_vict	act.item.cpp	/^char_data *give_find_vict(char_data *ch, char *arg) {$/;"	f
give_player_rewards	mods/contract-steps.cpp	/^	void give_player_rewards(player_ptr_t& player,std::string_view line) {$/;"	f	namespace:mods::contracts
glob	mods/util.cpp	/^	directory_list_t glob(std::string_view path) {$/;"	f	namespace:mods::util
global_engineer_drone_bomb	mods/classes/engineer.cpp	/^	static obj_ptr_t& global_engineer_drone_bomb() {$/;"	f	namespace:mods::classes
global_list	mods/rifle-attachments.cpp	/^		std::map<uuid_t,std::shared_ptr<mods::rifle_attachments_t>>& global_list() {$/;"	f	namespace:mods::rifle_attachments
globals	comm.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	config.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	db.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	globals.cpp	/^	namespace globals {$/;"	n	namespace:mods	file:
globals	globals.hpp	/^	namespace globals {$/;"	n	namespace:mods
globals	interpreter.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	mods/db.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/deferred.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/fluxkraft/arcon-bar.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/fluxkraft/arcon-metropolitan.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/fluxkraft/shape-dictionary.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	mods/lmdb.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	mods/lmdb.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/player-contract-instance.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	mods/player.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/players/util.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/pq.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/projectile.hpp	/^namespace mods::globals {$/;"	n	class:mods
globals	mods/rooms.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	shop.cpp	/^namespace mods::globals {$/;"	n	class:mods	file:
globals	structs.h	/^namespace mods::globals {$/;"	n	class:mods
glue_room_at_coordinates	globals.cpp	/^		void glue_room_at_coordinates(coordinate_type_t x, coordinate_type_t y, coordinate_type_t z, room_vnum room) {$/;"	f	namespace:mods::globals
glue_room_at_coordinates	mods/rooms.cpp	/^	void glue_room_at_coordinates(coordinate_type_t x, coordinate_type_t y, coordinate_type_t z, room_vnum room) {$/;"	f	namespace:mods::rooms
go	mods/mobs/helpers.hpp	/^	void go(uint8_t direction,TMob& mob){$/;"	f	namespace:mods::mobs::helpers
go_and_watch	mods/mobs/helpers.hpp	/^	void go_and_watch(uint8_t direction,TMob& mob){$/;"	f	namespace:mods::mobs::helpers
go_invisible	mods/super-users.cpp	/^	void go_invisible(player_ptr_t& player) {$/;"	f	namespace:mods::super_users
go_invisible	mods/super-users.cpp	/^	void go_invisible(std::string_view name) {$/;"	f	namespace:mods::super_users
go_random_direction	mods/mobs/helpers.hpp	/^	uint8_t go_random_direction(TMob& mob){$/;"	f	namespace:mods::mobs::helpers
go_visible	mods/super-users.cpp	/^	void go_visible(player_ptr_t& player) {$/;"	f	namespace:mods::super_users
goal	mods/contract-steps.hpp	/^		task_type_t 		goal;$/;"	m	namespace:mods::contracts
goal	mods/player-contract-instance.hpp	/^			const task_t& goal() const {$/;"	f	struct:mods::contracts::player_contract_instance
god_mode	mods/player.cpp	/^	bool player::god_mode() const {$/;"	f	class:mods::player
gods	mods/acl_list.cpp	/^		static player_acl_list_t gods;$/;"	m	namespace:mods::acl_list::list_container	file:
gods	mods/object-utils.hpp	/^	namespace gods {$/;"	n	namespace:mods::object_utils
gods	mods/rooms.cpp	/^namespace mods::rooms::gods {$/;"	n	class:mods::rooms	file:
gods	mods/rooms.hpp	/^	namespace gods {$/;"	n	namespace:mods::rooms
godsend	mods/player.cpp	/^	size_t player::godsend(const char *messg, ...) {$/;"	f	class:mods::player
gold	mods/mobs/mob.hpp	/^			int& gold() {$/;"	f	class:mods::player
gold	mods/player.hpp	/^			int& gold() {$/;"	f	struct:mods::player
gold	structs.h	/^	int	gold;$/;"	m	struct:rent_info
gold_str	mods/colors.hpp	/^static inline std::string gold_str(TStr str){$/;"	f	namespace:mods::colors
good	mods/js.hpp	/^				inline bool good() {$/;"	f	struct:mods::js::include
good	mods/lmdb/db.hpp	/^				bool good() const { return m_db->good(); }$/;"	f	struct:gdns::lmdb::client
good	mods/lmdb/db.hpp	/^			inline bool good() const { return m_db->good(); }$/;"	f	struct:gdns::lmdb::server
good	mods/lmdb/db.hpp	/^			inline bool good() const { return m_good; }$/;"	f	struct:gdns::lmdb::db
grab_mobile	mods/builder.cpp	/^char_data* grab_mobile(std::size_t index,bool& fetched) {$/;"	f
grab_raw_histfile_seconds	mods/player.cpp	/^	std::string grab_raw_histfile_seconds() {$/;"	f	namespace:mods
grab_tree_by_name	mods/behaviour_tree_impl.cpp	/^	uint8_t grab_tree_by_name(const std::string& sv_tree) {$/;"	f	namespace:mods::behaviour_tree_impl
graf	limits.cpp	/^int graf(int grafage, int p0, int p1, int p2, int p3, int p4, int p5, int p6) {$/;"	f
green_str	mods/colors.hpp	/^static inline std::string green_str(TStr str){$/;"	f	namespace:mods::colors
grenade	mods/weapon.hpp	/^		static constexpr uint64_t grenade = (1 << 1);$/;"	m	struct:mods::weapon::mask
grenade_damage	mods/projectile.cpp	/^		int grenade_damage(player_ptr_t victim,obj_ptr_t projectile) {$/;"	f	namespace:mods::projectile
grip	mods/rifle-attachments.hpp	/^			obj_ptr_t grip;$/;"	m	struct:mods::rifle_attachments_t
grip_t	mods/weapon.hpp	/^	enum grip_t {$/;"	g	namespace:mods::weapon
grn_text	mods/acl/color.hpp	3;"	d
group_gain	fight.cpp	/^void group_gain(char_data *ch, char_data *victim) {$/;"	f
guests	house.h	/^	long guests[MAX_GUESTS];	\/* idnums of house's guests	*\/$/;"	m	struct:house_control_rec
guild	castle.cpp	/^SPECIAL(guild);$/;"	v
guild	spec_assign.cpp	/^SPECIAL(guild);$/;"	v
guild	spec_procs.cpp	/^SPECIAL(guild);$/;"	v
guild_guard	spec_assign.cpp	/^SPECIAL(guild_guard);$/;"	v
guild_guard	spec_procs.cpp	/^SPECIAL(guild_guard);$/;"	v
guild_info	class.cpp	/^struct guild_info_type guild_info[] = {$/;"	v	typeref:struct:guild_info_type
h_addr_list	mods/lmdb/gethostbyname.cpp	/^    char**  h_addr_list;        \\$/;"	m	struct:_hostent	file:
h_addrtype	mods/lmdb/gethostbyname.cpp	/^    int     h_addrtype;         \\$/;"	m	struct:_hostent	file:
h_aliases	mods/lmdb/gethostbyname.cpp	/^    char    **h_aliases;        \\$/;"	m	struct:_hostent	file:
h_allow_skill	mods/help.cpp	/^	HELP_STR h_allow_skill = "usage: allow_skill <player_name> <skill|all> \\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_cancel	mods/help.cpp	/^	HELP_STR h_cancel = "usage: cancel\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_conceal	mods/help.cpp	/^	HELP_STR h_conceal = "usage: conceal <item>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_contract	mods/help.cpp	/^	HELP_STR h_contract = "usage: contract <list>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_edit_object	mods/help.cpp	/^	HELP_STR h_edit_object = "usage: edit_object <id> <attribute> <value>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_enable_registration	mods/help.cpp	/^	HELP_STR h_enable_registration = "usage: enable_registration\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_feign_death	mods/help.cpp	/^	HELP_STR h_feign_death = "usage: feign_death\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_go_dark	mods/help.cpp	/^	HELP_STR h_go_dark = "usage: go_dark\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_grenade	mods/help.cpp	/^	HELP_STR h_grenade = "usage: throw <direction> [room_count=4]\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_install	mods/help.cpp	/^	HELP_STR h_install = "usage: install <object> <direction>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_install_camera_feed	mods/help.cpp	/^	HELP_STR h_install_camera_feed = "usage: install_camera_feed <name> <id>...[id_N]\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_install_minigame	mods/help.cpp	/^	HELP_STR h_install_minigame = "usage: install_minigame <name> <type> <difficulty> <unlock-event>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_intimidate	mods/help.cpp	/^	HELP_STR h_intimidate = "usage: intimidate <target>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_length	mods/lmdb/gethostbyname.cpp	/^    int     h_length;           \\$/;"	m	struct:_hostent	file:
h_list_minigame	mods/help.cpp	/^	HELP_STR h_list_minigame = "usage: list_minigame\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_name	mods/lmdb/gethostbyname.cpp	/^    char    *h_name;            \\$/;"	m	struct:_hostent	file:
h_penetrating_shot	mods/help.cpp	/^	HELP_STR h_penetrating_shot = "usage: penetrating_shot <target>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_plant_claymore	mods/help.cpp	/^	HELP_STR h_plant_claymore = "usage: plant_claymore <direction>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_plug_cable	mods/help.cpp	/^	HELP_STR h_plug_cable = "usage: plug_cable <id>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_reload	mods/help.cpp	/^	HELP_STR h_reload = "usage: reload [primary|secondary]\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_room_dark	mods/help.cpp	/^	HELP_STR h_room_dark = "usage: room_dark <on|off>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_room_fire	mods/help.cpp	/^	HELP_STR h_room_fire = "usage: room_fire <on|off> [level]\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_set_ammo	mods/help.cpp	/^	HELP_STR h_set_ammo = "usage: set_ammo <weapon> <number>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_set_npc_position	mods/help.cpp	/^	HELP_STR h_set_npc_position = "usage: set_npc_position <UUID> <POSITION>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_set_position	mods/help.cpp	/^	HELP_STR h_set_position = "usage: set_position <POSITION>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_skills	mods/help.cpp	/^	HELP_STR h_skills = "usage: skills [show] [skill_name]...[skill_N]\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_summon_extraction	mods/help.cpp	/^	HELP_STR h_summon_extraction = "usage: summon_extraction\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_toss_cryogenic_grenade	mods/help.cpp	/^	HELP_STR h_toss_cryogenic_grenade = "usage: toss_cryogenic_grenade <direction> <rooms>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_uninstall_camera_feed	mods/help.cpp	/^	HELP_STR h_uninstall_camera_feed = "usage: uninstall_camera_feed <name>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_uninstall_minigame	mods/help.cpp	/^	HELP_STR h_uninstall_minigame = "usage: uninstall_minigame <id>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_use_flash_underbarrel	mods/help.cpp	/^	HELP_STR h_use_flash_underbarrel = "usage: use_flash_underbarrel\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_view	mods/help.cpp	/^	HELP_STR h_view = "usage: view camera\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_xray_shot	mods/help.cpp	/^	HELP_STR h_xray_shot = "usage: xray_shot\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_yaml_example	mods/help.cpp	/^	HELP_STR h_yaml_example = "usage: yaml_example <list> <object_type>\\r\\n"$/;"	m	namespace:mods::help::pages	file:
h_yaml_log	mods/help.cpp	/^	HELP_STR h_yaml_log = "usage: yaml_log \\r\\n"$/;"	m	namespace:mods::help::pages	file:
half_chop	interpreter.cpp	/^void half_chop(char *string, char *arg1, char *arg2) {$/;"	f
handbook	db.cpp	/^char *handbook = NULL;		\/* handbook for new immortals	 *\/$/;"	v
handleErrors	mods/crypto.cpp	/^void handleErrors(void)$/;"	f	namespace:mods::crypto
handle_assault_rifle_shrapnel_skill	mods/weapons/damage-types.cpp	/^	void handle_assault_rifle_shrapnel_skill(player_ptr_t& attacker,player_ptr_t& victim,obj_ptr_t& weapon,feedback_t& feedback) {$/;"	f	namespace:mods::weapons::damage_types
handle_chat	mods/chat.cpp	/^	bool handle_chat(player_ptr_t& player,std::string_view argument) {$/;"	f	namespace:mods::chat
handle_crit_injure	mods/injure.cpp	/^		void handle_crit_injure(obj_ptr_t& object, player_ptr_t& player) {$/;"	f	namespace:mods::injure::explosive
handle_crit_injure	mods/injure.cpp	/^		void handle_crit_injure(obj_ptr_t& object, player_ptr_t& player) {$/;"	f	namespace:mods::injure::rifle
handle_crit_injure	mods/injure.cpp	/^	void handle_crit_injure(int critical_chance, int injure_chance, player_ptr_t& victim, int type) {$/;"	f	namespace:mods::injure
handle_disconnects	comm.cpp	/^std::size_t handle_disconnects() {$/;"	f
handle_explosion	mods/sensor-grenade.cpp	/^	void handle_explosion(uuid_t nade_uuid, uuid_t player_uuid, room_rnum room_id, int from_direction) {$/;"	f	namespace:mods::sensor_grenade
handle_input	mods/builder/slotted-builder.cpp	/^	bool slotted_builder::handle_input(std::string argument) {$/;"	f	class:mods::builder::slotted_builder
handle_input	mods/builder/slotted-builder.hpp	/^			bool handle_input(std::string argument) {$/;"	f	struct:mods::builder::slotted_builder
handle_roam_recorder	mods/mob-roam.cpp	/^	bool handle_roam_recorder(player_ptr_t& player, const std::vector<std::string>& vec_args) {$/;"	f	namespace:mods::mob_roam
handled_rbuild_command	mods/builder/coordinates.cpp	/^	bool handled_rbuild_command(player_ptr_t& player,str_t argument){$/;"	f	namespace:mods::builder::rectangle_layouts
handled_rbuild_command	mods/builder/rectangle-layouts.cpp	/^	bool handled_rbuild_command(player_ptr_t& player,str_t argument){$/;"	f	namespace:mods::builder::rectangle_layouts
hardcoded_iv	mods/crypto.hpp	/^	static std::string hardcoded_iv = "1218749!-Z0*$761";$/;"	m	namespace:mods::crypto
hardcoded_key	mods/crypto.hpp	/^	static std::string hardcoded_key = "1218749!-Z0*$7611218749!-Z0*$761";$/;"	m	namespace:mods::crypto
has_affect	mods/affects.hpp	/^			bool has_affect(TAffects a) {$/;"	f	struct:mods::affects::dissolver
has_affect	mods/player.cpp	/^	bool player::has_affect(mods::flags::aff flag) {$/;"	f	class:mods::player
has_affect	mods/player.cpp	/^	bool player::has_affect(uint64_t flag) {$/;"	f	class:mods::player
has_affect_plr	mods/player.cpp	/^	bool player::has_affect_plr(mods::flags::plr flag) {$/;"	f	class:mods::player
has_affect_plr	mods/player.cpp	/^	bool player::has_affect_plr(uint64_t flag) {$/;"	f	class:mods::player
has_all_affects	mods/affects.hpp	/^			bool has_all_affects(TAffectsContainer in_affects) {$/;"	f	struct:mods::affects::dissolver
has_ammo	mods/mobs/mob.cpp	/^	bool player::has_ammo() {$/;"	f	class:mods::player
has_ammo	mods/player.cpp	/^	bool player::has_ammo() {$/;"	f	class:mods::player
has_any	mods/affects.hpp	/^			bool has_any(TAffectsContainer in_affects) {$/;"	f	struct:mods::affects::dissolver
has_any_affect	mods/affects.hpp	/^			bool has_any_affect(TAffectsContainer in_affects) {$/;"	f	struct:mods::affects::dissolver
has_boat	act.movement.cpp	/^int has_boat(char_data *ch) {$/;"	f
has_builder_data	mods/player.cpp	/^	bool player::has_builder_data() {$/;"	f	class:mods::player
has_class_capability	mods/mobs/mob.cpp	/^	bool player::has_class_capability(class_type type) {$/;"	f	class:mods::player
has_class_capability	mods/player.cpp	/^	bool player::has_class_capability(class_type type) {$/;"	f	class:mods::player
has_clip	mods/weapon.hpp	/^	static inline bool has_clip(rifle_data_t* weapon) {$/;"	f	namespace:mods::weapon
has_contract	mods/contracts.cpp	/^	bool has_contract(player_ptr_t& player) {$/;"	f	namespace:mods::contracts
has_custom_command_for	mods/builder/slotted-builder.hpp	/^			bool has_custom_command_for(std::string command) {$/;"	f	struct:mods::builder::slotted_builder
has_emp	mods/rooms.cpp	/^	bool has_emp(room_rnum r) {$/;"	f	namespace:mods::rooms
has_equipment_tag	mods/mobs/mob.cpp	/^	bool player::has_equipment_tag(const std::string& tag) {$/;"	f	class:mods::player
has_equipment_tag	mods/player.cpp	/^	bool player::has_equipment_tag(const std::string& tag) {$/;"	f	class:mods::player
has_flag	mods/builder.cpp	/^	bool has_flag(player_ptr_t player,uint64_t flag) {$/;"	f	namespace:mods::builder
has_flag	mods/player.hpp	/^			bool has_flag(chunk_type_t chunk,aligned_int_t bit) const {$/;"	f	struct:mods::player
has_inventory_capability	mods/mobs/mob.cpp	/^	bool player::has_inventory_capability(int type) {$/;"	f	class:mods::player
has_inventory_capability	mods/player.cpp	/^	bool player::has_inventory_capability(int type) {$/;"	f	class:mods::player
has_key	act.movement.cpp	/^int has_key(char_data *ch, obj_vnum key) {$/;"	f
has_lowly_security_ptr	mods/mobs/lowly-security.hpp	/^static inline bool has_lowly_security_ptr(uuid_t u) {$/;"	f
has_mail	mail.cpp	/^int has_mail(long recipient) {$/;"	f
has_max_amount	mods/affects.hpp	/^			bool has_max_amount(TAffects affect) {$/;"	f	struct:mods::affects::dissolver
has_messages	mods/players/messages.cpp	/^	static std::vector<uuid_t> has_messages;$/;"	m	namespace:mods::players::messages	file:
has_mini_gunner_ptr	mods/mobs/mini-gunner.hpp	/^static inline bool has_mini_gunner_ptr(uuid_t u) {$/;"	f
has_night_vision	mods/player.cpp	/^	bool player::has_night_vision() const {$/;"	f	class:mods::player
has_texture	structs.cpp	/^bool room_data::has_texture(texture_type_t t) {$/;"	f	class:room_data
has_textures	mods/rooms.cpp	/^	bool has_textures(room_rnum r, std::vector<txt> textures) {$/;"	f	namespace:mods::rooms
has_thermal_vision	mods/player.cpp	/^	bool player::has_thermal_vision() const {$/;"	f	class:mods::player
has_thermite	mods/mobs/mob.cpp	/^	bool player::has_thermite() {$/;"	f	class:mods::player
has_thermite	mods/player.cpp	/^	bool player::has_thermite() {$/;"	f	class:mods::player
has_tree	mods/npc.cpp	/^	bool npc::has_tree()  {$/;"	f	class:mods::npc
has_weapon_capability	mods/mobs/mob.cpp	/^	bool player::has_weapon_capability(int type) {$/;"	f	class:mods::player
has_weapon_capability	mods/player.cpp	/^	bool player::has_weapon_capability(uint8_t type) {$/;"	f	class:mods::player
hcontrol_build_house	house.cpp	/^void hcontrol_build_house(char_data *ch, char *arg) {$/;"	f
hcontrol_destroy_house	house.cpp	/^void hcontrol_destroy_house(char_data *ch, char *arg) {$/;"	f
hcontrol_list_houses	house.cpp	/^void hcontrol_list_houses(char_data *ch) {$/;"	f
hcontrol_pay_house	house.cpp	/^void hcontrol_pay_house(char_data *ch, char *arg) {$/;"	f
head	db.h	/^	struct reset_q_element *head;$/;"	m	struct:reset_q_type	typeref:struct:reset_q_type::reset_q_element
head	mods/lmdb/conf.cpp	/^static struct translation *head = NULL;$/;"	m	namespace:gdns	typeref:struct:gdns::translation	file:
header_block_type	mail.h	/^typedef struct header_block_type_d header_block_type;$/;"	t	typeref:struct:header_block_type_d
header_block_type_d	mail.h	/^struct header_block_type_d {$/;"	s
header_data	mail.h	/^	struct header_data_type header_data;	\/* other header data		*\/$/;"	m	struct:header_block_type_d	typeref:struct:header_block_type_d::header_data_type
header_data_type	mail.h	/^struct header_data_type {$/;"	s
heading	boards.h	/^	char	*heading;     \/* pointer to message's heading *\/$/;"	m	struct:board_msginfo
heading	mods/mobs/mini-gunner.hpp	/^			int heading;$/;"	m	struct:mods::mobs::mini_gunner
heading	mods/mobs/smart-mob.hpp	/^			uint8_t heading;$/;"	m	struct:mods::mobs::smart_mob
heading_len	boards.h	/^	int	heading_len;  \/* size of header (for file write) *\/$/;"	m	struct:board_msginfo
headshot	mods/values.hpp	/^			static inline void headshot(T& p){$/;"	f	namespace:mods::values::msg
headshot_bonus	mods/weapon.hpp	/^			int headshot_bonus;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
heal	mods/classes/sentinel.cpp	/^		void sentinel::heal(player_ptr_t& target){$/;"	f	class:mods::classes::sentinel
heal_player	act.medic.cpp	/^void heal_player(player_ptr_t& medic,player_ptr_t& target) {$/;"	f
heal_player	mods/classes/medic.cpp	/^	void medic::heal_player(player_ptr_t& target) {$/;"	f	class:mods::classes::medic
heartbeat	comm.cpp	/^void heartbeat(int pulse) {$/;"	f
heartbeat	mods/date-time.cpp	/^	void heartbeat() {$/;"	f	namespace:mods::date_time
heartbeat_counter	mods/date-time.cpp	/^	static uint64_t heartbeat_counter;$/;"	m	namespace:mods::date_time	file:
heat	mods/rifle-instance-data.hpp	/^	heat(){$/;"	f	struct:heat
heat	mods/rifle-instance-data.hpp	/^	heat(TUUID weapon){$/;"	f	struct:heat
heat	mods/rifle-instance-data.hpp	/^	struct heat {$/;"	s
heat_data	mods/rifle-instance-data.hpp	/^		std::shared_ptr<heat<TObjPtr,TUUID>> heat_data;$/;"	m	struct:rifle_instance_data
height	mods/builder/rectangle-layouts.hpp	/^		uint8_t height;$/;"	m	struct:mods::builder::rectangle_layouts::dimensions_t
height	mods/overhead_map.hpp	/^	constexpr static uint8_t height = 16;$/;"	m	namespace:mods::overhead_map
height	mods/player.hpp	/^			ubyte& height() {$/;"	f	struct:mods::player
hell	mods/hell.cpp	/^namespace mods::hell {$/;"	n	class:mods	file:
hell	mods/hell.hpp	/^namespace mods::hell {$/;"	n	class:mods
help	db.cpp	/^char *help = NULL;		\/* help screen			 *\/$/;"	v
help	mods/help.cpp	/^namespace mods::help {$/;"	n	class:mods	file:
help	mods/help.hpp	/^namespace mods::help {$/;"	n	class:mods
help	mods/init.hpp	/^INIT(mods::help);$/;"	v
help	mods/response-team/radio.cpp	/^	void help(uuid_t mob_uuid, std::string_view message) {$/;"	f	namespace:mods::response_team::radio
help_dazed	mods/response-team/radio.cpp	/^	void help_dazed(uuid_t mob_uuid, std::string_view message) {$/;"	f	namespace:mods::response_team::radio
help_index_element	db.h	/^struct help_index_element {$/;"	s
help_linkless	mods/weapons/damage-types.cpp	/^		void help_linkless(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
help_table	db.cpp	/^struct help_index_element *help_table = 0;	\/* the help table	 *\/$/;"	v	typeref:struct:help_index_element
helpers	mods/mobs/helpers.hpp	/^namespace mods::mobs::helpers {$/;"	n	class:mods::mobs
hide	act.social.cpp	/^	int hide;$/;"	m	struct:social_messg	file:
high	mods/forge-engine/value-scaler.hpp	/^		float high;$/;"	m	struct:mods::forge_engine::value_scaler
high_high_clamp	mods/forge-engine/value-scaler.hpp	/^		uint32_t high_high_clamp;$/;"	m	struct:mods::forge_engine::value_scaler
high_level	mods/forge-engine/value-scaler.hpp	/^		uint32_t high_level;$/;"	m	struct:mods::forge_engine::value_scaler
high_low_clamp	mods/forge-engine/value-scaler.hpp	/^		uint32_t high_low_clamp;$/;"	m	struct:mods::forge_engine::value_scaler
highlight_strategy	mods/mini-games/line-up.hpp	/^		highlight_strategy_t highlight_strategy;$/;"	m	namespace:mods::mini_games
highlight_strategy	mods/mini-games/wires.hpp	/^		highlight_strategy_t highlight_strategy;$/;"	m	struct:mods::mini_games::wires
histfile_opcode_t	mods/player.cpp	/^	enum histfile_opcode_t {$/;"	g	namespace:mods	file:
histfile_type_t	mods/player.cpp	/^enum histfile_type_t {$/;"	g	file:
hit	fight.cpp	/^void hit(char_data *ch, char_data *victim, int type) {$/;"	f
hit	mods/js.cpp	/^		static duk_ret_t hit(duk_context *ctx) {$/;"	f	namespace:mods::js
hit	mods/values.hpp	/^			static inline void hit(T& p){$/;"	f	namespace:mods::values::msg
hit_gain	limits.cpp	/^int hit_gain(char_data *ch) {$/;"	f
hitroll	mods/mobs/mob.hpp	/^			sbyte& hitroll() {$/;"	f	class:mods::player
hitroll	mods/player.hpp	/^			sbyte& hitroll() {$/;"	f	struct:mods::player
hits	mods/damage-event.hpp	/^	uint16_t hits;$/;"	m	struct:feedback_t
hits_target	mods/weapon.cpp	/^	bool hits_target(player_ptr_t& player, obj_ptr_t& weapon, player_ptr_t& target, uint16_t* distance) {$/;"	f	namespace:mods::weapon
holds_ammo	structs.h	/^	bool holds_ammo;$/;"	m	struct:obj_flag_data
holler_move_cost	config.cpp	/^int holler_move_cost = 20;$/;"	v
hometown	mods/player.hpp	/^			uint8_t& hometown() {$/;"	f	struct:mods::player
host	mods/player.cpp	/^	std::string player::host() const {$/;"	f	class:mods::player
hostent	mods/lmdb/gethostbyname.cpp	/^} hostent;$/;"	t	typeref:struct:_hostent	file:
hostile_targets	mods/mobs/smart-mob.hpp	/^			vec_t<uuid_t> hostile_targets;$/;"	m	struct:mods::mobs::smart_mob
hour	mods/date-time.cpp	/^	static uint8_t hour;$/;"	m	namespace:mods::date_time	file:
house_control	house.cpp	/^struct house_control_rec house_control[MAX_HOUSES];$/;"	v	typeref:struct:house_control_rec
house_control_rec	house.h	/^struct house_control_rec {$/;"	s
how_good	spec_procs.cpp	/^const char *how_good(int percent) {$/;"	f
hp	mods/mobs/mob.hpp	/^			sh_int& hp() {$/;"	f	class:mods::player
hp	mods/player.hpp	/^			sh_int& hp() {$/;"	f	struct:mods::player
hq	mods/orm/hq.hpp	/^		hq() : id(0) {$/;"	f	struct:mods::orm::hq
hq	mods/orm/hq.hpp	/^	struct hq : public mods::orm::orm_base<hq,uint8_t> {$/;"	s	namespace:mods::orm
hq_advanced_mob_count	mods/orm/hq.hpp	/^		uint16_t hq_advanced_mob_count;$/;"	m	struct:mods::orm::hq
hq_affiliation	mods/orm/hq.hpp	/^		std::string hq_affiliation;$/;"	m	struct:mods::orm::hq
hq_armored_van_count	mods/orm/hq.hpp	/^		uint16_t hq_armored_van_count;$/;"	m	struct:mods::orm::hq
hq_basic_mob_count	mods/orm/hq.hpp	/^		uint16_t hq_basic_mob_count;$/;"	m	struct:mods::orm::hq
hq_elite_mob_count	mods/orm/hq.hpp	/^		uint16_t hq_elite_mob_count;$/;"	m	struct:mods::orm::hq
hq_level	mods/orm/hq.hpp	/^		uint64_t hq_level;$/;"	m	struct:mods::orm::hq
hq_list	mods/orm/hq.cpp	/^	std::deque<std::shared_ptr<mods::orm::hq>>& hq_list() {$/;"	f	namespace:mods::orm
hq_locations	mods/response-team/hq-locations.cpp	/^namespace mods::response_team::hq_locations {$/;"	n	class:mods::response_team	file:
hq_locations	mods/response-team/hq-locations.hpp	/^namespace mods::response_team::hq_locations {$/;"	n	class:mods::response_team
hq_replenish_advanced_count	mods/orm/hq.hpp	/^		uint16_t hq_replenish_advanced_count;$/;"	m	struct:mods::orm::hq
hq_replenish_basic_count	mods/orm/hq.hpp	/^		uint16_t hq_replenish_basic_count;$/;"	m	struct:mods::orm::hq
hq_replenish_elite_count	mods/orm/hq.hpp	/^		uint16_t hq_replenish_elite_count;$/;"	m	struct:mods::orm::hq
hq_replenish_ticks	mods/orm/hq.hpp	/^		uint16_t hq_replenish_ticks;$/;"	m	struct:mods::orm::hq
hq_room_vnum	mods/orm/hq.hpp	/^		uint32_t hq_room_vnum;$/;"	m	struct:mods::orm::hq
hq_sedan_count	mods/orm/hq.hpp	/^		uint16_t hq_sedan_count;$/;"	m	struct:mods::orm::hq
hq_suv_count	mods/orm/hq.hpp	/^		uint16_t hq_suv_count;$/;"	m	struct:mods::orm::hq
hqbuild	mods/builder/hqbuild.cpp	/^namespace mods::builder::hqbuild {$/;"	n	class:mods::builder	file:
hqbuild	mods/init.hpp	/^INIT(mods::builder::hqbuild);$/;"	v
hsort	db.cpp	/^int hsort(const void *a, const void *b) {$/;"	f
human_shield_levels_t	mods/classes/sentinel.hpp	/^		enum human_shield_levels_t {$/;"	g	struct:mods::classes::sentinel
hunt_hostile_targets	mods/mobs/smart-mob.cpp	/^	void smart_mob::hunt_hostile_targets() {$/;"	f	class:mods::mobs::smart_mob
hunt_victim	graph.cpp	/^void hunt_victim(char_data *ch) {$/;"	f
hunting	mods/mobs/mini-gunner.hpp	/^			uuidvec_t hunting;$/;"	m	struct:mods::mobs::mini_gunner
hunting	mods/mobs/smart-mob.hpp	/^			uuidvec_t hunting;$/;"	m	struct:mods::mobs::smart_mob
hunting	mods/player.hpp	/^			char_data* hunting() {$/;"	f	struct:mods::player
hupsig	comm.cpp	/^RETSIGTYPE hupsig(int sig) {$/;"	f
id	db.h	/^	long id;$/;"	m	struct:player_index_element
id	mods/behaviour_tree_node.hpp	/^				uint64_t id;$/;"	m	struct:mods::behaviour_tree_node::__anon2
id	mods/orm/armor-index.hpp	/^		id_type_t id;$/;"	m	struct:mods::orm::armor_index
id	mods/orm/breacher.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::breacher
id	mods/orm/chargen.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::player_classes
id	mods/orm/chargen.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::player_race_perks
id	mods/orm/chargen.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::player_races
id	mods/orm/chargen.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::specialty_skills
id	mods/orm/chargen.hpp	/^		uint64_t id;\/\/SERIAL PRIMARY KEY,$/;"	m	struct:mods::orm::player_generated_data
id	mods/orm/chargen.hpp	/^		uint64_t id;\/\/SERIAL PRIMARY KEY,$/;"	m	struct:mods::orm::player_skill_trees_unlocked
id	mods/orm/chargen.hpp	/^		uint64_t id;\/\/SERIAL PRIMARY KEY,$/;"	m	struct:mods::orm::skill_trees
id	mods/orm/contract-steps.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::contract_steps
id	mods/orm/contract-steps.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::contract_steps_record_t
id	mods/orm/contracts.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::contracts
id	mods/orm/engineer.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::engineer
id	mods/orm/forge.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::forge
id	mods/orm/ghost.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::ghost
id	mods/orm/hq.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::hq
id	mods/orm/integral-object.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::integral_object
id	mods/orm/marine.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::marine
id	mods/orm/medic.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::medic
id	mods/orm/mob-equipment-map.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::mob_equipment_map
id	mods/orm/mob-equipment.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::mob_equipment
id	mods/orm/mob-roam.hpp	/^		id_type_t id;$/;"	m	struct:mods::orm::mob_roam
id	mods/orm/orm-base.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::orm_base
id	mods/orm/player-contract-state.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::player_contract_state
id	mods/orm/player-skill-points.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::player_skill_points_record_t
id	mods/orm/player-skill-usage.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::player_skill_usage_record_t
id	mods/orm/pyrexia.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::pyrexia
id	mods/orm/quotes.hpp	/^			TIDType id;$/;"	m	struct:mods::orm::base_quotes
id	mods/orm/rifle-attachment.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::rifle_attachment
id	mods/orm/rifle-attachment.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::rifle_attachment_record_t
id	mods/orm/rifle-index.hpp	/^		id_type_t id;$/;"	m	struct:mods::orm::rifle_index
id	mods/orm/room.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::room
id	mods/orm/skill-trees.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::skill_trees_record_t
id	mods/orm/sniper.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::sniper
id	mods/orm/striker.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::striker
id	mods/orm/support.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::support
id	mods/orm/syndrome.hpp	/^		uint64_t id;$/;"	m	struct:mods::orm::syndrome
id	mods/pq.hpp	/^	uint64_t id;$/;"	m	struct:orm_base
id	mods/weapons/pistol-czp10.hpp	/^			uint16_t id;$/;"	m	struct:mods::weapons::pistol::czp10
id	mods/weapons/shotgun-sasg12.hpp	/^			uint16_t id;$/;"	m	struct:mods::weapons::shotgun::sasg12
id	mods/weapons/smg-mp5.hpp	/^			uint16_t id;$/;"	m	struct:mods::weapons::smg::mp5
id	mods/weapons/sniper-rifle-l96aw.hpp	/^			uint16_t id;$/;"	m	struct:mods::weapons::sniper_rifle::l96aw
id	mods/weapons/sniper-rifle-psg1.hpp	/^			uint16_t id;$/;"	m	struct:mods::weapons::sniper_rifle::psg1
id	mods/yaml.hpp	/^		uint64_t id;$/;"	m	struct:mods::yaml::yaml_description_t
id_column	mods/orm/armor-index.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::armor_index
id_column	mods/orm/breacher.hpp	/^		std::string id_column() const { return "breacher_id"; }$/;"	f	struct:mods::orm::breacher
id_column	mods/orm/camera-feed.hpp	/^		std::string id_column() const { return "feed_id"; }$/;"	f	struct:mods::orm::camera_feed
id_column	mods/orm/contract-steps.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::contract_steps
id_column	mods/orm/contracts.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::contracts
id_column	mods/orm/door-event.hpp	/^		std::string id_column() const { return "event_id"; }$/;"	f	struct:mods::orm::door_event
id_column	mods/orm/elevator.hpp	/^		std::string id_column() const { return "feed_id"; }$/;"	f	struct:mods::orm::elevator
id_column	mods/orm/engineer.hpp	/^		std::string id_column() const { return "engineer_id"; }$/;"	f	struct:mods::orm::engineer
id_column	mods/orm/forge.hpp	/^		std::string id_column(){ return "forge_id"; }$/;"	f	struct:mods::orm::forge
id_column	mods/orm/ghost.hpp	/^		std::string id_column(){ return "ghost_id"; }$/;"	f	struct:mods::orm::ghost
id_column	mods/orm/hq.hpp	/^		std::string id_column() {$/;"	f	struct:mods::orm::hq
id_column	mods/orm/integral-object.hpp	/^		std::string id_column() const { return "object_id"; }$/;"	f	struct:mods::orm::integral_object
id_column	mods/orm/marine.hpp	/^		std::string id_column() const { return "marine_id"; }$/;"	f	struct:mods::orm::marine
id_column	mods/orm/medic.hpp	/^		std::string id_column() const { return "medic_id"; }$/;"	f	struct:mods::orm::medic
id_column	mods/orm/mini-game.hpp	/^		std::string id_column() const { return "game_id"; }$/;"	f	struct:mods::orm::mini_game
id_column	mods/orm/mob-equipment-map.hpp	/^		std::string id_column() {$/;"	f	struct:mods::orm::mob_equipment_map
id_column	mods/orm/mob-equipment.hpp	/^		std::string id_column() {$/;"	f	struct:mods::orm::mob_equipment
id_column	mods/orm/mob-roam.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::mob_roam
id_column	mods/orm/orm-base.hpp	/^		virtual std::string id_column() {$/;"	f	struct:mods::orm::orm_base
id_column	mods/orm/player-base-ability.hpp	/^		std::string id_column(){ return "pba_id"; }$/;"	f	struct:mods::orm::player_base_ability
id_column	mods/orm/player-contract-state.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::player_contract_state
id_column	mods/orm/player-skill-points.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::player_skill_points
id_column	mods/orm/player-skill-usage.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::player_skill_usage
id_column	mods/orm/pyrexia.hpp	/^		std::string id_column(){ return "pyrexia_id"; }$/;"	f	struct:mods::orm::pyrexia
id_column	mods/orm/rifle-attachment.hpp	/^		std::string id_column() {$/;"	f	struct:mods::orm::rifle_attachment
id_column	mods/orm/rifle-index.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::rifle_index
id_column	mods/orm/rifle-instance.hpp	/^		std::string id_column() {$/;"	f	struct:mods::orm::rifle_instance
id_column	mods/orm/skill-points.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::skill_points
id_column	mods/orm/skill-trees.hpp	/^		std::string id_column() const {$/;"	f	struct:mods::orm::skill_trees
id_column	mods/orm/sniper.hpp	/^		std::string id_column() {$/;"	f	struct:mods::orm::sniper
id_column	mods/orm/striker.hpp	/^		std::string id_column(){ return "striker_id"; }$/;"	f	struct:mods::orm::striker
id_column	mods/orm/support.hpp	/^		std::string id_column() const { return "support_id"; }$/;"	f	struct:mods::orm::support
id_column	mods/orm/syndrome.hpp	/^		std::string id_column(){ return "syndrome_id"; }$/;"	f	struct:mods::orm::syndrome
id_column	mods/pq.hpp	/^	virtual std::string id_column() {$/;"	f	struct:orm_base
idle_max_level	config.cpp	/^int idle_max_level = LVL_GOD;$/;"	v
idle_rent_time	config.cpp	/^int idle_rent_time = 48;$/;"	v
idle_void	config.cpp	/^int idle_void = 8;$/;"	v
if_flag	db.h	/^	bool if_flag;	\/* if TRUE: exe only if preceding exe'd *\/$/;"	m	struct:reset_com
immlist	db.cpp	/^char *immlist = NULL;		\/* list of peon gods		 *\/$/;"	v
immort_level_ok	config.cpp	/^int immort_level_ok = 1;$/;"	v
immort_start_room	config.cpp	/^room_vnum immort_start_room = 0;$/;"	v
immortal	mods/immortal.cpp	/^namespace mods::immortal {$/;"	n	class:mods	file:
immortal	mods/immortal.hpp	/^namespace mods::immortal {$/;"	n	class:mods
imotd	db.cpp	/^char *imotd = NULL;		\/* message of the day - immorts *\/$/;"	v
implemented_classes	mods/levels.hpp	/^	static constexpr std::array<player_class_t,2> implemented_classes = {$/;"	m	namespace:mods::levels
implementor_mode	mods/player.cpp	/^	bool player::implementor_mode() const {$/;"	f	class:mods::player
implementors	mods/acl_list.cpp	/^		static player_acl_list_t implementors;$/;"	m	namespace:mods::acl_list::list_container	file:
import	structs.cpp	/^void char_data::import(const char_data* o) {$/;"	f	class:char_data
import	structs.cpp	/^void mob_special_data::import(const mob_special_data& other) {$/;"	f	class:mob_special_data
import_object	mods/orm/rifle-instance.cpp	/^	void rifle_instance::import_object(obj_ptr_t& obj) {$/;"	f	class:mods::orm::rifle_instance
import_objects	mods/rifle-attachments.cpp	/^	void rifle_attachments_t::import_objects(const encoding_t& line) {$/;"	f	class:mods::rifle_attachments_t
import_room	mods/builder.cpp	/^	int import_room(struct room_data* room) {$/;"	f	namespace:mods::builder
in_addr	sysdep.h	/^struct in_addr {$/;"	s
in_array	mods/util.hpp	/^	bool in_array(std::string f,std::vector<T> strings) {$/;"	f	namespace:mods::util
in_obj	structs.h	/^		obj_data *in_obj;       \/* In what object NULL when none    *\/$/;"	m	struct:obj_data
in_room	mods/builder.cpp	58;"	d	file:
in_room	mods/js.cpp	/^		static duk_ret_t in_room(duk_context *ctx) {$/;"	f	namespace:mods::js
in_room	shop.h	/^	room_vnum *in_room;		\/* Where is the shop?			*\/$/;"	m	struct:shop_data
in_room	structs.h	/^		room_rnum in_room;		\/* In what room -1 when conta\/carr	*\/$/;"	m	struct:obj_data
incendiary_damage	mods/rifle-attachments.hpp	/^			int16_t incendiary_damage;				\/** honored [ ? (see elemental.cpp) ] *\/$/;"	m	struct:mods::rifle_attachments_t
incendiary_damage	mods/weapons/elemental.cpp	/^	void incendiary_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
incendiary_damage_percent	mods/rifle-attachments.hpp	/^			int16_t incendiary_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
incendiary_resistance_percent	mods/player.cpp	/^	int16_t& player::incendiary_resistance_percent() {$/;"	f	class:mods::player
incidents	mods/response-team/radio.hpp	/^	static std::map<room_vnum,int32_t> incidents;$/;"	m	namespace:mods::response_team::radio
include	mods/js.hpp	/^				include(duk_context *ctx,std::string_view directory,std::string_view file)$/;"	f	struct:mods::js::include
include	mods/js.hpp	/^				include(duk_context *ctx,std::string_view file)$/;"	f	struct:mods::js::include
include	mods/js.hpp	/^		struct include {$/;"	s	namespace:mods::js
include_file	mods/js.cpp	/^		bool include::include_file() {$/;"	f	class:mods::js::include
increment_bad_password_count	mods/player.cpp	/^	void player::increment_bad_password_count() {$/;"	f	class:mods::player
increment_hour	mods/date-time.cpp	/^	void increment_hour() {$/;"	f	namespace:mods::date_time
increment_skill_usage	mods/orm/sniper.cpp	/^	void sniper::increment_skill_usage(const uint64_t& skill_id) {$/;"	f	class:mods::orm::sniper
increment_yaml_transaction_id	mods/object-utils.hpp	/^	static inline void increment_yaml_transaction_id() {$/;"	f	namespace:mods::object_utils
index_boot	db.cpp	/^void index_boot(int mode) {$/;"	f
index_boot_hlp	mods/hell.hpp	/^	constexpr inline bool index_boot_hlp = true;$/;"	m	namespace:mods::hell
index_mail	mail.cpp	/^void index_mail(long id_to_index, long pos) {$/;"	f
info	db.cpp	/^char *info = NULL;		\/* info page			 *\/$/;"	v
info	mods/lmdb/shm.hpp	/^int shm::info(struct shmid_ds* buf){$/;"	f	class:gdns::shm
informative	act.informative.cpp	/^namespace informative {$/;"	n	file:
informative	mods/init.hpp	/^INIT(informative);$/;"	v
init	act.builder.cpp	/^	void init() {$/;"	f	namespace:builder
init	act.demolitions.cpp	/^	void init() {$/;"	f	namespace:demolitions
init	act.informative.cpp	/^	void init() {$/;"	f	namespace:informative
init	globals.cpp	/^		int init(int argc,char** argv) {$/;"	f	namespace:mods::globals
init	mobact.cpp	/^	void init() {$/;"	f	namespace:mods::mobact
init	mods/armor/advanced-protection.cpp	/^	void advanced_protection::init() {$/;"	f	class:mods::armor::advanced_protection
init	mods/armor/basic-protection.cpp	/^	void basic_protection::init() {$/;"	f	class:mods::armor::basic_protection
init	mods/armor/elite-protection.cpp	/^	void elite_protection::init() {$/;"	f	class:mods::armor::elite_protection
init	mods/builder.cpp	/^	void init() {$/;"	f	namespace:mods::builder
init	mods/builder/bookmarks.cpp	/^	void init() {$/;"	f	namespace:mods::builder::bookmarks
init	mods/builder/conbuild.cpp	/^	void init() {$/;"	f	namespace:mods::builder::conbuild
init	mods/builder/hqbuild.cpp	/^	void init() {$/;"	f	namespace:mods::builder::hqbuild
init	mods/builder/meqbuild.cpp	/^	void init() {$/;"	f	namespace:mods::builder::meqbuild
init	mods/chargen.cpp	/^		void init(){$/;"	f	namespace:mods::chargen
init	mods/class-abilities.cpp	/^	void init(){$/;"	f	namespace:mods::class_abilities
init	mods/classes/engineer.cpp	/^	void engineer::init() {$/;"	f	class:mods::classes::engineer
init	mods/classes/engineer.cpp	/^	void init() {$/;"	f	namespace:mods::class_abilities::engineer
init	mods/classes/forge.cpp	/^	void forge::init(){$/;"	f	class:mods::classes::forge
init	mods/classes/forge.cpp	/^	void init(){$/;"	f	namespace:mods::class_abilities::forge
init	mods/classes/ghost.cpp	/^	void ghost::init(){$/;"	f	class:mods::classes::ghost
init	mods/classes/ghost.cpp	/^	void init(){$/;"	f	namespace:mods::class_abilities::ghost
init	mods/classes/medic.cpp	/^	void medic::init() {$/;"	f	class:mods::classes::medic
init	mods/classes/sniper.cpp	/^	void init() {$/;"	f	namespace:mods::class_abilities::sniper
init	mods/classes/sniper.cpp	/^	void sniper::init() {$/;"	f	class:mods::classes::sniper
init	mods/classes/super-user-fiddler.cpp	/^	void init() {$/;"	f	namespace:mods::classes
init	mods/contracts.cpp	/^	void init() {$/;"	f	namespace:mods::contracts
init	mods/date-time.cpp	/^	void init() {$/;"	f	namespace:mods::date_time
init	mods/debug.hpp	/^	static inline void init(bool tics){ debug_state = std::make_unique<state>(tics); }$/;"	f	namespace:mods::debug
init	mods/elevator.cpp	/^	void init() {$/;"	f	namespace:mods::elevator
init	mods/fluxkraft/arcon-bar.hpp	/^		void init() {$/;"	f	namespace:mods::fluxkraft::arcon_bar
init	mods/fluxkraft/arcon-metropolitan.hpp	/^	void init() {$/;"	f	namespace:mods::fluxkraft::arcon
init	mods/fluxkraft/generator.cpp	/^	void generator::init() {$/;"	f	class:mods::fluxkraft::generator
init	mods/fluxkraft/shape-dictionary.cpp	/^	void init() {$/;"	f	namespace:mods::fluxkraft
init	mods/fluxkraft/shape-dictionary.cpp	/^	void shape_dictionary::init() {$/;"	f	class:mods::fluxkraft::shape_dictionary
init	mods/forge-engine/generator.cpp	/^	void generator::init() {$/;"	f	class:mods::forge_engine::generator
init	mods/forge-engine/value-scaler.cpp	/^		void init() {$/;"	f	namespace:mods::forge_engine::value_scaler_static
init	mods/help.cpp	/^	void init() {$/;"	f	namespace:mods::help
init	mods/init.hpp	/^	static inline void init() {$/;"	f	namespace:mods::init
init	mods/init.hpp	/^namespace mods::init {$/;"	n	class:mods
init	mods/integral-objects.cpp	/^	void init() {$/;"	f	namespace:mods::integral_objects
init	mods/karma.cpp	/^	void init(){$/;"	f	namespace:mods
init	mods/levels.cpp	/^	void init() {$/;"	f	namespace:mods::levels
init	mods/lmdb/conf.cpp	/^void conf<StringType>::init(void){$/;"	f	class:gdns::conf
init	mods/lmdb/db.hpp	/^				bool init(gsl::not_null<const char*> file,gsl::not_null<const char*> db_name){$/;"	f	struct:gdns::lmdb::client
init	mods/lmdb/db.hpp	/^			bool init(const char* file, const char* dbi_name,int flags, int perms){$/;"	f	struct:gdns::lmdb::server
init	mods/lmdb/gethostbyname.cpp	/^static int init = 0;$/;"	v	file:
init	mods/loot.cpp	/^	void init() {$/;"	f	namespace:mods::loot
init	mods/mini-games.cpp	/^	void init() {$/;"	f	namespace:mods::mini_games
init	mods/mob-equipment.cpp	/^	void init() {$/;"	f	namespace:mods::mob_equipment
init	mods/mob-roam.cpp	/^	void roam_recorder::init() {$/;"	f	class:mods::mob_roam::roam_recorder
init	mods/mobs/lowly-security.cpp	/^	void lowly_security::init() {$/;"	f	class:mods::mobs::lowly_security
init	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::init() {$/;"	f	class:mods::mobs::mini_gunner
init	mods/mobs/mob.cpp	/^	void player::init(){$/;"	f	class:mods::player
init	mods/mobs/smart-mob.cpp	/^	void smart_mob::init() {$/;"	f	class:mods::mobs::smart_mob
init	mods/object.cpp	/^	void object::init(){$/;"	f	class:mods::object
init	mods/orm/armor-index.cpp	/^	void armor_index::init() {$/;"	f	class:mods::orm::armor_index
init	mods/orm/breacher.cpp	/^	void breacher::init() {$/;"	f	class:mods::orm::breacher
init	mods/orm/camera-feed.cpp	/^	void camera_feed::init(){$/;"	f	class:mods::orm::camera_feed
init	mods/orm/contract-steps.cpp	/^	void contract_steps::init() {$/;"	f	class:mods::orm::contract_steps
init	mods/orm/contracts.cpp	/^	void contracts::init() {$/;"	f	class:mods::orm::contracts
init	mods/orm/door-event.cpp	/^	void door_event::init(){$/;"	f	class:mods::orm::door_event
init	mods/orm/elevator.cpp	/^	void elevator::init(){$/;"	f	class:mods::orm::elevator
init	mods/orm/engineer.cpp	/^	void engineer::init() {$/;"	f	class:mods::orm::engineer
init	mods/orm/forge.cpp	/^	void forge::init(){$/;"	f	class:mods::orm::forge
init	mods/orm/ghost.cpp	/^	void ghost::init() {$/;"	f	class:mods::orm::ghost
init	mods/orm/hq.cpp	/^	void hq::init() {$/;"	f	class:mods::orm::hq
init	mods/orm/integral-object.cpp	/^	void integral_object::init(){$/;"	f	class:mods::orm::integral_object
init	mods/orm/marine.cpp	/^	void marine::init() {$/;"	f	class:mods::orm::marine
init	mods/orm/medic.cpp	/^	void medic::init() {$/;"	f	class:mods::orm::medic
init	mods/orm/mob-equipment-map.cpp	/^	void mob_equipment_map::init() {$/;"	f	class:mods::orm::mob_equipment_map
init	mods/orm/mob-equipment.cpp	/^	void mob_equipment::init() {$/;"	f	class:mods::orm::mob_equipment
init	mods/orm/mob-roam.cpp	/^	void mob_roam::init() {$/;"	f	class:mods::orm::mob_roam
init	mods/orm/player-base-ability.cpp	/^		void init() {$/;"	f	namespace:mods::orm::pba
init	mods/orm/player-base-ability.cpp	/^	void player_base_ability::init() {$/;"	f	class:mods::orm::player_base_ability
init	mods/orm/player-contract-state.cpp	/^	void player_contract_state::init() {$/;"	f	class:mods::orm::player_contract_state
init	mods/orm/player-skill-points.cpp	/^	void player_skill_points::init() {$/;"	f	class:mods::orm::player_skill_points
init	mods/orm/player-skill-usage.cpp	/^	void player_skill_usage::init() {$/;"	f	class:mods::orm::player_skill_usage
init	mods/orm/pyrexia.cpp	/^	void pyrexia::init(){$/;"	f	class:mods::orm::pyrexia
init	mods/orm/rifle-attachment.cpp	/^	void rifle_attachment::init() {$/;"	f	class:mods::orm::rifle_attachment
init	mods/orm/rifle-index.cpp	/^	void rifle_index::init() {$/;"	f	class:mods::orm::rifle_index
init	mods/orm/rifle-instance.cpp	/^	void rifle_instance::init() {$/;"	f	class:mods::orm::rifle_instance
init	mods/orm/room.cpp	/^	void room::init() {$/;"	f	class:mods::orm::room
init	mods/orm/skill-points.cpp	/^	void skill_points::init() {$/;"	f	class:mods::orm::skill_points
init	mods/orm/skill-trees.cpp	/^	void skill_trees::init() {$/;"	f	class:mods::orm::skill_trees
init	mods/orm/sniper.cpp	/^	void sniper::init() {$/;"	f	class:mods::orm::sniper
init	mods/orm/striker.cpp	/^	void striker::init(){$/;"	f	class:mods::orm::striker
init	mods/orm/support.cpp	/^	void support::init() {$/;"	f	class:mods::orm::support
init	mods/orm/syndrome.cpp	/^	void syndrome::init(){$/;"	f	class:mods::orm::syndrome
init	mods/player-contract-instance.cpp	/^	void player_contract_instance::init() {$/;"	f	class:mods::contracts::player_contract_instance
init	mods/player.cpp	/^	void player::init() {$/;"	f	class:mods::player
init	mods/players/messages.cpp	/^	void init() {$/;"	f	namespace:mods::players::messages
init	mods/query-objects.cpp	/^	void init() {$/;"	f	namespace:mods::query_objects
init	mods/rand.cpp	/^	void init(){$/;"	f	namespace:mods::rand
init	mods/rate-limiting.cpp	/^	void init() {$/;"	f	namespace:mods::rate_limiting
init	mods/rifle-attachments.cpp	/^		void init() {$/;"	f	namespace:mods::rifle_attachments
init	mods/skills.cpp	/^	void init() {$/;"	f	namespace:mods::skills
init	mods/super-users.cpp	/^	void init() {$/;"	f	namespace:mods::super_users
init	mods/target-practice.cpp	/^	void init() {$/;"	f	namespace:mods::target_practice
init	mods/values.cpp	/^			void init(){$/;"	f	namespace:mods::values
init	mods/weapons/damage-types.cpp	/^	void init() {$/;"	f	namespace:mods::weapons::damage_types
init	mods/weapons/elemental.cpp	/^	void init() {$/;"	f	namespace:mods::weapons::elemental
init	mods/weapons/reload.cpp	/^	void init() {$/;"	f	namespace:mods::weapons::reload
init	mods/zone.cpp	/^	void init() {$/;"	f	namespace:mods::zone
init	shop.cpp	/^void shop_data<TOrmType,T,R>::init() {$/;"	f	class:shop_data
init	structs.cpp	/^void char_data::init() {$/;"	f	class:char_data
init	structs.cpp	/^void mob_special_data::init() {$/;"	f	class:mob_special_data
init	structs.cpp	/^void obj_data::init() {$/;"	f	class:obj_data
init	structs.cpp	/^void obj_flag_data::init() {$/;"	f	class:obj_flag_data
init	structs.cpp	/^void room_data::init() {$/;"	f	class:room_data
init_boards	boards.cpp	/^void init_boards(void) {$/;"	f
init_char	db.cpp	/^void init_char(player_ptr_t player) {$/;"	f
init_game	comm.cpp	/^void init_game(ush_int port) {$/;"	f
init_player	globals.cpp	/^		void init_player(char_data* ch) {$/;"	f	namespace:mods::globals
init_socket	comm.cpp	/^socket_t init_socket(ush_int port) {$/;"	f
init_spell_levels	class.cpp	/^void init_spell_levels(void) {$/;"	f
init_spell_levels	mods/hell.hpp	/^	constexpr inline bool init_spell_levels = false;$/;"	m	namespace:mods::hell
initialize_all	mods/date-time.cpp	/^	void initialize_all(uint8_t month,uint8_t day,uint8_t year,uint8_t hour,uint8_t moon_phase_index) {$/;"	f	namespace:mods::date_time
initialize_builder	mods/builder.cpp	/^	void initialize_builder(player_ptr_t& player) {$/;"	f	namespace:mods::builder
initialize_date	mods/date-time.cpp	/^	void initialize_date(uint8_t month,uint8_t day,uint8_t year) {$/;"	f	namespace:mods::date_time
initialize_mob_commands	mods/builder.cpp	/^void initialize_mob_commands() {$/;"	f
initialize_player	mods/player-scaffolding.cpp	/^	int player_scaffolding::initialize_player(player_ptr_t player,int to_room){$/;"	f	class:mods::player_scaffolding
initialize_row	mods/db.cpp	/^	aligned_int_t initialize_row($/;"	f	namespace:mods::db
initialize_row	mods/orm/breacher.cpp	/^	uint64_t breacher::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::breacher
initialize_row	mods/orm/camera-feed.cpp	/^	uint64_t camera_feed::initialize_row() {$/;"	f	class:mods::orm::camera_feed
initialize_row	mods/orm/contract-steps.cpp	/^	uint64_t contract_steps::initialize_row(const contract_vnum_t& i_vnum) {$/;"	f	class:mods::orm::contract_steps
initialize_row	mods/orm/contracts.cpp	/^	uint64_t contracts::initialize_row(const contract_vnum_t& inc_vnum,std::string_view title, std::string_view desc) {$/;"	f	class:mods::orm::contracts
initialize_row	mods/orm/door-event.cpp	/^	uint64_t door_event::initialize_row() {$/;"	f	class:mods::orm::door_event
initialize_row	mods/orm/elevator.cpp	/^	uint64_t elevator::initialize_row() {$/;"	f	class:mods::orm::elevator
initialize_row	mods/orm/engineer.cpp	/^	uint64_t engineer::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::engineer
initialize_row	mods/orm/forge.cpp	/^	uint64_t forge::initialize_row(player_ptr_t &player) {$/;"	f	class:mods::orm::forge
initialize_row	mods/orm/ghost.cpp	/^	uint64_t ghost::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::ghost
initialize_row	mods/orm/hq.cpp	/^	uint64_t hq::initialize_row(std::string_view affiliation, room_vnum rvnum,uint16_t level) {$/;"	f	class:mods::orm::hq
initialize_row	mods/orm/integral-object.cpp	/^	uint64_t integral_object::initialize_row() {$/;"	f	class:mods::orm::integral_object
initialize_row	mods/orm/marine.cpp	/^	uint64_t marine::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::marine
initialize_row	mods/orm/medic.cpp	/^	uint64_t medic::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::medic
initialize_row	mods/orm/mob-equipment-map.cpp	/^	uint64_t mob_equipment_map::initialize_row(const uint64_t& mob_vn, const uint64_t& equipment_vnum) {$/;"	f	class:mods::orm::mob_equipment_map
initialize_row	mods/orm/mob-equipment.cpp	/^	uint64_t mob_equipment::initialize_row(std::string_view profile_name, uint64_t vnum) {$/;"	f	class:mods::orm::mob_equipment
initialize_row	mods/orm/player-base-ability.cpp	/^	uint64_t player_base_ability::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::player_base_ability
initialize_row	mods/orm/pyrexia.cpp	/^	uint64_t pyrexia::initialize_row(player_ptr_t &player){$/;"	f	class:mods::orm::pyrexia
initialize_row	mods/orm/rifle-attachment.cpp	/^	uint64_t rifle_attachment::initialize_row(const uint64_t& player_id,const std::vector<std::string>& list) {$/;"	f	class:mods::orm::rifle_attachment
initialize_row	mods/orm/rifle-attachment.cpp	/^	uint64_t rifle_attachment::initialize_row(const uint64_t& player_id,std::string_view desc, std::string_view position) {$/;"	f	class:mods::orm::rifle_attachment
initialize_row	mods/orm/rifle-instance.cpp	/^	uint64_t rifle_instance::initialize_row(obj_ptr_t& obj) {$/;"	f	class:mods::orm::rifle_instance
initialize_row	mods/orm/room.cpp	/^	uint64_t room::initialize_row() {$/;"	f	class:mods::orm::room
initialize_row	mods/orm/sniper.cpp	/^	uint64_t sniper::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::sniper
initialize_row	mods/orm/striker.cpp	/^	uint64_t striker::initialize_row(player_ptr_t &player, primary_choice_t primary_choice) {$/;"	f	class:mods::orm::striker
initialize_row	mods/orm/support.cpp	/^	uint64_t support::initialize_row(player_ptr_t& player) {$/;"	f	class:mods::orm::support
initialize_row	mods/orm/syndrome.cpp	/^	uint64_t syndrome::initialize_row(player_ptr_t &player){$/;"	f	class:mods::orm::syndrome
initialize_table_schema	mods/db.hpp	/^static inline int_status_t initialize_table_schema(std::string table){$/;"	f
initialized	mods/db-report.hpp	/^	static bool initialized = 0;$/;"	m	namespace:mods::db_report
initiator	mods/object-utils.hpp	/^		std::string initiator;$/;"	m	struct:mods::object_utils::YamlFeedExceptionInfo
injure	mods/injure.cpp	/^namespace mods::injure {$/;"	n	class:mods	file:
injure	mods/injure.hpp	/^namespace mods::injure {$/;"	n	class:mods
injure	mods/projectile.cpp	/^namespace mods::injure {$/;"	n	class:mods	file:
injure_player	mods/injure.cpp	/^	void injure_player(player_ptr_t& person) {$/;"	f	namespace:mods::injure
injured	mods/damage-event.hpp	/^	std::vector<uuid_t> injured;$/;"	m	struct:feedback_t
injured	mods/projectile.cpp	/^			bool injured;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
inner_join	mods/sql.hpp	/^			compositor<T>& inner_join(std::string_view table) {$/;"	f	struct:mods::sql::compositor
innocent	mods/mobs/extended-types.hpp	/^		static const std::string innocent = std::string("Innocent mobs that wouldn't harm a fly (even when provoked). These mobs fulfill the ") +$/;"	m	namespace:mods::mobs::desc
insert	mods/sql.hpp	/^			compositor<T>& insert() {$/;"	f	struct:mods::sql::compositor
insert_or_update_existing	mods/pq.hpp	/^std::pair<bool,std::string> insert_or_update_existing($/;"	f
insert_or_update_existing_returning	mods/pq.hpp	/^std::tuple<bool,std::string,std::string> insert_or_update_existing_returning($/;"	f
insert_returing	mods/orm/base.hpp	/^		static inline std::tuple<int16_t,std::string> insert_returing(TObject obj, std::string_view returning_field) {$/;"	f	struct:mods::orm::base
insert_returing	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> insert_returing(TObject& obj, std::string_view returning_field) {$/;"	f
insert_returning	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string,uint64_t> insert_returning(TObject* obj, std::string_view returning_field) {$/;"	f	namespace:mods::orm::util
insert_returning	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string,uint64_t> insert_returning(TObject& obj, std::string_view returning_field) {$/;"	f
install_item	mods/player-contract-instance.cpp	/^	void player_contract_instance::install_item(const uuid_t& item_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
install_shop	db.cpp	/^int16_t install_shop(shop_ptr_t& shop) {$/;"	f
instantiate_catchy_name	mods/integral-objects.cpp	/^	TAttachments instantiate_catchy_name(std::string_view identifier) {$/;"	f	namespace:mods::integral_objects
instantiate_dummy	mods/target-practice.cpp	/^	void instantiate_dummy(player_ptr_t& player,std::string_view identifier) {$/;"	f	namespace:mods::target_practice
instantiate_elevator_here	mods/elevator.cpp	/^	void instantiate_elevator_here(room_rnum room_id) {$/;"	f	namespace:mods::elevator
instantiate_object_by_index	mods/builder.cpp	/^	std::optional<obj_data*> instantiate_object_by_index(int index) {$/;"	f	namespace:mods::builder
instantiate_object_by_vnum	mods/builder.cpp	/^	std::optional<obj_data*> instantiate_object_by_vnum(int vnum) {$/;"	f	namespace:mods::builder
instantiate_object_vector	mods/builder_util.hpp	/^	void instantiate_object_vector($/;"	f	namespace:mods::builder_util
instigate	mods/js.cpp	/^		static duk_ret_t instigate(duk_context *ctx) {$/;"	f	namespace:mods::js
int_app	constants.cpp	/^cpp_extern const struct int_app_type int_app[] = {$/;"	v	typeref:struct:int_app_type
int_app	constants.hpp	/^cpp_extern const struct int_app_type int_app[] = {$/;"	v	typeref:struct:int_app_type
int_type	mods/acl/config-parser.hpp	/^                typedef uint64_t int_type;$/;"	t	class:mods::acl::FileParser
int_types	mods/values.cpp	/^static const std::vector<value_key_t> int_types = {$/;"	m	namespace:mods::values	file:
integral_object	mods/orm/integral-object.hpp	/^		integral_object() : id(0) {$/;"	f	struct:mods::orm::integral_object
integral_object	mods/orm/integral-object.hpp	/^	struct integral_object : public mods::orm::orm_base<integral_object,std::string> {$/;"	s	namespace:mods::orm
integral_objects	mods/init.hpp	/^INIT(mods::integral_objects);$/;"	v
integral_objects	mods/integral-objects.cpp	/^namespace mods::integral_objects {$/;"	n	class:mods	file:
integral_objects	mods/integral-objects.hpp	/^namespace mods::integral_objects {$/;"	n	class:mods
integral_objects_db	mods/integral-objects-db.cpp	/^namespace mods::integral_objects_db {$/;"	n	class:mods	file:
integral_objects_db	mods/integral-objects-db.hpp	/^namespace mods::integral_objects_db {$/;"	n	class:mods
intelligence	mods/player.hpp	/^			uint16_t& intelligence() {$/;"	f	struct:mods::player
intent	mods/intent.cpp	/^namespace mods::intent {$/;"	n	class:mods	file:
intent	mods/intent.hpp	/^namespace mods::intent {$/;"	n	class:mods
intent_debug	mods/intent.cpp	3;"	d	file:
intent_t	mods/intent.hpp	/^	struct intent_t {$/;"	s	namespace:mods::intent
intent_to_t	mods/intent.hpp	/^	enum intent_to_t {$/;"	g	namespace:mods::intent
intents	mods/intent.cpp	/^	static std::vector<mods::intent::intent_t> intents;$/;"	m	namespace:mods::intent	file:
interpolate_location	mods/response-team/radio.cpp	/^	std::string interpolate_location(player_ptr_t& mob,std::string_view message) {$/;"	f	namespace:mods::response_team::radio
interpret	mods/drone.cpp	/^		bool interpret(uuid_t owner_uuid,const std::string& argument) {$/;"	f	namespace:mods::drone
interpret_espec	db.cpp	/^void interpret_espec(const char *keyword, const char *value, int i, int nr) {$/;"	f
interpreter	interpreter.cpp	/^namespace mods::interpreter {$/;"	n	class:mods	file:
interpreter	mods/init.hpp	/^INIT(mods::interpreter);$/;"	v
interpreter	mods/interpreter.cpp	/^namespace mods::interpreter {$/;"	n	class:mods	file:
interpreter	mods/interpreter.hpp	/^namespace mods::interpreter {$/;"	n	class:mods
intimidate	mods/classes/sentinel.cpp	/^		void sentinel::intimidate(player_ptr_t& target){$/;"	f	class:mods::classes::sentinel
intimidate_levels_t	mods/classes/sentinel.hpp	/^		enum intimidate_levels_t {$/;"	g	struct:mods::classes::sentinel
intimidate_target	mods/classes/ghost.cpp	/^	std::tuple<bool,std::string> ghost::intimidate_target(uuid_t npc_uuid){$/;"	f	class:mods::classes::ghost
into	mods/sql.hpp	/^			compositor<T>& into(str_object table) {$/;"	f	struct:mods::sql::compositor
invalid_align	handler.cpp	/^int invalid_align(char_data *ch, struct obj_data *obj) {$/;"	f
invalid_class	class.cpp	/^int invalid_class(char_data *ch, struct obj_data *obj) {$/;"	f
invalid_list	ban.cpp	/^char *invalid_list[MAX_INVALID_NAMES];$/;"	v
invalid_plug	mods/mini-games/wires.cpp	/^	std::string invalid_plug(){$/;"	f	namespace:mods::mini_games
invalid_row	mods/mini-games/line-up.cpp	/^	std::string line_up::invalid_row(){$/;"	f	class:mods::mini_games::line_up
invec	globals.hpp	272;"	d
inventory	mods/classes/breacher.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inventory	mods/classes/forge.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inventory	mods/classes/ghost.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inventory	mods/classes/pyrexia.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inventory	mods/classes/sentinel.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inventory	mods/classes/syndrome.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inventory	mods/orm/inventory.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inventory	mods/orm/inventory.hpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm
inventory	mods/player.cpp	/^namespace mods::orm::inventory {$/;"	n	class:mods::orm	file:
inverse_target_string_map	mods/contract-steps.hpp	/^	static inline std::map<target_t,std::string> inverse_target_string_map() {$/;"	f
inverse_task_string_map	mods/contract-steps.hpp	/^	static inline std::map<task_t,std::string> inverse_task_string_map() {$/;"	f
invisible	mods/super-users.cpp	/^	bool invisible(player_ptr_t& player) {$/;"	f	namespace:mods::super_users
invisible_super_users	mods/super-users.cpp	/^	static std::set<std::string> invisible_super_users;$/;"	m	namespace:mods::super_users	file:
invoke	mods/catch.hpp	/^			virtual void invoke() const {$/;"	f	class:Catch::MethodTestCase
irl	mods/date-time.cpp	/^namespace mods::date_time::irl {$/;"	n	class:mods::date_time	file:
irl	mods/date-time.hpp	/^	namespace irl {$/;"	n	namespace:mods::date_time
irl_now	mods/date-time.cpp	/^std::string irl_now() {$/;"	f
is	mods/player.hpp	/^			bool is(char_data* ch) const {$/;"	f	struct:mods::player
is	mods/player.hpp	/^			bool is(player_ptr_t p) const {$/;"	f	struct:mods::player
isBinaryExpression	mods/catch.hpp	/^			virtual bool isBinaryExpression() const {$/;"	f	struct:Catch::DecomposedExpression
isFalseTest	mods/catch.hpp	/^	inline bool isFalseTest(int flags)                {$/;"	f	namespace:Catch
isFalseTest	mods/catch2.hpp	/^    inline bool isFalseTest( int flags ) { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isJustInfo	mods/catch.hpp	/^	inline bool isJustInfo(int flags) {$/;"	f	namespace:Catch
isOk	mods/catch.hpp	/^	inline bool isOk(ResultWas::OfType resultType) {$/;"	f	namespace:Catch
isTrue	mods/catch.hpp	/^	inline bool isTrue(bool value) {$/;"	f	namespace:Catch
is_abbrev	interpreter.cpp	/^int is_abbrev(const char *arg1, const char *arg2) {$/;"	f
is_ammo	structs.h	/^	bool is_ammo;$/;"	m	struct:obj_flag_data
is_argument	globals.cpp	/^		bool is_argument(std::string_view argv,std::string_view test) {$/;"	f	namespace:mods::globals
is_blocked	mods/player.cpp	/^	bool player::is_blocked() {$/;"	f	class:mods::player
is_bool	mods/values.cpp	/^		bool is_bool(value_key_t key){$/;"	f	namespace:mods::values
is_breach_charge	mods/object-utils.hpp	/^	static inline bool is_breach_charge(T& obj) {$/;"	f	namespace:mods::object_utils
is_callable	mods/catch2.hpp	/^    struct is_callable<Fun(Args...)> : decltype(is_callable_tester::test<Fun, Args...>(0)) {};$/;"	s	namespace:Catch
is_callable_tester	mods/catch2.hpp	/^    struct is_callable_tester {$/;"	s	namespace:Catch
is_camera	mods/object-utils.hpp	/^	static inline bool is_camera(T& obj) {$/;"	f	namespace:mods::object_utils
is_camera_feed	act.informative.cpp	/^bool is_camera_feed(obj_data* obj) {$/;"	f
is_cancel_command	mods/player-utils.hpp	/^		inline bool is_cancel_command(const std::string& arg){$/;"	f	namespace:mods::player_utils
is_cancel_command	mods/player-utils.hpp	/^		inline bool is_cancel_command(const std::string_view& arg){$/;"	f	namespace:mods::player_utils
is_cancel_command	mods/player-utils.hpp	/^	static inline bool is_cancel_command(T& arg){$/;"	f	namespace:mods::player_utils
is_capable_of_all	mods/item.cpp	/^		bool is_capable_of_all(player_ptr_t& player, obj_ptr_t& object, cap_list_t& actions){$/;"	f	namespace:mods::item
is_capable_of_any	mods/item.cpp	/^		bool is_capable_of_any(player_ptr_t& player, obj_ptr_t& object, cap_list_t& actions){$/;"	f	namespace:mods::item
is_capable_of_single	mods/item.cpp	/^		bool is_capable_of_single(player_ptr_t& player, obj_ptr_t& object, capability_t action){$/;"	f	namespace:mods::item
is_claymore	mods/object-utils.hpp	/^	static inline bool is_claymore(T& obj) {$/;"	f	namespace:mods::object_utils
is_dark	mods/rooms.cpp	/^	bool is_dark(room_rnum room) {$/;"	f	namespace:mods::rooms
is_destroy_door	mods/player-contract-instance.hpp	/^			bool is_destroy_door() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_destroy_item	mods/player-contract-instance.hpp	/^			bool is_destroy_item() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_dir_breachable	mods/doors.hpp	/^	static inline bool is_dir_breachable(const room_rnum  room, int8_t direction) {$/;"	f	namespace:mods::doors
is_dir_electrified	mods/doors.hpp	/^	static inline bool is_dir_electrified(const room_rnum room, int8_t direction) {$/;"	f	namespace:mods::doors
is_dir_thermite_breachable	mods/doors.hpp	/^	static inline bool is_dir_thermite_breachable(const room_rnum  room, int8_t direction) {$/;"	f	namespace:mods::doors
is_direction	mods/builder.cpp	60;"	d	file:
is_directory	mods/filesystem.hpp	/^	static inline bool is_directory(const std::string& path){$/;"	f	namespace:mods::filesystem
is_dissipated	mods/classes/ghost.cpp	/^	bool ghost::is_dissipated() const {$/;"	f	class:mods::classes::ghost
is_empty	db.cpp	/^int is_empty(zone_rnum zone_nr) {$/;"	f
is_executing_js	mods/mobs/mob.cpp	/^	bool player::is_executing_js() const {$/;"	f	class:mods::player
is_executing_js	mods/player.cpp	/^	bool player::is_executing_js() const {$/;"	f	class:mods::player
is_fighting	mods/player.hpp	/^			bool is_fighting(char_data* ch) {$/;"	f	struct:mods::player
is_fighting	mods/player.hpp	/^			bool is_fighting(player_ptr_t p) {$/;"	f	struct:mods::player
is_file	mods/filesystem.hpp	/^	static inline bool is_file(const std::string& path){$/;"	f	namespace:mods::filesystem
is_find_door	mods/player-contract-instance.hpp	/^			bool is_find_door() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_find_item	mods/player-contract-instance.hpp	/^			bool is_find_item() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_find_mob	mods/player-contract-instance.hpp	/^			bool is_find_mob() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_find_room	mods/player-contract-instance.hpp	/^			bool is_find_room() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_float	mods/values.cpp	/^		bool is_float(value_key_t key){$/;"	f	namespace:mods::values
is_gain_entry	mods/player-contract-instance.hpp	/^			bool is_gain_entry() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_install_item	mods/player-contract-instance.hpp	/^			bool is_install_item() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_installed	mods/object-utils.hpp	/^	bool is_installed(T& obj) {$/;"	f	namespace:mods::object_utils
is_installing	mods/object-utils.hpp	/^	bool is_installing(T& obj) {$/;"	f	namespace:mods::object_utils
is_installing	mods/player-utils.hpp	/^		static inline bool is_installing(T& player){$/;"	f	namespace:mods::player_utils
is_int	mods/values.cpp	/^		bool is_int(value_key_t key){$/;"	f	namespace:mods::values
is_kill	mods/player-contract-instance.hpp	/^			bool is_kill() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_lower_match	mods/util.cpp	/^	bool is_lower_match(std::string_view str1,std::string_view str2) {$/;"	f	namespace:mods::util
is_night_vision_camera	mods/object-utils.hpp	/^	inline bool is_night_vision_camera(uuid_t obj_uuid) {$/;"	f	namespace:mods::object_utils
is_night_vision_camera	mods/object-utils.hpp	/^	inline bool is_night_vision_camera(uuid_t& obj_uuid) {$/;"	f	namespace:mods::object_utils
is_night_vision_camera	mods/object-utils.hpp	/^	static inline bool is_night_vision_camera(T obj) {$/;"	f	namespace:mods::object_utils
is_night_vision_camera	mods/object-utils.hpp	/^	static inline bool is_night_vision_camera(T& obj) {$/;"	f	namespace:mods::object_utils
is_nobody	mods/player.hpp	/^			bool is_nobody() const {$/;"	f	struct:mods::player
is_npc	mods/player.cpp	/^	bool player::is_npc() const {$/;"	f	class:mods::player
is_number	interpreter.cpp	/^int is_number(const char *str) {$/;"	f
is_ok	shop.cpp	/^int is_ok(char_data *keeper, char_data *ch, int shop_nr) {$/;"	f
is_ok_char	shop.cpp	/^int is_ok_char(char_data *keeper, char_data *ch, int shop_nr) {$/;"	f
is_on_fire	mods/rooms.hpp	/^	static inline bool is_on_fire(TRoom room) {$/;"	f	namespace:mods::rooms
is_open	mods/doors.hpp	/^	static inline bool is_open(const room_rnum  room, int8_t direction) {$/;"	f	namespace:mods::doors
is_open	shop.cpp	/^int is_open(char_data *keeper, int shop_nr, int msg) {$/;"	f
is_optional	mods/contract-steps.hpp	/^		bool 						is_optional;$/;"	m	namespace:mods::contracts
is_owner	mods/object-utils.hpp	/^	bool is_owner(T& obj, PlayerT& player) {$/;"	f	namespace:mods::object_utils
is_peaceful	mods/rooms.hpp	/^	static inline bool is_peaceful(room_rnum room) {$/;"	f	namespace:mods::rooms
is_quota_destroy_door	mods/player-contract-instance.hpp	/^			bool is_quota_destroy_door() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_quota_find_item	mods/player-contract-instance.hpp	/^			bool is_quota_find_item() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_quota_kill_mob	mods/player-contract-instance.hpp	/^			bool is_quota_kill_mob() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_retrieve_item	mods/player-contract-instance.hpp	/^			bool is_retrieve_item() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_rifle_attachment	act.informative.cpp	/^bool is_rifle_attachment(obj_data* obj) {$/;"	f
is_rifle_attachment	mods/yaml.hpp	/^		bool is_rifle_attachment;$/;"	m	struct:mods::yaml::rifle_description_t
is_scanned	mods/player-utils.hpp	/^	static inline bool is_scanned(T& player){$/;"	f	namespace:mods::player_utils
is_smoked	mods/rooms.hpp	/^	static inline bool is_smoked(TRoom room) {$/;"	f	namespace:mods::rooms
is_string	mods/values.cpp	/^		bool is_string(value_key_t key){$/;"	f	namespace:mods::values
is_talk_to	mods/player-contract-instance.hpp	/^			bool is_talk_to() const {$/;"	f	struct:mods::contracts::player_contract_instance
is_tell_ok	act.comm.cpp	/^int is_tell_ok(char_data *ch, char_data *vict) {$/;"	f
is_thermal_camera	mods/object-utils.hpp	/^	inline bool is_thermal_camera(uuid_t obj_uuid) {$/;"	f	namespace:mods::object_utils
is_thermal_camera	mods/object-utils.hpp	/^	inline bool is_thermal_camera(uuid_t& obj_uuid) {$/;"	f	namespace:mods::object_utils
is_thermal_camera	mods/object-utils.hpp	/^	static inline bool is_thermal_camera(T obj) {$/;"	f	namespace:mods::object_utils
is_thermal_camera	mods/object-utils.hpp	/^	static inline bool is_thermal_camera(T& obj) {$/;"	f	namespace:mods::object_utils
is_trash	castle.cpp	/^int is_trash(struct obj_data *i) {$/;"	f
is_uint16	mods/values.cpp	/^		bool is_uint16(value_key_t key){$/;"	f	namespace:mods::values
is_uint32	mods/values.cpp	/^		bool is_uint32(value_key_t key){$/;"	f	namespace:mods::values
is_uint8	mods/values.cpp	/^		bool is_uint8(value_key_t key){$/;"	f	namespace:mods::values
is_using_pluck_filter	mods/lmdb.cpp	/^		bool _db_handle::is_using_pluck_filter() const { $/;"	f	class:mods::lmdb::_db_handle
is_valid_name	login.cpp	/^	bool is_valid_name(std::string_view name){$/;"	f	namespace:login
is_visible	mods/calc-visibility.cpp	/^	bool is_visible(player_ptr_t& observer,player_ptr_t& target) {$/;"	f	namespace:mods::calc_visibility
is_visible	mods/calc-visibility.cpp	/^	bool is_visible(uuid_t observer_uuid,uuid_t target_uuid) {$/;"	f	namespace:mods::calc_visibility
is_weapon_loaded	mods/mobs/mob.cpp	/^	bool player::is_weapon_loaded() {$/;"	f	class:mods::player
is_weapon_loaded	mods/player.cpp	/^	bool player::is_weapon_loaded() {$/;"	f	class:mods::player
is_wield_position	mods/object-utils.cpp	/^	bool is_wield_position(int where) {$/;"	f	namespace:mods::object_utils
is_yaml_type	mods/util.cpp	/^	bool is_yaml_type(std::string_view type) {$/;"	f	namespace:mods::util
isascii	sysdep.h	343;"	d
isbanned	ban.cpp	/^int isbanned(const char *hostname) {$/;"	f
isbanned	mods/ban_system.hpp	/^		bool isbanned(const std::string &m){ \/** FIXME *\/ return false; }$/;"	f	namespace:mods::ban_system
isname	handler.cpp	/^int isname(const char *str, const char *namelist) {$/;"	f
item	mods/item.cpp	/^namespace mods::item {$/;"	n	class:mods	file:
item	mods/item.hpp	/^namespace mods::item {$/;"	n	class:mods
item_generator	mods/forge-engine/generator.cpp	/^	mods::forge_engine::generator item_generator;$/;"	m	namespace:mods::forge_engine	file:
item_number	structs.h	/^		obj_vnum item_number;	\/* Where in data-type			*\/$/;"	m	struct:obj_data
item_number	structs.h	/^	obj_vnum item_number;$/;"	m	struct:obj_file_elem
item_types	constants.cpp	/^const char *item_types[] = {$/;"	v
item_types	constants.hpp	/^const char *item_types[] = {$/;"	v
item_types_t	mods/forge-engine/generator.hpp	/^	enum item_types_t {$/;"	g	namespace:mods::forge_engine
iteration	mods/deferred.cpp	/^	void deferred::iteration() {$/;"	f	class:mods::deferred
itoa	mods/util.cpp	/^	std::string itoa(int number) {$/;"	f	namespace:mods::util
janitor	spec_assign.cpp	/^SPECIAL(janitor);$/;"	v
janitor	spec_procs.cpp	/^SPECIAL(janitor);$/;"	v
jerry	castle.cpp	/^SPECIAL(jerry);$/;"	v
js	fight.cpp	/^namespace mods::js {$/;"	n	class:mods	file:
js	interpreter.cpp	/^namespace mods::js {$/;"	n	class:mods	file:
js	mods/js.cpp	/^	namespace js {$/;"	n	namespace:mods	file:
js	mods/js.hpp	/^	namespace js {$/;"	n	namespace:mods
js_object	mods/mobs/mob.cpp	/^	std::string player::js_object() {$/;"	f	class:mods::player
js_object	mods/player.cpp	/^	std::string player::js_object() {$/;"	f	class:mods::player
jump	mods/rand.cpp	/^	void jump(void) {$/;"	f	namespace:mods::rand::xoroshiro
just_yaml_file	mods/orm/inventory.cpp	/^			std::string just_yaml_file(std::string path) {$/;"	f	namespace:mods::orm::inventory::lmdb::yaml
jx	mods/jx.hpp	/^namespace mods::jx {$/;"	n	class:mods
karma	mods/karma.hpp	/^	struct karma {$/;"	s	namespace:mods
karma_index	mods/karma.cpp	/^	static std::map<uint64_t,karma> karma_index;$/;"	m	namespace:mods	file:
karmic_index	mods/karma.hpp	/^		float karmic_index;$/;"	m	struct:mods::karma
keeper	shop.h	/^	mob_vnum	 keeper;	\/* The mobile who owns the shop (rnum)	*\/$/;"	m	struct:shop_data
key	structs.h	/^	obj_vnum key;		\/* Key's number (-1 for no key)		*\/$/;"	m	struct:room_direction_data
key_exists	mods/db.cpp	/^bool key_exists(std::string key) {$/;"	f
keyval_first	mods/util-map.hpp	/^			Tkey keyval_first(std::map<Tkey,Tval>& m,const Tval value,Tkey default_value) {$/;"	f	namespace:mods::util::maps
keyword	db.h	/^	char	*keyword;$/;"	m	struct:help_index_element
keyword	mods/extra_desc_data.hpp	/^		mods::string keyword;$/;"	m	struct:mods::extra_desc_data
keyword	structs.h	/^	mods::string keyword;		\/* for open\/close			*\/$/;"	m	struct:room_direction_data
keyword	structs.h	/^	mods::string keyword;                 \/* Keyword in look\/examine          *\/$/;"	m	struct:extra_descr_data
keywords	shop.h	/^	char *keywords;$/;"	m	struct:shop_buy_data
kill	mods/player-contract-instance.cpp	/^	void player_contract_instance::kill(const uuid_t& mob_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
kind	mods/classes/base.hpp	/^		virtual types kind() {$/;"	f	struct:mods::classes::base
kind	mods/classes/breacher.hpp	/^		types kind() {$/;"	f	struct:mods::classes::breacher
kind	mods/classes/contagion.hpp	/^		types kind() {$/;"	f	struct:mods::classes::contagion
kind	mods/classes/engineer.hpp	/^		types kind() {$/;"	f	struct:mods::classes::engineer
kind	mods/classes/forge.hpp	/^		types kind() {$/;"	f	struct:mods::classes::forge
kind	mods/classes/ghost.hpp	/^		types kind() {$/;"	f	struct:mods::classes::ghost
kind	mods/classes/marine.hpp	/^		types kind() {$/;"	f	struct:mods::classes::marine
kind	mods/classes/medic.hpp	/^			types kind() {$/;"	f	struct:mods::classes::medic
kind	mods/classes/psyop.hpp	/^		types kind() {$/;"	f	struct:mods::classes::psyop
kind	mods/classes/pyrexia.hpp	/^			types kind() {$/;"	f	struct:mods::classes::pyrexia
kind	mods/classes/sentinel.hpp	/^		types kind() {$/;"	f	struct:mods::classes::sentinel
kind	mods/classes/sniper.hpp	/^			types kind() {$/;"	f	struct:mods::classes::sniper
kind	mods/classes/support.hpp	/^		types kind() {$/;"	f	struct:mods::classes::support
kind	mods/classes/syndrome.hpp	/^		types kind() {$/;"	f	struct:mods::classes::syndrome
king_welmar	castle.cpp	/^SPECIAL(king_welmar);$/;"	v
knockback_room	mods/doors.hpp	/^	static inline void knockback_room(const room_rnum room,int door) {$/;"	f	namespace:mods::doors
l96aw	mods/weapons/sniper-rifle-l96aw.cpp	/^	l96aw::l96aw(){$/;"	f	class:mods::weapons::sniper_rifle::l96aw
l96aw	mods/weapons/sniper-rifle-l96aw.hpp	/^		struct l96aw {$/;"	s	namespace:mods::weapons::sniper_rifle
last_attack	mods/mobs/mini-gunner.hpp	/^			feedback_t last_attack;$/;"	m	struct:mods::mobs::mini_gunner
last_attack	mods/mobs/smart-mob.hpp	/^			feedback_t last_attack;$/;"	m	struct:mods::mobs::smart_mob
last_payment	house.h	/^	time_t last_payment;		\/* date of last house payment   *\/$/;"	m	struct:house_control_rec
last_seen	mods/mobs/mini-gunner.hpp	/^			std::map<uuid_t,uint64_t> last_seen;$/;"	m	struct:mods::mobs::mini_gunner
last_seen	mods/mobs/smart-mob.hpp	/^			std::map<uuid_t,uint64_t> last_seen;$/;"	m	struct:mods::mobs::smart_mob
lastsort	shop.h	/^	int	 lastsort;		\/* How many items are sorted in inven?	*\/$/;"	m	struct:shop_data
leave_contract	mods/contracts.cpp	/^	void leave_contract(player_ptr_t& player,int contract_id) {$/;"	f	namespace:mods::contracts
left_join	mods/sql.hpp	/^			compositor<T>& left_join(std::string_view table) {$/;"	f	struct:mods::sql::compositor
left_outer_join	mods/sql.hpp	/^			compositor<T>& left_outer_join(std::string_view table) {$/;"	f	struct:mods::sql::compositor
legacy	limits.cpp	/^namespace legacy {$/;"	n	file:
legacy	mods/weapons/damage-types.cpp	/^	namespace legacy {$/;"	n	namespace:mods::weapons::damage_types	file:
legacy	mods/weapons/damage-types.hpp	/^	namespace legacy {$/;"	n	namespace:mods::weapons::damage_types
len	shop.h	/^	int len;$/;"	m	struct:stack_data
length	modify.cpp	/^int length[] = {$/;"	v
length	mods/string.cpp	/^	unsigned int string::length() const {$/;"	f	class:mods::string
lense_type_t	structs.h	/^enum lense_type_t {$/;"	g
level	act.wizard.cpp	/^	const char level;$/;"	m	struct:set_struct	file:
level	boards.h	/^	int	level;        \/* level of poster *\/$/;"	m	struct:board_msginfo
level	mods/forge-engine/value-scaler.hpp	/^		float level;$/;"	m	struct:mods::forge_engine::value_scaler
level	mods/mobs/mob.hpp	/^			byte& level(){$/;"	f	class:mods::player
level	mods/orm/skill-points.hpp	/^		uint16_t level;$/;"	m	struct:mods::orm::skill_points
level	mods/orm/skill-points.hpp	/^		uint16_t level;$/;"	m	struct:mods::orm::skill_points_record_t
level	mods/player.cpp	/^	uint8_t& player::level() {$/;"	f	class:mods::player
level_can_shout	config.cpp	/^int level_can_shout = 1;$/;"	v
level_exp	mods/levels.cpp	/^	int level_exp(int level) {$/;"	f	namespace:mods::levels
levels	mods/init.hpp	/^INIT(mods::levels);$/;"	v
levels	mods/levels.cpp	/^namespace mods::levels {$/;"	n	class:mods	file:
levels	mods/levels.hpp	/^namespace mods::levels {$/;"	n	class:mods
levels	mods/player.cpp	/^namespace mods::levels {$/;"	n	class:mods	file:
lifespan	db.h	/^		int	lifespan;           \/* how long between resets (minutes)  *\/$/;"	m	struct:zone_data
light	mods/orm/room.hpp	/^		uint64_t light;$/;"	m	struct:mods::orm::room
light	structs.h	/^		byte light;                  \/* Number of lightsources in room     *\/$/;"	v
light_machine_guns	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> light_machine_guns;$/;"	m	namespace:mods::forge_engine	file:
limits	mods/rate-limiting.cpp	/^	static std::map<action_t,std::pair<int,int>> limits;$/;"	m	namespace:mods::rate_limiting	file:
line	db.h	/^	int line;		\/* line number this command appears on  *\/$/;"	m	struct:reset_com
line	mods/catch.hpp	/^		std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
line	mods/catch2.hpp	/^            line( _line )$/;"	f	struct:Catch::SourceLineInfo
line	mods/catch2.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
lineInfo	mods/catch.hpp	/^		SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
lineInfo	mods/catch2.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
line_up	mods/mini-games/line-up.cpp	/^	line_up::line_up() {$/;"	f	class:mods::mini_games::line_up
line_up	mods/mini-games/line-up.hpp	/^	struct line_up {$/;"	s	namespace:mods::mini_games
linked_list_remove	mods/util.hpp	/^	inline void linked_list_remove(T item, T head) {$/;"	f	namespace:mods::util
list	mods/lmdb/conf.cpp	/^static struct translation *list = NULL;$/;"	m	namespace:gdns	typeref:struct:gdns::translation	file:
list_all_shops	shop.cpp	/^void list_all_shops(char_data *ch) {$/;"	f
list_char_to_char	act.informative.cpp	/^void list_char_to_char(char_data *ch) {$/;"	f
list_container	mods/acl_list.cpp	/^	namespace list_container{$/;"	n	namespace:mods::acl_list	file:
list_contracts	mods/contracts.cpp	/^	static duk_ret_t list_contracts(duk_context *ctx) {$/;"	f	namespace:mods::contracts
list_contracts	mods/contracts.cpp	/^	std::vector<std::string> list_contracts(room_vnum rvnum) {$/;"	f	namespace:mods::contracts
list_detailed_shop	shop.cpp	/^void list_detailed_shop(char_data *ch, int shop_nr) {$/;"	f
list_devices	mods/mini-games.cpp	/^	void list_devices(player_ptr_t& player) {$/;"	f	namespace:mods::mini_games
list_extract_option	mods/builder.hpp	/^static inline std::string list_extract_option(std::string_view parent_command, std::string_view entity_name) {$/;"	f
list_line	mods/builder_util.hpp	/^	void list_line(TPlayer& player, const std::string& key, ObjectType& value) {$/;"	f	namespace:mods::builder_util
list_obj_contents_to_char	mods/examine.cpp	/^	void list_obj_contents_to_char(obj_ptr_t& object,player_ptr_t& player,int mode,int show) {$/;"	f	namespace:mods::examine
list_obj_to_char	act.informative.cpp	/^void list_obj_to_char(struct obj_data *list, char_data *ch, int mode, int show) {$/;"	f
list_object	shop.cpp	/^char *list_object(struct obj_data *obj, int cnt, int aindex, int shop_nr, char_data *keeper, char_data *ch) {$/;"	f
list_object_vector	mods/builder_util.hpp	/^	void list_object_vector($/;"	f	namespace:mods::builder_util
list_one_char	act.informative.cpp	/^void list_one_char(char_data *i, char_data *ch) {$/;"	f
list_rate_limits_help	mods/rate-limiting.cpp	/^	static const char* list_rate_limits_help = "usage: list_rate_limits [search]";$/;"	m	namespace:mods::rate_limiting	file:
list_rounds	mods/weapon.cpp	/^	void list_rounds(player_ptr_t& player,obj_ptr_t& obj) {$/;"	f	namespace:mods::weapon
list_rounds	mods/weapon.hpp	/^	static inline void list_rounds(TPlayer& player,TObject& obj) {$/;"	f	namespace:mods::weapon
list_shop_items	mods/shop.hpp	/^	static inline void list_shop_items(player_ptr_t& player,TShopMap& shop_map) {$/;"	f	namespace:mods::shop
list_skills	spec_procs.cpp	/^void list_skills(char_data *ch) {$/;"	f
list_start	mail.h	/^	position_list_type *list_start;	\/* list of mail positions	*\/$/;"	m	struct:mail_index_type_d
list_to_char	shop.cpp	/^void shop_data<mods::orm::shop,mods::orm::shop_rooms,mods::orm::shop_objects>::list_to_char(player_ptr_t& player) {$/;"	f	class:shop_data
list_top	act.social.cpp	/^static int list_top = -1;$/;"	v	file:
listeners	mods/events.cpp	/^	static listener_collection_t listeners;$/;"	m	namespace:mods::events	file:
lmdb	globals.hpp	/^	namespace lmdb {$/;"	n	namespace:mods
lmdb	mods/db.hpp	/^namespace mods::lmdb {$/;"	n	class:mods
lmdb	mods/lmdb.cpp	/^namespace mods::lmdb {$/;"	n	class:mods	file:
lmdb	mods/lmdb.hpp	/^namespace mods::lmdb {$/;"	n	class:mods
lmdb	mods/lmdb/db.hpp	/^	namespace lmdb {$/;"	n	namespace:gdns
lmdb	mods/orm/inventory.cpp	/^	namespace lmdb {$/;"	n	namespace:mods::orm::inventory	file:
lmdb	mods/orm/inventory.hpp	/^	namespace lmdb {$/;"	n	namespace:mods::orm::inventory
lmdb	mods/player.cpp	/^namespace mods::orm::inventory::lmdb {$/;"	n	class:mods::orm::inventory	file:
lmdb_commit	mods/db.cpp	/^	void lmdb_commit() {$/;"	f	namespace:mods::db
lmdb_debug	mods/lmdb.cpp	116;"	d	file:
lmdb_debug	mods/lmdb.cpp	118;"	d	file:
lmdb_del	mods/db.cpp	/^	void lmdb_del(std::string key) {$/;"	f	namespace:mods::db
lmdb_exists	mods/db.cpp	/^	bool lmdb_exists(std::string key) {$/;"	f	namespace:mods::db
lmdb_export_char	mods/db.cpp	/^	void lmdb_export_char(player_ptr_t player_ptr, mutable_map_t& values) {$/;"	f	namespace:mods::db
lmdb_get	mods/db.cpp	/^	std::string lmdb_get(std::string_view key) {$/;"	f	namespace:mods::db
lmdb_ndel	mods/db.cpp	/^	void lmdb_ndel(void* key,std::size_t key_size) {$/;"	f	namespace:mods::db
lmdb_nget	mods/db.cpp	/^	int lmdb_nget(void* key,std::size_t k_size,std::string& value) {$/;"	f	namespace:mods::db
lmdb_nget_void	mods/db.cpp	/^	int lmdb_nget_void(void* key,std::size_t k_size,void* value) {$/;"	f	namespace:mods::db
lmdb_nput	mods/db.cpp	/^	int lmdb_nput(void* key,std::size_t key_size,$/;"	f	namespace:mods::db
lmdb_put	mods/db.cpp	/^	void lmdb_put(std::string key,std::string value) {$/;"	f	namespace:mods::db
lmdb_renew	mods/db.cpp	/^	void lmdb_renew() {$/;"	f	namespace:mods::db
lmdb_write_values	mods/db.cpp	/^	tuple_status_t lmdb_write_values($/;"	f	namespace:mods::db
load	mods/karma.cpp	/^	void load(player_ptr_t& player){$/;"	f	namespace:mods
load	mods/mini-games.cpp	/^	void load(mini_game_payload_t g) {$/;"	f	namespace:mods::mini_games
load_all	mods/builder/conbuild.cpp	/^		void load_all() {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
load_all	mods/builder/hqbuild.cpp	/^	void load_all() {$/;"	f	namespace:mods::builder::hqbuild
load_all	mods/builder/meqbuild.cpp	/^		void load_all() {$/;"	f	struct:mods::builder::meqbuild::meqbuild_interface
load_all	mods/orm/armor-index.cpp	/^	std::tuple<int16_t,std::string> armor_index::load_all() {$/;"	f	class:mods::orm::armor_index
load_all	mods/orm/mini-game.cpp	/^	void mini_game::load_all(){$/;"	f	class:mods::orm::mini_game
load_all	mods/orm/mob-roam.cpp	/^	std::tuple<int16_t,std::string> mob_roam::load_all() {$/;"	f	class:mods::orm::mob_roam
load_all	mods/orm/rifle-index.cpp	/^	std::tuple<int16_t,std::string> rifle_index::load_all() {$/;"	f	class:mods::orm::rifle_index
load_all	mods/orm/skill-points.cpp	/^	std::tuple<int16_t,std::string> skill_points::load_all() {$/;"	f	class:mods::orm::skill_points
load_all	mods/orm/skill-trees.cpp	/^	std::tuple<int16_t,std::string> skill_trees::load_all() {$/;"	f	class:mods::orm::skill_trees
load_all	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> load_all(TObject* s) {$/;"	f	namespace:mods::orm::util
load_all	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> load_all(TObject& s) {$/;"	f
load_all	mods/world-configuration.cpp	/^	rooms_t load_all() {$/;"	f	namespace:mods::world_conf
load_all_armor_index_data	mods/orm/armor-index.cpp	/^	std::tuple<int16_t,std::string> load_all_armor_index_data(std::map<std::string,std::vector<std::string>>* storage_ptr) {$/;"	f	namespace:mods::orm
load_all_by_table	mods/orm/orm-base.hpp	/^	static inline std::deque<std::shared_ptr<TObject>> load_all_by_table() {$/;"	f	namespace:mods::orm
load_all_contracts	mods/contracts.cpp	/^	void load_all_contracts() {$/;"	f	namespace:mods::contracts
load_all_non_orm_contracts	mods/orm/contracts.cpp	/^	std::tuple<int16_t,std::string> load_all_non_orm_contracts(std::deque<std::shared_ptr<mods::contracts::contract>>* list) {$/;"	f	namespace:mods::orm
load_all_rifle_index_data	mods/orm/rifle-index.cpp	/^	std::tuple<int16_t,std::string> load_all_rifle_index_data(std::map<std::string,std::vector<std::string>>* storage_ptr) {$/;"	f	namespace:mods::orm
load_all_roaming_data	mods/orm/mob-roam.cpp	/^	std::tuple<int16_t,std::string> load_all_roaming_data(std::map<mob_vnum,std::vector<room_vnum>>* storage_ptr) {$/;"	f	namespace:mods::orm
load_all_skill_points	mods/orm/skill-points.cpp	/^	std::tuple<int16_t,std::string> load_all_skill_points(std::map<uint16_t,uint16_t>* storage_ptr) {$/;"	f	namespace:mods::orm
load_banned	ban.cpp	/^void load_banned(void) {$/;"	f
load_banned	mods/hell.hpp	/^	constexpr inline bool load_banned = false;$/;"	m	namespace:mods::hell
load_base_abilities	mods/players/db-load.cpp	/^	void load_base_abilities(player_ptr_t& player) {$/;"	f	namespace:mods::players::db_load
load_base_functions	mods/js.cpp	/^		void load_base_functions() {$/;"	f	namespace:mods::js
load_by_class	mods/orm/skill-trees.cpp	/^	std::tuple<int16_t,std::string> skill_trees::load_by_class(std::string_view player_class) {$/;"	f	class:mods::orm::skill_trees
load_by_column	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> load_by_column(TObject* s,std::string_view column,std::string_view value) {$/;"	f	namespace:mods::orm::util
load_by_column	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> load_by_column(TObject& s,std::string_view column,std::string_view value) {$/;"	f
load_by_contract_vnum	mods/orm/contract-steps.cpp	/^	std::tuple<int16_t,std::string> contract_steps::load_by_contract_vnum(const contract_vnum_t& contract_vnum) {$/;"	f	class:mods::orm::contract_steps
load_by_id	mods/orm/quotes.hpp	/^			bool load_by_id(const TIDType & id){$/;"	f	struct:mods::orm::base_quotes
load_by_id	mods/orm/rifle-instance.cpp	/^	int16_t rifle_instance::load_by_id(uint64_t in_rifle_id) {$/;"	f	class:mods::orm::rifle_instance
load_by_mob_vnum	mods/orm/mob-equipment-map.cpp	/^	int16_t mob_equipment_map::load_by_mob_vnum(const uint64_t& mob_vnum) {$/;"	f	class:mods::orm::mob_equipment_map
load_by_pkid	mods/orm/base.hpp	/^		static inline std::tuple<int16_t,std::string> load_by_pkid(TObject& s,std::string pkid) {$/;"	f	struct:mods::orm::base
load_by_pkid	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> load_by_pkid(TObject* s) {$/;"	f	namespace:mods::orm::util
load_by_pkid	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> load_by_pkid(TObject& s) {$/;"	f
load_by_pkid	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> load_by_pkid(TObject& s,std::string pkid) {$/;"	f
load_by_player	mods/classes/breacher.cpp	/^		int16_t breacher::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::breacher
load_by_player	mods/classes/contagion.cpp	/^	int16_t contagion::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::contagion
load_by_player	mods/classes/engineer.cpp	/^	int16_t engineer::load_by_player(player_ptr_t& player) {$/;"	f	class:mods::classes::engineer
load_by_player	mods/classes/forge.cpp	/^	int16_t forge::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::forge
load_by_player	mods/classes/ghost.cpp	/^	int16_t ghost::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::ghost
load_by_player	mods/classes/marine.cpp	/^	int16_t marine::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::marine
load_by_player	mods/classes/medic.cpp	/^	int16_t medic::load_by_player(player_ptr_t& player) {$/;"	f	class:mods::classes::medic
load_by_player	mods/classes/psyop.cpp	/^	int16_t psyop::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::psyop
load_by_player	mods/classes/pyrexia.cpp	/^		int16_t pyrexia::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::pyrexia
load_by_player	mods/classes/sentinel.cpp	/^		int16_t sentinel::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::sentinel
load_by_player	mods/classes/sniper.cpp	/^	int16_t sniper::load_by_player(player_ptr_t& player) {$/;"	f	class:mods::classes::sniper
load_by_player	mods/classes/support.cpp	/^	int16_t support::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::support
load_by_player	mods/classes/syndrome.cpp	/^		int16_t syndrome::load_by_player(player_ptr_t & player){$/;"	f	class:mods::classes::syndrome
load_by_player	mods/orm/breacher.cpp	/^	int16_t breacher::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::breacher
load_by_player	mods/orm/engineer.cpp	/^	int16_t engineer::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::engineer
load_by_player	mods/orm/forge.cpp	/^	int16_t forge::load_by_player(uint64_t player_id){$/;"	f	class:mods::orm::forge
load_by_player	mods/orm/ghost.cpp	/^	int16_t ghost::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::ghost
load_by_player	mods/orm/marine.cpp	/^	int16_t marine::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::marine
load_by_player	mods/orm/medic.cpp	/^	int16_t medic::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::medic
load_by_player	mods/orm/player-base-ability.cpp	/^	int16_t player_base_ability::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::player_base_ability
load_by_player	mods/orm/player-skill-points.cpp	/^	std::tuple<int16_t,std::string> player_skill_points::load_by_player(const uint64_t& player_id) {$/;"	f	class:mods::orm::player_skill_points
load_by_player	mods/orm/player-skill-usage.cpp	/^	std::tuple<int16_t,std::string> player_skill_usage::load_by_player(const uint64_t& player_id) {$/;"	f	class:mods::orm::player_skill_usage
load_by_player	mods/orm/pyrexia.cpp	/^	int16_t pyrexia::load_by_player(uint64_t player_id){$/;"	f	class:mods::orm::pyrexia
load_by_player	mods/orm/sniper.cpp	/^	int16_t sniper::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::sniper
load_by_player	mods/orm/striker.cpp	/^	int16_t striker::load_by_player(uint64_t player_id){$/;"	f	class:mods::orm::striker
load_by_player	mods/orm/support.cpp	/^	int16_t support::load_by_player(uint64_t player_id) {$/;"	f	class:mods::orm::support
load_by_player	mods/orm/syndrome.cpp	/^	int16_t syndrome::load_by_player(uint64_t player_id){$/;"	f	class:mods::orm::syndrome
load_by_profile	mods/orm/hq.cpp	/^	int16_t hq::load_by_profile(std::string_view affiliation) {$/;"	f	class:mods::orm::hq
load_by_profile	mods/orm/mob-equipment.cpp	/^	int16_t mob_equipment::load_by_profile(std::string_view profile_name) {$/;"	f	class:mods::orm::mob_equipment
load_by_room_vnum	mods/orm/mini-game.cpp	/^	void mini_game::load_by_room_vnum(room_vnum game_room_vnum){$/;"	f	class:mods::orm::mini_game
load_by_shop_vnum	mods/orm/shop.cpp	/^	int16_t shop_objects::load_by_shop_vnum(shop_vnum in_shop_vnum){$/;"	f	class:mods::orm::shop_objects
load_by_shop_vnum	mods/orm/shop.cpp	/^	int16_t shop_rooms::load_by_shop_vnum(shop_vnum in_shop_vnum){$/;"	f	class:mods::orm::shop_rooms
load_c_functions	mods/contracts.cpp	/^	void load_c_functions(duk_context *ctx) {$/;"	f	namespace:mods::contracts
load_c_functions	mods/js.cpp	/^		void load_c_functions() {$/;"	f	namespace:mods::js
load_c_functions	mods/js.cpp	/^		void load_c_functions(duk_context *ctx) {$/;"	f	namespace:mods::js
load_c_require_functions	mods/js.cpp	/^		void load_c_require_functions() {$/;"	f	namespace:mods::js
load_c_test_functions	mods/js.cpp	/^		void load_c_test_functions() {$/;"	f	namespace:mods::js
load_char_pkid	mods/players/db-load.cpp	/^	int16_t load_char_pkid(player_ptr_t& player) {$/;"	f	namespace:mods::players::db_load
load_contract_code	mods/contracts.cpp	/^	void load_contract_code(player_ptr_t& player,room_vnum rvnum,int contract_id) {$/;"	f	namespace:mods::contracts
load_decoded_step_data	mods/player-contract-instance.cpp	/^	void player_contract_instance::load_decoded_step_data() {$/;"	f	class:mods::contracts::player_contract_instance
load_from_lmdb	mods/values.cpp	/^		void load_from_lmdb(std::string in_key){$/;"	f	namespace:mods::values
load_from_lmdb	mods/values.cpp	/^		void load_from_lmdb(value_key_t v_key){$/;"	f	namespace:mods::values
load_from_sql	mods/forge-engine/generated-armor.cpp	/^	void generated_armor_t::load_from_sql() {$/;"	f	class:mods::forge_engine::generated_armor_t
load_from_sql	mods/forge-engine/generated-rifle.cpp	/^	void generated_rifle_t::load_from_sql() {$/;"	f	class:mods::forge_engine::generated_rifle_t
load_help	db.cpp	/^void load_help(FILE *fl) {$/;"	f
load_into_inventory	config.cpp	/^int load_into_inventory = NO;$/;"	v
load_library	mods/js.cpp	/^		int load_library(std::string_view file) {$/;"	f	namespace:mods::js
load_messages	fight.cpp	/^void load_messages(void) {$/;"	f
load_messages	mods/hell.hpp	/^	constexpr inline bool load_messages = false;$/;"	m	namespace:mods::hell
load_mods_player_functions	mods/js.cpp	/^		void load_mods_player_functions(duk_context *ctx) {$/;"	f	namespace:mods::js
load_multi_by_column	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> load_multi_by_column(TObject* s,std::string_view column,std::string_view value) {$/;"	f	namespace:mods::orm::util
load_multi_by_column	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> load_multi_by_column(TObject& s,std::string_view column,std::string_view value) {$/;"	f
load_multi_by_column_order_by	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> load_multi_by_column_order_by(TObject* s,std::string_view column,std::string_view value,std::string order_by,std::string direction) {$/;"	f	namespace:mods::orm::util
load_player_class_skill_trees	mods/orm/skill-trees.cpp	/^	std::tuple<int16_t,std::string> load_player_class_skill_trees(std::string_view player_class,std::vector<skill_trees_record_t>* storage_ptr) {$/;"	f	namespace:mods::orm
load_player_contract_state	mods/orm/player-contract-state.cpp	/^	std::tuple<int16_t,std::string> load_player_contract_state(player_ptr_t& player,contract_vnum_t c_vnum,std::string& in_buffer) {$/;"	f	namespace:mods::orm
load_player_contract_state	mods/orm/player-contract-state.cpp	/^	std::tuple<int16_t,std::string> load_player_contract_state(uint64_t in_player_id,contract_vnum_t in_c_vnum,std::string& in_buffer) {$/;"	f	namespace:mods::orm
load_player_rifle_attachments	mods/orm/rifle-attachment.cpp	/^	std::tuple<int16_t,std::string> load_player_rifle_attachments(player_ptr_t player) {$/;"	f	namespace:mods::orm
load_player_skill_data	mods/orm/player-skill-points.cpp	/^	std::tuple<int16_t,std::string> load_player_skill_data(player_ptr_t& player, std::map<uint32_t,uint16_t>* storage) {$/;"	f	namespace:mods::orm
load_player_skill_usage_data	mods/orm/player-skill-usage.cpp	/^	std::tuple<int16_t,std::string> load_player_skill_usage_data(player_ptr_t& player, std::map<uint64_t,uint16_t>* storage) {$/;"	f	namespace:mods::orm
load_record	mods/db.cpp	/^	int load_record(const std::string& table, aligned_int_t pk, mutable_map_t& values) {$/;"	f	namespace:mods::db
load_record	mods/db.cpp	/^	int load_record(const std::string& table, const std::string& pk, mutable_map_t& values) {$/;"	f	namespace:mods::db
load_record_by_meta	mods/db.cpp	/^	int load_record_by_meta(const std::string& table, mutable_map_t* values,mutable_map_t& out_record) {$/;"	f	namespace:mods::db
load_skill_points	mods/players/db-load.cpp	/^	void load_skill_points(player_ptr_t& player) {$/;"	f	namespace:mods::players::db_load
load_skill_usages	mods/orm/sniper.cpp	/^	void sniper::load_skill_usages() {$/;"	f	class:mods::orm::sniper
load_trees	mods/behaviour_tree_impl.cpp	/^	void load_trees() {$/;"	f	namespace:mods::behaviour_tree_impl
load_where	mods/orm/base.hpp	/^		static inline std::tuple<int16_t,std::string> load_where(TContainerObject& s,$/;"	f	struct:mods::orm::base
load_where	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> load_where(TContainerObject& s, std::string_view table_name,TCompoundStatement& compound_statement_list) {$/;"	f	namespace:mods::orm::util
load_where	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> load_where(TContainerObject& s,$/;"	f	namespace:mods::orm::util
load_where	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> load_where(TContainerObject& s,$/;"	f
load_zones	db.cpp	/^void load_zones(FILE *fl, char *zonename) {$/;"	f
loaded	mods/forge-engine/item-type-chooser.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::generator
loaded	mods/mobs/mini-gunner.hpp	/^			bool loaded;$/;"	m	struct:mods::mobs::mini_gunner
loaded	mods/mobs/smart-mob.hpp	/^			bool loaded;$/;"	m	struct:mods::mobs::smart_mob
loaded	mods/orm/armor-index.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::armor_index
loaded	mods/orm/base.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::base
loaded	mods/orm/breacher.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::breacher
loaded	mods/orm/camera-feed.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::camera_feed
loaded	mods/orm/contract-steps.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::contract_steps
loaded	mods/orm/contracts.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::contracts
loaded	mods/orm/door-event.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::door_event
loaded	mods/orm/elevator.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::elevator
loaded	mods/orm/engineer.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::engineer
loaded	mods/orm/forge.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::forge
loaded	mods/orm/ghost.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::ghost
loaded	mods/orm/hq.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::hq
loaded	mods/orm/integral-object.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::integral_object
loaded	mods/orm/marine.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::marine
loaded	mods/orm/medic.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::medic
loaded	mods/orm/mini-game.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::mini_game
loaded	mods/orm/mob-equipment-map.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::mob_equipment_map
loaded	mods/orm/mob-equipment.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::mob_equipment
loaded	mods/orm/mob-roam.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::mob_roam
loaded	mods/orm/orm-base.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::orm_base
loaded	mods/orm/player-base-ability.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::player_base_ability
loaded	mods/orm/player-contract-state.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::player_contract_state
loaded	mods/orm/player-skill-points.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::player_skill_points
loaded	mods/orm/player-skill-usage.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::player_skill_usage
loaded	mods/orm/pyrexia.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::pyrexia
loaded	mods/orm/rifle-attachment.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::rifle_attachment
loaded	mods/orm/rifle-index.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::rifle_index
loaded	mods/orm/rifle-instance.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::rifle_instance
loaded	mods/orm/shop.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::shop
loaded	mods/orm/skill-points.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::skill_points
loaded	mods/orm/skill-trees.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::skill_trees
loaded	mods/orm/sniper.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::sniper
loaded	mods/orm/striker.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::striker
loaded	mods/orm/support.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::support
loaded	mods/orm/syndrome.hpp	/^		bool loaded;$/;"	m	struct:mods::orm::syndrome
loaded	mods/pq.hpp	/^	bool loaded;$/;"	m	struct:orm_base
location	structs.h	/^	byte location;      \/* Which ability to change (APPLY_XXX) *\/$/;"	m	struct:obj_affected_type
location	structs.h	/^	sh_int location;$/;"	m	struct:obj_file_elem
location_data	structs.h	/^		location_data_t location_data() {$/;"	f	struct:obj_data
log	utils.cpp	/^void log(const char* format,...) {$/;"	f
log	utils.cpp	/^void log(mods::string n) {$/;"	f
log_death_trap	utils.cpp	/^void log_death_trap(char_data *ch) {$/;"	f
log_file	mods/db-report.hpp	/^	static std::unique_ptr<std::fstream> log_file;$/;"	m	namespace:mods::db_report
log_js_error	mods/js.cpp	/^		void log_js_error(std::string_view error) {$/;"	f	namespace:mods::js
log_zone_error	mods/zone.cpp	/^	void log_zone_error(zone_rnum zone, int cmd_no, const char *message) {$/;"	f	namespace:mods::zone
logfile	comm.cpp	/^FILE *logfile = NULL;		\/* Where to send the log messages. *\/$/;"	v
login	db.cpp	/^bool login(std::string_view user_name,std::string_view password) {$/;"	f
login	login.cpp	/^namespace login {$/;"	n	file:
login	login.hpp	/^namespace login {$/;"	n
logstrerror	comm.cpp	/^void logstrerror(std::string_view prefix,int _errno) {$/;"	f
logtypes	act.wizard.cpp	/^const char *logtypes[] = {$/;"	v
long_desc	mods/rifle-attachments.cpp	/^	std::string long_desc(auto& in_a) {$/;"	f	namespace:mods
long_descr	mods/player.hpp	/^			mods::string& long_descr() {$/;"	f	struct:mods::player
long_jump	mods/rand.cpp	/^	void long_jump(void) {$/;"	f	namespace:mods::rand::xoroshiro
look_at_char	act.informative.cpp	/^void look_at_char(char_data *i, char_data *ch) {$/;"	f
look_at_room	act.informative.cpp	/^void look_at_room(char_data *ch, int ignore_brief) {$/;"	f
look_at_room_specific	act.informative.cpp	/^void look_at_room_specific(player_ptr_t& player, int ignore_brief,int room) {$/;"	f
look_at_target	act.informative.cpp	/^void look_at_target(char_data *ch, char *arg) {$/;"	f
look_in_direction	act.informative.cpp	/^void look_in_direction(char_data *ch, int dir) {$/;"	f
look_in_obj	act.informative.cpp	/^void look_in_obj(char_data *ch, char *arg) {$/;"	f
look_into_camera_feed	act.informative.cpp	/^void look_into_camera_feed(player_ptr_t& player, obj_data* obj, int mode) {$/;"	f
loops	mods/loops.cpp	/^namespace mods::loops {$/;"	n	class:mods	file:
loops	mods/loops.hpp	/^namespace mods::loops {$/;"	n	class:mods
loot	mods/init.hpp	/^INIT(mods::loot);$/;"	v
loot	mods/loot.cpp	/^namespace mods::loot {$/;"	n	class:mods	file:
loot	mods/loot.hpp	/^namespace mods::loot {$/;"	n	class:mods
los_find	mods/scan.cpp	/^	find_results_t los_find(chptr hunter,chptr hunted) {$/;"	f	namespace:mods::scan
los_find_player	mods/scan.cpp	/^	int los_find_player(player_ptr_t& player,player_ptr_t& victim,int depth) {$/;"	f	namespace:mods::scan
los_list_by_room	mods/scan.cpp	/^	void los_list_by_room(room_rnum& in_room,room_list_t& room_list,unsigned depth) {$/;"	f	namespace:mods::scan
los_list_rooms	mods/scan.cpp	/^	void los_list_rooms(chptr player_hunter,room_list_t& room_list,unsigned depth) {$/;"	f	namespace:mods::scan
los_scan	mods/scan.cpp	/^	void los_scan(char_data* ch,int depth,vec_player_data* vec_room_list) {$/;"	f	namespace:mods::scan
los_scan_direction	mods/scan.cpp	/^	void los_scan_direction(char_data* ch,int depth,vec_player_data* vec_room_list,int direction) {$/;"	f	namespace:mods::scan
los_scan_direction	mods/scan.cpp	/^	void los_scan_direction(char_data* ch,int depth,vec_player_data* vec_room_list,int direction, find_type_t type) {$/;"	f	namespace:mods::scan
los_scan_for_npcs	mods/scan.cpp	/^	void los_scan_for_npcs(char_data* ch,int depth,vec_player_data* vec_room_list) {$/;"	f	namespace:mods::scan
los_scan_for_players	mods/scan.cpp	/^	void los_scan_for_players(char_data* ch,int depth,vec_player_data* vec_room_list) {$/;"	f	namespace:mods::scan
loudness_reduction	mods/rifle-attachments.hpp	/^			int16_t loudness_reduction;$/;"	m	struct:mods::rifle_attachments_t
low	mods/forge-engine/value-scaler.hpp	/^		float low;$/;"	m	struct:mods::forge_engine::value_scaler
low_high_clamp	mods/forge-engine/value-scaler.hpp	/^		uint32_t low_high_clamp;$/;"	m	struct:mods::forge_engine::value_scaler
low_level	mods/forge-engine/value-scaler.hpp	/^		uint32_t low_level;$/;"	m	struct:mods::forge_engine::value_scaler
low_low	mods/forge-engine/value-scaler.hpp	/^		float low_low;$/;"	m	struct:mods::forge_engine::value_scaler
low_low_clamp	mods/forge-engine/value-scaler.hpp	/^		uint32_t low_low_clamp;$/;"	m	struct:mods::forge_engine::value_scaler
lowly_sec	mods/mobs/lowly-security.cpp	/^	namespace lowly_sec {$/;"	n	namespace:mods::mobs	file:
lowly_security	mods/mobs/extended-types.hpp	/^		static const std::string lowly_security = std::string("A simple security guard that calls for backup when things get dicey.");$/;"	m	namespace:mods::mobs::desc
lowly_security	mods/mobs/lowly-security.cpp	/^	lowly_security::lowly_security(uuid_t mob_uuid, std::string variation) {$/;"	f	class:mods::mobs::lowly_security
lowly_security	mods/mobs/lowly-security.hpp	/^	struct lowly_security : public smart_mob {$/;"	s	namespace:mods::mobs
lowly_security_behaviour_tree	mods/mobs/lowly-security-behaviour-tree.hpp	/^namespace mods::mobs::lowly_security_behaviour_tree {$/;"	n	class:mods::mobs
lowly_security_ptr	mods/mobs/lowly-security.hpp	/^static inline std::shared_ptr<mods::mobs::lowly_security> lowly_security_ptr(uuid_t u) {$/;"	f
lowlysec_map	mods/mobs/lowly-security.cpp	/^	lowlysec_map_t& lowlysec_map() {$/;"	f	namespace:mods::mobs
ls	act.builder.cpp	/^	void ls(player_ptr_t player,std::string_view _path) {$/;"	f	namespace:mods::fs
lsg_debug	mods/mobs/lowly-security.cpp	11;"	d	file:
lsg_debug	mods/mobs/lowly-security.cpp	9;"	d	file:
ltrim	mods/lmdb/db.hpp	/^		static inline void ltrim(std::string &s) {$/;"	f	struct:gdns::util
ltrim_copy	mods/lmdb/db.hpp	/^		static inline std::string ltrim_copy(std::string s) {$/;"	f	struct:gdns::util
m	random.cpp	45;"	d	file:
m20	mods/acl/config-parser.cpp	/^        inline void FileParser::m20(){ if(!print_debug){ return; } $/;"	f	class:mods::acl::FileParser
m_accept_regex	mods/acl/config-parser.cpp	/^        int FileParser::m_accept_regex(const std::string & regex_string){$/;"	f	class:mods::acl::FileParser
m_accept_regex	mods/acl/config-parser.cpp	/^        int FileParser::m_accept_regex(const std::string & regex_string,std::vector<std::string> & holder){$/;"	f	class:mods::acl::FileParser
m_access_rules	mods/acl/config-parser.cpp	/^        int FileParser::m_access_rules(void){$/;"	f	class:mods::acl::FileParser
m_access_type	mods/acl/config-parser.cpp	/^        std::tuple<int,bool> FileParser::m_access_type(void){$/;"	f	class:mods::acl::FileParser
m_ada	mods/player.hpp	/^			bool m_ada;$/;"	m	struct:mods::player
m_ada_data	mods/player.hpp	/^			std::map<std::string,std::string> m_ada_data;$/;"	m	struct:mods::player
m_advance	mods/acl/config-parser.cpp	/^        inline void FileParser::m_advance(size_t i){ dbg("m_advance"); if(m_out_of_bounds()){ return; } m_increment_file_offset(i); }$/;"	f	class:mods::acl::FileParser
m_advanced_protection	mods/player.hpp	/^			std::shared_ptr<mods::armor::advanced_protection> m_advanced_protection;$/;"	m	struct:mods::player
m_affected_by	mods/player.hpp	/^			std::vector<affected_type> m_affected_by;$/;"	m	struct:mods::player
m_affects	mods/affects.hpp	/^			TAffectsMap m_affects;$/;"	m	struct:mods::affects::dissolver
m_affects	mods/player.hpp	/^			affect_dissolver_t m_affects;$/;"	m	struct:mods::player
m_allocate	mods/string.cpp	/^	void string::m_allocate(){$/;"	f	class:mods::string
m_anti_matter_damage_percent	mods/player.hpp	/^			int16_t m_anti_matter_damage_percent;$/;"	m	struct:mods::player
m_anti_matter_resistance_percent	mods/player.hpp	/^			int16_t m_anti_matter_resistance_percent;$/;"	m	struct:mods::player
m_args	mods/catch2.hpp	/^        std::vector<Arg> m_args;$/;"	m	struct:Catch::Parser
m_armor_ptrs	mods/armor/advanced-protection.hpp	/^			std::map<int,obj_ptr_t> m_armor_ptrs;$/;"	m	struct:mods::armor::advanced_protection
m_armor_ptrs	mods/armor/basic-protection.hpp	/^			std::map<int,obj_ptr_t> m_armor_ptrs;$/;"	m	struct:mods::armor::basic_protection
m_armor_ptrs	mods/armor/elite-protection.hpp	/^			std::map<int,obj_ptr_t> m_armor_ptrs;$/;"	m	struct:mods::armor::elite_protection
m_arrow	mods/acl/config-parser.cpp	/^        int FileParser::m_arrow(void){$/;"	f	class:mods::acl::FileParser
m_assertionInfo	mods/catch.hpp	/^			AssertionInfo m_assertionInfo;$/;"	m	class:Catch::ResultBuilder
m_at	mods/acl/config-parser.cpp	/^        inline char FileParser::m_at(size_t offset){ $/;"	f	class:mods::acl::FileParser
m_at	mods/acl/config-parser.cpp	/^        inline char FileParser::m_at(void){ $/;"	f	class:mods::acl::FileParser
m_attach_flamethrower_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_attach_flamethrower_level;$/;"	m	struct:mods::classes::pyrexia
m_attach_incendiary_grenade_launcher_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_attach_incendiary_grenade_launcher_level;$/;"	m	struct:mods::classes::pyrexia
m_attached	mods/lmdb/shm.hpp	/^        bool m_attached;$/;"	m	class:gdns::shm
m_attachments	mods/weapons/sniper-rifle-l96aw.hpp	/^			attachment_list_t m_attachments;$/;"	m	struct:mods::weapons::sniper_rifle::l96aw
m_attachments	mods/weapons/sniper-rifle-psg1.hpp	/^			attachment_list_t m_attachments;$/;"	m	struct:mods::weapons::sniper_rifle::psg1
m_attacker_uuid	mods/player.hpp	/^			uuid_t m_attacker_uuid;$/;"	m	struct:mods::player
m_attacking_with	mods/player.hpp	/^			obj_ptr_t m_attacking_with;$/;"	m	struct:mods::player
m_attributes	mods/forge-engine/generated-armor.hpp	/^			std::vector<std::pair<armor_attributes_t,std::variant<uint32_t,float>>> m_attributes;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_attributes	mods/forge-engine/generated-rifle.hpp	/^			std::vector<std::pair<rifle_attributes_t,std::variant<uint32_t,float>>> m_attributes;$/;"	m	struct:mods::forge_engine::generated_rifle_t
m_authenticated	mods/player.hpp	/^			bool m_authenticated;$/;"	m	struct:mods::player
m_auto_update_step	mods/player-contract-instance.cpp	/^	void player_contract_instance::m_auto_update_step() {$/;"	f	class:mods::contracts::player_contract_instance
m_automatically_clear	mods/builder/slotted-builder.hpp	/^			bool m_automatically_clear;$/;"	m	struct:mods::builder::slotted_builder
m_base_command	mods/builder/slotted-builder.hpp	/^			std::string m_base_command;$/;"	m	struct:mods::builder::slotted_builder
m_basic_protection	mods/player.hpp	/^			std::shared_ptr<mods::armor::basic_protection> m_basic_protection;$/;"	m	struct:mods::player
m_block	mods/acl/config-parser.cpp	/^        int FileParser::m_block(void){$/;"	f	class:mods::acl::FileParser
m_block_data	mods/player.hpp	/^			std::unordered_map<uint32_t,uuid_t> m_block_data;$/;"	m	struct:mods::player
m_block_event	mods/player.hpp	/^			event_queue_iterator m_block_event;$/;"	m	struct:mods::player
m_blocked_until	mods/player.hpp	/^			uint32_t m_blocked_until;$/;"	m	struct:mods::player
m_breacher	mods/player.hpp	/^			std::shared_ptr<mods::classes::breacher> m_breacher;$/;"	m	struct:mods::player
m_bui_mode	mods/player.hpp	/^			bool m_bui_mode;$/;"	m	struct:mods::player
m_builder	mods/mob-roam.hpp	/^			player_ptr_t m_builder;$/;"	m	struct:mods::mob_roam::roam_recorder
m_builder_data	mods/builder.hpp	/^			std::shared_ptr<builder_data_t> m_builder_data;$/;"	m	struct:mods::builder::sandbox_data_t
m_builder_data	mods/player.hpp	/^			std::shared_ptr<builder_data_t> m_builder_data;$/;"	m	struct:mods::player
m_builder_ptr	mods/builder/slotted-builder.hpp	/^			player_ptr_t m_builder_ptr;$/;"	m	struct:mods::builder::slotted_builder
m_cachedToString	mods/catch.hpp	/^					mutable std::string m_cachedToString;$/;"	m	class:Catch::Matchers::Impl::MatcherUntypedBase
m_cached_critical_damage	mods/armor/advanced-protection.hpp	/^			float m_cached_critical_damage;$/;"	m	struct:mods::armor::advanced_protection
m_cached_critical_damage	mods/armor/basic-protection.hpp	/^			float m_cached_critical_damage;$/;"	m	struct:mods::armor::basic_protection
m_cached_critical_damage	mods/armor/elite-protection.hpp	/^			float m_cached_critical_damage;$/;"	m	struct:mods::armor::elite_protection
m_cached_headshot_damage	mods/armor/advanced-protection.hpp	/^			float m_cached_headshot_damage;$/;"	m	struct:mods::armor::advanced_protection
m_cached_headshot_damage	mods/armor/basic-protection.hpp	/^			float m_cached_headshot_damage;$/;"	m	struct:mods::armor::basic_protection
m_cached_headshot_damage	mods/armor/elite-protection.hpp	/^			float m_cached_headshot_damage;$/;"	m	struct:mods::armor::elite_protection
m_cached_limb_damage	mods/armor/advanced-protection.hpp	/^			std::map<int,float> m_cached_limb_damage;$/;"	m	struct:mods::armor::advanced_protection
m_cached_limb_damage	mods/armor/basic-protection.hpp	/^			std::map<int,float> m_cached_limb_damage;$/;"	m	struct:mods::armor::basic_protection
m_cached_limb_damage	mods/armor/elite-protection.hpp	/^			std::map<int,float> m_cached_limb_damage;$/;"	m	struct:mods::armor::elite_protection
m_callbacks	mods/affects.hpp	/^			std::map<TAffects,std::function<void(TEntityId,TAffects,uint32_t)>> m_callbacks;$/;"	m	struct:mods::affects::dissolver
m_camera	mods/player.hpp	/^			std::shared_ptr<mods::camera> m_camera;$/;"	m	struct:mods::player
m_camera_viewing	mods/player.hpp	/^			bool m_camera_viewing;$/;"	m	struct:mods::player
m_capabilities	structs.h	/^		capability_list_t m_capabilities;$/;"	m	struct:obj_data
m_capture	mods/mob-roam.hpp	/^			bool m_capture;$/;"	m	struct:mods::mob_roam::roam_recorder
m_capture_output	mods/mobs/mob.hpp	/^			bool         m_capture_output;$/;"	m	class:mods::player
m_capture_output	mods/player.hpp	/^			bool         m_capture_output;$/;"	m	struct:mods::player
m_captured_output	mods/mobs/mob.hpp	/^			std::string  m_captured_output;$/;"	m	class:mods::player
m_captured_output	mods/player.hpp	/^			std::string  m_captured_output;$/;"	m	struct:mods::player
m_char_data	mods/ai_state.hpp	/^			char_data* m_char_data;$/;"	m	class:mods::ai_state
m_char_data	mods/drone.hpp	/^			char_data* m_char_data;$/;"	m	struct:mods::drone_impl
m_char_data	mods/mobs/mob.hpp	/^			char_data*   m_char_data;$/;"	m	class:mods::player
m_char_data	mods/player.hpp	/^			char_data*   m_char_data;$/;"	m	struct:mods::player
m_children	mods/behaviour_tree_node.hpp	/^			children_t  m_children;$/;"	m	struct:mods::behaviour_tree_node
m_chunk_affect	mods/deferred.hpp	/^			std::vector<chunk_affect_t> m_chunk_affect;$/;"	m	class:mods::deferred
m_class	mods/acl/config-parser.cpp	/^        int FileParser::m_class(){$/;"	f	class:mods::acl::FileParser
m_class	mods/player.hpp	/^			player_class_t m_class;$/;"	m	struct:mods::player
m_class_capability	mods/mobs/mob.hpp	/^			class_capability_t m_class_capability;$/;"	m	class:mods::player
m_class_capability	mods/player.hpp	/^			class_capability_t m_class_capability;$/;"	m	struct:mods::player
m_class_info	mods/mobs/mob.hpp	/^			class_info_t m_class_info;$/;"	m	class:mods::player
m_class_string	mods/player.hpp	/^			mods::string m_class_string;$/;"	m	struct:mods::player
m_claymore_count	mods/classes/forge.hpp	/^			uint8_t m_claymore_count;$/;"	m	struct:mods::classes::forge
m_claymore_instances	mods/classes/ghost.hpp	/^			std::vector<uuid_t> m_claymore_instances;$/;"	m	struct:mods::classes::ghost
m_claymore_instances	mods/classes/sniper.hpp	/^			std::vector<uuid_t> m_claymore_instances;$/;"	m	struct:mods::classes::sniper
m_claymores	mods/classes/forge.hpp	/^			std::deque<obj_ptr_t> m_claymores;$/;"	m	struct:mods::classes::forge
m_clear_status	mods/lmdb.hpp	/^		void m_clear_status(){$/;"	f	struct:mods::lmdb::_db_handle
m_closed	mods/lmdb.hpp	/^		bool m_closed;$/;"	m	struct:mods::lmdb::_db_handle
m_colon	mods/acl/config-parser.cpp	/^        int FileParser::m_colon(void){$/;"	f	class:mods::acl::FileParser
m_command_ctr	mods/acl/config-parser.hpp	/^                cm_value m_command_ctr;$/;"	m	class:mods::acl::FileParser
m_command_map	mods/acl/config-parser.hpp	/^                command_map m_command_map;$/;"	m	class:mods::acl::FileParser
m_command_name	mods/acl/lambda.hpp	/^				std::string m_command_name;$/;"	m	class:mods::acl::Lambda
m_commands	mods/acl/config-parser.cpp	/^        int FileParser::m_commands(void){$/;"	f	class:mods::acl::FileParser
m_comment	mods/acl/config-parser.cpp	/^        int FileParser::m_comment(void){$/;"	f	class:mods::acl::FileParser
m_config_file	mods/lmdb/conf.hpp	/^std::string m_config_file;$/;"	m	struct:gdns::conf
m_contents	structs.h	/^		std::deque<std::shared_ptr<obj_data>> m_contents;$/;"	v
m_context	mods/js.hpp	/^				duk_context* m_context;$/;"	m	struct:mods::js::include
m_contract_copy	mods/player-contract-instance.hpp	/^			std::shared_ptr<contract> m_contract_copy;$/;"	m	struct:mods::contracts::player_contract_instance
m_contract_vnum	mods/player-contract-instance.hpp	/^			contract_vnum_t m_contract_vnum;$/;"	m	struct:mods::contracts::player_contract_instance
m_contracts	mods/player.hpp	/^			std::deque<std::shared_ptr<mods::contracts::player_contract_instance>> m_contracts;$/;"	m	struct:mods::player
m_convert_to_fire_nade_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_convert_to_fire_nade_level;$/;"	m	struct:mods::classes::pyrexia
m_corrosive_damage_percent	mods/player.hpp	/^			int16_t m_corrosive_damage_percent;$/;"	m	struct:mods::player
m_corrosive_resistance_percent	mods/player.hpp	/^			int16_t m_corrosive_resistance_percent;$/;"	m	struct:mods::player
m_count	mods/catch.hpp	/^		std::size_t m_count;$/;"	m	struct:Catch::pluralise
m_cptr	mods/string.hpp	/^			char* m_cptr;$/;"	m	struct:mods::string
m_craft_ammunition_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_craft_ammunition_level;$/;"	m	struct:mods::classes::forge
m_craft_armor_plating_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_craft_armor_plating_level;$/;"	m	struct:mods::classes::forge
m_craft_flash_underbarrel_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_craft_flash_underbarrel_level;$/;"	m	struct:mods::classes::forge
m_craft_high_velocity_ammo_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_craft_high_velocity_ammo_level;$/;"	m	struct:mods::classes::forge
m_craft_incendiary_underbarrel_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_craft_incendiary_underbarrel_level;$/;"	m	struct:mods::classes::forge
m_craft_shotgun_underbarrel_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_craft_shotgun_underbarrel_level;$/;"	m	struct:mods::classes::forge
m_craft_silencer_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_craft_silencer_level;$/;"	m	struct:mods::classes::forge
m_create_wall_of_fire_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_create_wall_of_fire_level;$/;"	m	struct:mods::classes::pyrexia
m_crit	mods/armor/advanced-protection.cpp	14;"	d	file:
m_crit	mods/armor/advanced-protection.cpp	67;"	d	file:
m_crit	mods/armor/advanced-protection.cpp	9;"	d	file:
m_crit	mods/armor/basic-protection.cpp	14;"	d	file:
m_crit	mods/armor/basic-protection.cpp	87;"	d	file:
m_crit	mods/armor/basic-protection.cpp	9;"	d	file:
m_crit	mods/armor/elite-protection.cpp	14;"	d	file:
m_crit	mods/armor/elite-protection.cpp	67;"	d	file:
m_crit	mods/armor/elite-protection.cpp	9;"	d	file:
m_crit	mods/deep-object-parser.cpp	10;"	d	file:
m_crit	mods/deep-object-parser.cpp	4;"	d	file:
m_crit	mods/players/db-load.cpp	17;"	d	file:
m_crit	mods/players/db-load.cpp	20;"	d	file:
m_crit	mods/players/destroy-player.cpp	10;"	d	file:
m_crit	mods/players/destroy-player.cpp	7;"	d	file:
m_crit	mods/players/messages.cpp	12;"	d	file:
m_crit	mods/players/messages.cpp	9;"	d	file:
m_cryogenic_damage_percent	mods/player.hpp	/^			int16_t m_cryogenic_damage_percent;$/;"	m	struct:mods::player
m_cryogenic_grenade_count	mods/classes/forge.hpp	/^			uint8_t m_cryogenic_grenade_count;$/;"	m	struct:mods::classes::forge
m_cryogenic_grenade_count	mods/classes/ghost.hpp	/^			uint8_t m_cryogenic_grenade_count;$/;"	m	struct:mods::classes::ghost
m_cryogenic_grenade_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_cryogenic_grenade_level;$/;"	m	struct:mods::classes::ghost
m_cryogenic_resistance_percent	mods/player.hpp	/^			int16_t m_cryogenic_resistance_percent;$/;"	m	struct:mods::player
m_current_access_type	mods/acl/config-parser.hpp	/^                PARSE_TYPE m_current_access_type;$/;"	m	class:mods::acl::FileParser
m_current_class	mods/acl/config-parser.hpp	/^                std::string m_current_class;$/;"	m	class:mods::acl::FileParser
m_current_extended_class	mods/acl/config-parser.hpp	/^                std::string m_current_extended_class;$/;"	m	class:mods::acl::FileParser
m_current_join	mods/sql.hpp	/^			std::string m_current_join;$/;"	m	struct:mods::sql::compositor
m_current_level	mods/jx.hpp	/^			uint32_t m_current_level;$/;"	m	struct:mods::jx::compositor
m_current_page	mods/mobs/mob.hpp	/^			unsigned int m_current_page;$/;"	m	class:mods::player
m_current_page	mods/player.hpp	/^			unsigned int m_current_page;$/;"	m	struct:mods::player
m_current_page_fragment	mods/mobs/mob.hpp	/^			std::string  m_current_page_fragment;$/;"	m	class:mods::player
m_current_page_fragment	mods/player.hpp	/^			std::string  m_current_page_fragment;$/;"	m	struct:mods::player
m_current_step	mods/player-contract-instance.hpp	/^			mods::contracts::contract_step* m_current_step;$/;"	m	struct:mods::contracts::player_contract_instance
m_currently_hacking	mods/player.hpp	/^			uint32_t m_currently_hacking;$/;"	m	struct:mods::player
m_custom_accumulator_command_map	mods/builder/slotted-builder.hpp	/^			std::map<std::string,custom_accumulator_command_t> m_custom_accumulator_command_map;$/;"	m	struct:mods::builder::slotted_builder
m_custom_command_map	mods/builder/slotted-builder.hpp	/^			std::map<std::string,custom_command_t> m_custom_command_map;$/;"	m	struct:mods::builder::slotted_builder
m_custom_integral_accumulator_command_map	mods/builder/slotted-builder.hpp	/^			std::map<std::string,custom_integral_accumulator_command_t> m_custom_integral_accumulator_command_map;$/;"	m	struct:mods::builder::slotted_builder
m_custom_non_profile_command_map	mods/builder/slotted-builder.hpp	/^			std::map<std::string,custom_non_profile_command_t> m_custom_non_profile_command_map;$/;"	m	struct:mods::builder::slotted_builder
m_d_map	mods/acl/config-parser.hpp	/^                command_map m_d_map;$/;"	m	class:mods::acl::FileParser
m_damage_accumulation	mods/weapons/shotgun-sasg12.hpp	/^				uint32_t m_damage_accumulation;$/;"	m	struct:mods::weapons::shotgun::sasg12
m_damage_event_callbacks	mods/player.hpp	/^			std::map<damage_event_t,damage_event_callback_t> m_damage_event_callbacks;$/;"	m	struct:mods::player
m_data	mods/catch.hpp	/^			AssertionResultData m_data;$/;"	m	class:Catch::ResultBuilder
m_data	mods/lmdb/shm.hpp	/^        char* m_data;$/;"	m	class:gdns::shm
m_db	mods/lmdb/db.hpp	/^				std::unique_ptr<db> m_db;$/;"	m	struct:gdns::lmdb::client
m_db	mods/lmdb/db.hpp	/^				std::unique_ptr<db> m_db;$/;"	m	struct:gdns::lmdb::server
m_db	mods/lmdb/db.hpp	/^			std::unique_ptr<lmdb::client> m_db;$/;"	m	struct:gdns::lmdb::resolver
m_db_id	mods/player.hpp	/^			aligned_int_t m_db_id;$/;"	m	struct:mods::player
m_db_id	structs.h	/^		uint64_t m_db_id;$/;"	m	struct:obj_data
m_dbi	mods/lmdb.hpp	/^		MDB_dbi	m_dbi;$/;"	m	struct:mods::lmdb::_db_handle
m_dbi_opened	mods/lmdb.hpp	/^		bool m_dbi_opened;$/;"	m	struct:mods::lmdb::_db_handle
m_deallocate	mods/string.cpp	/^	void string::m_deallocate(){$/;"	f	class:mods::string
m_debug	mods/armor/advanced-protection.cpp	6;"	d	file:
m_debug	mods/armor/advanced-protection.cpp	8;"	d	file:
m_debug	mods/armor/basic-protection.cpp	6;"	d	file:
m_debug	mods/armor/basic-protection.cpp	8;"	d	file:
m_debug	mods/armor/elite-protection.cpp	6;"	d	file:
m_debug	mods/armor/elite-protection.cpp	8;"	d	file:
m_debug	mods/contract-steps.cpp	13;"	d	file:
m_debug	mods/contract-steps.cpp	15;"	d	file:
m_debug	mods/contract-steps.cpp	70;"	d	file:
m_debug	mods/deep-object-parser.cpp	11;"	d	file:
m_debug	mods/deep-object-parser.cpp	5;"	d	file:
m_debug	mods/fluxkraft/arcon-bar.hpp	62;"	d
m_debug	mods/fluxkraft/arcon-bar.hpp	6;"	d
m_debug	mods/fluxkraft/arcon-bar.hpp	8;"	d
m_debug	mods/fluxkraft/arcon-metropolitan.hpp	39;"	d
m_debug	mods/fluxkraft/arcon-metropolitan.hpp	4;"	d
m_debug	mods/fluxkraft/arcon-metropolitan.hpp	6;"	d
m_debug	mods/fluxkraft/generator.cpp	36;"	d	file:
m_debug	mods/fluxkraft/generator.cpp	6;"	d	file:
m_debug	mods/fluxkraft/generator.cpp	8;"	d	file:
m_debug	mods/fluxkraft/generator.hpp	11;"	d
m_debug	mods/fluxkraft/generator.hpp	13;"	d
m_debug	mods/fluxkraft/generator.hpp	51;"	d
m_debug	mods/fluxkraft/shape-dictionary.cpp	347;"	d	file:
m_debug	mods/fluxkraft/shape-dictionary.cpp	7;"	d	file:
m_debug	mods/fluxkraft/shape-dictionary.cpp	9;"	d	file:
m_debug	mods/fluxkraft/shape-dictionary.hpp	11;"	d
m_debug	mods/fluxkraft/shape-dictionary.hpp	13;"	d
m_debug	mods/fluxkraft/shape-dictionary.hpp	32;"	d
m_debug	mods/forge-engine/generated-armor.cpp	10;"	d	file:
m_debug	mods/forge-engine/generated-armor.cpp	243;"	d	file:
m_debug	mods/forge-engine/generated-armor.cpp	8;"	d	file:
m_debug	mods/forge-engine/generated-armor.hpp	12;"	d
m_debug	mods/forge-engine/generated-armor.hpp	14;"	d
m_debug	mods/forge-engine/generated-armor.hpp	46;"	d
m_debug	mods/forge-engine/generated-rifle.cpp	11;"	d	file:
m_debug	mods/forge-engine/generated-rifle.cpp	155;"	d	file:
m_debug	mods/forge-engine/generated-rifle.cpp	9;"	d	file:
m_debug	mods/forge-engine/generated-rifle.hpp	11;"	d
m_debug	mods/forge-engine/generated-rifle.hpp	13;"	d
m_debug	mods/forge-engine/generated-rifle.hpp	44;"	d
m_debug	mods/forge-engine/generator.cpp	11;"	d	file:
m_debug	mods/forge-engine/generator.cpp	147;"	d	file:
m_debug	mods/forge-engine/generator.cpp	9;"	d	file:
m_debug	mods/forge-engine/generator.hpp	14;"	d
m_debug	mods/forge-engine/generator.hpp	16;"	d
m_debug	mods/forge-engine/generator.hpp	622;"	d
m_debug	mods/forge-engine/player-class.hpp	18;"	d
m_debug	mods/forge-engine/requirements.hpp	39;"	d
m_debug	mods/forge-engine/requirements.hpp	7;"	d
m_debug	mods/forge-engine/requirements.hpp	9;"	d
m_debug	mods/forge-engine/value-scaler.cpp	7;"	d	file:
m_debug	mods/forge-engine/value-scaler.cpp	84;"	d	file:
m_debug	mods/forge-engine/value-scaler.cpp	9;"	d	file:
m_debug	mods/forge-engine/value-scaler.hpp	11;"	d
m_debug	mods/forge-engine/value-scaler.hpp	47;"	d
m_debug	mods/forge-engine/value-scaler.hpp	9;"	d
m_debug	mods/loot.cpp	6;"	d	file:
m_debug	mods/loot.cpp	8;"	d	file:
m_debug	mods/migrations.cpp	5;"	d	file:
m_debug	mods/migrations.cpp	70;"	d	file:
m_debug	mods/mobs/lowly-security-behaviour-tree.hpp	10;"	d
m_debug	mods/mobs/lowly-security-behaviour-tree.hpp	386;"	d
m_debug	mods/mobs/lowly-security-behaviour-tree.hpp	8;"	d
m_debug	mods/mobs/mini-gunner-behaviour-tree.hpp	20;"	d
m_debug	mods/mobs/mini-gunner-behaviour-tree.hpp	22;"	d
m_debug	mods/mobs/mini-gunner-behaviour-tree.hpp	409;"	d
m_debug	mods/players/db-load.cpp	16;"	d	file:
m_debug	mods/players/db-load.cpp	19;"	d	file:
m_debug	mods/players/destroy-player.cpp	6;"	d	file:
m_debug	mods/players/destroy-player.cpp	9;"	d	file:
m_debug	mods/players/messages.cpp	11;"	d	file:
m_debug	mods/players/messages.cpp	8;"	d	file:
m_debug	mods/radio.cpp	14;"	d	file:
m_debug	mods/radio.cpp	5;"	d	file:
m_debug	mods/radio.cpp	7;"	d	file:
m_debug	mods/skill-orm-adaptor.cpp	22;"	d	file:
m_debug	mods/skill-orm-adaptor.cpp	7;"	d	file:
m_debug	mods/skill-orm-adaptor.cpp	9;"	d	file:
m_debug	mods/skills.cpp	10;"	d	file:
m_debug	mods/skills.cpp	12;"	d	file:
m_debug	mods/skills.cpp	137;"	d	file:
m_debug	mods/stat-bonuses.cpp	12;"	d	file:
m_debug	mods/stat-bonuses.cpp	14;"	d	file:
m_debug	mods/string.cpp	4;"	d	file:
m_debug	mods/values.cpp	13;"	d	file:
m_debug	mods/values.cpp	15;"	d	file:
m_debug	mods/weapons/elemental.cpp	187;"	d	file:
m_debug	mods/weapons/elemental.cpp	6;"	d	file:
m_debug	mods/weapons/elemental.cpp	8;"	d	file:
m_debug_line_info	mods/deep-object-parser.cpp	12;"	d	file:
m_debug_line_info	mods/deep-object-parser.cpp	6;"	d	file:
m_decoded_state_data	mods/player-contract-instance.hpp	/^			std::map<std::string,std::string> m_decoded_state_data;$/;"	m	struct:mods::contracts::player_contract_instance
m_default	mods/acl/config-parser.cpp	/^        int FileParser::m_default(void){$/;"	f	class:mods::acl::FileParser
m_deny_entry_level	mods/classes/sentinel.hpp	/^			deny_entry_levels_t m_deny_entry_level;$/;"	m	struct:mods::classes::sentinel
m_desc	mods/mobs/mob.hpp	/^			std::shared_ptr<mods::descriptor_data> m_desc;$/;"	m	class:mods::player
m_desc	mods/player.hpp	/^			std::shared_ptr<mods::descriptor_data> m_desc;$/;"	m	struct:mods::player
m_description	mods/catch2.hpp	/^        std::string m_description;$/;"	m	class:Catch::ParserRefImpl
m_destroy_queue	mods/affects.hpp	/^			std::vector<TAffects> m_destroy_queue;$/;"	m	struct:mods::affects::dissolver
m_destroyed_pieces	mods/armor/advanced-protection.hpp	/^			vec_t<uuid_t> m_destroyed_pieces;$/;"	m	struct:mods::armor::advanced_protection
m_destroyed_pieces	mods/armor/basic-protection.hpp	/^			vec_t<uuid_t> m_destroyed_pieces;$/;"	m	struct:mods::armor::basic_protection
m_destroyed_pieces	mods/armor/elite-protection.hpp	/^			vec_t<uuid_t> m_destroyed_pieces;$/;"	m	struct:mods::armor::elite_protection
m_device_id	mods/mini-games/line-up.hpp	/^		int m_device_id;$/;"	m	namespace:mods::mini_games
m_device_id	mods/mini-games/wires.hpp	/^		uint32_t m_device_id;$/;"	m	struct:mods::mini_games::wires
m_dir	mods/js.hpp	/^				std::string m_dir;$/;"	m	struct:mods::js::include
m_dir	mods/lmdb.hpp	/^		std::string m_dir;$/;"	m	struct:mods::lmdb::_db_handle
m_directions	structs.h	/^		std::vector<uint8_t> m_directions;$/;"	v
m_dismantle_weapon_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_dismantle_weapon_level;$/;"	m	struct:mods::classes::forge
m_dissipate_charges	mods/classes/ghost.hpp	/^			uint8_t m_dissipate_charges;$/;"	m	struct:mods::classes::ghost
m_dissipated	mods/classes/ghost.hpp	/^			bool m_dissipated;$/;"	m	struct:mods::classes::ghost
m_do_paging	mods/mobs/mob.hpp	/^			bool         m_do_paging;$/;"	m	class:mods::player
m_do_paging	mods/player.hpp	/^			bool         m_do_paging;$/;"	m	struct:mods::player
m_dont_advance_file_offset	mods/acl/config-parser.hpp	/^                               m_line_number(1),m_dont_advance_file_offset(false){}$/;"	f	class:mods::acl::FileParser
m_dont_advance_file_offset	mods/acl/config-parser.hpp	/^                bool m_dont_advance_file_offset;$/;"	m	class:mods::acl::FileParser
m_drench_object_in_gasoline_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_drench_object_in_gasoline_level;$/;"	m	struct:mods::classes::pyrexia
m_drench_room_in_gasoline_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_drench_room_in_gasoline_level;$/;"	m	struct:mods::classes::pyrexia
m_drone_bomb_charges	mods/classes/engineer.hpp	/^			uint8_t m_drone_bomb_charges;$/;"	m	struct:mods::classes::engineer
m_drone_scan_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_drone_scan_level;$/;"	m	struct:mods::classes::ghost
m_elemental_damages	mods/forge-engine/generated-armor.hpp	/^			std::vector<std::pair<elemental_types_t,std::variant<uint32_t,float>>> m_elemental_damages;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_elemental_damages	mods/forge-engine/generated-rifle.hpp	/^			std::vector<std::pair<elemental_types_t,std::variant<uint32_t,float>>> m_elemental_damages;$/;"	m	struct:mods::forge_engine::generated_rifle_t
m_elemental_resistances	mods/forge-engine/generated-armor.hpp	/^			std::vector<std::pair<elemental_types_t,std::variant<uint32_t,float>>> m_elemental_resistances;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_elite_protection	mods/player.hpp	/^			std::shared_ptr<mods::armor::elite_protection> m_elite_protection;$/;"	m	struct:mods::player
m_emp_damage_percent	mods/player.hpp	/^			int16_t m_emp_damage_percent;$/;"	m	struct:mods::player
m_emp_resistance_percent	mods/player.hpp	/^			int16_t m_emp_resistance_percent;$/;"	m	struct:mods::player
m_encoded_response	mods/builder/slotted-builder.hpp	/^			std::vector<std::string> m_encoded_response;$/;"	m	struct:mods::builder::slotted_builder
m_engaged	mods/classes/sniper.hpp	/^			bool m_engaged;$/;"	m	struct:mods::classes::sniper
m_engineer	mods/player.hpp	/^			std::shared_ptr<mods::classes::engineer> m_engineer;$/;"	m	struct:mods::player
m_enum_to_string	mods/acl/config-parser.cpp	/^        std::string FileParser::m_enum_to_string(int enum_id){$/;"	f	class:mods::acl::FileParser
m_env	mods/lmdb.hpp	/^		MDB_env*	m_env;$/;"	m	struct:mods::lmdb::_db_handle
m_env	mods/lmdb.hpp	/^		MDB_env* m_env;$/;"	m	struct:mods::lmdb::transaction_t
m_equipment	mods/player.hpp	/^			std::array<obj_ptr_t,NUM_WEARS> m_equipment;$/;"	m	struct:mods::player
m_error	mods/projectile.cpp	34;"	d	file:
m_error	mods/projectile.cpp	728;"	d	file:
m_errors	mods/player-scaffolding.hpp	/^			std::vector<std::string> m_errors;$/;"	m	struct:mods::player_scaffolding
m_ex_descriptions	structs.h	/^		std::vector<mods::extra_desc_data> m_ex_descriptions;$/;"	v
m_exeName	mods/catch2.hpp	/^        mutable ExeName m_exeName;$/;"	m	struct:Catch::Parser
m_executing_js	mods/mobs/mob.hpp	/^			bool         m_executing_js;$/;"	m	class:mods::player
m_executing_js	mods/player.hpp	/^			bool         m_executing_js;$/;"	m	struct:mods::player
m_expect	mods/acl/config-parser.cpp	/^        T FileParser::m_expect(PARSE_TYPE enum_id){$/;"	f	class:mods::acl::FileParser
m_expect	mods/acl/config-parser.cpp	/^        int FileParser::m_expect(PARSE_TYPE enum_id){$/;"	f	class:mods::acl::FileParser
m_expect	mods/acl/config-parser.cpp	/^        std::tuple<int,bool> FileParser::m_expect<std::tuple<int,bool>>(PARSE_TYPE enum_id){$/;"	f	class:mods::acl::FileParser
m_expect_chain	mods/acl/config-parser.cpp	/^        int FileParser::m_expect_chain(const T &expect_list, std::vector<int> &in_return_values){$/;"	f	class:mods::acl::FileParser
m_expect_chain	mods/acl/config-parser.cpp	/^        int FileParser::m_expect_chain(int count, ...){$/;"	f	class:mods::acl::FileParser
m_explosive_damage_percent	mods/player.hpp	/^			int16_t m_explosive_damage_percent;$/;"	m	struct:mods::player
m_explosive_resistance_percent	mods/player.hpp	/^			int16_t m_explosive_resistance_percent;$/;"	m	struct:mods::player
m_explosive_shot_charges	mods/classes/breacher.hpp	/^			uint8_t m_explosive_shot_charges;$/;"	m	struct:mods::classes::breacher
m_extended_class	mods/acl/config-parser.cpp	/^        int FileParser::m_extended_class(){$/;"	f	class:mods::acl::FileParser
m_extends	mods/acl/config-parser.cpp	/^        int FileParser::m_extends(void){$/;"	f	class:mods::acl::FileParser
m_extra_data	mods/player-contract-instance.hpp	/^			std::string m_extra_data;$/;"	m	struct:mods::contracts::player_contract_instance
m_feed_file	structs.h	/^		std::string m_feed_file;$/;"	m	struct:obj_data
m_feign_death_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_feign_death_level;$/;"	m	struct:mods::classes::ghost
m_file	mods/acl/lambda.hpp	/^				std::string m_file;$/;"	m	class:mods::acl::Lambda
m_file	mods/js.hpp	/^				std::string m_file;$/;"	m	struct:mods::js::include
m_file_contents	mods/acl/config-parser.hpp	/^                std::string m_file_contents;$/;"	m	class:mods::acl::FileParser
m_file_name	mods/acl/config-parser.hpp	/^                std::string m_file_name;$/;"	m	class:mods::acl::FileParser
m_file_offset	mods/acl/config-parser.hpp	/^                size_t m_file_offset;$/;"	m	class:mods::acl::FileParser
m_files	mods/acl/config-parser.cpp	/^        int FileParser::m_files(void){$/;"	f	class:mods::acl::FileParser
m_fire_nade_charges	mods/classes/pyrexia.hpp	/^			uint8_t m_fire_nade_charges;$/;"	m	struct:mods::classes::pyrexia
m_fire_nade_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_fire_nade_level;$/;"	m	struct:mods::classes::pyrexia
m_flags	mods/lmdb.hpp	/^		uint64_t m_flags;$/;"	m	struct:mods::lmdb::_db_handle
m_flags	mods/player.hpp	/^			std::array<aligned_int_t,mods::flags::chunk_type_t::LAST + 1> m_flags;$/;"	m	struct:mods::player
m_flash_underbarrel_charges	mods/classes/forge.hpp	/^			uint8_t m_flash_underbarrel_charges;$/;"	m	struct:mods::classes::forge
m_flash_underbarrel_charges	mods/classes/ghost.hpp	/^			uint8_t m_flash_underbarrel_charges;$/;"	m	struct:mods::classes::ghost
m_flash_underbarrel_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_flash_underbarrel_level;$/;"	m	struct:mods::classes::ghost
m_footer	mods/builder/slotted-builder.hpp	/^			std::string m_footer;$/;"	m	struct:mods::builder::slotted_builder
m_forge	mods/player.hpp	/^			std::shared_ptr<mods::classes::forge> m_forge;$/;"	m	struct:mods::player
m_fp	mods/acl/config-parser.hpp	/^                std::ifstream m_fp;$/;"	m	class:mods::acl::FileParser
m_fp	mods/lmdb/conf.hpp	/^	std::ifstream m_fp;$/;"	m	struct:gdns::conf
m_func	mods/acl/lambda.hpp	/^				std::function<void (char_data*,char*,int,int)> m_func;$/;"	m	class:mods::acl::Lambda
m_gadget_shield_level	mods/classes/sentinel.hpp	/^			gadget_shield_levels_t m_gadget_shield_level;$/;"	m	struct:mods::classes::sentinel
m_get_file_offset	mods/acl/config-parser.cpp	/^        size_t FileParser::m_get_file_offset(){$/;"	f	class:mods::acl::FileParser
m_get_setting	mods/lmdb/conf.cpp	/^int conf<StringType>::m_get_setting(const StringType& setting,StringType& out){$/;"	f	class:gdns::conf
m_get_setting	mods/lmdb/conf.hpp	/^int m_get_setting(const StringType& setting,StringType& out){$/;"	f	struct:gdns::conf
m_get_setting_flag	mods/lmdb/conf.cpp	/^int m_get_setting_flag(const StringType& setting){$/;"	f	namespace:gdns
m_get_setting_flag	mods/lmdb/conf.hpp	/^int m_get_setting_flag(const StringType& setting){$/;"	f	struct:gdns::conf
m_ghost	mods/player.hpp	/^			std::shared_ptr<mods::classes::ghost> m_ghost;$/;"	m	struct:mods::player
m_goal	mods/player-contract-instance.hpp	/^			task_t m_goal;$/;"	m	struct:mods::contracts::player_contract_instance
m_god_mode	mods/player.hpp	/^			bool m_god_mode;$/;"	m	struct:mods::player
m_good	mods/lmdb.hpp	/^		bool m_good;$/;"	m	struct:mods::lmdb::_db_handle
m_good	mods/lmdb/db.hpp	/^				bool m_good;$/;"	m	struct:gdns::lmdb::client
m_good	mods/lmdb/db.hpp	/^				bool m_good;$/;"	m	struct:gdns::lmdb::db
m_good	mods/lmdb/db.hpp	/^				bool m_good;$/;"	m	struct:gdns::lmdb::server
m_hacking_row	mods/player.hpp	/^			uint8_t m_hacking_row;$/;"	m	struct:mods::player
m_has_affects	mods/affects.hpp	/^			bool m_has_affects;$/;"	m	struct:mods::affects::dissolver
m_has_block_event	mods/player.hpp	/^			bool m_has_block_event;$/;"	m	struct:mods::player
m_heal_level	mods/classes/sentinel.hpp	/^			cure_levels_t		m_heal_level;$/;"	m	struct:mods::classes::sentinel
m_hint	mods/catch2.hpp	/^        std::string m_hint;$/;"	m	class:Catch::ParserRefImpl
m_histfile_fp	mods/player.hpp	/^			FILE* m_histfile_fp;$/;"	m	struct:mods::player
m_histfile_index	mods/player.hpp	/^			uint32_t m_histfile_index;$/;"	m	struct:mods::player
m_histfile_on	mods/player.hpp	/^			bool m_histfile_on;$/;"	m	struct:mods::player
m_human_shield_level	mods/classes/sentinel.hpp	/^			human_shield_levels_t m_human_shield_level;$/;"	m	struct:mods::classes::sentinel
m_id	db.h	/^		int64_t m_id;$/;"	m	struct:zone_data
m_id	mods/lmdb/shm.hpp	/^        int m_id;$/;"	m	class:gdns::shm
m_imp_mode	mods/player.hpp	/^			bool m_imp_mode;$/;"	m	struct:mods::player
m_in_room	mods/camera.hpp	/^			int m_in_room;$/;"	m	class:mods::camera
m_incendiary_damage_percent	mods/player.hpp	/^			int16_t m_incendiary_damage_percent;$/;"	m	struct:mods::player
m_incendiary_resistance_percent	mods/player.hpp	/^			int16_t m_incendiary_resistance_percent;$/;"	m	struct:mods::player
m_include_success	mods/js.hpp	/^				bool m_include_success;$/;"	m	struct:mods::js::include
m_increment	mods/affects.hpp	/^			std::set<TAffects> m_increment;$/;"	m	struct:mods::affects::dissolver
m_increment_file_offset	mods/acl/config-parser.cpp	/^        size_t FileParser::m_increment_file_offset(size_t i){$/;"	f	class:mods::acl::FileParser
m_index	mods/catch2.hpp	/^        std::size_t m_index;$/;"	m	class:Catch::ReusableStringStream
m_info	mods/catch.hpp	/^			AssertionInfo m_info;$/;"	m	class:Catch::AssertionResult
m_instance	mods/forge-engine/generated-armor.hpp	/^			obj_ptr_t m_instance;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_instance	mods/forge-engine/generated-rifle.hpp	/^			obj_ptr_t m_instance;$/;"	m	struct:mods::forge_engine::generated_rifle_t
m_intimidate_level	mods/classes/sentinel.hpp	/^			intimidate_levels_t m_intimidate_level;$/;"	m	struct:mods::classes::sentinel
m_intimidation_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_intimidation_level;$/;"	m	struct:mods::classes::ghost
m_iterations	mods/deferred.hpp	/^			uint64_t m_iterations;$/;"	m	class:mods::deferred
m_joins	mods/sql.hpp	/^			std::vector<std::string> m_joins;$/;"	m	struct:mods::sql::compositor
m_jx	mods/jx.hpp	/^			std::string m_jx;$/;"	m	struct:mods::jx::compositor
m_keeper	shop.h	/^	std::shared_ptr<mods::npc> m_keeper;$/;"	m	struct:shop_data
m_knockback_charges	mods/weapons/shotgun-sasg12.hpp	/^				uint8_t m_knockback_charges;$/;"	m	struct:mods::weapons::shotgun::sasg12
m_label	mods/catch.hpp	/^		std::string m_label;$/;"	m	struct:Catch::pluralise
m_lense_type	mods/player.hpp	/^			lense_type_t m_lense_type;$/;"	m	struct:mods::player
m_levels	mods/jx.hpp	/^			std::map<uint32_t,uint32_t> m_levels;$/;"	m	struct:mods::jx::compositor
m_lineInfo	mods/catch.hpp	/^			SourceLineInfo m_lineInfo;$/;"	m	class:Catch::NotImplementedException
m_line_items	mods/deep-object-parser.hpp	/^		std::vector<obj_ptr_t> m_line_items;$/;"	m	struct:mods::deep_object_parser_t
m_line_number	mods/acl/config-parser.hpp	/^                int_type m_line_number;$/;"	m	class:mods::acl::FileParser
m_list_end	mods/acl/config-parser.cpp	/^        int FileParser::m_list_end(void){$/;"	f	class:mods::acl::FileParser
m_list_start	mods/acl/config-parser.cpp	/^        int FileParser::m_list_start(void){$/;"	f	class:mods::acl::FileParser
m_loaded	shop.h	/^	bool m_loaded;$/;"	m	struct:shop_data
m_location_data	structs.h	/^		location_data_t m_location_data;$/;"	m	struct:obj_data
m_logic	mods/behaviour_tree_node.hpp	/^			callback_t  m_logic;$/;"	m	struct:mods::behaviour_tree_node
m_mallocd	mods/string.hpp	/^			bool m_mallocd;$/;"	m	struct:mods::string
m_marine	mods/player.hpp	/^			std::shared_ptr<mods::classes::marine> m_marine;$/;"	m	struct:mods::player
m_matchers	mods/catch.hpp	/^				std::vector<MatcherBase<ArgT> const*> m_matchers;$/;"	m	struct:Catch::Matchers::Impl::MatchAllOf
m_matchers	mods/catch.hpp	/^				std::vector<MatcherBase<ArgT> const*> m_matchers;$/;"	m	struct:Catch::Matchers::Impl::MatchAnyOf
m_max_amount	mods/affects.hpp	/^			std::map<TAffects,uint32_t> m_max_amount;$/;"	m	struct:mods::affects::dissolver
m_max_command	mods/acl/config-parser.hpp	/^                cm_value m_max_command;$/;"	m	class:mods::acl::FileParser
m_medic	mods/player.hpp	/^			std::shared_ptr<mods::classes::medic> m_medic;$/;"	m	struct:mods::player
m_method	mods/catch.hpp	/^			void (C::*m_method)();$/;"	m	class:Catch::MethodTestCase
m_misc_pref	mods/player.hpp	/^			std::array<bool,misc_pref_enum_t::SIZE> m_misc_pref;$/;"	m	struct:mods::player
m_mobs	mods/mob-roam.hpp	/^			std::vector<mob_vnum> m_mobs;$/;"	m	struct:mods::mob_roam::roam_recorder
m_mode	mods/lmdb.hpp	/^		uint16_t m_mode;$/;"	m	struct:mods::lmdb::_db_handle
m_mode	mods/mob-roam.hpp	/^			mode_t m_mode;$/;"	m	struct:mods::mob_roam::roam_recorder
m_move_after	mods/acl/config-parser.cpp	/^        int FileParser::m_move_after(char c){$/;"	f	class:mods::acl::FileParser
m_move_after_regex	mods/acl/config-parser.cpp	/^        int FileParser::m_move_after_regex(const char* regex_string){$/;"	f	class:mods::acl::FileParser
m_moving_to_room	mods/player.hpp	/^			bool m_moving_to_room;$/;"	m	struct:mods::player
m_name	mods/builder.hpp	/^			std::string m_name;$/;"	m	struct:mods::builder::sandbox_data_t
m_name	mods/catch2.hpp	/^            StringRef m_name;$/;"	m	struct:Catch::Detail::EnumInfo
m_name	mods/catch2.hpp	/^        std::shared_ptr<std::string> m_name;$/;"	m	class:Catch::ExeName
m_name	mods/chat.hpp	/^			std::string m_name;$/;"	m	struct:mods::chat::channel
m_name	mods/lmdb.hpp	/^		std::string m_name;$/;"	m	struct:mods::lmdb::_db_handle
m_name	mods/mobs/mob.hpp	/^			std::string	m_name;$/;"	m	class:mods::player
m_name	mods/player.hpp	/^			std::string	m_name;$/;"	m	struct:mods::player
m_next_char	mods/acl/config-parser.cpp	/^        char FileParser::m_next_char(){$/;"	f	class:mods::acl::FileParser
m_nextline	mods/acl/config-parser.cpp	/^        void FileParser::m_nextline(void){$/;"	f	class:mods::acl::FileParser
m_node	mods/behaviour_tree.hpp	/^		node m_node;$/;"	m	struct:mods::behaviour_tree
m_node_type	mods/behaviour_tree_node.hpp	/^			node_type_t m_node_type;$/;"	m	struct:mods::behaviour_tree_node
m_obj	mods/weapons/sniper-rifle-l96aw.hpp	/^			obj_data_ptr_t m_obj;$/;"	m	struct:mods::weapons::sniper_rifle::l96aw
m_obj	mods/weapons/sniper-rifle-psg1.hpp	/^			obj_data_ptr_t m_obj;$/;"	m	struct:mods::weapons::sniper_rifle::psg1
m_object_uuid	mods/camera.hpp	/^			uuid_t m_object_uuid;$/;"	m	class:mods::camera
m_objects	shop.h	/^	std::vector<db_id_t> m_objects;$/;"	m	struct:shop_data
m_oblique_kick_level	mods/classes/sentinel.hpp	/^			oblique_kick_levels_t m_oblique_kick_level;$/;"	m	struct:mods::classes::sentinel
m_opened	mods/acl/config-parser.hpp	/^                bool m_opened;$/;"	m	class:mods::acl::FileParser
m_optNames	mods/catch2.hpp	/^        std::vector<std::string> m_optNames;$/;"	m	class:Catch::Opt
m_optionality	mods/catch2.hpp	/^        Optionality m_optionality = Optionality::Optional;$/;"	m	class:Catch::ParserRefImpl
m_options	mods/catch2.hpp	/^        std::vector<Opt> m_options;$/;"	m	struct:Catch::Parser
m_order_by	mods/sql.hpp	/^			std::string m_order_by;$/;"	m	struct:mods::sql::compositor
m_orm	mods/classes/breacher.hpp	/^			breacher_orm_t	m_orm;$/;"	m	struct:mods::classes::breacher
m_orm	mods/classes/contagion.hpp	/^			contagion_orm_t m_orm;$/;"	m	struct:mods::classes::contagion
m_orm	mods/classes/engineer.hpp	/^			engineer_orm_t m_orm;$/;"	m	struct:mods::classes::engineer
m_orm	mods/classes/forge.hpp	/^			forge_orm_t	m_orm;$/;"	m	struct:mods::classes::forge
m_orm	mods/classes/ghost.hpp	/^			ghost_orm_t	m_orm;$/;"	m	struct:mods::classes::ghost
m_orm	mods/classes/marine.hpp	/^			marine_orm_t m_orm;$/;"	m	struct:mods::classes::marine
m_orm	mods/classes/medic.hpp	/^			medic_orm_t m_orm;$/;"	m	struct:mods::classes::medic
m_orm	mods/classes/psyop.hpp	/^			psyop_orm_t m_orm;$/;"	m	struct:mods::classes::psyop
m_orm	mods/classes/pyrexia.hpp	/^			pyrexia_orm_t	m_orm;$/;"	m	struct:mods::classes::pyrexia
m_orm	mods/classes/sentinel.hpp	/^			sentinel_orm_t	m_orm;$/;"	m	struct:mods::classes::sentinel
m_orm	mods/classes/sniper.hpp	/^			sniper_orm_t m_orm;$/;"	m	struct:mods::classes::sniper
m_orm	mods/classes/support.hpp	/^			support_orm_t m_orm;$/;"	m	struct:mods::classes::support
m_orm	mods/classes/syndrome.hpp	/^			syndrome_orm_t	m_orm;$/;"	m	struct:mods::classes::syndrome
m_orm	shop.h	/^	shop_data_orm_type_t m_orm;$/;"	m	struct:shop_data
m_orm_list	mods/builder/slotted-builder.hpp	/^			orm_container_t* m_orm_list;$/;"	m	struct:mods::builder::slotted_builder
m_oss	mods/catch2.hpp	/^        std::ostream* m_oss;$/;"	m	class:Catch::ReusableStringStream
m_out_of_bounds	mods/acl/config-parser.cpp	/^        inline bool FileParser::m_out_of_bounds(void){ $/;"	f	class:mods::acl::FileParser
m_overhead_map_height	mods/player.hpp	/^			uint8_t m_overhead_map_height;$/;"	m	struct:mods::player
m_overhead_map_width	mods/player.hpp	/^			uint8_t m_overhead_map_width;$/;"	m	struct:mods::player
m_owner	structs.h	/^		uuid_t m_owner;$/;"	m	struct:obj_data
m_owner_uuid	mods/rifle-attachments.hpp	/^			uuid_t m_owner_uuid;$/;"	m	struct:mods::rifle_attachments_t
m_p	mods/catch.hpp	/^			T* m_p;$/;"	m	class:Catch::Ptr
m_page	mods/mobs/mob.hpp	/^			unsigned int m_page;$/;"	m	class:mods::player
m_page	mods/player.hpp	/^			unsigned int m_page;$/;"	m	struct:mods::player
m_pages	mods/mobs/mob.hpp	/^			std::vector<std::string> m_pages;$/;"	m	class:mods::player
m_pages	mods/player.hpp	/^			std::vector<std::string> m_pages;$/;"	m	struct:mods::player
m_parse_error	mods/deep-object-parser.cpp	14;"	d	file:
m_parse_error	mods/deep-object-parser.cpp	8;"	d	file:
m_parse_list	mods/acl/config-parser.cpp	/^        std::vector<std::string> FileParser::m_parse_list(){$/;"	f	class:mods::acl::FileParser
m_parse_setting	mods/lmdb/conf.cpp	/^int conf<StringType>::m_parse_setting(const StringType& line,StringType& out_key,StringType& out_value){$/;"	f	class:gdns::conf
m_parse_setting	mods/lmdb/conf.hpp	/^int m_parse_setting(const StringType& line,StringType& out_key,StringType& out_value){$/;"	f	struct:gdns::conf
m_parse_translation	mods/lmdb/conf.cpp	/^int conf<StringType>::m_parse_translation(const StringType& line,StringType& out_key,StringType& out_value){$/;"	f	class:gdns::conf
m_parse_translation	mods/lmdb/conf.hpp	/^int m_parse_translation(const StringType& line,StringType& out_key,StringType& out_value){$/;"	f	struct:gdns::conf
m_parser	mods/rifle-attachments.hpp	/^			deep_object_parser_t m_parser;$/;"	m	struct:mods::rifle_attachments_t
m_parts	mods/jx.hpp	/^			std::vector<std::string> m_parts;$/;"	m	struct:mods::jx::compositor
m_password	mods/player.hpp	/^			std::string m_password;$/;"	m	struct:mods::player
m_penetrating_shot_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_penetrating_shot_level;$/;"	m	struct:mods::classes::ghost
m_plant_claymore_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_plant_claymore_level;$/;"	m	struct:mods::classes::ghost
m_player	mods/builder.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::builder::sandbox_data_t
m_player	mods/camera.hpp	/^			uuid_t m_player;$/;"	m	class:mods::camera
m_player	mods/classes/breacher.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::breacher
m_player	mods/classes/contagion.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::contagion
m_player	mods/classes/engineer.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::engineer
m_player	mods/classes/forge.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::forge
m_player	mods/classes/ghost.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::ghost
m_player	mods/classes/marine.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::marine
m_player	mods/classes/medic.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::medic
m_player	mods/classes/psyop.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::psyop
m_player	mods/classes/pyrexia.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::pyrexia
m_player	mods/classes/sentinel.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::sentinel
m_player	mods/classes/sniper.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::sniper
m_player	mods/classes/support.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::support
m_player	mods/classes/syndrome.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::classes::syndrome
m_player	mods/forge-engine/generated-armor.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_player	mods/forge-engine/generated-rifle.hpp	/^			player_ptr_t m_player;$/;"	m	struct:mods::forge_engine::generated_rifle_t
m_player_id	mods/player-contract-instance.hpp	/^			uint64_t m_player_id;$/;"	m	struct:mods::contracts::player_contract_instance
m_player_ptr	mods/npc.hpp	/^			std::shared_ptr<mods::player> m_player_ptr;$/;"	m	struct:mods::npc
m_player_specials	mods/player.hpp	/^			std::shared_ptr<player_special_data> m_player_specials;$/;"	m	struct:mods::player
m_players	mods/player-scaffolding.hpp	/^			std::vector<player_ptr_t> m_players;$/;"	m	struct:mods::player_scaffolding
m_pluck	mods/lmdb.hpp	/^		std::vector<std::string> m_pluck;$/;"	m	struct:mods::lmdb::_db_handle
m_preferences	mods/classes/sniper.hpp	/^			std::map<std::string,bool> m_preferences;$/;"	m	struct:mods::classes::sniper
m_primary_choice	mods/classes/sentinel.hpp	/^			primary_choice_t m_primary_choice;$/;"	m	struct:mods::classes::sentinel
m_private	mods/chat.hpp	/^			bool m_private;$/;"	m	struct:mods::chat::channel
m_private_publishers	mods/chat.hpp	/^			std::vector<std::string> m_private_publishers;$/;"	m	struct:mods::chat::channel
m_processed	mods/affects.hpp	/^			std::size_t m_processed;$/;"	m	struct:mods::affects::dissolver
m_push_count	mods/classes/breacher.hpp	/^			std::map<std::pair<room_rnum,direction_t>,uint8_t> m_push_count;$/;"	m	struct:mods::classes::breacher
m_pyrexia	mods/player.hpp	/^			std::shared_ptr<mods::classes::pyrexia> m_pyrexia;$/;"	m	struct:mods::player
m_q	mods/cron.hpp	/^			std::queue<std::function<void()>> m_q;$/;"	m	class:mods::cron
m_q	mods/deferred.hpp	/^			lambda_queue_t m_q;$/;"	m	class:mods::deferred
m_query	mods/sql.hpp	/^			std::array<std::string, query_parts> m_query;$/;"	m	struct:mods::sql::compositor
m_quitting	mods/player.hpp	/^			bool m_quitting;$/;"	m	struct:mods::player
m_quota	mods/player-contract-instance.hpp	/^			uint32_t m_quota;$/;"	m	struct:mods::contracts::player_contract_instance
m_radiation_damage_percent	mods/player.hpp	/^			int16_t m_radiation_damage_percent;$/;"	m	struct:mods::player
m_radiation_resistance_percent	mods/player.hpp	/^			int16_t m_radiation_resistance_percent;$/;"	m	struct:mods::player
m_rate_limits	mods/player.hpp	/^			std::map<int,rate_limit_data_t> m_rate_limits;$/;"	m	struct:mods::player
m_rc	mods/catch.hpp	/^		mutable unsigned int m_rc;$/;"	m	struct:Catch::SharedImpl
m_realloc	mods/string.cpp	/^	void string::m_realloc(){$/;"	f	class:mods::string
m_ref	mods/catch2.hpp	/^        std::shared_ptr<BoundRef> m_ref;$/;"	m	class:Catch::ParserRefImpl
m_ref	mods/catch2.hpp	/^        std::shared_ptr<BoundValueRefBase> m_ref;$/;"	m	class:Catch::ExeName
m_register_commands	mods/acl/config-parser.cpp	/^        inline void FileParser::m_register_commands(const std::vector<std::string>& vec,PARSE_TYPE type){$/;"	f	class:mods::acl::FileParser
m_reinforce_weapon_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_reinforce_weapon_level;$/;"	m	struct:mods::classes::forge
m_repair_armor_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_repair_armor_level;$/;"	m	struct:mods::classes::forge
m_repair_weapon_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_repair_weapon_level;$/;"	m	struct:mods::classes::forge
m_report_line	mods/acl/config-parser.cpp	/^        void FileParser::m_report_line(const char* s){ printf(s,m_line_number + 1); }$/;"	f	class:mods::acl::FileParser
m_requirements	mods/forge-engine/generated-armor.hpp	/^			requirements_t m_requirements;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_requirements	mods/forge-engine/generated-rifle.hpp	/^			requirements_t m_requirements;$/;"	m	struct:mods::forge_engine::generated_rifle_t
m_resultData	mods/catch.hpp	/^			AssertionResultData m_resultData;$/;"	m	class:Catch::AssertionResult
m_returning	mods/sql.hpp	/^			std::string m_returning;$/;"	m	struct:mods::sql::compositor
m_rifle_level	mods/rifle-attachments.hpp	/^			uint16_t m_rifle_level;$/;"	m	struct:mods::rifle_attachments_t
m_rifle_yaml_file	mods/rifle-attachments.hpp	/^			std::string m_rifle_yaml_file;$/;"	m	struct:mods::rifle_attachments_t
m_rifles	mods/player.hpp	/^			std::deque<std::shared_ptr<mods::rifle_attachments_t>> m_rifles;$/;"	m	struct:mods::player
m_roaming_profile_name	mods/mob-roam.hpp	/^			std::string m_roaming_profile_name;$/;"	m	struct:mods::mob_roam::roam_recorder
m_rooms	mods/mob-roam.hpp	/^			std::vector<room_vnum> m_rooms;$/;"	m	struct:mods::mob_roam::roam_recorder
m_save_base_class	mods/acl/config-parser.cpp	/^        inline void FileParser::m_save_base_class(const std::vector<std::string>& vec){$/;"	f	class:mods::acl::FileParser
m_save_extended_class	mods/acl/config-parser.cpp	/^        inline void FileParser::m_save_extended_class(const std::vector<std::string>& vec,const std::string & base_class){$/;"	f	class:mods::acl::FileParser
m_save_extended_class_default	mods/acl/config-parser.cpp	/^        inline void FileParser::m_save_extended_class_default(const std::string & base_class){$/;"	f	class:mods::acl::FileParser
m_scan_results	mods/players/search.hpp	/^					scan_results m_scan_results;$/;"	m	class:mods::player::util::search
m_scanned	mods/classes/forge.hpp	/^			std::vector<uuid_t> m_scanned;$/;"	m	struct:mods::classes::forge
m_scanned	mods/classes/ghost.hpp	/^			std::vector<uuid_t> m_scanned;$/;"	m	struct:mods::classes::ghost
m_scanned	mods/classes/sniper.hpp	/^			std::vector<uuid_t> m_scanned;$/;"	m	struct:mods::classes::sniper
m_scanned	mods/drone.hpp	/^			std::vector<uuid_t> m_scanned;$/;"	m	struct:mods::drone_impl
m_scripted_response	mods/player.hpp	/^			std::string m_scripted_response;$/;"	m	struct:mods::player
m_seal_off_room_with_wall_of_fire_level	mods/classes/pyrexia.hpp	/^			skill_familiarity_t m_seal_off_room_with_wall_of_fire_level;$/;"	m	struct:mods::classes::pyrexia
m_sensor_grenade_charges	mods/classes/engineer.hpp	/^			uint8_t m_sensor_grenade_charges;$/;"	m	struct:mods::classes::engineer
m_set_tentative_file_offset	mods/acl/config-parser.cpp	/^        inline void FileParser::m_set_tentative_file_offset(size_t i){ m_tentative_file_offset = i; }$/;"	f	class:mods::acl::FileParser
m_set_time	mods/mobs/mob.cpp	/^	void player::m_set_time(){$/;"	f	class:mods::player
m_set_time	mods/player.cpp	/^	void player::m_set_time() {$/;"	f	class:mods::player
m_settings	mods/lmdb/conf.hpp	/^conf_map m_settings;$/;"	m	struct:gdns::conf
m_shared_ptr	mods/mobs/mob.hpp	/^			std::shared_ptr<char_data> m_shared_ptr;$/;"	m	class:mods::player
m_shared_ptr	mods/object.hpp	/^			std::shared_ptr<obj_data> m_shared_ptr;$/;"	m	struct:mods::object
m_shared_ptr	mods/player.hpp	/^			std::shared_ptr<char_data> m_shared_ptr;$/;"	m	struct:mods::player
m_shock_damage_percent	mods/player.hpp	/^			int16_t m_shock_damage_percent;$/;"	m	struct:mods::player
m_shock_resistance_percent	mods/player.hpp	/^			int16_t m_shock_resistance_percent;$/;"	m	struct:mods::player
m_shouldDebugBreak	mods/catch.hpp	/^			bool m_shouldDebugBreak;$/;"	m	class:Catch::ResultBuilder
m_shouldThrow	mods/catch.hpp	/^			bool m_shouldThrow;$/;"	m	class:Catch::ResultBuilder
m_should_do	mods/mobs/smart-mob.hpp	/^			std::map<uint16_t,uint16_t> m_should_do;$/;"	m	struct:mods::mobs::smart_mob
m_should_do_max	mods/mobs/smart-mob.hpp	/^			std::map<uint16_t,uint16_t> m_should_do_max;$/;"	m	struct:mods::mobs::smart_mob
m_show_tics	mods/debug.hpp	/^			bool m_show_tics;$/;"	m	struct:mods::debug::state
m_shrapnel_damage_percent	mods/player.hpp	/^			int16_t m_shrapnel_damage_percent;$/;"	m	struct:mods::player
m_shrapnel_resistance_percent	mods/player.hpp	/^			int16_t m_shrapnel_resistance_percent;$/;"	m	struct:mods::player
m_signatures	mods/builder/slotted-builder.hpp	/^			std::map<std::string,std::string> m_signatures;$/;"	m	struct:mods::builder::slotted_builder
m_size	mods/catch2.hpp	/^            m_size( size )$/;"	f	class:Catch::StringRef
m_size	mods/catch2.hpp	/^            m_size( stdString.size() )$/;"	f	class:Catch::StringRef
m_size	mods/catch2.hpp	/^        size_type m_size = 0;$/;"	m	class:Catch::StringRef
m_size	mods/string.hpp	/^			std::size_t m_size;$/;"	m	struct:mods::string
m_skill_usage	mods/orm/player-skill-usage.cpp	/^	std::map<uint64_t,uint16_t> m_skill_usage;$/;"	m	namespace:mods::orm	file:
m_skills	mods/player.hpp	/^			std::map<int,uint16_t> m_skills;$/;"	m	struct:mods::player
m_slot_list	mods/builder/slotted-builder.hpp	/^			std::vector<std::string> m_slot_list;$/;"	m	struct:mods::builder::slotted_builder
m_sniper	mods/player.hpp	/^			std::shared_ptr<mods::classes::sniper> m_sniper;$/;"	m	struct:mods::player
m_sql	mods/sql.hpp	/^			std::string m_sql;$/;"	m	struct:mods::sql::compositor
m_start	mods/catch2.hpp	/^        char const* m_start = s_empty;$/;"	m	class:Catch::StringRef
m_stat_boosts	mods/forge-engine/generated-armor.hpp	/^			std::vector<std::pair<stat_types_t,std::variant<uint32_t,float>>> m_stat_boosts;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_stat_boosts	mods/forge-engine/generated-rifle.hpp	/^			std::vector<std::pair<stat_types_t,std::variant<uint32_t,float>>> m_stat_boosts;$/;"	m	struct:mods::forge_engine::generated_rifle_t
m_state	mods/ai_state.hpp	/^			uint8_t m_state;$/;"	m	class:mods::ai_state
m_state_buffer	mods/player-contract-instance.hpp	/^			std::string m_state_buffer;$/;"	m	struct:mods::contracts::player_contract_instance
m_state_orm	mods/player-contract-instance.hpp	/^			std::shared_ptr<mods::orm::player_contract_state> m_state_orm;$/;"	m	struct:mods::contracts::player_contract_instance
m_status	mods/lmdb.hpp	/^		status_type_t m_status;$/;"	m	struct:mods::lmdb::_db_handle
m_stealth_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_stealth_level;$/;"	m	struct:mods::classes::ghost
m_step	mods/player-contract-instance.hpp	/^			std::size_t m_step;$/;"	m	struct:mods::contracts::player_contract_instance
m_step_dump	mods/player-contract-instance.hpp	/^			std::string m_step_dump;$/;"	m	struct:mods::contracts::player_contract_instance
m_still_have_content	mods/acl/config-parser.cpp	/^        inline bool FileParser::m_still_have_content(){$/;"	f	class:mods::acl::FileParser
m_stim_pistol_ammo	mods/classes/medic.hpp	/^			uint8_t m_stim_pistol_ammo;$/;"	m	struct:mods::classes::medic
m_store_extends	mods/acl/config-parser.cpp	/^        int FileParser::m_store_extends(std::string & klass_name){$/;"	f	class:mods::acl::FileParser
m_store_items	mods/acl/config-parser.cpp	/^        int FileParser::m_store_items(const std::string & klass_name){$/;"	f	class:mods::acl::FileParser
m_str	mods/string.hpp	/^			std::string m_str;$/;"	m	struct:mods::string
m_str_table	mods/lmdb.hpp	/^		std::string m_str_table;$/;"	m	struct:mods::lmdb::transaction_t
m_stream	mods/catch.hpp	/^			CopyableStream m_stream;$/;"	m	class:Catch::ResultBuilder
m_subscribers	mods/chat.hpp	/^			std::vector<socket_t> m_subscribers;$/;"	m	struct:mods::chat::channel
m_substr	mods/acl/config-parser.cpp	/^        inline std::string FileParser::m_substr(void){$/;"	f	class:mods::acl::FileParser
m_success	mods/deep-object-parser.cpp	13;"	d	file:
m_success	mods/deep-object-parser.cpp	7;"	d	file:
m_summon_extraction_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_summon_extraction_level;$/;"	m	struct:mods::classes::ghost
m_support	mods/player.hpp	/^			std::shared_ptr<mods::classes::support> m_support;$/;"	m	struct:mods::player
m_sync_equipment	mods/player.cpp	/^	void player::m_sync_equipment() {$/;"	f	class:mods::player
m_syndrome	mods/player.hpp	/^			std::shared_ptr<mods::classes::syndrome> m_syndrome;$/;"	m	struct:mods::player
m_table	mods/lmdb.hpp	/^		table_type_t m_table;$/;"	m	struct:mods::lmdb::transaction_t
m_table	mods/sql.hpp	/^			std::string m_table;$/;"	m	struct:mods::sql::compositor
m_target	mods/classes/sniper.hpp	/^			uuid_t m_target;$/;"	m	struct:mods::classes::sniper
m_target	mods/player-contract-instance.hpp	/^			target_t m_target;$/;"	m	struct:mods::contracts::player_contract_instance
m_teep_level	mods/classes/breacher.hpp	/^			int \/** todo replace iwth skill_familiarity_t *\/ m_teep_level;$/;"	m	struct:mods::classes::breacher
m_temperature	mods/rifle-instance-data.hpp	/^			int16_t m_temperature;$/;"	m	struct:heat
m_tentative_file_offset	mods/acl/config-parser.hpp	/^                size_t m_tentative_file_offset;$/;"	m	class:mods::acl::FileParser
m_testAsMethod	mods/catch2.hpp	/^    TestInvokerAsMethod( void (C::*testAsMethod)() ) noexcept : m_testAsMethod( testAsMethod ) {}$/;"	f	class:Catch::TestInvokerAsMethod
m_testAsMethod	mods/catch2.hpp	/^    void (C::*m_testAsMethod)();$/;"	m	class:Catch::TestInvokerAsMethod
m_texture_levels	structs.h	/^		std::map<texture_type_t,texture_level_t> m_texture_levels;$/;"	v
m_textures	structs.h	/^		std::set<texture_type_t> m_textures;$/;"	v
m_tick	mods/deferred.hpp	/^			uint64_t m_tick;$/;"	m	class:mods::deferred
m_tick_resolution_map	mods/affects.hpp	/^			std::map<TAffects,uint32_t> m_tick_resolution_map;$/;"	m	struct:mods::affects::dissolver
m_tick_resolution_map_counter	mods/affects.hpp	/^			std::map<TAffects,uint32_t> m_tick_resolution_map_counter;$/;"	m	struct:mods::affects::dissolver
m_ticks_event_type	mods/deferred.hpp	/^			event_queue_t m_ticks_event_type;$/;"	m	class:mods::deferred
m_ticks_per_minute	mods/deferred.hpp	/^			uint32_t m_ticks_per_minute;$/;"	m	class:mods::deferred
m_ticks_per_minute_sample	mods/deferred.hpp	/^			uint32_t m_ticks_per_minute_sample;$/;"	m	class:mods::deferred
m_time	mods/camera.hpp	/^			uint16_t m_time;$/;"	m	class:mods::camera
m_time	mods/mobs/mob.hpp	/^			time_type_t	m_time;$/;"	m	class:mods::player
m_time	mods/player.hpp	/^			time_type_t	m_time;$/;"	m	struct:mods::player
m_time_tracker	mods/deferred.hpp	/^			time_t m_time_tracker;$/;"	m	class:mods::deferred
m_toggle_file_offset_advance	mods/acl/config-parser.cpp	/^        inline void FileParser::m_toggle_file_offset_advance(bool b){$/;"	f	class:mods::acl::FileParser
m_tracking_shot_charges	mods/classes/sniper.hpp	/^			uint8_t m_tracking_shot_charges;$/;"	m	struct:mods::classes::sniper
m_trade_attribute_level	mods/classes/forge.hpp	/^			skill_familiarity_t m_trade_attribute_level;$/;"	m	struct:mods::classes::forge
m_transaction_good	mods/lmdb.hpp	/^		bool m_transaction_good;$/;"	m	struct:mods::lmdb::_db_handle
m_transaction_open	mods/lmdb.hpp	/^		bool m_transaction_open;$/;"	m	struct:mods::lmdb::_db_handle
m_translations	mods/lmdb/conf.hpp	/^conf_map m_translations;$/;"	m	struct:gdns::conf
m_tree	mods/acl/config-parser.hpp	/^                tree m_tree;$/;"	m	class:mods::acl::FileParser
m_tree_name	mods/behaviour_tree.hpp	/^		std::string m_tree_name;$/;"	m	struct:mods::behaviour_tree
m_tres	mods/cron.hpp	/^			uint64_t m_tres;$/;"	m	class:mods::cron
m_tres	mods/deferred.hpp	/^			uint64_t m_tres;$/;"	m	class:mods::deferred
m_triads	mods/player.hpp	/^			std::array<uint8_t,5> m_triads;$/;"	m	struct:mods::player
m_txn	mods/lmdb.hpp	/^		MDB_txn*	m_txn;$/;"	m	struct:mods::lmdb::_db_handle
m_txn_ptr	mods/sql.hpp	/^			T* m_txn_ptr;$/;"	m	struct:mods::sql::compositor
m_type	mods/forge-engine/generated-armor.hpp	/^			armor_types_t m_type;$/;"	m	struct:mods::forge_engine::generated_armor_t
m_type	mods/forge-engine/generated-rifle.hpp	/^			rifle_types_t m_type;$/;"	m	struct:mods::forge_engine::generated_rifle_t
m_type	mods/lmdb.hpp	/^		transact_type_t m_type;$/;"	m	struct:mods::lmdb::transaction_t
m_type	mods/object.hpp	/^			std::vector<object_type_enum_t> m_type;$/;"	m	struct:mods::object
m_type	mods/player.hpp	/^			player_type_enum_t m_type;$/;"	m	struct:mods::player
m_ucname	mods/player.hpp	/^			std::string m_ucname;$/;"	m	struct:mods::player
m_underlyingMatcher	mods/catch.hpp	/^				MatcherBase<ArgT> const& m_underlyingMatcher;$/;"	m	struct:Catch::Matchers::Impl::MatchNotOf
m_update_status	mods/player-contract-instance.hpp	/^			std::tuple<int16_t,std::string> m_update_status;$/;"	m	struct:mods::contracts::player_contract_instance
m_use_pluck	mods/lmdb.hpp	/^		bool m_use_pluck;$/;"	m	struct:mods::lmdb::_db_handle
m_values	mods/catch2.hpp	/^            std::vector<std::pair<int, StringRef>> m_values;$/;"	m	struct:Catch::Detail::EnumInfo
m_verb	mods/chat.hpp	/^			std::string m_verb;$/;"	m	struct:mods::chat::channel
m_vnum	mods/builder.cpp	/^	mob_vnum m_vnum;$/;"	m	struct:command_t	file:
m_watching	mods/player.hpp	/^			direction_t m_watching;$/;"	m	struct:mods::player
m_weapon	mods/rifle-instance-data.hpp	/^			TObjPtr m_weapon;$/;"	m	struct:heat
m_weapon_cooldown	mods/mobs/mob.hpp	/^			std::array<unsigned long,WEAPON_SET_NUM> m_weapon_cooldown;$/;"	m	class:mods::player
m_weapon_cooldown	mods/player.hpp	/^			std::array<uint16_t,WEAPON_SET_NUM> m_weapon_cooldown;$/;"	m	struct:mods::player
m_weapon_flags	mods/player.hpp	/^			weapon_type_t m_weapon_flags;$/;"	m	struct:mods::player
m_weapon_set	mods/mobs/mob.hpp	/^			weapon_set   m_weapon_set;$/;"	m	class:mods::player
m_weapon_set	mods/player.hpp	/^			weapon_set   m_weapon_set;$/;"	m	struct:mods::player
m_weapon_type	mods/player.hpp	/^			weapon_type_t m_weapon_type;$/;"	m	struct:mods::player
m_weapon_uuid	mods/rifle-instance-data.hpp	/^			TUUID m_weapon_uuid;$/;"	m	struct:heat
m_what	mods/catch.hpp	/^			std::string m_what;$/;"	m	class:Catch::NotImplementedException
m_xray_shot_charges	mods/classes/sniper.hpp	/^			uint16_t m_xray_shot_charges;$/;"	m	struct:mods::classes::sniper
m_xray_shot_level	mods/classes/ghost.hpp	/^			skill_familiarity_t m_xray_shot_level;$/;"	m	struct:mods::classes::ghost
machine_pistols	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> machine_pistols;$/;"	m	namespace:mods::forge_engine	file:
macroName	mods/catch.hpp	/^		std::string macroName;$/;"	m	struct:Catch::AssertionInfo
macroName	mods/catch2.hpp	/^        StringRef macroName;$/;"	m	struct:Catch::AssertionInfo
macro_impl	mods/macro_impl.cpp	/^namespace mods::macro_impl {$/;"	n	class:mods	file:
macro_impl	mods/macro_impl.hpp	/^namespace mods::macro_impl {$/;"	n	class:mods
maffects_debug	mods/affects.hpp	12;"	d
maffects_debug	mods/affects.hpp	14;"	d
mag_affects	magic.cpp	/^void mag_affects(int level, char_data *ch, char_data *victim,$/;"	f
mag_alter_objs	magic.cpp	/^void mag_alter_objs(int level, char_data *ch, struct obj_data *obj,$/;"	f
mag_areas	magic.cpp	/^void mag_areas(int level, char_data *ch, int spellnum, int savetype) {$/;"	f
mag_assign_spells	mods/hell.hpp	/^	constexpr inline bool mag_assign_spells = false;$/;"	m	namespace:mods::hell
mag_assign_spells	spell_parser.cpp	/^void mag_assign_spells(void) {$/;"	f
mag_creations	magic.cpp	/^void mag_creations(int level, char_data *ch, int spellnum) {$/;"	f
mag_damage	magic.cpp	/^int mag_damage(int level, char_data *ch, char_data *victim,$/;"	f
mag_groups	magic.cpp	/^void mag_groups(int level, char_data *ch, int spellnum, int savetype) {$/;"	f
mag_manacost	spell_parser.cpp	/^int mag_manacost(char_data *ch, int spellnum) {$/;"	f
mag_masses	magic.cpp	/^void mag_masses(int level, char_data *ch, int spellnum, int savetype) {$/;"	f
mag_materials	magic.cpp	/^int mag_materials(char_data *ch, int item0, int item1, int item2,$/;"	f
mag_objectmagic	spell_parser.cpp	/^void mag_objectmagic(char_data *ch, struct obj_data *obj,$/;"	f
mag_points	magic.cpp	/^void mag_points(int level, char_data *ch, char_data *victim,$/;"	f
mag_savingthrow	magic.cpp	/^int mag_savingthrow(char_data *ch, int type, int modifier) {$/;"	f
mag_summon_fail_msgs	magic.cpp	/^const char *mag_summon_fail_msgs[] = {$/;"	v
mag_summon_msgs	magic.cpp	/^const char *mag_summon_msgs[] = {$/;"	v
mag_summons	magic.cpp	/^void mag_summons(int level, char_data *ch, struct obj_data *obj,$/;"	f
mag_unaffects	magic.cpp	/^void mag_unaffects(int level, char_data *ch, char_data *victim,$/;"	f
magazine	mods/rifle-attachments.hpp	/^			obj_ptr_t magazine;$/;"	m	struct:mods::rifle_attachments_t
magazine_t	mods/weapon.hpp	/^	enum magazine_t {$/;"	g	namespace:mods::weapon
magic_user	spec_assign.cpp	/^SPECIAL(magic_user);$/;"	v
magic_user	spec_procs.cpp	/^SPECIAL(magic_user);$/;"	v
mail_index	mail.cpp	/^mail_index_type *mail_index = NULL;	\/* list of recs in the mail file  *\/$/;"	v
mail_index_type	mail.h	/^typedef struct mail_index_type_d mail_index_type;$/;"	t	typeref:struct:mail_index_type_d
mail_index_type_d	mail.h	/^struct mail_index_type_d {$/;"	s
mail_recip_ok	mail.cpp	/^int mail_recip_ok(const char *name) {$/;"	f
mail_time	mail.h	/^	time_t mail_time;		\/* when was the letter mailed?		*\/$/;"	m	struct:header_data_type
main	bsd-snprintf.cpp	/^main(void) {$/;"	f
main	comm.cpp	/^int main(int argc, char **argv) {$/;"	f
main	mods/lmdb/daemon.cpp	/^int main(int argc,char** argv){$/;"	f
main	mods/lmdb/shm-viewer.cpp	/^int main(int argc,char** argv){$/;"	f
make	mods/rifle-attachments.cpp	/^		std::shared_ptr<mods::rifle_attachments_t> make(std::string_view str) {$/;"	f	namespace:mods::rifle_attachments
make	mods/weapons/pistol-czp10.cpp	/^	obj_data_ptr_t czp10::make(){$/;"	f	class:mods::weapons::pistol::czp10
make	mods/weapons/shotgun-sasg12.cpp	/^	obj_data_ptr_t sasg12::make(){$/;"	f	class:mods::weapons::shotgun::sasg12
make	mods/weapons/smg-mp5.cpp	/^	obj_data_ptr_t mp5::make(){$/;"	f	class:mods::weapons::smg::mp5
make	mods/weapons/sniper-rifle-l96aw.cpp	/^	obj_data_ptr_t l96aw::make(){$/;"	f	class:mods::weapons::sniper_rifle::l96aw
make	mods/weapons/sniper-rifle-psg1.cpp	/^	obj_data_ptr_t psg1::make(){$/;"	f	class:mods::weapons::sniper_rifle::psg1
makeSafe	mods/catch.hpp	/^			static type makeSafe(bool value) {$/;"	f	class:Catch::SafeBool
make_char	mods/chargen.cpp	/^	std::tuple<bool,std::string> make_char(player_ptr_t player,player_class_t class_type){$/;"	f	namespace:mods::chargen
make_corpse	fight.cpp	/^void make_corpse(char_data *ch) {$/;"	f
make_from	mods/util.cpp	/^	obj_ptr_t make_from(obj_data* o) {$/;"	f	namespace:mods::util
make_lowly_security	mods/mobs/lowly-security-behaviour-tree.hpp	/^	void make_lowly_security(TNode& tree) {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
make_lowly_security_engage	mods/mobs/lowly-security-behaviour-tree.hpp	/^	void make_lowly_security_engage(TNode& tree) {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
make_lowly_security_pursuit	mods/mobs/lowly-security-behaviour-tree.hpp	/^	void make_lowly_security_pursuit(TNode& tree) {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
make_lowly_security_roam	mods/mobs/lowly-security-behaviour-tree.hpp	/^	void make_lowly_security_roam(TNode& tree) {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
make_mini_gunner_aggressive_roam	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	void make_mini_gunner_aggressive_roam(TNode& tree) {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
make_mini_gunner_disoriented	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	void make_mini_gunner_disoriented(TNode& tree) {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
make_mini_gunner_engage	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	void make_mini_gunner_engage(TNode& tree) {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
make_mini_gunner_roam	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	void make_mini_gunner_roam(TNode& tree) {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
make_prompt	comm.cpp	/^char *make_prompt(mods::descriptor_data& d) {$/;"	f
mana	mods/mobs/mob.hpp	/^			sh_int& mana() {$/;"	f	class:mods::player
mana	mods/player.hpp	/^			sh_int& mana() {$/;"	f	struct:mods::player
mana_change	spells.h	/^	int mana_change;	\/* Change in mana used by spell from lev to lev *\/$/;"	m	struct:spell_info_type
mana_gain	limits.cpp	/^int mana_gain(char_data *ch) {$/;"	f
mana_max	spells.h	/^	int mana_max;	\/* Max amount of mana used by a spell (lowest lev) *\/$/;"	m	struct:spell_info_type
mana_min	spells.h	/^	int mana_min;	\/* Min amount of mana used by a spell (highest lev) *\/$/;"	m	struct:spell_info_type
manufacturer	mods/yaml.hpp	/^		std::string manufacturer;$/;"	m	struct:mods::yaml::yaml_description_t
map	mods/builder/conbuild.cpp	/^	namespace map {$/;"	n	namespace:mods::builder::conbuild	file:
map	mods/builder/meqbuild.cpp	/^	namespace map {$/;"	n	namespace:mods::builder::meqbuild	file:
map2str	mods/util.hpp	/^	std::string map2str(std::map<TKey,TVal> in_map) {$/;"	f	namespace:mods::util
map_generator	mods/fluxkraft/generator.cpp	/^	mods::fluxkraft::generator map_generator;$/;"	m	namespace:mods::fluxkraft	file:
map_keys	globals.cpp	/^std::vector<str_t> map_keys(str_map_t& m) {$/;"	f
maps	mods/util-map.hpp	/^		namespace maps {$/;"	n	namespace:mods::util
marine	mods/classes/marine.cpp	/^	marine::marine(){$/;"	f	class:mods::classes::marine
marine	mods/classes/marine.cpp	/^	marine::marine(player_ptr_t p){$/;"	f	class:mods::classes::marine
marine	mods/classes/marine.hpp	/^	struct marine : base {$/;"	s	namespace:mods::classes
marine	mods/orm/marine.hpp	/^		marine() : id(0) {$/;"	f	struct:mods::orm::marine
marine	mods/orm/marine.hpp	/^	struct marine : public mods::orm::orm_base<marine,mods::weapon::marine::primary_choice_t> {$/;"	s	namespace:mods::orm
marine	mods/player.cpp	/^	std::shared_ptr<mods::classes::marine>& player::marine() {$/;"	f	class:mods::player
marine	mods/weapon.hpp	/^	namespace marine {$/;"	n	namespace:mods::weapon
marine_id	mods/orm/marine.hpp	/^		uint64_t marine_id;$/;"	m	struct:mods::orm::marine
marine_list	mods/replenish.cpp	/^	static std::vector<uuid_t> marine_list;$/;"	m	namespace:mods::replenish	file:
marine_player_id	mods/orm/marine.hpp	/^		uint64_t marine_player_id;$/;"	m	struct:mods::orm::marine
marine_ptrs	mods/replenish.cpp	/^	static std::map<uuid_t,marine_ptr_t> marine_ptrs;$/;"	m	namespace:mods::replenish	file:
mark	mods/object-utils.hpp	/^		YAML::Mark mark;$/;"	m	struct:mods::object_utils::YamlFeedExceptionInfo
mark_target	mods/classes/sniper.cpp	/^	std::tuple<bool,std::string> sniper::mark_target(std::string_view target) {$/;"	f	class:mods::classes::sniper
marksmanship	mods/player.hpp	/^			uint16_t& marksmanship() {$/;"	f	struct:mods::player
mask	mods/weapon.hpp	/^	struct mask {$/;"	s	namespace:mods::weapon
mask_to_string	mods/doors.hpp	/^	static inline std::string mask_to_string(int i) {$/;"	f	namespace:mods::doors
mask_type	mods/mobs/mob.hpp	/^		enum mask_type { SMG, SNIPE, SHOTGUN, GRENADE };$/;"	g	namespace:mods::weapon
mask_type	mods/weapon.hpp	/^	enum mask_type { SMG = 1, SNIPE = (1 << 2), SHOTGUN = (1 << 3),$/;"	g	namespace:mods::weapon
match_any	mods/util.cpp	/^	bool match_any(std::string_view src,std::vector<std::string> any_of_these,std::size_t max_ch) {$/;"	f	namespace:mods::util
match_any_lower	mods/util.cpp	/^	bool match_any_lower(std::string_view src,std::vector<std::string> any_of_these,std::size_t max_ch) {$/;"	f	namespace:mods::util
match_any_of	globals.hpp	/^	static inline bool match_any_of(std::vector<TString> items,TString target) {$/;"	f	namespace:txt
match_any_of_lower	globals.hpp	/^	static inline bool match_any_of_lower(std::vector<TString> items,TString target) {$/;"	f	namespace:txt
matches_many	mods/help.cpp	/^	bool matches_many(const std::string& items,std::string_view from) {$/;"	f	namespace:mods::help
matches_query	structs.cpp	/^bool obj_data::matches_query(std::string_view query) {$/;"	f	class:obj_data
max	mods/util-map.hpp	/^			Tval max(std::map<Tkey,Tval>& m) {$/;"	f	namespace:mods::util::maps
max_amount_reached	mods/affects.hpp	/^			bool max_amount_reached(TAffects affect) {$/;"	f	struct:mods::affects::dissolver
max_bad_pws	config.cpp	/^int max_bad_pws = 3;$/;"	v
max_exp_gain	config.cpp	/^int max_exp_gain = 100000;	\/* max gainable per kill *\/$/;"	v
max_exp_loss	config.cpp	/^int max_exp_loss = 500000;	\/* max losable per death *\/$/;"	v
max_filesize	config.cpp	/^int max_filesize = 50000;$/;"	v
max_hp	mods/mobs/mob.hpp	/^			sh_int& max_hp() {$/;"	f	class:mods::player
max_hp	mods/player.hpp	/^			sh_int& max_hp() {$/;"	f	struct:mods::player
max_mana	mods/mobs/mob.hpp	/^			sh_int& max_mana() {$/;"	f	class:mods::player
max_mana	mods/player.hpp	/^			sh_int& max_mana() {$/;"	f	struct:mods::player
max_mob	act.builder.cpp	/^	static int max_mob  = -1;$/;"	m	namespace:mods::adhoc	file:
max_move	mods/mobs/mob.hpp	/^			sh_int& max_move() {$/;"	f	class:mods::player
max_move	mods/player.hpp	/^			sh_int& max_move() {$/;"	f	struct:mods::player
max_npc_corpse_time	config.cpp	/^int max_npc_corpse_time = 5;$/;"	v
max_obj_save	config.cpp	/^int max_obj_save = 30;$/;"	v
max_object	act.builder.cpp	/^	static int max_object = -1;$/;"	m	namespace:mods::adhoc	file:
max_pc_corpse_time	config.cpp	/^int max_pc_corpse_time = 10;$/;"	v
max_players	comm.cpp	/^int max_players = 0;		\/* max descriptors available *\/$/;"	v
max_playing	config.cpp	/^int max_playing = 300;$/;"	v
max_range	mods/weapon.hpp	/^			int max_range;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
max_range	mods/weapons/damage-calculator.cpp	/^	int16_t max_range($/;"	f	namespace:mods::weapons::damage_calculator
max_room	act.builder.cpp	/^	static int max_room = -1;$/;"	m	namespace:mods::adhoc	file:
max_stats	mods/forge-engine/value-scaler.hpp	/^		uint8_t max_stats;$/;"	m	struct:mods::forge_engine::value_scaler
max_zone	act.builder.cpp	/^	static int max_zone = -1;$/;"	m	namespace:mods::adhoc	file:
mayor	spec_assign.cpp	/^SPECIAL(mayor);$/;"	v
mayor	spec_procs.cpp	/^SPECIAL(mayor);$/;"	v
mbop_debug	mods/builder/object-placement.hpp	14;"	d
mbop_debug	mods/builder/object-placement.hpp	5;"	d
mc_debug	mods/query-objects.cpp	11;"	d	file:
mc_debug	mods/query-objects.cpp	13;"	d	file:
mc_debug	mods/query-objects.cpp	257;"	d	file:
mcv_debug	mods/calc-visibility.cpp	11;"	d	file:
mcv_debug	mods/calc-visibility.cpp	134;"	d	file:
mcv_debug	mods/calc-visibility.cpp	14;"	d	file:
mdo_debug	mods/deep-object-parser.hpp	11;"	d
mdo_debug	mods/deep-object-parser.hpp	22;"	d
mdo_debug	mods/rifle-attachments.hpp	111;"	d
mdo_debug	mods/rifle-attachments.hpp	5;"	d
me_debug	mods/mob-equipment.cpp	11;"	d	file:
me_debug	mods/mob-equipment.cpp	66;"	d	file:
me_debug	mods/mob-equipment.cpp	9;"	d	file:
medic	mods/classes/medic.cpp	/^	medic::medic() {$/;"	f	class:mods::classes::medic
medic	mods/classes/medic.cpp	/^	medic::medic(player_ptr_t p) {$/;"	f	class:mods::classes::medic
medic	mods/classes/medic.hpp	/^	struct medic : public base {$/;"	s	namespace:mods::classes
medic	mods/orm/medic.hpp	/^		medic() : id(0) {$/;"	f	struct:mods::orm::medic
medic	mods/orm/medic.hpp	/^	struct medic : public mods::orm::orm_base<medic,mods::weapon::medic::primary_choice_t> {$/;"	s	namespace:mods::orm
medic	mods/player.cpp	/^	std::shared_ptr<mods::classes::medic>& player::medic() {$/;"	f	class:mods::player
medic	mods/weapon.hpp	/^	namespace medic {$/;"	n	namespace:mods::weapon
medic_id	mods/orm/medic.hpp	/^		uint64_t medic_id;$/;"	m	struct:mods::orm::medic
medic_list	mods/replenish.cpp	/^	static std::vector<uuid_t> medic_list;$/;"	m	namespace:mods::replenish	file:
medic_player_id	mods/orm/medic.hpp	/^		uint64_t medic_player_id;$/;"	m	struct:mods::orm::medic
medic_ptrs	mods/replenish.cpp	/^	static std::map<uuid_t,medic_ptr_t> medic_ptrs;$/;"	m	namespace:mods::replenish	file:
medical	mods/player.hpp	/^			uint16_t& medical() {$/;"	f	struct:mods::player
melee	mods/item-types.hpp	/^	enum melee {$/;"	g	namespace:mods::weapon::type
melee_description_t	mods/yaml.hpp	/^		melee_description_t()  {$/;"	f	struct:mods::yaml::melee_description_t
melee_description_t	mods/yaml.hpp	/^	struct melee_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
melee_t	mods/weapon.hpp	/^	enum melee_t {$/;"	g	namespace:mods::weapon
member_of_royal_guard	castle.cpp	/^int member_of_royal_guard(char_data *chChar) {$/;"	f
member_of_staff	castle.cpp	/^int member_of_staff(char_data *chChar) {$/;"	f
memory_id	mods/lmdb/shm-config.hpp	/^    const char* memory_id = "\/etc\/ghost.conf"; $/;"	m	namespace:shm
mentoc_flashbang_debug	mods/flashbang.hpp	28;"	d
mentoc_flashbang_debug	mods/flashbang.hpp	9;"	d
mentoc_pqxx_result_t	mods/string.hpp	12;"	d
mentoc_pqxx_result_t	mods/string.hpp	14;"	d
mentoc_pqxx_result_t	structs.h	40;"	d
mentoc_pqxx_result_t	structs.h	42;"	d
mentoc_prefix_debug	globals.hpp	72;"	d
meq_about	mods/orm/mob-equipment.hpp	/^		std::string meq_about;$/;"	m	struct:mods::orm::mob_equipment
meq_arms	mods/orm/mob-equipment.hpp	/^		std::string meq_arms;$/;"	m	struct:mods::orm::mob_equipment
meq_backpack	mods/orm/mob-equipment.hpp	/^		std::string meq_backpack;$/;"	m	struct:mods::orm::mob_equipment
meq_body	mods/orm/mob-equipment.hpp	/^		std::string meq_body;$/;"	m	struct:mods::orm::mob_equipment
meq_elbow_l	mods/orm/mob-equipment.hpp	/^		std::string meq_elbow_l;$/;"	m	struct:mods::orm::mob_equipment
meq_elbow_r	mods/orm/mob-equipment.hpp	/^		std::string meq_elbow_r;$/;"	m	struct:mods::orm::mob_equipment
meq_feet	mods/orm/mob-equipment.hpp	/^		std::string meq_feet;$/;"	m	struct:mods::orm::mob_equipment
meq_finger_l	mods/orm/mob-equipment.hpp	/^		std::string meq_finger_l;$/;"	m	struct:mods::orm::mob_equipment
meq_finger_r	mods/orm/mob-equipment.hpp	/^		std::string meq_finger_r;$/;"	m	struct:mods::orm::mob_equipment
meq_goggles	mods/orm/mob-equipment.hpp	/^		std::string meq_goggles;$/;"	m	struct:mods::orm::mob_equipment
meq_hands	mods/orm/mob-equipment.hpp	/^		std::string meq_hands;$/;"	m	struct:mods::orm::mob_equipment
meq_head	mods/orm/mob-equipment.hpp	/^		std::string meq_head;$/;"	m	struct:mods::orm::mob_equipment
meq_hold	mods/orm/mob-equipment.hpp	/^		std::string meq_hold;$/;"	m	struct:mods::orm::mob_equipment
meq_legs	mods/orm/mob-equipment.hpp	/^		std::string meq_legs;$/;"	m	struct:mods::orm::mob_equipment
meq_light	mods/orm/mob-equipment.hpp	/^		std::string meq_light;$/;"	m	struct:mods::orm::mob_equipment
meq_mappings	mods/mob-equipment.cpp	/^	std::map<mob_vnum,std::array<std::string,NUM_WEARS>>& meq_mappings() {$/;"	f	namespace:mods::mob_equipment
meq_neck_1	mods/orm/mob-equipment.hpp	/^		std::string meq_neck_1;$/;"	m	struct:mods::orm::mob_equipment
meq_neck_2	mods/orm/mob-equipment.hpp	/^		std::string meq_neck_2;$/;"	m	struct:mods::orm::mob_equipment
meq_profile_name	mods/orm/mob-equipment.hpp	/^		std::string meq_profile_name;$/;"	m	struct:mods::orm::mob_equipment
meq_secondary	mods/orm/mob-equipment.hpp	/^		std::string meq_secondary;$/;"	m	struct:mods::orm::mob_equipment
meq_shield	mods/orm/mob-equipment.hpp	/^		std::string meq_shield;$/;"	m	struct:mods::orm::mob_equipment
meq_shoulders_l	mods/orm/mob-equipment.hpp	/^		std::string meq_shoulders_l;$/;"	m	struct:mods::orm::mob_equipment
meq_shoulders_r	mods/orm/mob-equipment.hpp	/^		std::string meq_shoulders_r;$/;"	m	struct:mods::orm::mob_equipment
meq_vest_pack	mods/orm/mob-equipment.hpp	/^		std::string meq_vest_pack;$/;"	m	struct:mods::orm::mob_equipment
meq_vnum	mods/orm/mob-equipment.hpp	/^		uint64_t meq_vnum;$/;"	m	struct:mods::orm::mob_equipment
meq_waist	mods/orm/mob-equipment.hpp	/^		std::string meq_waist;$/;"	m	struct:mods::orm::mob_equipment
meq_wield	mods/orm/mob-equipment.hpp	/^		std::string meq_wield;$/;"	m	struct:mods::orm::mob_equipment
meq_wrist_l	mods/orm/mob-equipment.hpp	/^		std::string meq_wrist_l;$/;"	m	struct:mods::orm::mob_equipment
meq_wrist_r	mods/orm/mob-equipment.hpp	/^		std::string meq_wrist_r;$/;"	m	struct:mods::orm::mob_equipment
meqbuild	mods/builder/meqbuild.cpp	/^namespace mods::builder::meqbuild {$/;"	n	class:mods::builder	file:
meqbuild	mods/init.hpp	/^INIT(mods::builder::meqbuild);$/;"	v
meqbuild_interface	mods/builder/meqbuild.cpp	/^		meqbuild_interface() {$/;"	f	struct:mods::builder::meqbuild::meqbuild_interface
meqbuild_interface	mods/builder/meqbuild.cpp	/^	struct meqbuild_interface : public slotted_builder<meqbuild_vnum_t,meqbuild_orm_type> {$/;"	s	namespace:mods::builder::meqbuild	file:
meqbuilder	mods/builder/meqbuild.cpp	/^	meqbuild_interface& meqbuilder(player_ptr_t player) {$/;"	f	namespace:mods::builder::meqbuild
message	mods/catch.hpp	/^		std::string message;$/;"	m	struct:Catch::AssertionResultData
message_buy	shop.h	/^	mods::string message_buy;		\/* Message when player buys item	*\/$/;"	m	struct:shop_data
message_len	boards.h	/^	int	message_len;  \/* size of message text (for file write) *\/$/;"	m	struct:board_msginfo
message_queue	mods/contract-events.cpp	/^namespace mods::message_queue {$/;"	n	class:mods	file:
message_sell	shop.h	/^	mods::string message_sell;		\/* Message when player sells item	*\/$/;"	m	struct:shop_data
messages	mods/init.hpp	/^INIT(mods::players::messages);$/;"	v
messages	mods/players/messages.cpp	/^namespace mods::players::messages {$/;"	n	class:mods::players	file:
messages	mods/players/messages.hpp	/^namespace mods::players::messages {$/;"	n	class:mods::players
meta_utils	mods/meta_utils.cpp	/^namespace mods::meta_utils {$/;"	n	class:mods	file:
meta_utils	mods/meta_utils.hpp	/^namespace mods::meta_utils {$/;"	n	class:mods
metro	mods/fluxkraft/arcon-metropolitan.hpp	/^		metro(std::string_view shape_name,const std::vector<std::string>& directions) {$/;"	f	struct:mods::fluxkraft::arcon::metro
metro	mods/fluxkraft/arcon-metropolitan.hpp	/^	struct metro {$/;"	s	namespace:mods::fluxkraft::arcon
mex_debug	mods/examine.cpp	5;"	d	file:
mex_debug	mods/examine.cpp	7;"	d	file:
mg_map	mods/mobs/mini-gunner.cpp	/^	mg_map_t& mg_map() {$/;"	f	namespace:mods::mobs
mgdp_debug	globals.cpp	1233;"	d	file:
mi_debug	mods/interpreter.cpp	49;"	d	file:
mi_debug	mods/interpreter.cpp	5;"	d	file:
mi_debug	mods/interpreter.cpp	7;"	d	file:
migrations	mods/migrations.cpp	/^namespace mods::migrations {$/;"	n	class:mods	file:
migrations	mods/migrations.hpp	/^namespace mods::migrations {$/;"	n	class:mods
migrations_test	mods/debug-pre-game.hpp	/^	void migrations_test() {$/;"	f	namespace:mods::debug::pre_game
min_level	spells.h	/^	int min_level[NUM_CLASSES];$/;"	m	struct:spell_info_type
min_position	spells.h	/^	byte min_position;	\/* Position for caster	 *\/$/;"	m	struct:spell_info_type
min_rent_cost	config.cpp	/^int min_rent_cost = 100;$/;"	v
min_victim_position	act.social.cpp	/^	int min_victim_position;	\/* Position of victim *\/$/;"	m	struct:social_messg	file:
min_wizlist_lev	config.cpp	/^int min_wizlist_lev = LVL_GOD;$/;"	v
mini_debug	mods/mobs/mini-gunner.cpp	12;"	d	file:
mini_debug	mods/mobs/mini-gunner.cpp	14;"	d	file:
mini_game	mods/orm/mini-game.hpp	/^		mini_game() : game_id(0) {}$/;"	f	struct:mods::orm::mini_game
mini_game	mods/orm/mini-game.hpp	/^	struct mini_game : public mods::orm::orm_base<mini_game,std::string> {$/;"	s	namespace:mods::orm
mini_game_orm_test	mods/debug-pre-game.hpp	/^	void mini_game_orm_test() {$/;"	f	namespace:mods::debug::pre_game
mini_game_payload_t	mods/mini-games.hpp	/^	struct mini_game_payload_t {$/;"	s	namespace:mods::mini_games
mini_game_test	mods/debug-pre-game.hpp	/^	void mini_game_test() {$/;"	f	namespace:mods::debug::pre_game
mini_games	mods/mini-games.cpp	/^namespace mods::mini_games {$/;"	n	class:mods	file:
mini_games	mods/mini-games.hpp	/^namespace mods::mini_games {$/;"	n	class:mods
mini_games	mods/mini-games/line-up.cpp	/^namespace mods::mini_games {$/;"	n	class:mods	file:
mini_games	mods/mini-games/line-up.hpp	/^namespace mods::mini_games {$/;"	n	class:mods
mini_games	mods/mini-games/wires.cpp	/^namespace mods::mini_games {$/;"	n	class:mods	file:
mini_games	mods/mini-games/wires.hpp	/^namespace mods::mini_games {$/;"	n	class:mods
mini_gunner	mods/mobs/extended-types.hpp	/^		static const std::string mini_gunner = std::string("The mob will have a backpack and minigun which he\/she will use as the main weapon.") +$/;"	m	namespace:mods::mobs::desc
mini_gunner	mods/mobs/mini-gunner.cpp	/^	mini_gunner::mini_gunner(uuid_t mob_uuid, std::string variation) {$/;"	f	class:mods::mobs::mini_gunner
mini_gunner	mods/mobs/mini-gunner.hpp	/^	struct mini_gunner : public smart_mob {$/;"	s	namespace:mods::mobs
mini_gunner_behaviour_tree	mods/mobs/mini-gunner-behaviour-tree.cpp	/^namespace mods::mobs::mini_gunner_behaviour_tree {$/;"	n	class:mods::mobs	file:
mini_gunner_behaviour_tree	mods/mobs/mini-gunner-behaviour-tree.hpp	/^namespace mods::mobs::mini_gunner_behaviour_tree {$/;"	n	class:mods::mobs
mini_gunner_ptr	mods/mobs/mini-gunner.hpp	/^static inline std::shared_ptr<mods::mobs::mini_gunner> mini_gunner_ptr(uuid_t u) {$/;"	f
mini_gunner_sentinel	mods/mobs/extended-types.hpp	/^		static const std::string mini_gunner_sentinel = std::string("The mob will have a backpack and minigun which he\/she will use as the main weapon.","This mob stands guard in a single room and will generally face on direction (while watching each room in that direction for a number of rooms).");$/;"	m	namespace:mods::mobs::desc
mini_mud	db.cpp	/^int mini_mud = 0;		\/* mini-mud mode?		 *\/$/;"	v
minibt_debug	mods/mobs/mini-gunner-behaviour-tree.cpp	5;"	d	file:
minibt_debug	mods/mobs/mini-gunner-behaviour-tree.cpp	7;"	d	file:
minimum_level	interpreter.h	/^	sh_int minimum_level;$/;"	m	struct:command_info
minimum_player_level	mods/forge-engine/requirements.hpp	/^		uint32_t minimum_player_level;$/;"	m	struct:mods::forge_engine::requirements_t
minimum_position	interpreter.h	/^	byte minimum_position;$/;"	m	struct:command_info
misc_pref_enum_t	mods/player.hpp	/^			enum misc_pref_enum_t {$/;"	g	struct:mods::player
missed	mods/values.hpp	/^			static inline void missed(T& p){$/;"	f	namespace:mods::values::msg
missing_cash1	shop.h	/^	mods::string missing_cash1;		\/* Message if keeper hasn't got cash	*\/$/;"	m	struct:shop_data
missing_cash2	shop.h	/^	mods::string missing_cash2;		\/* Message if player hasn't got cash	*\/$/;"	m	struct:shop_data
mloops_debug	mods/loops.cpp	4;"	d	file:
mmap_mob_equipment_vnum	mods/orm/mob-equipment-map.hpp	/^		uint64_t mmap_mob_equipment_vnum;$/;"	m	struct:mods::orm::mob_equipment_map
mmap_mob_vnum	mods/orm/mob-equipment-map.hpp	/^		uint64_t mmap_mob_vnum;$/;"	m	struct:mods::orm::mob_equipment_map
mmh_debug	mods/mobs/helpers.hpp	11;"	d
mmh_debug	mods/mobs/helpers.hpp	13;"	d
mo_debug	mods/class-abilities.cpp	11;"	d	file:
mo_debug	mods/class-abilities.cpp	13;"	d	file:
mo_debug	mods/demolitions.cpp	11;"	d	file:
mo_debug	mods/demolitions.cpp	13;"	d	file:
mo_debug	mods/demolitions.cpp	51;"	d	file:
mo_debug	mods/elevator.cpp	12;"	d	file:
mo_debug	mods/elevator.cpp	14;"	d	file:
mo_debug	mods/elevator.cpp	38;"	d	file:
mo_debug	mods/integral-objects-db.cpp	108;"	d	file:
mo_debug	mods/integral-objects-db.cpp	14;"	d	file:
mo_debug	mods/integral-objects-db.cpp	16;"	d	file:
mo_debug	mods/integral-objects.cpp	17;"	d	file:
mo_debug	mods/integral-objects.cpp	19;"	d	file:
mo_debug	mods/integral-objects.cpp	282;"	d	file:
mo_debug	mods/levels.cpp	12;"	d	file:
mo_debug	mods/levels.cpp	14;"	d	file:
mo_debug	mods/levels.cpp	547;"	d	file:
mo_debug	mods/rate-limiting.cpp	10;"	d	file:
mo_debug	mods/rate-limiting.cpp	172;"	d	file:
mo_debug	mods/rate-limiting.cpp	8;"	d	file:
mo_debug	mods/replenish.cpp	13;"	d	file:
mo_debug	mods/replenish.cpp	15;"	d	file:
mob	mods/builder-data.hpp	/^	mob_pavements_t mob;$/;"	m	struct:zone_pavement_t
mob_act_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,19> mob_act_flags = { {$/;"	m	namespace:mods::builder	file:
mob_chmap	globals.cpp	/^		std::map<char_data*,std::shared_ptr<mods::npc>> mob_chmap;$/;"	m	namespace:mods::globals	file:
mob_commands	mods/builder.cpp	/^static std::list<std::shared_ptr<command_t>> mob_commands;$/;"	v	file:
mob_death_trigger	mods/js.cpp	/^		static duk_ret_t mob_death_trigger(duk_context *ctx) {$/;"	f	namespace:mods::js
mob_equipment	globals.cpp	/^namespace mods::mob_equipment {$/;"	n	class:mods	file:
mob_equipment	mods/init.hpp	/^INIT(mods::mob_equipment);$/;"	v
mob_equipment	mods/mob-equipment.cpp	/^namespace mods::mob_equipment {$/;"	n	class:mods	file:
mob_equipment	mods/mob-equipment.hpp	/^namespace mods::mob_equipment {$/;"	n	class:mods
mob_equipment	mods/orm/mob-equipment.hpp	/^		mob_equipment() : id(0) {$/;"	f	struct:mods::orm::mob_equipment
mob_equipment	mods/orm/mob-equipment.hpp	/^	struct mob_equipment : public mods::orm::orm_base<mob_equipment,uint8_t> {$/;"	s	namespace:mods::orm
mob_equipment_list	mods/orm/mob-equipment.cpp	/^	std::deque<std::shared_ptr<mods::orm::mob_equipment>>& mob_equipment_list() {$/;"	f	namespace:mods::orm
mob_equipment_map	mods/orm/mob-equipment-map.hpp	/^		mob_equipment_map() : id(0) {$/;"	f	struct:mods::orm::mob_equipment_map
mob_equipment_map	mods/orm/mob-equipment-map.hpp	/^		mob_equipment_map(const uint64_t& mob_vn, const uint64_t& eq_vn) : id(0) {$/;"	f	struct:mods::orm::mob_equipment_map
mob_equipment_map	mods/orm/mob-equipment-map.hpp	/^	struct mob_equipment_map : public mods::orm::orm_base<mob_equipment_map,uint8_t> {$/;"	s	namespace:mods::orm
mob_equipment_map_list	mods/orm/mob-equipment-map.cpp	/^	std::deque<std::shared_ptr<mods::orm::mob_equipment_map>>& mob_equipment_map_list() {$/;"	f	namespace:mods::orm
mob_has_tree	mods/behaviour_tree_impl.hpp	/^	constexpr int mob_has_tree = ((1 << 19));$/;"	m	namespace:mods::behaviour_tree_impl
mob_id	mods/builder.cpp	/^	mob_rnum mob_id;$/;"	m	struct:command_t	file:
mob_id_argument	mods/builder.cpp	/^	int mob_id_argument;$/;"	m	struct:command_t	file:
mob_index	db.cpp	/^std::vector<index_data> mob_index;	\/* index table for mobile file	 *\/$/;"	v
mob_list	db.cpp	/^std::deque<std::shared_ptr<mods::npc>> mob_list;$/;"	v
mob_list	mods/behaviour_tree_impl.cpp	/^	std::vector<uuid_t>& mob_list() {$/;"	f	namespace:mods::behaviour_tree_impl
mob_map	globals.cpp	/^		std::map<uuid_t,std::shared_ptr<mods::npc>> mob_map;$/;"	m	namespace:mods::globals	file:
mob_pavements_t	mods/builder-data.hpp	/^	typedef std::vector<mob_vnum> mob_pavements_t;$/;"	t	struct:zone_pavement_t
mob_proto	db.cpp	/^std::deque<char_data> mob_proto;	\/* prototypes for mobs		 *\/$/;"	v
mob_ptrmap	globals.cpp	/^		std::map<char_data*,player_ptr_t> mob_ptrmap;$/;"	m	namespace:mods::globals	file:
mob_rnum	mods/index-type.hpp	/^typedef IDXTYPE mob_rnum;$/;"	t
mob_roam	mods/mob-roam.cpp	/^namespace mods::mob_roam {$/;"	n	class:mods	file:
mob_roam	mods/mob-roam.hpp	/^namespace mods::mob_roam {$/;"	n	class:mods
mob_roam	mods/orm/mob-roam.hpp	/^		mob_roam() : id(0) {$/;"	f	struct:mods::orm::mob_roam
mob_roam	mods/orm/mob-roam.hpp	/^	struct mob_roam : public mods::orm::orm_base<mob_roam,std::string> {$/;"	s	namespace:mods::orm
mob_roam_record_t	mods/orm/mob-roam.hpp	/^	struct mob_roam_record_t {$/;"	s	namespace:mods::orm
mob_specials	mods/npc.cpp	/^	mob_special_data& npc::mob_specials(){$/;"	f	class:mods::npc
mob_uuid	globals.cpp	/^		uuid_t mob_uuid() {$/;"	f	namespace:mods::globals
mob_uuid	mods/contract-steps.hpp	/^		uuid_t 					mob_uuid;$/;"	m	namespace:mods::contracts
mob_virtual_number	mods/orm/mob-roam.hpp	/^		uint32_t mob_virtual_number;$/;"	m	struct:mods::orm::mob_roam
mob_virtual_number	mods/orm/mob-roam.hpp	/^		uint32_t mob_virtual_number;$/;"	m	struct:mods::orm::mob_roam_record_t
mob_virtual_number	mods/orm/rifle-index.hpp	/^		std::string mob_virtual_number;$/;"	m	struct:mods::orm::rifle_index
mob_vnum	mods/contract-steps.hpp	/^		uint32_t				mob_vnum;$/;"	m	namespace:mods::contracts
mob_vnum	mods/index-type.hpp	/^typedef IDXTYPE mob_vnum;$/;"	t
mob_vnum_argument	mods/builder.cpp	/^	int mob_vnum_argument;$/;"	m	struct:command_t	file:
mobact	mobact.cpp	/^namespace mods::mobact {$/;"	n	class:mods	file:
mobact	mods/init.hpp	/^INIT(mods::mobact);$/;"	v
mobile_activity	globals.cpp	/^		int mobile_activity(char_data* ch) {$/;"	f	namespace:mods::globals
mobile_activity	mobact.cpp	/^void mobile_activity(void) {$/;"	f
mobile_activity	mods/js.cpp	/^		static duk_ret_t mobile_activity(duk_context *ctx) {$/;"	f	namespace:mods::js
mobs	mods/mob-roam.cpp	/^	std::vector<mob_vnum>& roam_recorder::mobs() {$/;"	f	class:mods::mob_roam::roam_recorder
mobs	mods/mobs/extended-types.cpp	/^namespace mods::mobs {$/;"	n	class:mods	file:
mobs	mods/mobs/extended-types.hpp	/^namespace mods::mobs {$/;"	n	class:mods
mobs	mods/mobs/lowly-security.cpp	/^namespace mods::mobs {$/;"	n	class:mods	file:
mobs	mods/mobs/lowly-security.hpp	/^namespace mods::mobs {$/;"	n	class:mods
mobs	mods/mobs/mini-gunner.cpp	/^namespace mods::mobs {$/;"	n	class:mods	file:
mobs	mods/mobs/mini-gunner.hpp	/^namespace mods::mobs {$/;"	n	class:mods
mobs	mods/mobs/smart-mob.cpp	/^namespace mods::mobs {$/;"	n	class:mods	file:
mobs	mods/mobs/smart-mob.hpp	/^namespace mods::mobs {$/;"	n	class:mods
mock_player_level	mods/classes/super-user-fiddler.cpp	/^	uint8_t mock_player_level(uuid_t& player,uint8_t or_else) {$/;"	f	namespace:mods::classes
mocks	mods/classes/super-user-fiddler.cpp	/^	namespace mocks {$/;"	n	namespace:mods::classes	file:
mode	house.h	/^	int mode;			\/* mode of ownership		*\/$/;"	m	struct:house_control_rec
mode_t	mods/mob-roam.hpp	/^			enum mode_t {$/;"	g	struct:mods::mob_roam::roam_recorder
modifier	structs.h	/^	int16_t modifier;     \/* How much it changes by              *\/$/;"	m	struct:obj_affected_type
modify_affected_flags	mods/js.cpp	/^		static duk_ret_t modify_affected_flags(duk_context *ctx) {$/;"	f	namespace:mods::js
modify_plr_flags	mods/js.cpp	/^		static duk_ret_t modify_plr_flags(duk_context *ctx) {$/;"	f	namespace:mods::js
mods	globals.cpp	/^namespace mods {$/;"	n	file:
mods	globals.hpp	/^namespace mods {$/;"	n
mods	handler.h	/^namespace mods {$/;"	n
mods	mods/acl/color.hpp	/^namespace mods {$/;"	n
mods	mods/acl/config-parser.cpp	/^namespace mods {$/;"	n	file:
mods	mods/acl/config-parser.hpp	/^namespace mods {$/;"	n
mods	mods/acl/lambda.hpp	/^namespace mods {$/;"	n
mods	mods/affects.hpp	/^namespace mods {$/;"	n
mods	mods/affiliations.hpp	/^namespace mods {$/;"	n
mods	mods/ai_state.cpp	/^namespace mods {$/;"	n	file:
mods	mods/ai_state.hpp	/^namespace mods {$/;"	n
mods	mods/ban_system.hpp	/^namespace mods {$/;"	n
mods	mods/behaviour_tree.hpp	/^namespace mods {$/;"	n
mods	mods/behaviour_tree_node.hpp	/^namespace mods {$/;"	n
mods	mods/behaviour_tree_status.hpp	/^namespace mods {$/;"	n
mods	mods/builder.cpp	/^namespace mods {$/;"	n	file:
mods	mods/camera.cpp	/^namespace mods {$/;"	n	file:
mods	mods/camera.hpp	/^namespace mods {$/;"	n
mods	mods/contracts.hpp	/^namespace mods {$/;"	n
mods	mods/cron.hpp	/^namespace mods {$/;"	n
mods	mods/deep-object-parser.cpp	/^namespace mods {$/;"	n	file:
mods	mods/deep-object-parser.hpp	/^namespace mods {$/;"	n
mods	mods/deferred.cpp	/^namespace mods {$/;"	n	file:
mods	mods/deferred.hpp	/^namespace mods {$/;"	n
mods	mods/drone.cpp	/^namespace mods {$/;"	n	file:
mods	mods/drone.hpp	/^namespace mods {$/;"	n
mods	mods/extra_desc_data.cpp	/^namespace mods {$/;"	n	file:
mods	mods/extra_desc_data.hpp	/^namespace mods {$/;"	n
mods	mods/item-types.hpp	/^namespace mods {$/;"	n
mods	mods/js.cpp	/^namespace mods {$/;"	n	file:
mods	mods/js.hpp	/^namespace mods {$/;"	n
mods	mods/karma.cpp	/^namespace mods {$/;"	n	file:
mods	mods/karma.hpp	/^namespace mods {$/;"	n
mods	mods/mobs/mob.cpp	/^namespace mods {$/;"	n	file:
mods	mods/mobs/mob.hpp	/^namespace mods {$/;"	n
mods	mods/npc.cpp	/^namespace mods {$/;"	n	file:
mods	mods/npc.hpp	/^namespace mods {$/;"	n
mods	mods/object.cpp	/^namespace mods {$/;"	n	file:
mods	mods/object.hpp	/^namespace mods {$/;"	n
mods	mods/player-scaffolding.cpp	/^namespace mods {$/;"	n	file:
mods	mods/player-scaffolding.hpp	/^namespace mods {$/;"	n
mods	mods/player.cpp	/^namespace mods {$/;"	n	file:
mods	mods/player.hpp	/^namespace mods {$/;"	n
mods	mods/players/search.hpp	/^namespace mods {$/;"	n
mods	mods/players/util.hpp	/^namespace mods {$/;"	n
mods	mods/prefs.cpp	/^namespace mods {$/;"	n	file:
mods	mods/prefs.hpp	/^namespace mods {$/;"	n
mods	mods/projectile.cpp	/^namespace mods {$/;"	n	file:
mods	mods/projectile.hpp	/^namespace mods {$/;"	n
mods	mods/randomized-items.cpp	/^namespace mods {$/;"	n	file:
mods	mods/randomized-items.hpp	/^namespace mods {$/;"	n
mods	mods/rifle-attachments.cpp	/^namespace mods {$/;"	n	file:
mods	mods/rifle-attachments.hpp	/^namespace mods {$/;"	n
mods	mods/scan.hpp	/^namespace mods {$/;"	n
mods	mods/screen-searcher.hpp	/^namespace mods {$/;"	n
mods	mods/string.cpp	/^namespace mods {$/;"	n	file:
mods	mods/string.hpp	/^namespace mods {$/;"	n
mods	mods/util-conf.hpp	/^namespace mods {$/;"	n
mods	mods/util-map.hpp	/^namespace mods {$/;"	n
mods	mods/yaml.hpp	/^namespace mods {$/;"	n
mods	structs.cpp	/^namespace mods {$/;"	n	file:
mods	structs.h	/^namespace mods {$/;"	n
mods	utils.h	/^namespace mods{$/;"	n
money_desc	handler.cpp	/^const char *money_desc(int amount) {$/;"	f
month	mods/date-time.cpp	/^	static uint8_t month;$/;"	m	namespace:mods::date_time	file:
month_name	constants.cpp	/^const char *month_name[] = {$/;"	v
month_name	constants.hpp	/^const char *month_name[] = {$/;"	v
moon	mods/date-time.cpp	/^	static moon_phase_t moon;$/;"	m	namespace:mods::date_time	file:
moon_phase	mods/date-time.hpp	/^	enum moon_phase {$/;"	g	namespace:mods::date_time
mortal_start_room	config.cpp	/^room_vnum mortal_start_room = 0;$/;"	v
motd	db.cpp	/^std::string motd = "Welcome to siege mud.";		\/* message of the day - mortals *\/$/;"	v
move	mods/mobs/mob.hpp	/^			sh_int& move() {$/;"	f	class:mods::player
move	mods/player.hpp	/^			sh_int& move() {$/;"	f	struct:mods::player
move_gain	limits.cpp	/^int move_gain(char_data *ch) {$/;"	f
move_toward_heading	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto move_toward_heading() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
movement	globals.cpp	/^namespace mods::movement {$/;"	n	class:mods	file:
movement	mods/movement.cpp	/^namespace mods::movement {$/;"	n	class:mods	file:
movement_loss	constants.cpp	/^int movement_loss[] = {$/;"	v
movement_loss	constants.hpp	/^int movement_loss[] =$/;"	v
moving_to_room	mods/player.cpp	/^	bool& player::moving_to_room() {$/;"	f	class:mods::player
mp	mods/player.hpp	/^			int& mp() {$/;"	f	struct:mods::player
mp5	mods/weapons/smg-mp5.cpp	/^	mp5::mp5(){$/;"	f	class:mods::weapons::smg::mp5
mp5	mods/weapons/smg-mp5.hpp	/^		struct mp5 {$/;"	s	namespace:mods::weapons::smg
mpl_	mods/catch2.hpp	/^namespace mpl_{$/;"	n
mpub_aggro	mods/ai_state.hpp	/^			int32_t mpub_aggro;$/;"	m	class:mods::ai_state
mpub_dead	mods/ai_state.hpp	/^			uint32_t mpub_dead;$/;"	m	class:mods::ai_state
mpub_intelligence	mods/ai_state.hpp	/^			int32_t mpub_intelligence;$/;"	m	class:mods::ai_state
mpub_lenient	mods/ai_state.hpp	/^			int32_t mpub_lenient;$/;"	m	class:mods::ai_state
mpub_stunned	mods/ai_state.hpp	/^			uint32_t mpub_stunned;$/;"	m	class:mods::ai_state
mpub_suspicious	mods/ai_state.hpp	/^			int32_t mpub_suspicious;$/;"	m	class:mods::ai_state
mq_debug	structs.cpp	453;"	d	file:
mq_debug	structs.cpp	477;"	d	file:
mra_debug	mods/rooms.hpp	10;"	d
mra_debug	mods/rooms.hpp	12;"	d
msg	mods/object-utils.hpp	/^		std::string msg;$/;"	m	struct:mods::object_utils::YamlFeedExceptionInfo
msg	mods/values.hpp	/^		namespace msg {$/;"	n	namespace:mods::values
msg_index	boards.cpp	/^struct board_msginfo msg_index[NUM_OF_BOARDS][MAX_BOARD_MESSAGES];$/;"	v	typeref:struct:board_msginfo
msg_storage	boards.cpp	/^char *msg_storage[INDEX_SIZE];$/;"	v
msg_storage_taken	boards.cpp	/^int msg_storage_taken[INDEX_SIZE];$/;"	v
mtp_debug	mods/target-practice-db.cpp	15;"	d	file:
mtp_debug	mods/target-practice-db.cpp	17;"	d	file:
mtp_debug	mods/target-practice-db.cpp	38;"	d	file:
mtp_debug	mods/target-practice.cpp	11;"	d	file:
mtp_debug	mods/target-practice.cpp	13;"	d	file:
mtp_debug	mods/target-practice.cpp	62;"	d	file:
mu_debug	mods/util.cpp	1029;"	d	file:
mu_debug	mods/util.cpp	16;"	d	file:
mu_debug	mods/util.cpp	18;"	d	file:
mud_time_passed	utils.cpp	/^struct time_info_data *mud_time_passed(time_t t2, time_t t1) {$/;"	f
mud_time_to_secs	utils.cpp	/^time_t mud_time_to_secs(struct time_info_data *now) {$/;"	f
mudlog	utils.cpp	/^void mudlog(int type, int level, int file, const char *str, ...) {$/;"	f
muzzle	mods/rifle-attachments.hpp	/^			obj_ptr_t muzzle;$/;"	m	struct:mods::rifle_attachments_t
muzzle_velocity	mods/weapon.hpp	/^			int muzzle_velocity;	\/\/ Feet per second$/;"	m	struct:mods::weapon::yaml::rifle_description_t
my_free	mods/lmdb/conf.cpp	/^void my_free(void* ptr){$/;"	f	namespace:gdns
my_free	mods/lmdb/conf.hpp	/^void my_free(void* ptr){$/;"	f	struct:gdns::conf
my_signal	comm.cpp	/^sigfunc *my_signal(int signo, sigfunc *func) {$/;"	f
my_signal	comm.cpp	2171;"	d	file:
mzone_debug	mods/intimidate.hpp	10;"	d
mzone_debug	mods/intimidate.hpp	8;"	d
mzone_debug	mods/zone.hpp	10;"	d
mzone_debug	mods/zone.hpp	8;"	d
name	db.h	/^		std::string name;   \/* name of this zone                  *\/$/;"	m	struct:zone_data
name	db.h	/^	char	name[MAX_NAME_LENGTH+1];$/;"	m	struct:ban_list_element
name	db.h	/^	mods::string name;$/;"	m	struct:player_index_element
name	mods/behaviour_tree.hpp	/^		std::string_view name() const { return m_tree_name; }$/;"	f	struct:mods::behaviour_tree
name	mods/builder.cpp	/^	std::string_view sandbox_data_t::name() const {$/;"	f	class:mods::builder::sandbox_data_t
name	mods/builder.cpp	/^	str_t name;$/;"	m	struct:command_t	file:
name	mods/catch.hpp	/^		const char* name;$/;"	m	struct:Catch::NameAndDesc
name	mods/catch2.hpp	/^    StringRef name;$/;"	m	struct:Catch::NameAndTags
name	mods/classes/pyrexia.hpp	/^				std::string name;$/;"	m	struct:mods::classes::pyrexia::skillset_info_t
name	mods/drone.hpp	/^			const char* name() {$/;"	f	struct:mods::drone_impl
name	mods/fluxkraft/arcon-bar.hpp	/^			std::string name;$/;"	m	struct:mods::fluxkraft::arcon::bar
name	mods/fluxkraft/arcon-metropolitan.hpp	/^		std::string name;$/;"	m	struct:mods::fluxkraft::arcon::metro
name	mods/fluxkraft/shape-dictionary.cpp	/^		std::string name;$/;"	m	struct:mods::fluxkraft::shape_description	file:
name	mods/mini-games.hpp	/^		std::string name;$/;"	m	struct:mods::mini_games::mini_game_payload_t
name	mods/mobs/mob.hpp	/^			std::string& name() {$/;"	f	class:mods::player
name	mods/orm/room.hpp	/^		std::string name;$/;"	m	struct:mods::orm::room
name	mods/player.cpp	/^	std::string& player::name() {$/;"	f	class:mods::player
name	mods/yaml.hpp	/^		std::string name;$/;"	m	struct:mods::yaml::yaml_description_t
name	spells.h	/^	const char *name;	\/* Input size not limited. Originates from string constants. *\/$/;"	m	struct:spell_info_type
name	structs.h	/^		mods::string	name;                  \/* Rooms name 'You are ...'           *\/$/;"	v
name	structs.h	/^		mods::string name;                    \/* Title of object :get etc.        *\/$/;"	m	struct:obj_data
name_from_drinkcon	act.item.cpp	/^void name_from_drinkcon(struct obj_data *obj) {$/;"	f
name_to_drinkcon	act.item.cpp	/^void name_to_drinkcon(struct obj_data *obj, int type) {$/;"	f
nameserver_is_slow	config.cpp	/^int nameserver_is_slow = NO;$/;"	v
namify	mods/prefs.cpp	/^	std::string prefs::namify(const std::string& key,char_data* c) {$/;"	f	class:mods::prefs
nanny	interpreter.cpp	/^void nanny(player_ptr_t p, char * in_arg) {$/;"	f
ndel	mods/lmdb.cpp	/^	void _db_handle::ndel(void* key,std::size_t key_size){$/;"	f	class:mods::lmdb::_db_handle
needs_ada	mods/player.hpp	/^			bool needs_ada() const {$/;"	f	struct:mods::player
needs_dissolve	mods/affects.cpp	/^	static std::set<player_ptr_t> needs_dissolve;$/;"	m	namespace:mods::affects	file:
needs_dissolve	mods/rooms.hpp	/^		static std::map<entity_type_t,dissolver_t> needs_dissolve;$/;"	m	namespace:mods::rooms::affects
needs_regen	mods/mini-games/line-up.hpp	/^		bool needs_regen;$/;"	m	namespace:mods::mini_games
needs_regen	mods/mini-games/wires.hpp	/^		bool needs_regen;$/;"	m	struct:mods::mini_games::wires
negate	mods/catch.hpp	/^		void negate(bool parenthesize) {$/;"	f	struct:Catch::AssertionResultData
negated	mods/catch.hpp	/^		bool negated;$/;"	m	struct:Catch::AssertionResultData
negative_rifle_attribute_buffs	mods/forge-engine/generator.hpp	/^	static const std::vector<rifle_attributes_t> negative_rifle_attribute_buffs = {$/;"	m	namespace:mods::forge_engine
net_cost_per_diem	structs.h	/^	int	net_cost_per_diem;$/;"	m	struct:rent_info
new_context	mods/js.cpp	/^		duk_context* new_context() {$/;"	f	namespace:mods::js
new_descriptor	comm.cpp	/^int new_descriptor(socket_t s) {$/;"	f
new_emp_grenade_object	mods/weapon.cpp	/^	obj_data_ptr_t new_emp_grenade_object() {$/;"	f	namespace:mods::weapon
new_flashbang_grenade_object	mods/weapon.cpp	/^	obj_data_ptr_t new_flashbang_grenade_object() {$/;"	f	namespace:mods::weapon
new_frag_grenade_object	mods/weapon.cpp	/^	obj_data_ptr_t new_frag_grenade_object() {$/;"	f	namespace:mods::weapon
new_incendiary_grenade_object	mods/weapon.cpp	/^	obj_data_ptr_t new_incendiary_grenade_object() {$/;"	f	namespace:mods::weapon
new_npc	mods/builder.cpp	/^	char_data new_npc() {$/;"	f	namespace:mods::builder
new_pistol_object	mods/weapon.cpp	/^	obj_data_ptr_t new_pistol_object() {$/;"	f	namespace:mods::weapon
new_player	comm.cpp	/^player_ptr_t new_player() {$/;"	f
new_player	mods/classes/breacher.cpp	/^		int16_t breacher::new_player(player_ptr_t &player){$/;"	f	class:mods::classes::breacher
new_player	mods/classes/contagion.cpp	/^	int16_t contagion::new_player(player_ptr_t &player, primary_choice_t primary_choice){$/;"	f	class:mods::classes::contagion
new_player	mods/classes/engineer.cpp	/^	int16_t engineer::new_player(player_ptr_t& player, primary_choice_t primary_choice) {$/;"	f	class:mods::classes::engineer
new_player	mods/classes/forge.cpp	/^	int16_t forge::new_player(player_ptr_t &player){$/;"	f	class:mods::classes::forge
new_player	mods/classes/ghost.cpp	/^	int16_t ghost::new_player(player_ptr_t &player){$/;"	f	class:mods::classes::ghost
new_player	mods/classes/marine.cpp	/^	int16_t marine::new_player(player_ptr_t &player, primary_choice_t primary_choice){$/;"	f	class:mods::classes::marine
new_player	mods/classes/medic.cpp	/^	int16_t medic::new_player(player_ptr_t& player, primary_choice_t primary_choice) {$/;"	f	class:mods::classes::medic
new_player	mods/classes/psyop.cpp	/^		int16_t psyop::new_player(player_ptr_t &player, primary_choice_t primary_choice){$/;"	f	class:mods::classes::psyop
new_player	mods/classes/pyrexia.cpp	/^		int16_t pyrexia::new_player(player_ptr_t &player){$/;"	f	class:mods::classes::pyrexia
new_player	mods/classes/sentinel.cpp	/^		int16_t sentinel::new_player(player_ptr_t &player, primary_choice_t primary_choice){$/;"	f	class:mods::classes::sentinel
new_player	mods/classes/sniper.cpp	/^	int16_t sniper::new_player(player_ptr_t& player) {$/;"	f	class:mods::classes::sniper
new_player	mods/classes/support.cpp	/^	int16_t support::new_player(player_ptr_t &player, primary_choice_t primary_choice){$/;"	f	class:mods::classes::support
new_player	mods/classes/syndrome.cpp	/^		int16_t syndrome::new_player(player_ptr_t &player){$/;"	f	class:mods::classes::syndrome
new_record	mods/db.cpp	/^	tuple_status_t new_record(const std::string& table,mutable_map_t* values) {$/;"	f	namespace:mods::db
new_room	mods/builder.cpp	/^	room_data new_room(player_ptr_t player,int direction) {$/;"	f	namespace:mods::builder
new_room	mods/intimidate.cpp	/^	void new_room(room_data* room_ptr){$/;"	f	namespace:mods::zone
new_room	mods/zone.cpp	/^	void new_room(room_data* room_ptr) {$/;"	f	namespace:mods::zone
new_sandbox	mods/builder.cpp	/^	int8_t sandbox_data_t::new_sandbox($/;"	f	class:mods::builder::sandbox_data_t
new_smoke_grenade_object	mods/weapon.cpp	/^	obj_data_ptr_t new_smoke_grenade_object() {$/;"	f	namespace:mods::weapon
new_sniper_rifle_object	mods/weapon.cpp	/^	obj_data_ptr_t new_sniper_rifle_object() {$/;"	f	namespace:mods::weapon
new_txn	mods/lmdb.cpp	/^	_db_handle::tuple_return_type_t _db_handle::new_txn(){$/;"	f	class:mods::lmdb::_db_handle
news	db.cpp	/^char *news = NULL;		\/* mud news			 *\/$/;"	v
news	spell_parser.cpp	/^	const char *news;$/;"	m	struct:syllable	file:
next	db.h	/^	reset_q_element *next;$/;"	m	struct:reset_q_element
next	db.h	/^	struct ban_list_element *next;$/;"	m	struct:ban_list_element	typeref:struct:ban_list_element::ban_list_element
next	graph.cpp	/^	struct bfs_queue_struct *next;$/;"	m	struct:bfs_queue_struct	typeref:struct:bfs_queue_struct::bfs_queue_struct	file:
next	interpreter.h	/^	struct alias_data *next;$/;"	m	struct:alias_data	typeref:struct:alias_data::alias_data
next	mail.h	/^	struct mail_index_type_d *next;	\/* link to next one		*\/$/;"	m	struct:mail_index_type_d	typeref:struct:mail_index_type_d::mail_index_type_d
next	mail.h	/^	struct position_list_type_d *next;$/;"	m	struct:position_list_type_d	typeref:struct:position_list_type_d::position_list_type_d
next	mods/rand.cpp	/^	uint64_t next(void) {$/;"	f	namespace:mods::rand::xoroshiro
next	structs.h	/^		obj_data *next;         \/* For the object list              *\/$/;"	m	struct:obj_data
next_block	mail.h	/^	long	next_block;		\/* if header block, link to next block	*\/$/;"	m	struct:header_data_type
next_combat_list	fight.cpp	/^char_data *next_combat_list = NULL;$/;"	v
next_content	structs.h	/^		obj_data *next_content; \/* For 'contains' lists             *\/$/;"	m	struct:obj_data
next_event_tick	mods/deferred.hpp	/^		uint64_t next_event_tick;$/;"	m	struct:mods::chunk_affect_t
next_mob	act.builder.cpp	/^	static inline int next_mob() {$/;"	f	namespace:mods::adhoc
next_mob_number	act.builder.cpp	/^int next_mob_number() {$/;"	f
next_obj_number	act.builder.cpp	/^int next_obj_number() {$/;"	f
next_object	act.builder.cpp	/^	static inline int next_object() {$/;"	f	namespace:mods::adhoc
next_page	modify.cpp	/^char *next_page(char *str) {$/;"	f
next_room	act.builder.cpp	/^	static inline int next_room() {$/;"	f	namespace:mods::adhoc
next_room_number	act.builder.cpp	/^int next_room_number() {$/;"	f
next_room_pavement_transaction_id	mods/builder.cpp	/^int next_room_pavement_transaction_id() {$/;"	f
next_room_vnum	mods/builder.cpp	/^int next_room_vnum() {$/;"	f
next_row	mods/mini-games/line-up.cpp	/^	void next_row(player_ptr_t& player){$/;"	f	namespace:mods::mini_games
next_row	mods/mini-games/wires.cpp	/^	void wires::next_row(){$/;"	f	class:mods::mini_games::wires
next_zone	act.builder.cpp	/^	static inline int next_zone() {$/;"	f	namespace:mods::adhoc
next_zone_number	act.builder.cpp	/^int next_zone_number() {$/;"	f
next_zone_vnum	mods/builder.cpp	/^int next_zone_vnum() {$/;"	f
nget	mods/lmdb.cpp	/^	int _db_handle::nget(void* key,std::size_t k_size,std::string& in_value){$/;"	f	class:mods::lmdb::_db_handle
nget	mods/lmdb.cpp	/^	int _db_handle::nget(void* key,std::size_t k_size,void* in_value){$/;"	f	class:mods::lmdb::_db_handle
nickname	mods/orm/room.hpp	/^		std::string nickname;$/;"	m	struct:mods::orm::room
nickname	structs.h	/^		mods::string nickname;$/;"	v
nicknames	mods/rooms.cpp	/^	static inline std::map<std::string,room_rnum>& nicknames() {$/;"	f	namespace:mods::rooms
nitems	structs.h	/^	int	nitems;$/;"	m	struct:rent_info
no_command	mods/interpreter.cpp	/^	static command_info no_command = {$/;"	m	namespace:mods::interpreter	file:
no_mail	db.cpp	/^int no_mail = 0;		\/* mail disabled?		 *\/$/;"	v
no_rent_check	db.cpp	/^int no_rent_check = 0;		\/* skip rent check on boot?	 *\/$/;"	v
no_specials	comm.cpp	/^int no_specials = 0;		\/* Suppress special routines *\/$/;"	v
no_such_item1	shop.h	/^	mods::string no_such_item1;		\/* Message if keeper hasn't got an item	*\/$/;"	m	struct:shop_data
no_such_item2	shop.h	/^	mods::string no_such_item2;		\/* Message if player hasn't got an item	*\/$/;"	m	struct:shop_data
node_type_t	mods/behaviour_tree_node.hpp	/^			enum node_type_t { DO_NOTHING, SELECTOR, SEQUENCE, LEAF };$/;"	g	struct:mods::behaviour_tree_node
noexcept	mods/catch2.hpp	/^        SourceLineInfo& operator = ( SourceLineInfo&& ) noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	mods/catch2.hpp	/^        SourceLineInfo( SourceLineInfo&& )              noexcept = default;$/;"	m	struct:Catch::SourceLineInfo
noexcept	mods/catch2.hpp	/^        SourceLineInfo( char const* _file, std::size_t _line ) noexcept$/;"	m	struct:Catch::SourceLineInfo
noexcept	mods/catch2.hpp	/^        StringRef( char const* rawChars ) noexcept;$/;"	m	class:Catch::StringRef
noexcept	mods/catch2.hpp	/^        bool operator < ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	mods/catch2.hpp	/^        bool operator == ( SourceLineInfo const& other ) const noexcept;$/;"	m	struct:Catch::SourceLineInfo
noexcept	mods/catch2.hpp	/^        constexpr StringRef() noexcept = default;$/;"	m	class:Catch::StringRef
noexcept	mods/catch2.hpp	/^    AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;$/;"	m	struct:Catch::AutoReg
noexcept	mods/catch2.hpp	/^    NameAndTags( StringRef const& name_ = StringRef(), StringRef const& tags_ = StringRef() ) noexcept;$/;"	m	struct:Catch::NameAndTags
nonblock	comm.cpp	/^void nonblock(socket_t s) {$/;"	f
not_found	act.social.cpp	/^	char *not_found;$/;"	m	struct:social_messg	file:
now	mods/date-time.cpp	/^	std::string now() {$/;"	f	namespace:mods::date_time::irl
nowhere	mods/builder.cpp	59;"	d	file:
npc	mods/npc.cpp	/^	npc::npc(const mob_rnum & i){$/;"	f	class:mods::npc
npc	mods/npc.hpp	/^	struct npc : public player {$/;"	s	namespace:mods
npc_by_uuid	globals.cpp	/^std::shared_ptr<mods::npc> npc_by_uuid(const uuid_t& u) {$/;"	f
npc_can	mods/skills.cpp	/^	bool npc_can(player_ptr_t& player,int e_name) {$/;"	f	namespace:mods::skills
npc_class_types	constants.cpp	/^const char *npc_class_types[] = {$/;"	v
npc_class_types	constants.hpp	/^const char *npc_class_types[] = {$/;"	v
npc_steal	spec_procs.cpp	/^void npc_steal(char_data *ch, char_data *victim) {$/;"	f
nput	mods/lmdb.cpp	/^	int _db_handle::nput(void* key,std::size_t key_size,void* value,std::size_t v_size){$/;"	f	class:mods::lmdb::_db_handle
null_time	comm.cpp	/^struct timeval null_time;	\/* zero-valued time structure *\/$/;"	v	typeref:struct:timeval
num_directions	mods/scan.hpp	/^		constexpr unsigned num_directions = 6;$/;"	m	namespace:mods::scan
num_followers_charmed	utils.cpp	/^int num_followers_charmed(char_data *ch) {$/;"	f
num_invalid	ban.cpp	/^int num_invalid = 0;$/;"	v
num_of_guests	house.h	/^	int num_of_guests;		\/* how many guests for house	*\/$/;"	m	struct:house_control_rec
num_of_houses	house.cpp	/^int num_of_houses = 0;$/;"	v
num_of_msgs	boards.cpp	/^int num_of_msgs[NUM_OF_BOARDS];$/;"	v
num_pc_in_room	utils.cpp	/^int num_pc_in_room(room_data *room) {$/;"	f
num_type_t	db.h	/^             } num_type_t;$/;"	t	typeref:enum:__anon1
number	db.h	/^		zone_vnum number;	    \/* virtual number of this zone	  *\/$/;"	m	struct:zone_data
number	structs.h	/^		room_vnum number;		\/* Rooms number	(vnum)		      *\/$/;"	v
number_of_times	mods/deferred.hpp	/^		std::size_t number_of_times;$/;"	m	struct:mods::chunk_affect_t
obj	mods/builder-data.hpp	/^	obj_pavements_t obj;$/;"	m	struct:zone_pavement_t
obj	mods/scan.hpp	/^			obj_data* obj;$/;"	m	struct:mods::scan::__anon4
obj	mods/util.hpp	/^		obj_ptr_t obj;$/;"	m	struct:mods::util::objdir_struct
obj	mods/weapons/pistol-czp10.hpp	/^			obj_data_ptr_t obj;$/;"	m	struct:mods::weapons::pistol::czp10
obj	mods/weapons/shotgun-sasg12.hpp	/^			obj_data_ptr_t obj;$/;"	m	struct:mods::weapons::shotgun::sasg12
obj	mods/weapons/smg-mp5.hpp	/^			obj_data_ptr_t obj;$/;"	m	struct:mods::weapons::smg::mp5
obj	mods/weapons/sniper-rifle-l96aw.cpp	/^	obj_data_ptr_t l96aw::obj(){$/;"	f	class:mods::weapons::sniper_rifle::l96aw
obj	mods/weapons/sniper-rifle-psg1.cpp	/^	obj_data_ptr_t psg1::obj(){$/;"	f	class:mods::weapons::sniper_rifle::psg1
obj_affected_type	structs.h	/^struct obj_affected_type {$/;"	s
obj_can_see_player	mods/calc-visibility.cpp	/^	bool obj_can_see_player(obj_ptr_t& obj,player_ptr_t& target) {$/;"	f	namespace:mods::calc_visibility
obj_data	structs.cpp	/^obj_data::obj_data(const obj_data& other) {$/;"	f	class:obj_data
obj_data	structs.cpp	/^obj_data::obj_data(std::string item_type,std::string_view feed_file) {$/;"	f	class:obj_data
obj_data	structs.h	/^		obj_data(int item_type,std::string_view feed_file) :$/;"	f	struct:obj_data
obj_data	structs.h	/^struct obj_data {$/;"	s
obj_file_elem	structs.h	/^struct obj_file_elem {$/;"	s
obj_flag_data	structs.h	/^	obj_flag_data() : type(0), is_ammo(0), holds_ammo(0), type_flag(0),weapon_flags(0),$/;"	f	struct:obj_flag_data
obj_flag_data	structs.h	/^struct obj_flag_data {$/;"	s
obj_flags	structs.h	/^		obj_flag_data obj_flags;\/* Object information               *\/$/;"	m	struct:obj_data
obj_from_char	handler.cpp	/^void obj_from_char(obj_ptr_t in_object) {$/;"	f
obj_from_char	handler.cpp	/^void obj_from_char(struct obj_data *object) {$/;"	f
obj_from_obj	handler.cpp	/^void obj_from_obj(struct obj_data *obj) {$/;"	f
obj_from_room	handler.cpp	/^void obj_from_room(obj_ptr_t in_object) {$/;"	f
obj_from_room	handler.cpp	/^void obj_from_room(struct obj_data *object) {$/;"	f
obj_index	db.cpp	/^std::vector<index_data> obj_index;	\/* index table for object file	 *\/$/;"	v
obj_list	db.cpp	/^std::deque<std::shared_ptr<obj_data>> obj_list;$/;"	v
obj_map	globals.cpp	/^		map_object_list obj_map;$/;"	m	namespace:mods::globals	file:
obj_odmap	globals.cpp	/^		std::map<obj_data*,obj_ptr_t> obj_odmap;$/;"	m	namespace:mods::globals	file:
obj_pavements_t	mods/builder-data.hpp	/^	typedef std::vector<obj_vnum> obj_pavements_t;$/;"	t	struct:zone_pavement_t
obj_proto	db.cpp	/^std::deque<obj_data> obj_proto;	\/* prototypes for objs		 *\/$/;"	v
obj_ptr_to_char	handler.cpp	/^void obj_ptr_to_char(obj_ptr_t  object, player_ptr_t player) {$/;"	f
obj_rnum	mods/index-type.hpp	/^typedef IDXTYPE obj_rnum;$/;"	t
obj_stat_pages	globals.cpp	/^		std::map<obj_vnum,std::string> obj_stat_pages;$/;"	m	namespace:mods::globals	file:
obj_to_char	handler.cpp	/^void obj_to_char(obj_ptr_t  object, player_ptr_t player) {$/;"	f
obj_to_char	handler.cpp	/^void obj_to_char(struct obj_data *object, char_data *ch) {$/;"	f
obj_to_obj	handler.cpp	/^void	obj_to_obj(obj_ptr_t from_object, obj_ptr_t to_object) {$/;"	f
obj_to_room	handler.cpp	/^void obj_to_room(obj_ptr_t in_object, room_rnum room) {$/;"	f
obj_to_room	handler.cpp	/^void obj_to_room(struct obj_data *object, room_rnum room) {$/;"	f
obj_uuid	globals.cpp	/^		uuid_t obj_uuid() {$/;"	f	namespace:mods::globals
obj_vnum	mods/index-type.hpp	/^typedef IDXTYPE obj_vnum;$/;"	t
objdir_struct	mods/util.hpp	/^	struct objdir_struct {$/;"	s	namespace:mods::util
object	mods/object.cpp	/^	object::object(){$/;"	f	class:mods::object
object	mods/object.cpp	/^	object::object(mods::object* ptr) {$/;"	f	class:mods::object
object	mods/object.hpp	/^	struct object {$/;"	s	namespace:mods
object_cost	mods/shop.hpp	/^	static inline int object_cost(obj_data& obj) {$/;"	f	namespace:mods::shop
object_data	db.h	/^	std::vector<uuid_t> object_data;$/;"	m	struct:reset_com
object_db_id	mods/orm/inventory.cpp	/^			uint64_t object_db_id;$/;"	m	struct:mods::orm::inventory::lmdb::player_wear_t	file:
object_end	mods/jx.hpp	/^			compositor& object_end() {$/;"	f	struct:mods::jx::compositor
object_from_room	mods/events.cpp	/^			void object_from_room(uuid_t uuid,room_rnum room){$/;"	f	namespace:mods::events::publish::rooms
object_id	mods/orm/integral-object.hpp	/^		uint64_t object_id;$/;"	m	struct:mods::orm::integral_object
object_info	mods/orm/shop.hpp	/^		shop_objects object_info;$/;"	m	struct:mods::orm::shop
object_info	shop.h	/^	TObjectInfo object_info;$/;"	m	struct:shop_data
object_list_new_owner	handler.cpp	/^void object_list_new_owner(struct obj_data *list, char_data *ch) {$/;"	f
object_placement	mods/builder/object-placement.hpp	/^namespace mods::builder::object_placement {$/;"	n	class:mods::builder
object_room_vnum	mods/orm/integral-object.hpp	/^		uint64_t object_room_vnum;$/;"	m	struct:mods::orm::integral_object
object_start	mods/jx.hpp	/^			compositor& object_start(const std::string& key) {$/;"	f	struct:mods::jx::compositor
object_to_room	mods/events.cpp	/^			void object_to_room(uuid_t uuid,room_rnum room){$/;"	f	namespace:mods::events::publish::rooms
object_type	mods/orm/integral-object.hpp	/^		std::string object_type;$/;"	m	struct:mods::orm::integral_object
object_type_enum_t	mods/object.hpp	/^			enum object_type_enum_t { $/;"	g	struct:mods::object
object_types	mods/object-utils.cpp	/^	std::vector<std::string> object_types() {$/;"	f	namespace:mods::object_utils
object_utils	mods/help.hpp	/^namespace mods::object_utils {$/;"	n	class:mods
object_utils	mods/object-utils.cpp	/^namespace mods::object_utils {$/;"	n	class:mods	file:
object_utils	mods/object-utils.hpp	/^namespace mods::object_utils {$/;"	n	class:mods
object_utils	structs.h	/^namespace mods::object_utils {$/;"	n	class:mods
object_uuid	mods/camera.hpp	/^			uuid_t object_uuid() const { return m_object_uuid; }$/;"	f	class:mods::camera
object_uuid	mods/contract-steps.hpp	/^		uuid_t					object_uuid;$/;"	m	namespace:mods::contracts
object_vnum	mods/orm/integral-object.hpp	/^		uint64_t object_vnum;$/;"	m	struct:mods::orm::integral_object
object_yaml	mods/contract-steps.hpp	/^		std::string			object_yaml;$/;"	m	namespace:mods::contracts
objects	mods/events.cpp	/^		namespace objects {$/;"	n	namespace:mods::events::publish	file:
objects	mods/events.hpp	/^		namespace objects {$/;"	n	namespace:mods::events::publish
objects	mods/orm/shop.hpp	/^		object_list_t objects;$/;"	m	struct:mods::orm::shop_objects
oblique_kick_levels_t	mods/classes/sentinel.hpp	/^		enum oblique_kick_levels_t {$/;"	g	struct:mods::classes::sentinel
offensive	mods/init.hpp	/^INIT(offensive);$/;"	v
offest_y	mods/builder/rectangle-layouts.hpp	/^		uint8_t offest_y;$/;"	m	struct:mods::builder::rectangle_layouts::dimensions_t
offset_x	mods/builder/rectangle-layouts.hpp	/^		uint8_t offset_x;$/;"	m	struct:mods::builder::rectangle_layouts::dimensions_t
ok	mods/lmdb/shm.hpp	/^        bool ok(){ return m_data && m_id; }$/;"	f	class:gdns::shm
ok_damage_shopkeeper	shop.cpp	/^int ok_damage_shopkeeper(char_data *ch, char_data *victim) {$/;"	f
ok_pick	act.movement.cpp	/^int ok_pick(char_data *ch, obj_vnum keynum, int pickproof, int scmd) {$/;"	f
ok_shop_room	shop.cpp	/^int ok_shop_room(int shop_nr, room_vnum room) {$/;"	f
olc_bitvector	olc.cpp	/^void olc_bitvector(int *bv, const char **names, char *arg) {$/;"	f
olc_ch	olc.cpp	/^char_data *olc_ch;$/;"	v
olc_commands	olc.cpp	/^const char *olc_commands[] = {$/;"	v
olc_interpreter	olc.cpp	/^void olc_interpreter(void *targ, int mode, char *arg) {$/;"	f
olc_modes	olc.cpp	/^const char *olc_modes[] = {$/;"	v
olc_set_show	olc.cpp	/^void olc_set_show(char_data *ch, int olc_mode, char *arg) {$/;"	f
olc_string	olc.cpp	/^void olc_string(char **string, size_t maxlen, char *arg) {$/;"	f
on	mods/sql.hpp	/^			compositor<T>& on(std::string_view lhs,$/;"	f	struct:mods::sql::compositor
on_affect_change	mods/affects.hpp	/^			void on_affect_change(TAffects affect,callback_t cb) {$/;"	f	struct:mods::affects::dissolver
on_room_fire_changed_affect	mods/rooms.cpp	/^	void on_room_fire_changed_affect($/;"	f	namespace:mods::rooms::affects
one_argument	interpreter.cpp	/^char *one_argument(char *argument, char *first_arg) {$/;"	f
one_argument	interpreter.cpp	/^char *one_argument(char *argument, char *first_arg,unsigned int max_char) {$/;"	f
one_word	interpreter.cpp	/^char *one_word(char *argument, char *first_arg) {$/;"	f
op	mods/orm/util.hpp	/^		std::string op;$/;"	m	struct:mods::orm::util::statement_t
opCast	mods/catch.hpp	/^		inline T& opCast(T const& t) {$/;"	f	namespace:Catch::Internal
opCast	mods/catch.hpp	/^		inline std::nullptr_t opCast(std::nullptr_t) {$/;"	f	namespace:Catch::Internal
op_and	mods/orm/util.hpp	/^		bool op_and;$/;"	m	struct:mods::orm::util::statement_t
op_and	mods/sql.hpp	/^			compositor<T>& op_and(str_object lhs,$/;"	f	struct:mods::sql::compositor
op_or	mods/orm/util.hpp	/^		bool op_or;$/;"	m	struct:mods::orm::util::statement_t
op_or	mods/sql.hpp	/^			compositor<T>& op_or(str_object lhs,$/;"	f	struct:mods::sql::compositor
open	mods/lmdb.cpp	/^	bool _db_handle::open(){$/;"	f	class:mods::lmdb::_db_handle
open1	shop.h	/^	int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
open2	shop.h	/^	int	 open1, open2;		\/* When does the shop open?		*\/$/;"	m	struct:shop_data
open_dbi	mods/lmdb.cpp	/^	_db_handle::tuple_return_type_t _db_handle::open_dbi(){$/;"	f	class:mods::lmdb::_db_handle
open_logfile	comm.cpp	/^int open_logfile(const char *filename, FILE *stderr_fp) {$/;"	f
opened	mods/bugs-fixtures.cpp	/^	static bool opened = false;$/;"	m	namespace:mods::bugs	file:
operator !	mods/catch.hpp	/^			MatchNotOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator !() const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator !	mods/catch.hpp	/^			bool operator !() const {$/;"	f	class:Catch::Ptr
operator &&	mods/catch.hpp	/^				MatchAllOf<ArgT>& operator && (MatcherBase<ArgT> const& other) {$/;"	f	struct:Catch::Matchers::Impl::MatchAllOf
operator &&	mods/catch.hpp	/^			MatchAllOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator && (MatcherBase const& other) const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator ()	mods/acl/lambda.hpp	/^				void operator() (char_data *ch, char *argument, int cmd, int subcmd){$/;"	f	class:mods::acl::Lambda
operator *	mods/catch.hpp	/^			T& operator*() const {$/;"	f	class:Catch::Ptr
operator *	mods/string.hpp	/^		const char* operator*(){ return m_str.c_str(); }$/;"	f	struct:mods::string
operator +	mods/catch.hpp	/^		std::string operator+() {$/;"	f	struct:Catch::StreamEndStop
operator +	mods/catch.hpp	/^	T const& operator + (T const& value, StreamEndStop) {$/;"	f	namespace:Catch
operator +	mods/catch2.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator ->	mods/catch.hpp	/^			T* operator->() const {$/;"	f	class:Catch::Ptr
operator <<	mods/acl/color.hpp	/^			operator<<(std::ostream& os, const Modifier& mod) {$/;"	f	class:mods::Color::Modifier
operator <<	mods/ai_state.hpp	/^			ai_state& operator<<(const state& m) {$/;"	f	class:mods::ai_state
operator <<	mods/catch.hpp	/^			ResultBuilder& operator << (T const& value) {$/;"	f	class:Catch::ResultBuilder
operator <<	mods/cron.hpp	/^			cron& operator<<(const char* m) {$/;"	f	class:mods::cron
operator <<	mods/cron.hpp	/^			cron& operator<<(const std::string m) {$/;"	f	class:mods::cron
operator <<	mods/cron.hpp	/^			cron& operator<<(int m) {$/;"	f	class:mods::cron
operator <<	mods/drone.hpp	/^			drone_impl& operator<<(const char* m) {$/;"	f	struct:mods::drone_impl
operator <<	mods/drone.hpp	/^			drone_impl& operator<<(const std::string m) {$/;"	f	struct:mods::drone_impl
operator <<	mods/drone.hpp	/^			drone_impl& operator<<(int m) {$/;"	f	struct:mods::drone_impl
operator <<	mods/mobs/mob.hpp	/^			player& operator<<(const char* m) {$/;"	f	class:mods::player
operator <<	mods/mobs/mob.hpp	/^			player& operator<<(const std::string& m) {$/;"	f	class:mods::player
operator <<	mods/mobs/mob.hpp	/^			player& operator<<(int m) {$/;"	f	class:mods::player
operator <<	mods/player.hpp	/^			player& operator<<(const char* m) {$/;"	f	struct:mods::player
operator <<	mods/player.hpp	/^			player& operator<<(const mods::string& m) {$/;"	f	struct:mods::player
operator <<	mods/player.hpp	/^			player& operator<<(const std::string& m) {$/;"	f	struct:mods::player
operator <<	mods/player.hpp	/^			player& operator<<(int m) {$/;"	f	struct:mods::player
operator =	mods/catch.hpp	/^			Ptr& operator = (Ptr const& other) {$/;"	f	class:Catch::Ptr
operator =	mods/catch.hpp	/^			Ptr& operator = (T* p) {$/;"	f	class:Catch::Ptr
operator =	mods/catch.hpp	/^		CopyableStream& operator=(CopyableStream const& other) {$/;"	f	struct:Catch::CopyableStream
operator =	mods/string.cpp	/^	string& string::operator=(char* other){$/;"	f	class:mods::string
operator =	mods/string.cpp	/^	string& string::operator=(const char* other){$/;"	f	class:mods::string
operator =	mods/string.cpp	/^	string& string::operator=(const std::string & other){$/;"	f	class:mods::string
operator =	mods/string.cpp	/^	string& string::operator=(string other){$/;"	f	class:mods::string
operator =	structs.cpp	/^obj_data& obj_data::operator=(obj_data& other) {$/;"	f	class:obj_data
operator SafeBool::type	mods/catch.hpp	/^			operator SafeBool::type() const {$/;"	f	class:Catch::Ptr
operator bool	mods/string.hpp	/^		operator bool() const { return m_str.length(); }$/;"	f	struct:mods::string
operator char*	mods/string.hpp	/^		operator char*() const { return const_cast<char*>(c_str()); }$/;"	f	struct:mods::string
operator chdata_ptr	mods/mobs/mob.hpp	/^			operator chdata_ptr() const {$/;"	f	class:mods::player
operator chdata_ptr	mods/player.hpp	/^			operator chdata_ptr() const {$/;"	f	struct:mods::player
operator chdata_ptr	mods/player.hpp	/^			operator chdata_ptr() {$/;"	f	struct:mods::player
operator const char*	mods/string.hpp	/^		explicit operator const char*() const { return m_str.length() == 0 ? nullptr : m_str.c_str(); }$/;"	f	struct:mods::string
operator std::string	mods/catch2.hpp	/^        explicit operator std::string() const {$/;"	f	class:Catch::StringRef
operator std::string	mods/string.hpp	/^		explicit operator std::string() const { return m_str; }$/;"	f	struct:mods::string
operator |	mods/catch.hpp	/^	inline ResultDisposition::Flags operator | (ResultDisposition::Flags lhs, ResultDisposition::Flags rhs) {$/;"	f	namespace:Catch
operator ||	mods/catch.hpp	/^				MatchAnyOf<ArgT>& operator || (MatcherBase<ArgT> const& other) {$/;"	f	struct:Catch::Matchers::Impl::MatchAnyOf
operator ||	mods/catch.hpp	/^			MatchAnyOf<ComparatorT> MatcherBase<ObjectT, ComparatorT>::operator || (MatcherBase const& other) const {$/;"	f	class:Catch::Matchers::Impl::MatcherBase
operator_str	shop.cpp	/^const char *operator_str[] = {$/;"	v
opposite_dir	globals.cpp	/^		int opposite_dir(int dir) {$/;"	f	namespace:mods::globals
optr	globals.cpp	/^obj_ptr_t optr(obj_data* in_obj) {$/;"	f
optr_by_uuid	globals.cpp	/^obj_ptr_t optr_by_uuid(uuid_t id) {$/;"	f
optr_opt	globals.cpp	/^std::optional<obj_ptr_t> optr_opt(uuid_t obj_uuid) {$/;"	f
order	mods/mini-games.hpp	/^		int order;$/;"	m	struct:mods::mini_games::mini_game_payload_t
order_by	mods/sql.hpp	/^			compositor<T>& order_by(std::string column,std::string direction) {$/;"	f	struct:mods::sql::compositor
org	spell_parser.cpp	/^	const char *org;$/;"	m	struct:syllable	file:
orig_exit_group_type	mods/lmdb/gethostbyname.cpp	/^typedef void (*orig_exit_group_type)(int status);$/;"	t	file:
orig_exit_type	mods/lmdb/gethostbyname.cpp	/^typedef void (*orig_exit_type)(int status);$/;"	t	file:
orig_getaddrinfo_f_type	mods/lmdb/gethostbyname.cpp	/^typedef int (*orig_getaddrinfo_f_type)(const char* node,$/;"	t	file:
orig_gethostbyname_f_type	mods/lmdb/gethostbyname.cpp	/^typedef hostent *(*orig_gethostbyname_f_type)(const char*name);$/;"	t	file:
orig_gethostbyname_r_f_type	mods/lmdb/gethostbyname.cpp	/^typedef int (*orig_gethostbyname_r_f_type)(const char*name,$/;"	t	file:
orig_send_type	mods/lmdb/gethostbyname.cpp	/^typedef ssize_t (*orig_send_type)(int,const void*,size_t,int);$/;"	t	file:
original_rows	mods/mini-games/line-up.hpp	/^		std::vector<std::vector<uint8_t>> original_rows;$/;"	m	namespace:mods::mini_games
orm	mods/builder/conbuild.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/contract-steps.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/contract-types.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/forge-engine/item-type-chooser.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/mobs/mini-gunner.hpp	/^	namespace mg::orm {$/;"	n	class:mods::mobs::mg
orm	mods/orm/armor-index.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/armor-index.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/base.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/base.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/breacher.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/breacher.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/camera-feed.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/camera-feed.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/chargen.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/chargen.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/contract-steps.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/contract-steps.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/contracts.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/contracts.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/door-event.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/door-event.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/elevator.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/elevator.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/engineer.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/engineer.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/fetcher.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/forge.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/forge.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/ghost.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/ghost.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/hq.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/hq.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/integral-object.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/integral-object.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/marine.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/marine.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/medic.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/medic.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/mini-game.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/mini-game.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/mob-equipment-map.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/mob-equipment-map.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/mob-equipment.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/mob-equipment.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/mob-roam.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/mob-roam.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/orm-base.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/player-base-ability.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/player-base-ability.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/player-contract-state.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/player-contract-state.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/player-skill-points.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/player-skill-points.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/player-skill-usage.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/player-skill-usage.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/pyrexia.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/pyrexia.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/quotes.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/rifle-attachment.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/rifle-attachment.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/rifle-index.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/rifle-index.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/rifle-instance.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/rifle-instance.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/room.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/room.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/shop.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/shop.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/skill-points.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/skill-points.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/skill-trees.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/skill-trees.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/sniper.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/sniper.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/striker.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/striker.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/support.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/support.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	mods/orm/syndrome.cpp	/^namespace mods::orm {$/;"	n	class:mods	file:
orm	mods/orm/syndrome.hpp	/^namespace mods::orm {$/;"	n	class:mods
orm	shop.h	/^namespace mods::orm {$/;"	n	class:mods
orm_base	mods/orm/orm-base.hpp	/^	struct orm_base {$/;"	s	namespace:mods::orm
orm_base	mods/pq.hpp	/^struct orm_base {$/;"	s
orm_contract_list	mods/orm/contracts.cpp	/^	std::deque<std::shared_ptr<mods::orm::contracts>>& orm_contract_list() {$/;"	f	namespace:mods::orm
oss	mods/catch.hpp	/^		std::ostringstream oss;$/;"	m	struct:Catch::CopyableStream
ostream	mods/catch2.hpp	/^    auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;$/;"	m	class:Catch::std
other	mods/catch.hpp	/^		SourceLineInfo(SourceLineInfo const& other)          = default;$/;"	m	struct:Catch::SourceLineInfo
other	mods/catch2.hpp	/^        SourceLineInfo( SourceLineInfo const& other )            = default;$/;"	m	struct:Catch::SourceLineInfo
others_auto	act.social.cpp	/^	char *others_auto;$/;"	m	struct:social_messg	file:
others_found	act.social.cpp	/^	char *others_found;$/;"	m	struct:social_messg	file:
others_no_arg	act.social.cpp	/^	char *others_no_arg;$/;"	m	struct:social_messg	file:
out	mods/bugs-fixtures.cpp	/^	static std::shared_ptr<std::ofstream> out;$/;"	m	namespace:mods::bugs	file:
outofammo	mods/values.hpp	/^			static inline void outofammo(T& p){$/;"	f	namespace:mods::values::msg
overhead	structs.cpp	/^std::string_view room_data::overhead(const lense_type_t& lense) {$/;"	f	class:room_data
overhead_map	mods/overhead_map.cpp	/^namespace mods::overhead_map {$/;"	n	class:mods	file:
overhead_map	mods/overhead_map.hpp	/^namespace mods::overhead_map {$/;"	n	class:mods
overview	mods/util.cpp	/^	std::string overview() {$/;"	f	namespace:mods::util
owner	house.h	/^	long owner;			\/* idnum of house's owner	*\/$/;"	m	struct:house_control_rec
owner	mods/rifle-attachments.hpp	/^			uuid_t owner() const {$/;"	f	struct:mods::rifle_attachments_t
owner_drone	mods/drone.cpp	/^		std::pair<player_ptr_t,player_ptr_t> owner_drone(uuid_t owner_uuid){$/;"	f	namespace:mods::drone
owner_uuid	mods/camera.hpp	/^			uuid_t owner_uuid() const { return m_player; }$/;"	f	class:mods::camera
pad_room	globals.cpp	/^		void pad_room(int room,char_data* ch,int door) {$/;"	f	namespace:mods::globals
pad_string	mods/skills.cpp	/^std::string pad_string(std::string_view str,std::size_t to, std::string with) {$/;"	f
page	mods/mobs/mob.cpp	/^	void player::page(int pg) {$/;"	f	class:mods::player
page	mods/player.cpp	/^	void player::page(int pg) {$/;"	f	class:mods::player
page_string	modify.cpp	/^void page_string(mods::descriptor_data d, char *str, int keep_internal) {$/;"	f
pager_clear	mods/mobs/mob.cpp	/^	void player::pager_clear() {$/;"	f	class:mods::player
pager_clear	mods/player.cpp	/^	void player::pager_clear() {$/;"	f	class:mods::player
pager_end	mods/mobs/mob.cpp	/^	player& player::pager_end() {$/;"	f	class:mods::player
pager_end	mods/player.cpp	/^	player& player::pager_end() {$/;"	f	class:mods::player
pager_next_page	mods/mobs/mob.cpp	/^	void player::pager_next_page() {$/;"	f	class:mods::player
pager_next_page	mods/player.cpp	/^	void player::pager_next_page() {$/;"	f	class:mods::player
pager_start	mods/mobs/mob.cpp	/^	player& player::pager_start() {$/;"	f	class:mods::player
pager_start	mods/player.cpp	/^	player& player::pager_start() {$/;"	f	class:mods::player
pages	mods/help.cpp	/^namespace mods::help::pages {$/;"	n	class:mods::help	file:
paginate_option	mods/builder.hpp	/^static inline std::string paginate_option(std::string_view parent_command, std::string_view entity_name) {$/;"	f
paginate_string	modify.cpp	/^void paginate_string(char *str, mods::descriptor_data d) {$/;"	f
paging	mods/mobs/mob.hpp	/^			bool paging() const {$/;"	f	class:mods::player
paging	mods/player.hpp	/^			bool paging() const {$/;"	f	struct:mods::player
parenthesized	mods/catch.hpp	/^		bool parenthesized;$/;"	m	struct:Catch::AssertionResultData
parse	mods/acl/config-parser.cpp	/^        int FileParser::parse(){$/;"	f	class:mods::acl::FileParser
parse	mods/builder.cpp	/^	parse_response_t parse(str_t argument,player_ptr_t& player) {$/;"	f	struct:command_t
parse	mods/lmdb/conf.cpp	/^int conf<StringType>::parse(void){$/;"	f	class:gdns::conf
parse	mods/lmdb/conf.hpp	/^int parse(void){$/;"	f	struct:gdns::conf
parse_class	class.cpp	/^player_class_t parse_class(std::string a) {$/;"	f
parse_csv_to_task_flag	mods/contract-steps.hpp	/^	static inline task_t parse_csv_to_task_flag(std::string_view csv) {$/;"	f
parse_dimensions	mods/builder/coordinates.cpp	/^	std::tuple<bool,str_vec_t> parse_dimensions(str_t input,dimensions_t* output){$/;"	f	namespace:mods::builder::rectangle_layouts
parse_dimensions	mods/builder/rectangle-layouts.cpp	/^	std::tuple<bool,str_vec_t> parse_dimensions(str_t input,dimensions_t* output){$/;"	f	namespace:mods::builder::rectangle_layouts
parse_direction	mods/util.cpp	/^	int parse_direction(std::string_view arg) {$/;"	f	namespace:mods::util
parse_direction	mods/util.cpp	/^	int parse_direction(std::string_view arg, int start_at, int* last_index) {$/;"	f	namespace:mods::util
parse_direction_count	mods/util.cpp	/^	std::tuple<bool,direction_t,uint8_t> parse_direction_count(std::vector<std::string>& vec_args) {$/;"	f	namespace:mods::util
parse_direction_count_optional	mods/util.cpp	/^	std::optional<std::pair<direction_t,uint8_t>> parse_direction_count_optional(std::vector<std::string>& vec_args) {$/;"	f	namespace:mods::util
parse_enhanced_mob	db.cpp	/^void parse_enhanced_mob(FILE *mob_f, int i, int nr) {$/;"	f
parse_espec	db.cpp	/^void parse_espec(char *buf, int i, int nr) {$/;"	f
parse_help	mods/util.cpp	/^	bool parse_help(std::string_view argument) {$/;"	f	namespace:mods::util
parse_ip	comm.cpp	/^int parse_ip(const char *addr, struct in_addr *inaddr) {$/;"	f
parse_mobile	db.cpp	/^void parse_mobile(FILE *mob_f, int nr) {$/;"	f
parse_objdir	mods/util.cpp	/^	objdir_t parse_objdir(player_ptr_t& player,std::string_view arg) {$/;"	f	namespace:mods::util
parse_object	db.cpp	/^char *parse_object(FILE *obj_f, int nr) {$/;"	f
parse_object	mods/util.cpp	/^	obj_ptr_t parse_object(player_ptr_t& player,std::string_view arg, int start_at, int* last_index) {$/;"	f	namespace:mods::util
parse_object_vec	mods/util.cpp	/^	obj_ptr_t parse_object_vec(player_ptr_t& player,std::vector<std::string>& vec_args) {$/;"	f	namespace:mods::util
parse_object_with_capability	mods/util.cpp	/^	obj_ptr_t parse_object_with_capability(player_ptr_t& player,std::string_view arg, int start_at, int* last_index, mods::weapon::type::type_list type, std::vector<int>& types) {$/;"	f	namespace:mods::util
parse_rarity	mods/yaml.cpp	/^	float parse_rarity(const std::string& rarity_string) {$/;"	f	namespace:mods::yaml
parse_response_t	mods/builder.cpp	/^enum parse_response_t {$/;"	g	file:
parse_room	db.cpp	/^void parse_room(FILE *fl, int virtual_nr) {$/;"	f
parse_simple_mob	db.cpp	/^void parse_simple_mob(FILE *mob_f, int i, int nr) {$/;"	f
parse_sql_mobiles	db.cpp	/^void parse_sql_mobiles() {$/;"	f
parse_sql_objects	db.cpp	/^int parse_sql_objects() {$/;"	f
parse_sql_player	db.cpp	/^bool parse_sql_player(player_ptr_t player_ptr) {$/;"	f
parse_sql_rooms	db.cpp	/^std::tuple<int16_t,std::string> parse_sql_rooms() {$/;"	f
parse_sql_shops	db.cpp	/^int parse_sql_shops() {$/;"	f
parse_sql_zones	db.cpp	/^std::tuple<int16_t,std::string> parse_sql_zones() {$/;"	f
parse_target_string	mods/contract-steps.hpp	/^	static inline target_t parse_target_string(std::string_view t) {$/;"	f
parsed_type_t	mods/deep-object-parser.cpp	/^	enum parsed_type_t {$/;"	g	namespace:mods	file:
password	mods/auto-login.hpp	/^	static std::string password;$/;"	m	namespace:mods::auto_login
password	mods/player.hpp	/^			std::string password() {$/;"	f	struct:mods::player
path	mods/js-path.hpp	/^namespace mods::js::path { $/;"	n	class:mods::js
pave_continue	mods/builder.cpp	/^	std::tuple<int8_t,std::string> pave_continue(player_ptr_t& player) {$/;"	f	namespace:mods::builder
pave_off	mods/builder.cpp	/^	std::tuple<int8_t,std::string> pave_off(player_ptr_t& player) {$/;"	f	namespace:mods::builder
pave_on	mods/builder.cpp	/^	std::tuple<int8_t,std::string> pave_on(player_ptr_t& player,std::string_view sandbox_name) {$/;"	f	namespace:mods::builder
pave_once	mods/rooms.cpp	/^	void pave_once(room_rnum room,direction_t door) {$/;"	f	namespace:mods::rooms
pave_open_direction	mods/doors.hpp	/^	static inline void pave_open_direction(room_rnum room, int8_t direction) {$/;"	f	namespace:mods::doors
pba	mods/init.hpp	/^INIT(mods::orm::pba);$/;"	v
pba	mods/orm/player-base-ability.cpp	/^	namespace pba {$/;"	n	namespace:mods::orm	file:
pba_armor	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_armor;$/;"	m	struct:mods::orm::player_base_ability
pba_cha	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_cha;$/;"	m	struct:mods::orm::player_base_ability
pba_chemistry	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_chemistry;$/;"	m	struct:mods::orm::player_base_ability
pba_con	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_con;$/;"	m	struct:mods::orm::player_base_ability
pba_demolitions	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_demolitions;$/;"	m	struct:mods::orm::player_base_ability
pba_dex	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_dex;$/;"	m	struct:mods::orm::player_base_ability
pba_electronics	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_electronics;$/;"	m	struct:mods::orm::player_base_ability
pba_id	mods/orm/player-base-ability.hpp	/^		uint64_t pba_id;$/;"	m	struct:mods::orm::player_base_ability
pba_intel	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_intel;$/;"	m	struct:mods::orm::player_base_ability
pba_marksmanship	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_marksmanship;$/;"	m	struct:mods::orm::player_base_ability
pba_medical	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_medical;$/;"	m	struct:mods::orm::player_base_ability
pba_player_id	mods/orm/player-base-ability.hpp	/^		uint64_t pba_player_id;$/;"	m	struct:mods::orm::player_base_ability
pba_sniping	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_sniping;$/;"	m	struct:mods::orm::player_base_ability
pba_str	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_str;$/;"	m	struct:mods::orm::player_base_ability
pba_str_add	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_str_add;$/;"	m	struct:mods::orm::player_base_ability
pba_strategy	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_strategy;$/;"	m	struct:mods::orm::player_base_ability
pba_weapon_handling	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_weapon_handling;$/;"	m	struct:mods::orm::player_base_ability
pba_wis	mods/orm/player-base-ability.hpp	/^		skill_measurement_t pba_wis;$/;"	m	struct:mods::orm::player_base_ability
pbr_debug	mods/projectile.cpp	21;"	d	file:
pbr_debug	mods/projectile.cpp	23;"	d	file:
pc_class_types	class.cpp	/^const char *pc_class_types[] = {$/;"	v
pc_contract_vnum	mods/orm/player-contract-state.hpp	/^		contract_vnum_t pc_contract_vnum;$/;"	m	struct:mods::orm::player_contract_state
pc_player_id	mods/orm/player-contract-state.hpp	/^		uint64_t pc_player_id;$/;"	m	struct:mods::orm::player_contract_state
pc_state_data	mods/orm/player-contract-state.hpp	/^		std::string pc_state_data;$/;"	m	struct:mods::orm::player_contract_state
pclass_description	mods/orm/chargen.hpp	/^		std::string pclass_description;$/;"	m	struct:mods::orm::player_classes
pclass_name	mods/orm/chargen.hpp	/^		std::string pclass_name;$/;"	m	struct:mods::orm::player_classes
pclass_to_real_pclass	mods/forge-engine/generator.hpp	/^			player_class_t pclass_to_real_pclass(player_class_types_t type) {$/;"	f	struct:mods::forge_engine::generator
pcnpc	act.wizard.cpp	/^	const char pcnpc;$/;"	m	struct:set_struct	file:
people	structs.h	/^		char_data *people;    \/* List of NPC \/ PC in room           *\/$/;"	v
performOptionalSelector	mods/catch.hpp	/^inline id performOptionalSelector(id obj, SEL sel) {$/;"	f
performOptionalSelector	mods/catch2.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
perform_act	comm.cpp	/^void perform_act(const char *orig, char_data *ch, obj_data *obj,$/;"	f
perform_alias	interpreter.cpp	/^int perform_alias(mods::descriptor_data& d, char *orig, size_t maxlen) {$/;"	f
perform_auto_login	comm.cpp	/^void perform_auto_login(player_ptr_t& player) {$/;"	f
perform_blast_radius	mods/projectile.cpp	/^		void perform_blast_radius($/;"	f	namespace:mods::projectile
perform_breach	mods/doors.hpp	/^	static inline void perform_breach(uuid_t obj_uuid,uuid_t player_uuid,int8_t direction) {$/;"	f	namespace:mods::doors
perform_damage_cleanup	mods/weapons/damage-types.cpp	/^		int perform_damage_cleanup(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
perform_drop	act.item.cpp	/^int perform_drop(char_data *ch, struct obj_data *obj,$/;"	f
perform_drop_gold	act.item.cpp	/^void perform_drop_gold(char_data *ch, int amount,$/;"	f
perform_dupe_check	interpreter.cpp	/^int64_t perform_dupe_check(player_ptr_t p) {$/;"	f
perform_equip_calculations	mods/player.cpp	/^	void player::perform_equip_calculations(int pos,bool equip) {$/;"	f	class:mods::player
perform_get_from_container	act.item.cpp	/^void perform_get_from_container(char_data *ch, struct obj_data *obj,$/;"	f
perform_get_from_room	act.item.cpp	/^int perform_get_from_room(char_data *ch, struct obj_data *obj) {$/;"	f
perform_give	act.item.cpp	/^void perform_give(char_data *ch, char_data *vict,$/;"	f
perform_give_gold	act.item.cpp	/^void perform_give_gold(char_data *ch, char_data *vict,$/;"	f
perform_group	act.other.cpp	/^int perform_group(char_data *ch, char_data *vict) {$/;"	f
perform_group_gain	fight.cpp	/^void perform_group_gain(char_data *ch, int base,$/;"	f
perform_immort_invis	act.wizard.cpp	/^void perform_immort_invis(char_data *ch, int level) {$/;"	f
perform_immort_vis	act.wizard.cpp	/^void perform_immort_vis(char_data *ch) {$/;"	f
perform_immort_where	act.informative.cpp	/^void perform_immort_where(char_data *ch, char *arg) {$/;"	f
perform_mag_groups	magic.cpp	/^void perform_mag_groups(int level, char_data *ch,$/;"	f
perform_mortal_where	act.informative.cpp	/^void perform_mortal_where(char_data *ch, char *arg) {$/;"	f
perform_move	act.movement.cpp	/^int perform_move(char_data *ch, int dir, int need_specials_check) {$/;"	f
perform_put	act.item.cpp	/^void perform_put(char_data *ch, struct obj_data *obj,$/;"	f
perform_random_non_hostile_action	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto perform_random_non_hostile_action() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
perform_remove	act.item.cpp	/^void perform_remove(player_ptr_t player, int pos) {$/;"	f
perform_set	act.wizard.cpp	/^int perform_set(char_data *ch, char_data *vict, int mode,$/;"	f
perform_socket_read	comm.cpp	/^ssize_t perform_socket_read(socket_t desc, char *read_point, size_t space_left) {$/;"	f
perform_socket_write	comm.cpp	/^ssize_t perform_socket_write(socket_t desc, const char *txt, size_t length) {$/;"	f
perform_subst	comm.cpp	/^int perform_subst(mods::descriptor_data& t, char *orig, char *subst) {$/;"	f
perform_tell	act.comm.cpp	/^void perform_tell(char_data *ch, char_data *vict, char *arg) {$/;"	f
perform_thermite_breach	mods/doors.hpp	/^	static inline void perform_thermite_breach(uuid_t obj_uuid,uuid_t player_uuid,int8_t direction) {$/;"	f	namespace:mods::doors
perform_violence	fight.cpp	/^void perform_violence() {$/;"	f
perform_wear	act.item.cpp	/^void perform_wear(char_data *ch, struct obj_data *obj, int where) {$/;"	f
perform_wear_with_confirmation	act.item.cpp	/^bool perform_wear_with_confirmation(player_ptr_t& player, obj_ptr_t& in_obj, int where) {$/;"	f
pet_shops	spec_assign.cpp	/^SPECIAL(pet_shops);$/;"	v
pet_shops	spec_procs.cpp	/^SPECIAL(pet_shops);$/;"	v
peter	castle.cpp	/^SPECIAL(peter);$/;"	v
pfind	mods/pfind.cpp	/^namespace mods::pfind {$/;"	n	class:mods	file:
pfind	mods/pfind.hpp	/^namespace mods::pfind {$/;"	n	class:mods
pg_timestamp_to_long	mods/util.cpp	/^	long pg_timestamp_to_long(std::string timestamp) {$/;"	f	namespace:mods::util
pgdata_class	mods/orm/chargen.hpp	/^		uint64_t pgdata_class;\/\/INTEGER NOT NULL REFERENCES player_classes(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_class_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<player_classes> pgdata_class_ptr;\/\/INTEGER NOT NULL REFERENCES player_classes(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_player_id	mods/orm/chargen.hpp	/^		uint64_t pgdata_player_id;\/\/INTEGER NOT NULL REFERENCES player(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_player_id_ptr	mods/orm/chargen.hpp	/^		player_ptr_t pgdata_player_id_ptr;\/\/INTEGER NOT NULL REFERENCES player(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_race	mods/orm/chargen.hpp	/^		uint64_t pgdata_race;\/\/INTEGER NOT NULL REFERENCES player_races(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_race_perks	mods/orm/chargen.hpp	/^		uint64_t pgdata_race_perks;\/\/INTEGER NOT NULL REFERENCES player_race_perks(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_race_perks_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<player_race_perks> pgdata_race_perks_ptr;\/\/INTEGER NOT NULL REFERENCES player_race_perks(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_race_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<player_races> pgdata_race_ptr;\/\/ INTEGER NOT NULL REFERENCES player_races(id),$/;"	m	struct:mods::orm::player_generated_data
pgdata_specialty_skill	mods/orm/chargen.hpp	/^		uint64_t pgdata_specialty_skill;\/\/INTEGER REFERENCES specialty_skills(id)$/;"	m	struct:mods::orm::player_generated_data
pgdata_specialty_skill_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<specialty_skills> pgdata_specialty_skill_ptr;\/\/ INTEGER REFERENCES specialty_skills(id)$/;"	m	struct:mods::orm::player_generated_data
phase_ring_buffer	mods/date-time.cpp	/^	std::array<moon_phase_t,12> phase_ring_buffer = {$/;"	m	namespace:mods::date_time	file:
phase_ring_buffer_index	mods/date-time.cpp	/^	static uint8_t phase_ring_buffer_index;$/;"	m	namespace:mods::date_time	file:
pistol	mods/weapons/pistol-czp10.cpp	/^namespace mods::weapons::pistol {$/;"	n	class:mods::weapons	file:
pistol	mods/weapons/pistol-czp10.hpp	/^namespace mods::weapons::pistol {$/;"	n	class:mods::weapons
pistols	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> pistols;$/;"	m	namespace:mods::forge_engine	file:
pk_allowed	config.cpp	/^int pk_allowed = YES;$/;"	v
pk_id	mods/player.hpp	/^			aligned_int_t pk_id() const {$/;"	f	struct:mods::player
pkid_example_grammar	mods/deep-object-parser.cpp	/^	const std::string pkid_example_grammar = "rifle|pkid:7{sight:attachment|pkid:4,muzzle:compensator.yml,under_barrel:gm32grenadelauncher.yml}";$/;"	m	namespace:mods	file:
place_keepers_in_rooms	mods/orm/shop.cpp	/^	int16_t shop_rooms::place_keepers_in_rooms(mob_vnum mob_vnum_id){$/;"	f	class:mods::orm::shop_rooms
plant_claymore	mods/demolitions.cpp	/^	void plant_claymore(player_ptr_t& player, int direction, obj_ptr_t& obj) {$/;"	f	namespace:mods::demolitions
player	mods/classes/breacher.cpp	/^		player_ptr_t 	breacher::player(){$/;"	f	class:mods::classes::breacher
player	mods/classes/contagion.cpp	/^	player_ptr_t 	contagion::player(){$/;"	f	class:mods::classes::contagion
player	mods/classes/engineer.cpp	/^	player_ptr_t 	engineer::player() {$/;"	f	class:mods::classes::engineer
player	mods/classes/forge.cpp	/^	player_ptr_t 	forge::player(){$/;"	f	class:mods::classes::forge
player	mods/classes/ghost.cpp	/^	player_ptr_t 	ghost::player(){$/;"	f	class:mods::classes::ghost
player	mods/classes/marine.cpp	/^	player_ptr_t 	marine::player(){$/;"	f	class:mods::classes::marine
player	mods/classes/medic.cpp	/^	player_ptr_t 	medic::player() {$/;"	f	class:mods::classes::medic
player	mods/classes/psyop.cpp	/^	player_ptr_t 	psyop::player(){$/;"	f	class:mods::classes::psyop
player	mods/classes/pyrexia.cpp	/^		player_ptr_t 	pyrexia::player(){$/;"	f	class:mods::classes::pyrexia
player	mods/classes/sentinel.cpp	/^		player_ptr_t 	sentinel::player(){$/;"	f	class:mods::classes::sentinel
player	mods/classes/sniper.cpp	/^	player_ptr_t 	sniper::player() {$/;"	f	class:mods::classes::sniper
player	mods/classes/support.cpp	/^	player_ptr_t 	support::player(){$/;"	f	class:mods::classes::support
player	mods/classes/syndrome.cpp	/^		player_ptr_t 	syndrome::player(){$/;"	f	class:mods::classes::syndrome
player	mods/forge-engine/value-scaler.hpp	/^		player_ptr_t player;$/;"	m	struct:mods::forge_engine::value_scaler
player	mods/intent.hpp	/^		uuid_t 							player;$/;"	m	struct:mods::intent::intent_t
player	mods/js-player-scaffolding.cpp	/^namespace mods::js::player {$/;"	n	class:mods::js	file:
player	mods/js-player-scaffolding.hpp	/^namespace mods::js::player {$/;"	n	class:mods::js
player	mods/js.cpp	/^				player_ptr_t player;$/;"	m	struct:mods::js::utils::find_player_payload_t	file:
player	mods/mobs/mini-gunner.hpp	/^			player_ptr_t& player() {$/;"	f	struct:mods::mobs::mini_gunner
player	mods/mobs/mob.cpp	/^	player::player(){$/;"	f	class:mods::player
player	mods/mobs/mob.cpp	/^	player::player(char_data* ch) : m_executing_js(false), m_char_data(ch),m_do_paging(false),$/;"	f	class:mods::player
player	mods/mobs/mob.cpp	/^	player::player(mods::player* ptr) {$/;"	f	class:mods::player
player	mods/mobs/mob.cpp	/^	player::player(player_type_enum_t type){$/;"	f	class:mods::player
player	mods/mobs/mob.hpp	/^	class player {$/;"	c	namespace:mods
player	mods/mobs/smart-mob.hpp	/^			player_ptr_t& player() {$/;"	f	struct:mods::mobs::smart_mob
player	mods/player.cpp	/^	player::player() {$/;"	f	class:mods::player
player	mods/player.cpp	/^	player::player(char_data* ch) {$/;"	f	class:mods::player
player	mods/player.cpp	/^	player::player(mods::player* ptr) {$/;"	f	class:mods::player
player	mods/player.cpp	/^	player::player(player_type_enum_t type) {$/;"	f	class:mods::player
player	mods/player.hpp	/^	struct player {$/;"	s	namespace:mods
player	mods/players/search.hpp	/^	namespace player {$/;"	n	namespace:mods
player_base_ability	mods/orm/player-base-ability.hpp	/^		player_base_ability() : id(0) { this->init(); loaded = 0; }$/;"	f	struct:mods::orm::player_base_ability
player_base_ability	mods/orm/player-base-ability.hpp	/^	struct player_base_ability : public mods::orm::orm_base<player_base_ability,mods::weapon::ghost::primary_choice_t> {$/;"	s	namespace:mods::orm
player_bits	constants.cpp	/^const char *player_bits[] = {$/;"	v
player_bits	constants.hpp	/^const char *player_bits[] = {$/;"	v
player_can	mods/skills.cpp	/^	bool player_can(player_ptr_t& player,std::string_view skill) {$/;"	f	namespace:mods::skills
player_can_do_range_modifier	mods/sensor-grenade.cpp	/^	bool player_can_do_range_modifier(player_ptr_t& player) {$/;"	f	namespace:mods::sensor_grenade
player_can_see_obj	mods/calc-visibility.cpp	/^	bool player_can_see_obj(player_ptr_t& player,obj_ptr_t& obj) {$/;"	f	namespace:mods::calc_visibility
player_carry	mods/stat-bonuses.cpp	/^	void player_carry(uuid_t player_uuid, uuid_t object_uuid) {$/;"	f	namespace:mods::stat_bonuses
player_chmap	globals.cpp	/^		std::map<char_data*,std::shared_ptr<mods::player>> player_chmap;$/;"	m	namespace:mods::globals	file:
player_class_t	structs.h	/^enum player_class_t {$/;"	g
player_class_to_string	mods/util.cpp	/^	std::string player_class_to_string(player_class_t pc) {$/;"	f	namespace:mods::util
player_class_types_t	mods/forge-engine/player-class.hpp	/^		enum player_class_types_t {$/;"	g	namespace:mods::forge_engine
player_classes	mods/forge-engine/requirements.hpp	/^		std::vector<player_class_types_t> player_classes;$/;"	m	struct:mods::forge_engine::requirements_t
player_classes	mods/orm/chargen.hpp	/^		player_classes() : base(), id(0){}$/;"	f	struct:mods::orm::player_classes
player_classes	mods/orm/chargen.hpp	/^	struct player_classes : public base {$/;"	s	namespace:mods::orm
player_contract_instance	mods/player-contract-instance.cpp	/^	player_contract_instance::player_contract_instance() {$/;"	f	class:mods::contracts::player_contract_instance
player_contract_instance	mods/player-contract-instance.cpp	/^	player_contract_instance::player_contract_instance(contract_vnum_t in_contract,uint64_t player_id) {$/;"	f	class:mods::contracts::player_contract_instance
player_contract_instance	mods/player-contract-instance.hpp	/^	struct player_contract_instance {$/;"	s	namespace:mods::contracts
player_contract_state	mods/orm/player-contract-state.cpp	/^	player_contract_state::player_contract_state() {$/;"	f	class:mods::orm::player_contract_state
player_contract_state	mods/orm/player-contract-state.cpp	/^	player_contract_state::player_contract_state(const pqxx::row& row) {$/;"	f	class:mods::orm::player_contract_state
player_contract_state	mods/orm/player-contract-state.hpp	/^	struct player_contract_state : public mods::orm::orm_base<player_contract_state,std::string> {$/;"	s	namespace:mods::orm
player_contract_state_table_name	mods/orm/player-contract-state.hpp	/^	static constexpr std::string_view player_contract_state_table_name = "player_contract_state";$/;"	m	namespace:mods::orm
player_db_id	mods/orm/inventory.cpp	/^			uint64_t player_db_id;$/;"	m	struct:mods::orm::inventory::lmdb::player_inventory_data	file:
player_db_id	mods/orm/inventory.cpp	/^			uint64_t player_db_id;$/;"	m	struct:mods::orm::inventory::lmdb::player_wear_key_t	file:
player_destroyed_door	mods/contract-events.cpp	/^	void player_destroyed_door(player_ptr_t& player,room_rnum room_id,int8_t direction) {$/;"	f	namespace:mods::message_queue
player_destroyed_item	mods/contract-events.cpp	/^	void player_destroyed_item(player_ptr_t& player,uuid_t item_uuid) {$/;"	f	namespace:mods::message_queue
player_equip	mods/stat-bonuses.cpp	/^	void player_equip(uuid_t player_uuid,uuid_t object_uuid) {$/;"	f	namespace:mods::stat_bonuses
player_exists	db.cpp	/^bool player_exists(player_ptr_t player_ptr) {$/;"	f
player_found_door	mods/contract-events.cpp	/^	void player_found_door(player_ptr_t& player,room_rnum room_id, int8_t direction) {$/;"	f	namespace:mods::message_queue
player_found_item	mods/contract-events.cpp	/^	void player_found_item(player_ptr_t& player,uuid_t item_uuid) {$/;"	f	namespace:mods::message_queue
player_found_mob	mods/contract-events.cpp	/^	void player_found_mob(player_ptr_t& player,uuid_t mob_uuid) {$/;"	f	namespace:mods::message_queue
player_found_room	mods/contract-events.cpp	/^	void player_found_room(player_ptr_t& player,room_rnum room_id) {$/;"	f	namespace:mods::message_queue
player_gain_entry	mods/contract-events.cpp	/^	void player_gain_entry(player_ptr_t& player,room_rnum room_id) {$/;"	f	namespace:mods::message_queue
player_generated_data	mods/orm/chargen.hpp	/^		player_generated_data()  : base(), id(0) {}$/;"	f	struct:mods::orm::player_generated_data
player_generated_data	mods/orm/chargen.hpp	/^	struct player_generated_data : public base {$/;"	s	namespace:mods::orm
player_id	mods/orm/player-skill-points.hpp	/^		uint64_t player_id;$/;"	m	struct:mods::orm::player_skill_points
player_id	mods/orm/player-skill-points.hpp	/^		uint64_t player_id;$/;"	m	struct:mods::orm::player_skill_points_record_t
player_id	mods/orm/player-skill-usage.hpp	/^		uint64_t player_id;$/;"	m	struct:mods::orm::player_skill_usage
player_id	mods/orm/player-skill-usage.hpp	/^		uint64_t player_id;$/;"	m	struct:mods::orm::player_skill_usage_record_t
player_index_element	db.h	/^struct player_index_element {$/;"	s
player_install_item	mods/contract-events.cpp	/^	void player_install_item(player_ptr_t& player,uuid_t item_uuid) {$/;"	f	namespace:mods::message_queue
player_inventory_data	mods/orm/inventory.cpp	/^		struct player_inventory_data {$/;"	s	namespace:mods::orm::inventory::lmdb	file:
player_is	mods/super-users.cpp	/^	bool player_is(player_ptr_t& player) {$/;"	f	namespace:mods::super_users
player_key	mods/db.cpp	/^std::string player_key(std::string player_name,std::string prefix, std::string type) {$/;"	f
player_key_count	mods/db.cpp	/^std::string player_key_count(std::string player_name,std::string prefix, std::string type) {$/;"	f
player_key_index	mods/db.cpp	/^std::string player_key_index(std::string player_name,std::string prefix, std::string type) {$/;"	f
player_kill_mob	mods/contract-events.cpp	/^	void player_kill_mob(player_ptr_t& player,uuid_t mob_uuid) {$/;"	f	namespace:mods::message_queue
player_level	mods/classes/super-user-fiddler.cpp	/^		static std::map<uuid_t,uint8_t> player_level;$/;"	m	namespace:mods::classes::mocks	file:
player_level	structs.h	/^enum player_level {$/;"	g
player_list	globals.cpp	/^		player_list_t player_list;$/;"	m	namespace:mods::globals	file:
player_map	globals.cpp	/^		std::map<uuid_t,player_ptr_t> player_map;$/;"	m	namespace:mods::globals	file:
player_messages	mods/players/messages.cpp	/^	static std::vector<std::pair<uuid_t,std::string>> player_messages;$/;"	m	namespace:mods::players::messages	file:
player_name	mods/js.cpp	/^				std::string player_name;$/;"	m	struct:mods::js::utils::find_player_payload_t	file:
player_name_is	mods/super-users.cpp	/^	bool player_name_is(std::string_view name) {$/;"	f	namespace:mods::super_users
player_name_map	globals.cpp	/^		std::map<std::string,player_ptr_t> player_name_map;$/;"	m	namespace:mods::globals	file:
player_nobody	globals.cpp	/^		player_ptr_t player_nobody;$/;"	m	namespace:mods::globals	file:
player_ptr	mods/mobs/mini-gunner.hpp	/^			player_ptr_t player_ptr;$/;"	m	struct:mods::mobs::mini_gunner
player_ptr	mods/mobs/smart-mob.hpp	/^			player_ptr_t player_ptr;$/;"	m	struct:mods::mobs::smart_mob
player_ptr	mods/npc.cpp	/^	player_ptr_t& npc::player_ptr(){ return m_player_ptr; }$/;"	f	class:mods::npc
player_quota_door_destroyed_increase	mods/contract-events.cpp	/^	void player_quota_door_destroyed_increase(player_ptr_t& player,room_rnum room_id,int8_t direction) {$/;"	f	namespace:mods::message_queue
player_quota_item_find_increase	mods/contract-events.cpp	/^	void player_quota_item_find_increase(player_ptr_t& player,uuid_t item_uuid) {$/;"	f	namespace:mods::message_queue
player_quota_mob_kill_increase	mods/contract-events.cpp	/^	void player_quota_mob_kill_increase(player_ptr_t& player,uuid_t mob_uuid) {$/;"	f	namespace:mods::message_queue
player_race_perks	mods/orm/chargen.hpp	/^		player_race_perks()  : base(), id(0) {}$/;"	f	struct:mods::orm::player_race_perks
player_race_perks	mods/orm/chargen.hpp	/^	struct player_race_perks : public base {$/;"	s	namespace:mods::orm
player_races	mods/orm/chargen.hpp	/^		player_races()  : base(), id(0) {}$/;"	f	struct:mods::orm::player_races
player_races	mods/orm/chargen.hpp	/^	struct player_races : public base {$/;"	s	namespace:mods::orm
player_registration	mods/player-registration.cpp	/^namespace mods::player_registration {$/;"	n	class:mods	file:
player_registration	mods/player-registration.hpp	/^namespace mods::player_registration {$/;"	n	class:mods
player_retrieved_item	mods/contract-events.cpp	/^	void player_retrieved_item(player_ptr_t& player,uuid_t item_uuid) {$/;"	f	namespace:mods::message_queue
player_row_exists	mods/orm/player-base-ability.cpp	/^	bool player_base_ability::player_row_exists(uint64_t player_id) {$/;"	f	class:mods::orm::player_base_ability
player_scaffolding	mods/player-scaffolding.hpp	/^	struct player_scaffolding {$/;"	s	namespace:mods
player_skill_points	mods/orm/player-skill-points.hpp	/^		player_skill_points() {$/;"	f	struct:mods::orm::player_skill_points
player_skill_points	mods/orm/player-skill-points.hpp	/^	struct player_skill_points : public mods::orm::orm_base<player_skill_points,std::string> {$/;"	s	namespace:mods::orm
player_skill_points_record_t	mods/orm/player-skill-points.hpp	/^	struct player_skill_points_record_t {$/;"	s	namespace:mods::orm
player_skill_points_table_name	mods/orm/player-skill-points.hpp	/^	static constexpr std::string_view player_skill_points_table_name = "player_skill_points";$/;"	m	namespace:mods::orm
player_skill_trees_unlocked	mods/orm/chargen.hpp	/^		player_skill_trees_unlocked()  : base(), id(0) {}$/;"	f	struct:mods::orm::player_skill_trees_unlocked
player_skill_trees_unlocked	mods/orm/chargen.hpp	/^	struct player_skill_trees_unlocked : public base {$/;"	s	namespace:mods::orm
player_skill_usage	mods/orm/player-skill-usage.hpp	/^		player_skill_usage() {$/;"	f	struct:mods::orm::player_skill_usage
player_skill_usage	mods/orm/player-skill-usage.hpp	/^	struct player_skill_usage : public mods::orm::orm_base<player_skill_usage,std::string> {$/;"	s	namespace:mods::orm
player_skill_usage_record_t	mods/orm/player-skill-usage.hpp	/^	struct player_skill_usage_record_t {$/;"	s	namespace:mods::orm
player_skill_usage_table_name	mods/orm/player-skill-usage.hpp	/^	static constexpr std::string_view player_skill_usage_table_name = "player_skill_usage";$/;"	m	namespace:mods::orm
player_skill_usage_upkeep	mods/orm/player-skill-usage.cpp	/^	void player_skill_usage_upkeep(const uint64_t& player_id, std::string_view in_class) {$/;"	f	namespace:mods::orm
player_table	db.cpp	/^std::deque<player_index_element> player_table;	\/* index to plr file	 *\/$/;"	v
player_talk_to	mods/contract-events.cpp	/^	void player_talk_to(player_ptr_t& player,uuid_t mob_uuid) {$/;"	f	namespace:mods::message_queue
player_type_enum_t	mods/mobs/mob.hpp	/^			enum player_type_enum_t { $/;"	g	class:mods::player
player_type_enum_t	mods/player.hpp	/^			enum player_type_enum_t {$/;"	g	struct:mods::player
player_uncarry	mods/stat-bonuses.cpp	/^	void player_uncarry(uuid_t player_uuid, uuid_t object_uuid) {$/;"	f	namespace:mods::stat_bonuses
player_unequip	mods/stat-bonuses.cpp	/^	void player_unequip(uuid_t player_uuid,uuid_t object_uuid) {$/;"	f	namespace:mods::stat_bonuses
player_utils	mods/player-utils.hpp	/^namespace mods::player_utils {$/;"	n	class:mods
player_uuid	globals.cpp	/^		uuid_t player_uuid() {$/;"	f	namespace:mods::globals
player_uuid	mods/camera.hpp	/^			uuid_t player_uuid() const { return m_player; }$/;"	f	class:mods::camera
player_uuid	mods/deferred.hpp	/^		uuid_t player_uuid;$/;"	m	struct:mods::chunk_affect_t
player_wear_key_t	mods/orm/inventory.cpp	/^		struct player_wear_key_t {$/;"	s	namespace:mods::orm::inventory::lmdb	file:
player_wear_t	mods/orm/inventory.cpp	/^		struct player_wear_t {$/;"	s	namespace:mods::orm::inventory::lmdb	file:
players	mods/events.cpp	/^		namespace players {$/;"	n	namespace:mods::events::publish	file:
players	mods/events.hpp	/^		namespace players {$/;"	n	namespace:mods::events::publish
players	mods/players/util.hpp	/^	namespace players {$/;"	n	namespace:mods
plr	mods/flags.hpp	/^	enum plr {$/;"	g	namespace:mods::flags
plug_cable	mods/mini-games/wires.cpp	/^	void plug_cable(player_ptr_t& player){$/;"	f	namespace:mods::mini_games
plug_into	mods/mini-games/wires.cpp	/^	std::string wires::plug_into(char port){$/;"	f	class:mods::mini_games::wires
plugged_in	mods/mini-games/wires.hpp	/^		std::vector<bool> plugged_in;$/;"	m	struct:mods::mini_games::wires
plural	spells.h	/^	const char	*plural;$/;"	m	struct:attack_hit_type
pluralise	mods/catch.hpp	/^	struct pluralise {$/;"	s	namespace:Catch
point_update	limits.cpp	/^void point_update(void) {$/;"	f
policies	db.cpp	/^char *policies = NULL;		\/* policies page		 *\/$/;"	v
pop	shop.cpp	/^int pop(struct stack_data *stack) {$/;"	f
pop_free_list	mail.cpp	/^long pop_free_list(void) {$/;"	f
populate	mods/orm/armor-index.cpp	/^	void armor_index::populate(std::string_view in_armor_type, const std::vector<std::string>& in_armor_filenames) {$/;"	f	class:mods::orm::armor_index
populate	mods/orm/mob-roam.cpp	/^	void mob_roam::populate(uint32_t mob_vnum, const std::vector<room_vnum>& rooms, std::string_view profile_name) {$/;"	f	class:mods::orm::mob_roam
populate	mods/orm/player-skill-points.cpp	/^	void player_skill_points::populate(const uint64_t& player_id,const std::map<uint32_t,uint16_t>& data) {$/;"	f	class:mods::orm::player_skill_points
populate	mods/orm/player-skill-usage.cpp	/^	void player_skill_usage::populate(const uint64_t& player_id,const std::map<uint64_t,uint16_t>& data) {$/;"	f	class:mods::orm::player_skill_usage
populate	mods/orm/rifle-index.cpp	/^	void rifle_index::populate(std::string_view in_rifle_type, const std::vector<std::string>& in_rifle_filenames) {$/;"	f	class:mods::orm::rifle_index
populate	mods/orm/skill-points.cpp	/^	void skill_points::populate(std::map<uint16_t,uint16_t>* data) {$/;"	f	class:mods::orm::skill_points
populate	mods/orm/skill-trees.cpp	/^	void skill_trees::populate(std::map<uint16_t,uint16_t>* data) {$/;"	f	class:mods::orm::skill_trees
populate_from_meqbuild_profile	mods/mobs/smart-mob.cpp	/^	void smart_mob::populate_from_meqbuild_profile() {$/;"	f	class:mods::mobs::smart_mob
populate_object	mods/orm/rifle-instance.cpp	/^	void rifle_instance::populate_object(obj_ptr_t& obj) {$/;"	f	class:mods::orm::rifle_instance
port_behaviour_t	mods/mini-games/wires.hpp	/^		enum port_behaviour_t {$/;"	g	struct:mods::mini_games::wires
position	mail.h	/^	long	position;$/;"	m	struct:position_list_type_d
position	mods/orm/inventory.cpp	/^			uint8_t position;$/;"	m	struct:mods::orm::inventory::lmdb::player_wear_key_t	file:
position	mods/player.hpp	/^			byte& position() {$/;"	f	struct:mods::player
position_count	mods/mini-games/line-up.hpp	/^		int position_count;$/;"	m	namespace:mods::mini_games
position_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,9> position_flags = { {$/;"	m	namespace:mods::builder	file:
position_list_type	mail.h	/^typedef struct position_list_type_d position_list_type;$/;"	t	typeref:struct:position_list_type_d
position_list_type_d	mail.h	/^struct position_list_type_d {$/;"	s
position_types	constants.cpp	/^const char *position_types[] = {$/;"	v
position_types	constants.hpp	/^const char *position_types[] = {$/;"	v
positions	mods/mini-games/line-up.hpp	/^		std::vector<uint8_t> positions;$/;"	m	namespace:mods::mini_games
post_boot_db	globals.cpp	/^		void post_boot_db() {$/;"	f	namespace:mods::globals
post_feed	structs.h	/^		void post_feed(T fed_object) {$/;"	f	struct:obj_data
post_modify_callback	mods/builder_util.hpp	/^	typedef std::function<std::pair<bool,std::string>()> post_modify_callback;$/;"	t	namespace:mods::builder_util
postgres_dbname	mods/conf.hpp	/^	static std::string postgres_dbname = "postgres_mud";$/;"	m	namespace:mods::conf
postgres_host	mods/conf.hpp	/^	static std::string postgres_host = "localhost";$/;"	m	namespace:mods::conf
postgres_password	mods/conf.hpp	/^	static std::string postgres_password = "postgresmudpassword";$/;"	m	namespace:mods::conf
postgres_port	mods/conf.hpp	/^	static std::string postgres_port = "5432";$/;"	m	namespace:mods::conf
postgres_user	mods/conf.hpp	/^	static std::string postgres_user = "postgres";$/;"	m	namespace:mods::conf
postmaster	mail.cpp	/^SPECIAL(postmaster);$/;"	v
postmaster	spec_assign.cpp	/^SPECIAL(postmaster);$/;"	v
postmaster_check_mail	mail.cpp	/^void postmaster_check_mail(char_data *ch, char_data *mailman,$/;"	f
postmaster_receive_mail	mail.cpp	/^void postmaster_receive_mail(char_data *ch, char_data *mailman,$/;"	f
postmaster_send_mail	mail.cpp	/^void postmaster_send_mail(char_data *ch, char_data *mailman,$/;"	f
pow10	bsd-snprintf.cpp	/^pow10(int exp) {$/;"	f	file:
pq	mods/lmdb.hpp	/^namespace mods::pq {$/;"	n	class:mods
pq	mods/pq.cpp	/^namespace mods::pq {$/;"	n	class:mods	file:
pq	mods/pq.hpp	/^namespace mods::pq {$/;"	n	class:mods
pq	mods/pqxx-types.hpp	/^namespace mods::pq {$/;"	n	class:mods
pq_con	globals.cpp	/^		std::unique_ptr<pqxx::connection> pq_con;$/;"	m	namespace:mods::globals	file:
pq_connection	mods/conf.cpp	/^	std::string pq_connection(std::map<std::string,std::string> values){$/;"	f	namespace:mods::conf
prac_params	class.cpp	/^int prac_params[4][NUM_CLASSES] = {$/;"	v
prac_types	spec_procs.cpp	/^const char *prac_types[] = {$/;"	v
prace_description	mods/orm/chargen.hpp	/^		std::string prace_description;$/;"	m	struct:mods::orm::player_races
prace_name	mods/orm/chargen.hpp	/^		std::string prace_name;$/;"	m	struct:mods::orm::player_races
pre_game	mods/debug-pre-game.hpp	/^namespace mods::debug::pre_game {$/;"	n	class:mods::debug
pre_game_loop	globals.cpp	/^		void pre_game_loop() {$/;"	f	namespace:mods::globals
precision	mods/catch2.hpp	/^        static int precision;$/;"	m	struct:Catch::StringMaker
preference_bits	constants.cpp	/^const char *preference_bits[] = {$/;"	v
preference_bits	constants.hpp	/^const char *preference_bits[] = {$/;"	v
prefs	mods/prefs.hpp	/^	class prefs {$/;"	c	namespace:mods
preg_match	mods/util.cpp	/^	bool preg_match(std::string_view regex,std::string_view haystack) {$/;"	f	namespace:mods::util
pregame	mods/pregame.cpp	/^namespace mods::pregame {$/;"	n	class:mods	file:
pregame	mods/pregame.hpp	/^namespace mods::pregame {$/;"	n	class:mods
present_action	mods/builder.cpp	/^void present_action(player_ptr_t& player, std::size_t index) {$/;"	f
present_mob_specials	mods/builder.cpp	/^void present_mob_specials(player_ptr_t& player, std::size_t index) {$/;"	f
primary	mods/mobs/mini-gunner.cpp	/^	obj_ptr_t mini_gunner::primary() {$/;"	f	class:mods::mobs::mini_gunner
primary	mods/mobs/smart-mob.cpp	/^	obj_ptr_t smart_mob::primary() {$/;"	f	class:mods::mobs::smart_mob
primary	mods/player.cpp	/^	obj_data_ptr_t player::primary() {$/;"	f	class:mods::player
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::breacher
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::contagion
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::engineer
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::ghost
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::marine
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::medic
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::psyop
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::sentinel
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::sniper
primary_choice_t	mods/weapon.hpp	/^		enum primary_choice_t {$/;"	g	namespace:mods::weapon::support
primary_key	mods/mini-games.hpp	/^		int primary_key;$/;"	m	struct:mods::mini_games::mini_game_payload_t
primary_key	mods/orm/room.hpp	/^		constexpr static const char* primary_key = "id";$/;"	m	struct:mods::orm::room
primary_key_id	mods/orm/player-skill-points.hpp	/^		uint64_t primary_key_id;$/;"	m	struct:mods::orm::player_skill_points
primary_key_id	mods/orm/player-skill-usage.hpp	/^		uint64_t primary_key_id;$/;"	m	struct:mods::orm::player_skill_usage
primary_key_name	mods/orm/armor-index.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::armor_index
primary_key_name	mods/orm/armor-index.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::armor_index_record_t
primary_key_name	mods/orm/breacher.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::breacher
primary_key_name	mods/orm/camera-feed.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::camera_feed
primary_key_name	mods/orm/contract-steps.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::contract_steps
primary_key_name	mods/orm/contract-steps.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::contract_steps_record_t
primary_key_name	mods/orm/contracts.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::contracts
primary_key_name	mods/orm/door-event.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::door_event
primary_key_name	mods/orm/elevator.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::elevator
primary_key_name	mods/orm/engineer.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::engineer
primary_key_name	mods/orm/forge.hpp	/^		std::string primary_key_name() { return this->id_column(); }$/;"	f	struct:mods::orm::forge
primary_key_name	mods/orm/ghost.hpp	/^		std::string primary_key_name() { return this->id_column(); }$/;"	f	struct:mods::orm::ghost
primary_key_name	mods/orm/hq.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::hq
primary_key_name	mods/orm/integral-object.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::integral_object
primary_key_name	mods/orm/marine.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::marine
primary_key_name	mods/orm/medic.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::medic
primary_key_name	mods/orm/mini-game.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::mini_game
primary_key_name	mods/orm/mob-equipment-map.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::mob_equipment_map
primary_key_name	mods/orm/mob-equipment.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::mob_equipment
primary_key_name	mods/orm/mob-roam.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::mob_roam
primary_key_name	mods/orm/mob-roam.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::mob_roam_record_t
primary_key_name	mods/orm/orm-base.hpp	/^		virtual std::string primary_key_name() {$/;"	f	struct:mods::orm::orm_base
primary_key_name	mods/orm/player-base-ability.hpp	/^		std::string primary_key_name() { return this->id_column(); }$/;"	f	struct:mods::orm::player_base_ability
primary_key_name	mods/orm/player-contract-state.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::player_contract_state
primary_key_name	mods/orm/player-skill-points.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::player_skill_points
primary_key_name	mods/orm/player-skill-points.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::player_skill_points_record_t
primary_key_name	mods/orm/player-skill-usage.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::player_skill_usage
primary_key_name	mods/orm/player-skill-usage.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::player_skill_usage_record_t
primary_key_name	mods/orm/pyrexia.hpp	/^		std::string primary_key_name() { return this->id_column(); }$/;"	f	struct:mods::orm::pyrexia
primary_key_name	mods/orm/rifle-attachment.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::rifle_attachment
primary_key_name	mods/orm/rifle-attachment.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::rifle_attachment_record_t
primary_key_name	mods/orm/rifle-index.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::rifle_index
primary_key_name	mods/orm/rifle-index.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::rifle_index_record_t
primary_key_name	mods/orm/rifle-instance.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::rifle_instance
primary_key_name	mods/orm/room.hpp	/^		std::string primary_key_name() const {$/;"	f	struct:mods::orm::room
primary_key_name	mods/orm/skill-points.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::skill_points
primary_key_name	mods/orm/skill-points.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::skill_points_record_t
primary_key_name	mods/orm/skill-trees.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::skill_trees
primary_key_name	mods/orm/skill-trees.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::skill_trees_record_t
primary_key_name	mods/orm/sniper.hpp	/^		std::string primary_key_name() {$/;"	f	struct:mods::orm::sniper
primary_key_name	mods/orm/striker.hpp	/^		std::string primary_key_name() { return this->id_column(); }$/;"	f	struct:mods::orm::striker
primary_key_name	mods/orm/support.hpp	/^		std::string primary_key_name() { return id_column(); }$/;"	f	struct:mods::orm::support
primary_key_name	mods/orm/syndrome.hpp	/^		std::string primary_key_name() { return this->id_column(); }$/;"	f	struct:mods::orm::syndrome
primary_key_name	mods/pq.hpp	/^	virtual std::string primary_key_name() {$/;"	f	struct:orm_base
primary_key_value	mods/orm/armor-index.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::armor_index
primary_key_value	mods/orm/breacher.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::breacher
primary_key_value	mods/orm/camera-feed.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::camera_feed
primary_key_value	mods/orm/contract-steps.cpp	/^	std::string contract_steps::primary_key_value() {$/;"	f	class:mods::orm::contract_steps
primary_key_value	mods/orm/contracts.cpp	/^	std::string contracts::primary_key_value() {$/;"	f	class:mods::orm::contracts
primary_key_value	mods/orm/door-event.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::door_event
primary_key_value	mods/orm/elevator.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::elevator
primary_key_value	mods/orm/engineer.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::engineer
primary_key_value	mods/orm/forge.hpp	/^		std::string primary_key_value() { return std::to_string(this->id); }$/;"	f	struct:mods::orm::forge
primary_key_value	mods/orm/ghost.hpp	/^		std::string primary_key_value() { return std::to_string(this->id); }$/;"	f	struct:mods::orm::ghost
primary_key_value	mods/orm/hq.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::hq
primary_key_value	mods/orm/integral-object.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::integral_object
primary_key_value	mods/orm/marine.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::marine
primary_key_value	mods/orm/medic.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::medic
primary_key_value	mods/orm/mini-game.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::mini_game
primary_key_value	mods/orm/mob-equipment-map.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::mob_equipment_map
primary_key_value	mods/orm/mob-equipment.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::mob_equipment
primary_key_value	mods/orm/mob-roam.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::mob_roam
primary_key_value	mods/orm/orm-base.hpp	/^		virtual std::string primary_key_value() {$/;"	f	struct:mods::orm::orm_base
primary_key_value	mods/orm/player-base-ability.hpp	/^		std::string primary_key_value() { return std::to_string(this->pba_id); }$/;"	f	struct:mods::orm::player_base_ability
primary_key_value	mods/orm/player-contract-state.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::player_contract_state
primary_key_value	mods/orm/player-skill-points.cpp	/^	std::string player_skill_points::primary_key_value() {$/;"	f	class:mods::orm::player_skill_points
primary_key_value	mods/orm/player-skill-usage.cpp	/^	std::string player_skill_usage::primary_key_value() {$/;"	f	class:mods::orm::player_skill_usage
primary_key_value	mods/orm/pyrexia.hpp	/^		std::string primary_key_value() { return std::to_string(this->id); }$/;"	f	struct:mods::orm::pyrexia
primary_key_value	mods/orm/rifle-attachment.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::rifle_attachment
primary_key_value	mods/orm/rifle-index.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::rifle_index
primary_key_value	mods/orm/rifle-instance.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::rifle_instance
primary_key_value	mods/orm/room.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::room
primary_key_value	mods/orm/skill-points.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::skill_points
primary_key_value	mods/orm/skill-trees.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::skill_trees
primary_key_value	mods/orm/sniper.hpp	/^		std::string primary_key_value() {$/;"	f	struct:mods::orm::sniper
primary_key_value	mods/orm/striker.hpp	/^		std::string primary_key_value() { return std::to_string(this->id); }$/;"	f	struct:mods::orm::striker
primary_key_value	mods/orm/support.hpp	/^		std::string primary_key_value(){ return std::to_string(this->id); }$/;"	f	struct:mods::orm::support
primary_key_value	mods/orm/syndrome.hpp	/^		std::string primary_key_value() { return std::to_string(this->id); }$/;"	f	struct:mods::orm::syndrome
primary_key_value	mods/pq.hpp	/^	virtual std::string primary_key_value() {$/;"	f	struct:orm_base
primary_type	mods/orm/breacher.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::breacher
primary_type	mods/orm/engineer.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::engineer
primary_type	mods/orm/forge.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::forge
primary_type	mods/orm/ghost.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::ghost
primary_type	mods/orm/hq.hpp	/^		primary_choice_t primary_type() {$/;"	f	struct:mods::orm::hq
primary_type	mods/orm/marine.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::marine
primary_type	mods/orm/medic.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::medic
primary_type	mods/orm/mob-equipment-map.hpp	/^		primary_choice_t primary_type() {$/;"	f	struct:mods::orm::mob_equipment_map
primary_type	mods/orm/mob-equipment.hpp	/^		primary_choice_t primary_type() {$/;"	f	struct:mods::orm::mob_equipment
primary_type	mods/orm/orm-base.hpp	/^		virtual TPrimaryType primary_type() {$/;"	f	struct:mods::orm::orm_base
primary_type	mods/orm/player-contract-state.hpp	/^		std::string primary_type() {$/;"	f	struct:mods::orm::player_contract_state
primary_type	mods/orm/sniper.hpp	/^		primary_choice_t primary_type() {$/;"	f	struct:mods::orm::sniper
primary_type	mods/orm/support.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::support
primary_type	mods/orm/syndrome.hpp	/^		primary_choice_t primary_type(){$/;"	f	struct:mods::orm::syndrome
primary_type	mods/pq.hpp	/^	virtual TPrimaryType primary_type() {$/;"	f	struct:orm_base
print_command	mods/builder.cpp	/^	void print_command(player_ptr_t& player) {$/;"	f	struct:command_t
print_debug	mods/acl/config-parser.hpp	/^                bool print_debug;$/;"	m	class:mods::acl::FileParser
print_debug	mods/acl/config-parser.hpp	/^constexpr static bool print_debug = false;$/;"	v
print_group	act.other.cpp	/^void print_group(char_data *ch) {$/;"	f
print_object_location	act.informative.cpp	/^void print_object_location(int num, struct obj_data *obj, char_data *ch,$/;"	f
print_zone_to_buf	act.wizard.cpp	/^size_t print_zone_to_buf(char *bufptr, size_t left, zone_rnum zone) {$/;"	f
process	mods/affects.cpp	/^	void process() {$/;"	f	namespace:mods::affects
process	mods/rooms.cpp	/^	void process() {$/;"	f	namespace:mods::rooms::affects
process_affect	mods/affects.hpp	/^			void process_affect(TAffects affect) {$/;"	f	struct:mods::affects::dissolver
process_elemental_damage	mods/weapons/elemental.cpp	/^	void process_elemental_damage(player_ptr_t& attacker,obj_ptr_t& weapon,player_ptr_t& victim,feedback_t& feedback) {$/;"	f	namespace:mods::weapons::elemental
process_fire_damage	mods/rooms.cpp	/^	void process_fire_damage() {$/;"	f	namespace:mods::rooms
process_input	comm.cpp	/^int process_input(mods::descriptor_data& t) {$/;"	f
process_output	comm.cpp	/^int process_output(mods::descriptor_data& in_t) {$/;"	f
producing	shop.h	/^	obj_vnum *producing;		\/* Which item to produce (virtual)	*\/$/;"	m	struct:shop_data
proficiency_to_string	mods/util.cpp	/^	std::string proficiency_to_string(int prof) {$/;"	f	namespace:mods::util
profile_name	mods/orm/mob-roam.hpp	/^		std::string profile_name;$/;"	m	struct:mods::orm::mob_roam
profile_name	mods/orm/mob-roam.hpp	/^		std::string profile_name;$/;"	m	struct:mods::orm::mob_roam_record_t
profit_buy	shop.h	/^	float profit_buy;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
profit_sell	shop.h	/^	float profit_sell;		\/* Factor to multiply cost with		*\/$/;"	m	struct:shop_data
project_id	mods/lmdb/shm-config.hpp	/^    int project_id = 0xf00ba12;$/;"	m	namespace:shm
projectile	fight.cpp	/^namespace mods::projectile {$/;"	n	class:mods	file:
projectile	mods/classes/engineer.cpp	/^namespace mods::projectile {$/;"	n	class:mods	file:
projectile	mods/projectile.cpp	/^	namespace projectile {$/;"	n	namespace:mods	file:
projectile	mods/projectile.hpp	/^	namespace projectile {$/;"	n	namespace:mods
projectile	mods/sensor-grenade.cpp	/^namespace mods::projectile {$/;"	n	class:mods	file:
projectile_event_t	mods/projectile.hpp	/^		enum projectile_event_t {$/;"	g	namespace:mods::projectile
projectile_lands	mods/projectile.cpp	/^		void projectile_lands(room_rnum room_id,obj_ptr_t object,int from_direction) {$/;"	f	namespace:mods::projectile
propagate_chemical_blast	mods/projectile.cpp	/^		void propagate_chemical_blast(room_rnum& room_id,obj_ptr_t device) {$/;"	f	namespace:mods::projectile
propagate_chemical_blast	mods/projectile.cpp	/^		void propagate_chemical_blast(room_rnum& room_id,obj_ptr_t device,std::size_t depth) {$/;"	f	namespace:mods::projectile
prperk_base_attribute_amount_add	mods/orm/chargen.hpp	/^		std::string prperk_base_attribute_amount_add; \/\/ INTEGER NOT NULL DEFAULT 0$/;"	m	struct:mods::orm::player_race_perks
prperk_base_attribute_mutate	mods/orm/chargen.hpp	/^		std::string prperk_base_attribute_mutate; \/\/base_attribute NOT NULL,$/;"	m	struct:mods::orm::player_race_perks
prperk_description	mods/orm/chargen.hpp	/^		std::string prperk_description;\/\/TEXT,$/;"	m	struct:mods::orm::player_race_perks
prperk_id	mods/orm/chargen.hpp	/^		uint64_t prperk_id;\/\/ INTEGER NOT NULL REFERENCES player_races(id),$/;"	m	struct:mods::orm::player_race_perks
prperk_id_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<player_races> prperk_id_ptr;$/;"	m	struct:mods::orm::player_race_perks
prperk_name	mods/orm/chargen.hpp	/^		std::string prperk_name;\/\/VARCHAR(64) NOT NULL,$/;"	m	struct:mods::orm::player_race_perks
prune_crlf	utils.cpp	/^void prune_crlf(char *txt) {$/;"	f
psendln	mods/classes/sentinel.cpp	/^		void sentinel::psendln(std::string_view msg){ m_player->psendln(msg); }$/;"	f	class:mods::classes::sentinel
psendln	mods/player.cpp	/^	void player::psendln(mods::string& str) {$/;"	f	class:mods::player
psendln	mods/player.cpp	/^	void player::psendln(std::string_view str) {$/;"	f	class:mods::player
psg1	mods/weapon.cpp	/^	obj_data_ptr_t psg1() {$/;"	f	namespace:mods::weapon
psg1	mods/weapons/sniper-rifle-psg1.cpp	/^	psg1::psg1(){$/;"	f	class:mods::weapons::sniper_rifle::psg1
psg1	mods/weapons/sniper-rifle-psg1.hpp	/^		struct psg1 {$/;"	s	namespace:mods::weapons::sniper_rifle
psm_debug	db.cpp	893;"	d	file:
pstun_player_id	mods/orm/chargen.hpp	/^		uint64_t pstun_player_id;\/\/INTEGER NOT NULL REFERENCES player(id),$/;"	m	struct:mods::orm::player_skill_trees_unlocked
pstun_skill_tree_id	mods/orm/chargen.hpp	/^		uint64_t pstun_skill_tree_id;\/\/INTEGER NOT NULL REFERENCES skill_trees(id)$/;"	m	struct:mods::orm::player_skill_trees_unlocked
pstun_skill_tree_id_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<skill_trees> pstun_skill_tree_id_ptr;\/\/ INTEGER NOT NULL REFERENCES skill_trees(id)$/;"	m	struct:mods::orm::player_skill_trees_unlocked
psyop	mods/classes/psyop.cpp	/^	psyop::psyop(){$/;"	f	class:mods::classes::psyop
psyop	mods/classes/psyop.cpp	/^	psyop::psyop(player_ptr_t p){$/;"	f	class:mods::classes::psyop
psyop	mods/classes/psyop.hpp	/^	struct psyop : base {$/;"	s	namespace:mods::classes
psyop	mods/weapon.hpp	/^	namespace psyop {$/;"	n	namespace:mods::weapon
psyop_skillset	class.cpp	/^std::string psyop_skillset() {$/;"	f
pt_allowed	config.cpp	/^int pt_allowed = NO;$/;"	v
ptr	globals.cpp	/^player_ptr_t ptr(char_data* in_ch) {$/;"	f
ptr	globals.cpp	/^player_ptr_t ptr(const char_data* in_ch) {$/;"	f
ptr	mods/lmdb/shm.hpp	/^        char* ptr() const { return m_data; }$/;"	f	class:gdns::shm
ptr	mods/string.hpp	/^		char* ptr() {$/;"	f	struct:mods::string
ptr_by_db_id	globals.cpp	/^player_ptr_t ptr_by_db_id(const uint64_t& player_db_id) {$/;"	f
ptr_by_uuid	globals.cpp	/^player_ptr_t ptr_by_uuid(uuid_t id) {$/;"	f
ptr_opt	globals.cpp	/^std::optional<player_ptr_t> ptr_opt(char_data* ch) {$/;"	f
ptr_opt	globals.cpp	/^std::optional<player_ptr_t> ptr_opt(uuid_t plr_uuid) {$/;"	f
ptrptr	mods/string.hpp	/^		char** ptrptr(){$/;"	f	struct:mods::string
publish	mods/events.cpp	/^	namespace publish {$/;"	n	namespace:mods::events	file:
publish	mods/events.hpp	/^	namespace publish {$/;"	n	namespace:mods::events
publish_event	mods/events.cpp	/^	void publish_event(event_t event,const uuid_t& entity_uuid,void* data,int data2){$/;"	f	namespace:mods::events
puff	spec_assign.cpp	/^SPECIAL(puff);$/;"	v
puff	spec_procs.cpp	/^SPECIAL(puff);$/;"	v
punish_for_leaving_contract	mods/contracts.cpp	/^	void punish_for_leaving_contract(std::shared_ptr<mods::player>& player,int contract_num) {$/;"	f	namespace:mods::contracts
push	mods/deferred.cpp	/^	deferred::lambda_queue_iterator deferred::push(uint64_t ticks_in_future,std::function<void()> lambda) {$/;"	f	class:mods::deferred
push	mods/jx.hpp	/^			compositor& push(bool value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(const char* value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(const std::string& key, const std::string& value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(const std::string& key, double value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(const std::string& key, float value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(const std::string& key, int value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(const std::string& key, unsigned int value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(const std::string& value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(double value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(float value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(int value) {$/;"	f	struct:mods::jx::compositor
push	mods/jx.hpp	/^			compositor& push(std::nullptr_t value) {$/;"	f	struct:mods::jx::compositor
push	shop.cpp	/^void push(struct stack_data *stack, int pushval) {$/;"	f
push_chunk_affect	mods/deferred.cpp	/^	void deferred::push_chunk_affect($/;"	f	class:mods::deferred
push_encoded_error	mods/builder/slotted-builder.hpp	/^			void push_encoded_error(std::string msg) {$/;"	f	struct:mods::builder::slotted_builder
push_encoded_message	mods/builder/slotted-builder.hpp	/^			void push_encoded_message(std::string msg, std::string encoded,uint8_t msg_type) {$/;"	f	struct:mods::builder::slotted_builder
push_encoded_ok	mods/builder/slotted-builder.hpp	/^			void push_encoded_ok(std::string msg) {$/;"	f	struct:mods::builder::slotted_builder
push_free_list	mail.cpp	/^void push_free_list(long pos) {$/;"	f
push_profile	mods/builder/slotted-builder.hpp	/^			void push_profile(const std::shared_ptr<TOrmType>& profile) {$/;"	f	struct:mods::builder::slotted_builder
push_profile_with_fields	mods/builder/slotted-builder.hpp	/^			void push_profile_with_fields(const std::shared_ptr<TOrmType>& profile,const std::vector<std::string>& fields) {$/;"	f	struct:mods::builder::slotted_builder
push_ticks_event	mods/deferred.cpp	/^	deferred::event_queue_iterator  deferred::push_ticks_event(uint32_t ticks, std::tuple<uuid_t,uint32_t> type){$/;"	f	class:mods::deferred
push_ticks_event	mods/deferred.cpp	/^	deferred::event_queue_iterator  deferred::push_ticks_event(uint32_t ticks, uuid_t player_uuid ,uint32_t ui_type){$/;"	f	class:mods::deferred
push_ticks_event	mods/deferred.cpp	/^	void push_ticks_event(uint32_t ticks, std::tuple<uuid_t,uint32_t> type){$/;"	f	namespace:mods
put	mods/lmdb.cpp	/^	int _db_handle::put(std::string key,std::string value){$/;"	f	class:mods::lmdb::_db_handle
put	mods/lmdb.cpp	/^	int _db_handle::put(std::string key,std::string value,bool renew){$/;"	f	class:mods::lmdb::_db_handle
put	mods/lmdb/db.hpp	/^				inline int put(const std::string & key,const std::string & value){$/;"	f	struct:gdns::lmdb::client
put	mods/lmdb/db.hpp	/^			inline int put(const std::string & key,const std::string & value){$/;"	f	struct:gdns::lmdb::server
put	mods/lmdb/db.hpp	/^			int put(const std::string& key,const std::string & value){$/;"	f	struct:gdns::lmdb::db
put_player_map	mods/db.cpp	/^int put_player_map(std::string_view player_name,std::string prefix, std::map<std::string,std::string> values) {$/;"	f
put_player_map	mods/skill-orm-adaptor.cpp	/^	void put_player_map(player_ptr_t& player,const std::map<std::string,std::string>& map) {$/;"	f	namespace:mods::skill_orm_adaptor
put_player_vector	mods/db.cpp	/^int put_player_vector(std::string_view player_name,std::string prefix, std::vector<std::string> values) {$/;"	f
put_section_map	mods/db.cpp	/^	int put_section_map(std::string_view section_name,std::string prefix, std::map<std::string,std::string> values) {$/;"	f	namespace:mods::db
put_section_vector	mods/db.cpp	/^	int put_section_vector(std::string_view section_name,std::string prefix, std::vector<std::string> values) {$/;"	f	namespace:mods::db
pyrexia	mods/classes/pyrexia.cpp	/^		pyrexia::pyrexia(){$/;"	f	class:mods::classes::pyrexia
pyrexia	mods/classes/pyrexia.cpp	/^		pyrexia::pyrexia(player_ptr_t p){$/;"	f	class:mods::classes::pyrexia
pyrexia	mods/classes/pyrexia.hpp	/^	struct pyrexia : base {$/;"	s	namespace:mods::classes
pyrexia	mods/orm/pyrexia.hpp	/^		pyrexia() : id(0) { this->init(); loaded = 0; }$/;"	f	struct:mods::orm::pyrexia
pyrexia	mods/orm/pyrexia.hpp	/^	struct pyrexia : public mods::orm::orm_base<pyrexia,int> {$/;"	s	namespace:mods::orm
pyrexia	mods/player.cpp	/^	std::shared_ptr<mods::classes::pyrexia>& player::pyrexia() {$/;"	f	class:mods::player
pyrexia_advance_level	mods/classes/pyrexia.cpp	/^	void pyrexia_advance_level(player_ptr_t& player){$/;"	f	namespace:mods::classes
pyrexia_attach_flamethrower_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_attach_flamethrower_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_attach_incendiary_grenade_launcher_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_attach_incendiary_grenade_launcher_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_convert_to_fire_nade_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_convert_to_fire_nade_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_create_wall_of_fire_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_create_wall_of_fire_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_drench_object_in_gasoline_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_drench_object_in_gasoline_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_drench_room_in_gasoline_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_drench_room_in_gasoline_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_fire_nade_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_fire_nade_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_force_weapon_overheat_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_force_weapon_overheat_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_id	mods/orm/pyrexia.hpp	/^		uint64_t pyrexia_id;$/;"	m	struct:mods::orm::pyrexia
pyrexia_player_id	mods/orm/pyrexia.hpp	/^		uint64_t pyrexia_player_id;$/;"	m	struct:mods::orm::pyrexia
pyrexia_seal_off_room_with_wall_of_fire_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_seal_off_room_with_wall_of_fire_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_solar_assistance_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_solar_assistance_level;$/;"	m	struct:mods::orm::pyrexia
pyrexia_summon_napalm_strike_level	mods/orm/pyrexia.hpp	/^		skill_familiarity_t pyrexia_summon_napalm_strike_level;$/;"	m	struct:mods::orm::pyrexia
q	random.cpp	46;"	d	file:
query_contents_by_yaml	mods/query-objects.cpp	/^	std::vector<uuid_t> query_contents_by_yaml(obj_ptr_t& found_object,std::string_view file) {$/;"	f	namespace:mods::query_objects
query_contents_by_yaml_multi	mods/query-objects.cpp	/^	std::vector<uuid_t> query_contents_by_yaml_multi(obj_ptr_t& found_object,const std::vector<std::string>& files) {$/;"	f	namespace:mods::query_objects
query_contents_by_yaml_multi	mods/query-objects.cpp	/^	std::vector<uuid_t> query_contents_by_yaml_multi(room_rnum room,std::string_view container,const std::vector<std::string>& files) {$/;"	f	namespace:mods::query_objects
query_equipment_by_yaml	mods/query-objects.cpp	/^	std::vector<uuid_t> query_equipment_by_yaml(player_ptr_t& player, std::string_view name) {$/;"	f	namespace:mods::query_objects
query_inventory_by_yaml	mods/query-objects.cpp	/^	std::vector<uuid_t> query_inventory_by_yaml(player_ptr_t& player, std::string_view yaml_file) {$/;"	f	namespace:mods::query_objects
query_inventory_container_by_yaml	mods/query-objects.cpp	/^	std::vector<uuid_t> query_inventory_container_by_yaml(player_ptr_t& player, std::string_view container, std::string_view yaml_file) {$/;"	f	namespace:mods::query_objects
query_inventory_for_object	mods/query-objects.cpp	/^	std::vector<uuid_t> query_inventory_for_object(player_ptr_t& player, std::string_view name) {$/;"	f	namespace:mods::query_objects
query_objects	mods/init.hpp	/^INIT(mods::query_objects);$/;"	v
query_objects	mods/query-objects.cpp	/^namespace mods::query_objects {$/;"	n	class:mods	file:
query_objects	mods/query-objects.hpp	/^namespace mods::query_objects {$/;"	n	class:mods
query_parts	mods/sql.hpp	/^			constexpr static int query_parts = 5;$/;"	m	struct:mods::sql::compositor
query_room_for_object	mods/query-objects.cpp	/^	obj_ptr_t query_room_for_object(const room_rnum& room, std::string_view name) {$/;"	f	namespace:mods::query_objects
query_room_for_object_by_yaml	mods/query-objects.cpp	/^	std::vector<uuid_t> query_room_for_object_by_yaml(const room_rnum& room, std::string_view name) {$/;"	f	namespace:mods::query_objects
query_room_for_object_by_yaml_multi	mods/query-objects.cpp	/^	std::vector<uuid_t> query_room_for_object_by_yaml_multi(const room_rnum& room, const std::vector<std::string>& files) {$/;"	f	namespace:mods::query_objects
queue	mods/players/messages.cpp	/^	void queue(uuid_t player_uuid,std::string_view msg) {$/;"	f	namespace:mods::players::messages
queue_affect_on_room	mods/projectile.cpp	/^		void queue_affect_on_room(T affects,room_rnum room_id) {$/;"	f	namespace:mods::projectile
queue_dummy_on_room	mods/target-practice-db.cpp	/^	void queue_dummy_on_room(room_vnum room) {$/;"	f	namespace:mods::target_practice_db
queue_head	graph.cpp	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	typeref:struct:bfs_queue_struct	file:
queue_item_to_be_erased	mods/affects.hpp	/^			void queue_item_to_be_erased(TAffects affect) {$/;"	f	struct:mods::affects::dissolver
queue_object_destruct	globals.cpp	/^		void queue_object_destruct(uuid_t obj_uuid, uint16_t ticks) {$/;"	f	namespace:mods::globals
queue_object_destruct	mods/camera.cpp	/^	void camera::queue_object_destruct() {$/;"	f	class:mods::camera
queue_on_room	mods/affects.cpp	/^void queue_on_room(std::vector<mods::affects::affect_t> affects,int room_id) {$/;"	f
queue_on_room	mods/affects.cpp	/^void queue_on_room(std::vector<mods::affects::affect_t> affects,player_ptr_t player) {$/;"	f
queue_output	structs.cpp	/^	void descriptor_data::queue_output(std::string_view msg, bool newline, bool plain) {$/;"	f	class:mods::descriptor_data
queue_page_fragment	mods/mobs/mob.hpp	/^			void                queue_page_fragment(std::string_view fragment) {$/;"	f	class:mods::player
queue_page_fragment	mods/player.hpp	/^			void queue_page_fragment(std::string_view fragment) {$/;"	f	struct:mods::player
queue_remove_texture	mods/projectile.cpp	/^		void queue_remove_texture(uint64_t ticks_in_future,room_rnum& room_id,room_data::texture_type_t texture) {$/;"	f	namespace:mods::projectile
queue_send_fragment	mods/player.cpp	/^	void player::queue_send_fragment(const char *message, ...) {$/;"	f	class:mods::player
queue_tail	graph.cpp	/^static struct bfs_queue_struct *queue_head = 0, *queue_tail = 0;$/;"	v	typeref:struct:	file:
queue_up	mods/player.cpp	/^	void player::queue_up(std::string_view msg) {$/;"	f	class:mods::player
quitting	mods/player.hpp	/^			bool quitting() {$/;"	f	struct:mods::player
quitting	mods/player.hpp	/^			void quitting(bool s) {$/;"	f	struct:mods::player
quota	mods/contract-steps.hpp	/^		uint8_t					quota;$/;"	m	namespace:mods::contracts
quota_destroy_door	mods/player-contract-instance.cpp	/^	void player_contract_instance::quota_destroy_door(const room_rnum& room_id,const int8_t& direction) {$/;"	f	class:mods::contracts::player_contract_instance
quota_find_item	mods/player-contract-instance.cpp	/^	void player_contract_instance::quota_find_item(const uuid_t& item_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
quota_kill_mob	mods/player-contract-instance.cpp	/^	void player_contract_instance::quota_kill_mob(const uuid_t& mob_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
quote_content	mods/orm/quotes.hpp	/^			std::string quote_content;$/;"	m	struct:mods::orm::base_quotes
quote_created_at	mods/orm/quotes.hpp	/^			TTimestampType quote_created_at;$/;"	m	struct:mods::orm::base_quotes
quote_title	mods/orm/quotes.hpp	/^			std::string quote_title;$/;"	m	struct:mods::orm::base_quotes
r	random.cpp	49;"	d	file:
r	structs.h	/^		room_data(const room_data& r);$/;"	v
r_error	mods/builder.cpp	/^void r_error(const player_ptr_t& player,std::string_view msg) {$/;"	f
r_frozen_start_room	db.cpp	/^room_rnum r_frozen_start_room;	\/* rnum of frozen start room	 *\/$/;"	v
r_idle_room	db.cpp	/^room_rnum r_idle_room;$/;"	v
r_immort_start_room	db.cpp	/^room_rnum r_immort_start_room;	\/* rnum of immort start room	 *\/$/;"	v
r_mortal_start_room	db.cpp	/^room_rnum r_mortal_start_room;	\/* rnum of mortal start room	 *\/$/;"	v
r_status	mods/builder.cpp	/^void r_status(const player_ptr_t& player,std::string_view msg) {$/;"	f
r_success	mods/builder.cpp	/^void r_success(const player_ptr_t& player,std::string_view msg) {$/;"	f
radiation	mods/projectile.cpp	/^			int radiation;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
radiation_damage	mods/rifle-attachments.hpp	/^			int16_t radiation_damage;					\/** honored [ ? (see elemental.cpp) ] *\/$/;"	m	struct:mods::rifle_attachments_t
radiation_damage_percent	mods/rifle-attachments.hpp	/^			int16_t radiation_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
radiation_resistance_percent	mods/player.cpp	/^	int16_t& player::radiation_resistance_percent() {$/;"	f	class:mods::player
radio	mods/radio.cpp	/^namespace mods::radio {$/;"	n	class:mods	file:
radio	mods/radio.hpp	/^namespace mods::radio {$/;"	n	class:mods
radio	mods/response-team/radio.cpp	/^namespace mods::response_team::radio {$/;"	n	class:mods::response_team	file:
radio	mods/response-team/radio.hpp	/^namespace mods::response_team::radio {$/;"	n	class:mods::response_team
radioactive_damage	mods/weapons/elemental.cpp	/^	void radioactive_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
ram_db	globals.cpp	/^		std::unordered_map<std::string,std::string> ram_db;$/;"	m	namespace:mods::globals	file:
rand	mods/init.hpp	/^INIT(mods::rand);$/;"	v
rand	mods/rand.cpp	/^namespace mods::rand {$/;"	n	class:mods	file:
rand	mods/rand.hpp	/^namespace mods::rand {$/;"	n	class:mods
rand_debug	mods/rand.cpp	11;"	d	file:
rand_debug	mods/rand.cpp	9;"	d	file:
rand_number	mods/rand.cpp	/^int rand_number(int from, int to) {$/;"	f
rand_xoroshiro	mods/rand.cpp	/^uint64_t rand_xoroshiro(){$/;"	f
random_armor_type	mods/forge-engine/generator.hpp	/^			armor_types_t random_armor_type() {$/;"	f	struct:mods::forge_engine::generator
random_attachment_type	mods/forge-engine/generator.hpp	/^			attachment_types_t random_attachment_type() {$/;"	f	struct:mods::forge_engine::generator
random_element	globals.cpp	/^		I random_element(I begin, I end) {$/;"	f	namespace:mods::globals
random_elemental_resistance	mods/forge-engine/generator.hpp	/^			elemental_types_t random_elemental_resistance(armor_types_t type) {$/;"	f	struct:mods::forge_engine::generator
random_elemental_type	mods/forge-engine/generator.hpp	/^			elemental_types_t random_elemental_type() {$/;"	f	struct:mods::forge_engine::generator
random_even_number	mods/mini-games.cpp	/^	int random_even_number(int from,int to) {$/;"	f	namespace:mods::mini_games
random_explosive_type	mods/forge-engine/generator.hpp	/^			explosive_types_t random_explosive_type() {$/;"	f	struct:mods::forge_engine::generator
random_item_type	mods/forge-engine/generator.cpp	/^	item_types_t generator::random_item_type() {$/;"	f	class:mods::forge_engine::generator
random_key_string	mods/values.cpp	/^		std::string random_key_string(std::string value){$/;"	f	namespace:mods::values
random_odd_number	mods/mini-games.cpp	/^	int random_odd_number(int from,int to) {$/;"	f	namespace:mods::mini_games
random_rifle_attribute	mods/forge-engine/generator.cpp	/^	rifle_attributes_t generator::random_rifle_attribute() {$/;"	f	class:mods::forge_engine::generator
random_rifle_type	mods/forge-engine/generator.cpp	/^	rifle_types_t generator::random_rifle_type() {$/;"	f	class:mods::forge_engine::generator
random_trivial_action	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto random_trivial_action() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
random_trivial_action	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto random_trivial_action() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
random_yaml	mods/forge-engine/util.cpp	/^	std::string random_yaml(const std::vector<std::string>& files) {$/;"	f	namespace:mods::forge_engine
randomized_items	mods/randomized-items.cpp	/^	randomized_items::randomized_items(){$/;"	f	class:mods::randomized_items
randomized_items	mods/randomized-items.hpp	/^	class randomized_items{$/;"	c	namespace:mods
rangeToString	mods/catch2.hpp	/^        std::string rangeToString(InputIterator first, Sentinel last) {$/;"	f	namespace:Catch::Detail
range_multiplier	mods/weapon.hpp	/^			float range_multiplier;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
rarity	mods/rarity.hpp	/^namespace mods::rarity {$/;"	n	class:mods
rarity	mods/yaml.hpp	/^		float rarity;$/;"	m	struct:mods::yaml::yaml_description_t
rarity_enum_t	mods/randomized-items.hpp	/^enum rarity_enum_t {$/;"	g	namespace:mods
rarity_segment	mods/yaml.cpp	/^	std::string rarity_segment() {$/;"	f	namespace:mods::yaml
rarity_strings	mods/yaml.cpp	/^	std::vector<std::pair<std::string,float>> rarity_strings() {$/;"	f	namespace:mods::yaml
rarity_to_string	mods/yaml.cpp	/^	std::string rarity_to_string(float val) {$/;"	f	namespace:mods::yaml
rate_limit_hit	mods/player.cpp	/^	void player::rate_limit_hit(int action) {$/;"	f	class:mods::player
rate_limit_hit	mods/rate-limiting.cpp	/^	void rate_limit_hit(action_t action,player_ptr_t& player) {$/;"	f	namespace:mods::rate_limiting
rate_limiting	mods/init.hpp	/^INIT(mods::rate_limiting);$/;"	v
rate_limiting	mods/rate-limiting.cpp	/^namespace mods::rate_limiting {$/;"	n	class:mods	file:
rate_limiting	mods/rate-limiting.hpp	/^namespace mods::rate_limiting {$/;"	n	class:mods
rawMemoryToString	mods/catch.hpp	/^		inline std::string rawMemoryToString(const T& object) {$/;"	f	namespace:Catch::Detail
rawMemoryToString	mods/catch2.hpp	/^        std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
raw_kill	fight.cpp	/^void raw_kill(char_data *ch) {$/;"	f
raw_send	mods/player.cpp	/^	void player::raw_send(const mods::string& str) {$/;"	f	class:mods::player
rb_bht_debug	comm.cpp	865;"	d	file:
rb_bht_debug	comm.cpp	867;"	d	file:
rb_debug	mods/builder.cpp	/^	void rb_debug(T s) {$/;"	f	namespace:mods::builder
rb_map_debug	mods/builder.cpp	/^	void rb_map_debug(T& t) {$/;"	f	namespace:mods::builder
read	mods/acl/config-parser.cpp	/^        int FileParser::read(){$/;"	f	class:mods::acl::FileParser
read	mods/orm/orm-base.hpp	/^		std::tuple<int16_t,std::string> read(TClass* c) {$/;"	f	struct:mods::orm::orm_base
read	mods/orm/orm-base.hpp	/^		std::tuple<int16_t,std::string> read(TClass* c,std::string_view column,std::string_view value) {$/;"	f	struct:mods::orm::orm_base
read	mods/pq.hpp	/^	std::tuple<int16_t,std::string> read(TClass* c) {$/;"	f	struct:orm_base
read	mods/pq.hpp	/^	std::tuple<int16_t,std::string> read(TClass* c,std::string_view column,std::string_view value) {$/;"	f	struct:orm_base
read_aliases	alias.cpp	/^void read_aliases(char_data *ch) {$/;"	f
read_all	mods/orm/orm-base.hpp	/^		std::tuple<int16_t,std::string> read_all(TClass* c) {$/;"	f	struct:mods::orm::orm_base
read_all	mods/pq.hpp	/^	std::tuple<int16_t,std::string> read_all(TClass* c) {$/;"	f	struct:orm_base
read_delete	mail.cpp	/^char *read_delete(long recipient) {$/;"	f
read_from_file	mail.cpp	/^void read_from_file(void *buf, int size, long filepos) {$/;"	f
read_line	shop.cpp	/^void read_line(FILE *shop_f, const char *string, void *data) {$/;"	f
read_list	shop.cpp	/^int read_list(FILE *shop_f, struct shop_buy_data *list, int new_format,$/;"	f
read_lvl	boards.h	/^	int	read_lvl;	\/* min level to read messages on this board *\/$/;"	m	struct:board_info_type
read_mobile	db.cpp	/^char_data *read_mobile(mob_vnum nr, int type) { \/* and mob_rnum *\/$/;"	f
read_mobile	globals.cpp	/^		char_data* read_mobile(const mob_vnum& nr,const int& type) {$/;"	f	namespace:mods::globals
read_mobile	mods/js.cpp	/^		static duk_ret_t read_mobile(duk_context *ctx) {$/;"	f	namespace:mods::js
read_mobile_ptr	globals.cpp	/^		std::shared_ptr<mods::npc> read_mobile_ptr(const mob_vnum& nr,const int& type) {$/;"	f	namespace:mods::globals
read_normalized	mods/orm/orm-base.hpp	/^		std::tuple<int16_t,std::string> read_normalized(TClass* c,std::string column,std::string value) {$/;"	f	struct:mods::orm::orm_base
read_normalized	mods/pq.hpp	/^	std::tuple<int16_t,std::string> read_normalized(TClass* c,std::string column,std::string value) {$/;"	f	struct:orm_base
read_object	db.cpp	/^struct obj_data *read_object(obj_vnum nr, int type) { \/* and obj_rnum *\/$/;"	f
read_object_ptr	db.cpp	/^obj_ptr_t read_object_ptr(obj_vnum nr, int type) { \/* and obj_rnum *\/$/;"	f
read_shop_message	shop.cpp	/^char *read_shop_message(int mnum, room_vnum shr, FILE *shop_f, const char *why) {$/;"	f
read_type_list	shop.cpp	/^int read_type_list(FILE *shop_f, struct shop_buy_data *list,$/;"	f
ready_to_save	mods/builder.cpp	/^	bool ready_to_save(str_t argument) {$/;"	f	struct:command_t
real_abils	mods/player.hpp	/^			char_ability_data& real_abils() {	 \/* Abilities without modifiers   *\/$/;"	f	struct:mods::player
real_armor	mods/player.hpp	/^			uint16_t& real_armor() {$/;"	f	struct:mods::player
real_frozen	mods/world-configuration.cpp	/^		int real_frozen(){$/;"	f	namespace:mods::world_conf
real_idle	mods/world-configuration.cpp	/^		int real_idle(){$/;"	f	namespace:mods::world_conf
real_immortal_start	mods/world-configuration.cpp	/^		int real_immortal_start(){$/;"	f	namespace:mods::world_conf
real_mobile	db.cpp	/^mob_rnum real_mobile(mob_vnum vnum) {$/;"	f
real_mobile	mods/js.cpp	/^		static duk_ret_t real_mobile(duk_context *ctx) {$/;"	f	namespace:mods::js
real_mortal_start	mods/world-configuration.cpp	/^		int real_mortal_start(){$/;"	f	namespace:mods::world_conf
real_object	db.cpp	/^obj_rnum real_object(obj_vnum vnum) {$/;"	f
real_pclass_to_pclass	mods/forge-engine/generator.hpp	/^			player_class_types_t real_pclass_to_pclass(player_class_t type) {$/;"	f	struct:mods::forge_engine::generator
real_room	db.cpp	/^room_rnum real_room(room_vnum vnum) {$/;"	f
real_room	mods/rooms.hpp	/^	inline room_rnum real_room(room_vnum room_id) {$/;"	f	namespace:mods::rooms
real_time_passed	utils.cpp	/^struct time_info_data *real_time_passed(time_t t2, time_t t1) {$/;"	f
real_zone	db.cpp	/^room_rnum real_zone(room_vnum vnum) {$/;"	f
reap	comm.cpp	/^RETSIGTYPE reap(int sig) {$/;"	f
reboot_wizlists	db.cpp	/^void reboot_wizlists(void) {$/;"	f
receptionist	objsave.cpp	/^SPECIAL(receptionist);$/;"	v
receptionist	spec_assign.cpp	/^SPECIAL(receptionist);$/;"	v
recipient	mail.h	/^	long recipient;			\/* who is this mail for?	*\/$/;"	m	struct:mail_index_type_d
recoil_reduction	mods/rifle-attachments.hpp	/^			int16_t recoil_reduction;$/;"	m	struct:mods::rifle_attachments_t
reconstructExpression	mods/catch.hpp	/^		std::string const& reconstructExpression() const {$/;"	f	class:Catch::AssertionResultData::std
reconstructedExpression	mods/catch.hpp	/^		mutable std::string reconstructedExpression;$/;"	m	struct:Catch::AssertionResultData
record	mods/builder-data.hpp	/^		bool record;$/;"	m	struct:room_recorder_t
record_usage	comm.cpp	/^void record_usage(void) {$/;"	f
rectangle_layouts	mods/builder/coordinates.cpp	/^namespace mods::builder::rectangle_layouts {$/;"	n	class:mods::builder	file:
rectangle_layouts	mods/builder/rectangle-layouts.cpp	/^namespace mods::builder::rectangle_layouts {$/;"	n	class:mods::builder	file:
rectangle_layouts	mods/builder/rectangle-layouts.hpp	/^namespace mods::builder::rectangle_layouts {$/;"	n	class:mods::builder
red_str	mods/colors.hpp	/^static inline std::string red_str(TStr str){$/;"	f	namespace:mods::colors
red_text	mods/acl/color.hpp	4;"	d
reduce_ammo	mods/weapons/damage-calculator.cpp	/^	int16_t reduce_ammo($/;"	f	namespace:mods::weapons::damage_calculator
reduce_durability_points	mods/weapons/damage-calculator.cpp	/^	int16_t reduce_durability_points($/;"	f	namespace:mods::weapons::damage_calculator
reduce_elemental_resistance	mods/weapons/elemental.cpp	/^	int reduce_elemental_resistance(int requested_damage, int16_t resistance) {$/;"	f	namespace:mods::weapons::elemental
reduce_explosive_damage_using_armor	mods/armor/basic-protection.cpp	/^	int basic_protection::reduce_explosive_damage_using_armor(obj_ptr_t& explosive,int damage,int where) {$/;"	f	class:mods::armor::basic_protection
reflect_munitions	mods/weapons/damage-types.cpp	/^	void reflect_munitions(player_ptr_t& attacker,player_ptr_t& victim,int dam,int from_direction) {$/;"	f	namespace:mods::weapons::damage_types
refresh_armor_index	mods/forge-engine/generated-armor.cpp	/^	static bool refresh_armor_index = true;$/;"	m	namespace:mods::forge_engine	file:
refresh_dump	mods/player-contract-instance.cpp	/^	void player_contract_instance::refresh_dump() {$/;"	f	class:mods::contracts::player_contract_instance
refresh_mappings	mods/mob-equipment.cpp	/^	void refresh_mappings() {$/;"	f	namespace:mods::mob_equipment
refresh_minimum_proficiencies	mods/js.cpp	/^		static duk_ret_t refresh_minimum_proficiencies(duk_context *ctx) {$/;"	f	namespace:mods::js
refresh_player_states	globals.cpp	/^		void refresh_player_states() {$/;"	f	namespace:mods::globals
refresh_rifle_index	mods/forge-engine/generated-rifle.cpp	/^	static bool refresh_rifle_index = true;$/;"	m	namespace:mods::forge_engine	file:
regenerate_ammo_chance	mods/rifle-attachments.hpp	/^			int16_t regenerate_ammo_chance; 	\/** honored [ 2021-04-13 ] *\/$/;"	m	struct:mods::rifle_attachments_t
regex_match	mods/util.cpp	/^	bool regex_match(std::string_view regex_string,std::string_view target_string) {$/;"	f	namespace:mods::util
registerEnum	mods/catch2.hpp	/^        Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list<E> values ) {$/;"	f	class:Catch::IMutableEnumValuesRegistry::Detail
register_accumulator_command	mods/builder/slotted-builder.hpp	/^			status_response_t register_accumulator_command(std::string verb, std::string_view signature,auto lambda) {$/;"	f	struct:mods::builder::slotted_builder
register_authenticated_player	globals.cpp	/^		void register_authenticated_player(player_ptr_t player) {$/;"	f	namespace:mods::globals
register_breacher	mods/replenish.cpp	/^	void register_breacher(uuid_t breacher){$/;"	f	namespace:mods::replenish
register_callback	mods/events.cpp	/^	void register_callback(event_t event,callback_t cb){$/;"	f	namespace:mods::events
register_custom_command	mods/builder/slotted-builder.hpp	/^			status_response_t register_custom_command(std::string verb, auto lambda) {$/;"	f	struct:mods::builder::slotted_builder
register_custom_command	mods/builder/slotted-builder.hpp	/^			status_response_t register_custom_command(std::string verb, std::string_view signature,auto lambda) {$/;"	f	struct:mods::builder::slotted_builder
register_custom_non_profile_command	mods/builder/slotted-builder.hpp	/^			status_response_t register_custom_non_profile_command(std::string verb, auto lambda) {$/;"	f	struct:mods::builder::slotted_builder
register_damage_event_callback	mods/player.cpp	/^	void player::register_damage_event_callback(damage_event_t e,damage_event_callback_t cb) {$/;"	f	class:mods::player
register_engineer	mods/replenish.cpp	/^	void register_engineer(uuid_t engineer){$/;"	f	namespace:mods::replenish
register_ghost	mods/replenish.cpp	/^	void register_ghost(uuid_t ghost){$/;"	f	namespace:mods::replenish
register_help_command_with_permission	mods/help.cpp	/^	void register_help_command_with_permission(const std::string& command, const std::string& contents,player_level level) {$/;"	f	namespace:mods::help
register_integral_accumulator_command	mods/builder/slotted-builder.hpp	/^			status_response_t register_integral_accumulator_command(std::string verb, std::string_view signature,auto lambda) {$/;"	f	struct:mods::builder::slotted_builder
register_intent_to_attack	mods/intent.cpp	/^	void register_intent_to_attack($/;"	f	namespace:mods::intent
register_intent_to_flee	mods/intent.cpp	/^	void register_intent_to_flee($/;"	f	namespace:mods::intent
register_marine	mods/replenish.cpp	/^	void register_marine(uuid_t marine){$/;"	f	namespace:mods::replenish
register_medic	mods/replenish.cpp	/^	void register_medic(uuid_t medic){$/;"	f	namespace:mods::replenish
register_mob	mods/behaviour_tree_impl.cpp	/^	int8_t register_mob(argument_type mob,std::string tree_name) {$/;"	f	namespace:mods::behaviour_tree_impl
register_mob	mods/behaviour_tree_impl.cpp	/^	void register_mob(uuid_t u) {$/;"	f	namespace:mods::behaviour_tree_impl
register_nickname	mods/rooms.cpp	/^	void register_nickname(const room_rnum& room,std::string_view nick) {$/;"	f	namespace:mods::rooms
register_object	globals.cpp	/^		void register_object(obj_ptr_t obj) {$/;"	f	namespace:mods::globals
register_object_db_id	globals.cpp	/^		void register_object_db_id(uint64_t db_id,uuid_t uuid) {$/;"	f	namespace:mods::globals
register_object_list	globals.cpp	/^		void register_object_list() {$/;"	f	namespace:mods::globals
register_player	globals.cpp	/^		void register_player(player_ptr_t player) {$/;"	f	namespace:mods::globals
register_replenish	mods/intimidate.cpp	/^void register_replenish(room_vnum room,std::string type){$/;"	f	namespace:mods::zone
register_replenish	mods/zone.cpp	/^	void register_replenish(room_vnum room,std::string type) {$/;"	f	namespace:mods::zone
register_room	globals.cpp	/^		void register_room(const room_rnum& r) {$/;"	f	namespace:mods::globals
register_room_at_coordinates	globals.cpp	/^		void register_room_at_coordinates(coordinate_type_t x, coordinate_type_t y, coordinate_type_t z, room_vnum room) {$/;"	f	namespace:mods::globals
register_room_at_coordinates	mods/rooms.cpp	/^	void register_room_at_coordinates(coordinate_type_t x, coordinate_type_t y, coordinate_type_t z, room_vnum room) {$/;"	f	namespace:mods::rooms
register_shop	globals.hpp	/^		void register_shop(TShopPtr shop) {$/;"	f	namespace:mods::globals
register_signature	mods/builder/slotted-builder.hpp	/^			void register_signature(std::string_view verb,std::string_view sig) {$/;"	f	struct:mods::builder::slotted_builder
register_sniper	mods/replenish.cpp	/^	void register_sniper(uuid_t sniper){$/;"	f	namespace:mods::replenish
register_support	mods/replenish.cpp	/^	void register_support(uuid_t support){$/;"	f	namespace:mods::replenish
registered_admin_help_commands	mods/help.cpp	/^	static std::map<std::string,std::string> registered_admin_help_commands;$/;"	m	namespace:mods::help	file:
registered_help_commands	mods/help.cpp	/^	static std::map<std::string,std::pair<player_level,std::string>> registered_help_commands;$/;"	m	namespace:mods::help	file:
registration_allowed	mods/player-registration.cpp	/^	static bool registration_allowed = 1;$/;"	m	namespace:mods::player_registration	file:
release	mods/catch.hpp	/^		virtual void release() const {$/;"	f	struct:Catch::SharedImpl
release_zone	mods/builder.cpp	/^void release_zone(int zone) {$/;"	f
release_zone	mods/zone.cpp	/^	void release_zone(int zone) {$/;"	f	namespace:mods::zone
reload	mods/init.hpp	/^INIT(mods::weapons::reload);$/;"	v
reload	mods/weapons/reload.cpp	/^namespace mods::weapons::reload {$/;"	n	class:mods::weapons	file:
reload	mods/weapons/reload.hpp	/^namespace mods::weapons::reload {$/;"	n	class:mods::weapons
reload_object	mods/weapon.cpp	/^	void reload_object(player_ptr_t& player, obj_ptr_t weapon,std::string_view with) {$/;"	f	namespace:mods::weapon
reload_primary_with	mods/weapon.cpp	/^	void reload_primary_with(player_ptr_t& player,std::string_view with_clip) {$/;"	f	namespace:mods::weapon
reload_secondary_with	mods/weapon.cpp	/^	void reload_secondary_with(player_ptr_t& player,std::string_view with_clip) {$/;"	f	namespace:mods::weapon
reload_time	mods/weapon.hpp	/^			int reload_time;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
reload_weapon	mods/weapons/reload.cpp	/^	void reload_weapon(player_ptr_t& player,obj_ptr_t weapon) {$/;"	f	namespace:mods::weapons::reload
remember	mobact.cpp	/^void remember(char_data *ch,char_data *victim) {$/;"	f
remember_event	mods/weapons/damage-types.cpp	/^	void remember_event(player_ptr_t& victim,player_ptr_t& attacker) {$/;"	f	namespace:mods::weapons::damage_types
remove	mods/affects.hpp	/^			void remove(TAffects id) {$/;"	f	struct:mods::affects::dissolver
remove	mods/orm/orm-base.hpp	/^		std::tuple<int16_t,std::string> remove() {$/;"	f	struct:mods::orm::orm_base
remove	mods/pq.hpp	/^	std::tuple<int16_t,std::string> remove() {$/;"	f	struct:orm_base
remove	mods/super-users.cpp	/^	bool remove(std::string_view name) {$/;"	f	namespace:mods::super_users
remove_affect	mods/player.cpp	/^	void player::remove_affect(uint64_t flag) {$/;"	f	class:mods::player
remove_affect_plr	mods/player.cpp	/^	void player::remove_affect_plr(uint64_t flag) {$/;"	f	class:mods::player
remove_armor_locker	mods/integral-objects-db.cpp	/^	void remove_armor_locker(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
remove_camera_feed	mods/integral-objects-db.cpp	/^	void remove_camera_feed(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
remove_command_signatures	mods/builder/slotted-builder.hpp	/^			void remove_command_signatures(std::vector<std::string> list) {$/;"	f	struct:mods::builder::slotted_builder
remove_dark	mods/rooms.hpp	/^		static inline void remove_dark(TRoom room) {$/;"	f	namespace:mods::rooms::gods
remove_dummy	mods/target-practice-db.cpp	/^	void remove_dummy(player_ptr_t& player, std::vector<std::string>& args) {$/;"	f	namespace:mods::target_practice_db
remove_duplicates	mods/acl/config-parser.cpp	/^void remove_duplicates(std::vector<T>& vec)$/;"	f
remove_flag	mods/player.hpp	/^			aligned_int_t remove_flag(chunk_type_t chunk,aligned_int_t bit) {$/;"	f	struct:mods::player
remove_flag	mods/rooms.hpp	/^	static inline void remove_flag(room_rnum room, int flag) {$/;"	f	namespace:mods::rooms
remove_if_exists	mods/util-map.hpp	/^			static inline void remove_if_exists(TMapType* in_map,TKeyType key){$/;"	f	namespace:mods::util::maps
remove_lvl	boards.h	/^	int	remove_lvl;	\/* min level to remove messages from this board *\/$/;"	m	struct:board_info_type
remove_nickname	mods/rooms.cpp	/^	void remove_nickname(const room_rnum& room) {$/;"	f	namespace:mods::rooms
remove_player_inventory	mods/orm/inventory.cpp	/^		void remove_player_inventory(uint64_t player_db_id, uint64_t object_db_id) {$/;"	f	namespace:mods::orm::inventory::lmdb
remove_player_wear	mods/orm/inventory.cpp	/^		void remove_player_wear(uint64_t player_db_id, uint8_t position) {$/;"	f	namespace:mods::orm::inventory::lmdb
remove_replenish	mods/intimidate.cpp	/^void remove_replenish(room_vnum room,std::string type){$/;"	f	namespace:mods::zone
remove_replenish	mods/zone.cpp	/^	void remove_replenish(room_vnum room,std::string type) {$/;"	f	namespace:mods::zone
remove_room	mods/orm/shop.cpp	/^	int16_t shop::remove_room(room_vnum room){$/;"	f	class:mods::orm::shop
remove_room_dissolve_affect	mods/rooms.cpp	/^	void remove_room_dissolve_affect(room_rnum room, affect_t item) {$/;"	f	namespace:mods::rooms::affects
remove_subscriber	mods/chat.cpp	/^	void channel::remove_subscriber(const socket_t& sock) {$/;"	f	class:mods::chat::channel
remove_super_user	mods/js.cpp	/^		static duk_ret_t remove_super_user(duk_context *ctx) {$/;"	f	namespace:mods::js
remove_texture	structs.cpp	/^void room_data::remove_texture(texture_type_t t) {$/;"	f	class:room_data
remove_type	mods/object.cpp	/^	object& object::remove_type(object_type_enum_t type){$/;"	f	class:mods::object
remove_weapon_locker	mods/integral-objects-db.cpp	/^	void remove_weapon_locker(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
renew_txn	mods/lmdb.cpp	/^	_db_handle::tuple_return_type_t _db_handle::renew_txn(){$/;"	f	class:mods::lmdb::_db_handle
rent_file_timeout	config.cpp	/^int rent_file_timeout = 30;$/;"	v
rent_info	structs.h	/^struct rent_info {$/;"	s
rentcode	structs.h	/^	int	rentcode;$/;"	m	struct:rent_info
renum_world	db.cpp	/^void renum_world(void) {$/;"	f
renum_zone_table	db.cpp	/^void renum_zone_table(void) {$/;"	f
replace_all	globals.cpp	/^		std::string replace_all(std::string str, const std::string& from, const std::string& to) {$/;"	f	namespace:mods::globals
replace_string	fight.cpp	/^char *replace_string(const char *str, const char *weapon_singular, const char *weapon_plural) {$/;"	f
replacement	interpreter.h	/^	char *replacement;$/;"	m	struct:alias_data
replenish	mods/classes/breacher.cpp	/^		void breacher::replenish(){$/;"	f	class:mods::classes::breacher
replenish	mods/classes/engineer.cpp	/^	void engineer::replenish() {$/;"	f	class:mods::classes::engineer
replenish	mods/classes/forge.cpp	/^	void forge::replenish(){$/;"	f	class:mods::classes::forge
replenish	mods/classes/ghost.cpp	/^	void ghost::replenish(){$/;"	f	class:mods::classes::ghost
replenish	mods/classes/marine.cpp	/^	void marine::replenish(){$/;"	f	class:mods::classes::marine
replenish	mods/classes/medic.cpp	/^	void medic::replenish() {$/;"	f	class:mods::classes::medic
replenish	mods/classes/pyrexia.cpp	/^	void pyrexia::replenish(){$/;"	f	class:mods::classes::pyrexia
replenish	mods/classes/sniper.cpp	/^	void sniper::replenish() {$/;"	f	class:mods::classes::sniper
replenish	mods/classes/support.cpp	/^	void support::replenish(){$/;"	f	class:mods::classes::support
replenish	mods/classes/syndrome.cpp	/^		void syndrome::replenish(){$/;"	f	class:mods::classes::syndrome
replenish	mods/intimidate.cpp	/^static std::deque<replenish_command> replenish;$/;"	m	namespace:mods::zone	file:
replenish	mods/replenish.cpp	/^namespace mods::replenish {$/;"	n	class:mods	file:
replenish	mods/replenish.hpp	/^namespace mods::replenish {$/;"	n	class:mods
replenish	mods/zone.cpp	/^	static std::deque<replenish_command> replenish;$/;"	m	namespace:mods::zone	file:
replenish_charge	mods/classes/pyrexia.cpp	/^		void pyrexia::replenish_charge(){$/;"	f	class:mods::classes::pyrexia
replenish_command	mods/intimidate.hpp	/^	struct replenish_command {$/;"	s	namespace:mods::zone
replenish_command	mods/zone.hpp	/^	struct replenish_command {$/;"	s	namespace:mods::zone
replenish_notify	mods/classes/sniper.cpp	/^	void sniper::replenish_notify(std::string_view msg) {$/;"	f	class:mods::classes::sniper
report	mods/classes/base.hpp	/^		void report(std::string_view msg) {$/;"	f	struct:mods::classes::base
report	mods/classes/base.hpp	/^		void report(std::vector<std::string> msgs) {$/;"	f	struct:mods::classes::base
report	mods/mobs/lowly-security.cpp	/^	str_map_t lowly_security::report() {$/;"	f	class:mods::mobs::lowly_security
report	mods/mobs/mini-gunner.cpp	/^	str_map_t mini_gunner::report() {$/;"	f	class:mods::mobs::mini_gunner
report	mods/player.cpp	/^	void player::report() {$/;"	f	class:mods::player
report	mods/players/db-load.cpp	/^	void report(int64_t code, std::string_view msg) {$/;"	f	namespace:mods::players::db_load
report	structs.cpp	/^void mob_special_data::report(room_rnum room) {$/;"	f	class:mob_special_data
report_advances	mods/levels.cpp	/^	void report_advances(std::array<float,STAT_INDEXES_SIZE> stats) {$/;"	f	namespace:mods::levels
report_db_issue	mods/db-report.hpp	/^static inline void report_db_issue(std::string_view message,std::string_view exception_message){$/;"	f
report_error	mods/builder.hpp	/^	void report_error(T player,std::string_view message) {$/;"	f	namespace:mods::builder
report_function	mods/players/db-load.cpp	/^	static reporter_t report_function;$/;"	m	namespace:mods::players::db_load	file:
report_hostile_activity	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto report_hostile_activity() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
report_lookup	mods/lmdb/gethostbyname.cpp	/^void report_lookup(const char *lookup,const char* function){$/;"	f
report_migration_status	mods/migrations.cpp	/^	void report_migration_status(std::string message,std::string type){$/;"	f	namespace:mods::migrations
report_profile_save	mods/builder/slotted-builder.hpp	/^			void report_profile_save(std::shared_ptr<TOrmType> profile,TVnumType vnum) {$/;"	f	struct:mods::builder::slotted_builder
report_status	mods/builder.hpp	/^	void report_status(T player,std::string_view message) {$/;"	f	namespace:mods::builder
report_success	mods/builder.hpp	/^	void report_success(T player,std::string_view message) {$/;"	f	namespace:mods::builder
report_violence	mods/response-team/radio.cpp	/^	void report_violence(uuid_t mob_uuid, std::string_view message) {$/;"	f	namespace:mods::response_team::radio
report_yaml_exception	mods/object-utils.hpp	/^	static inline void report_yaml_exception(TException& e,std::vector<std::string>& items_fed) {$/;"	f	namespace:mods::object_utils
report_yaml_message	mods/object-utils.cpp	/^	void report_yaml_message(std::string_view msg) {$/;"	f	namespace:mods::object_utils
reporter_function_set	mods/players/db-load.cpp	/^	static bool reporter_function_set = false;$/;"	m	namespace:mods::players::db_load	file:
require_js	mods/js.cpp	/^		static duk_ret_t require_js(duk_context *ctx) {$/;"	f	namespace:mods::js
require_test	mods/js.cpp	/^			static duk_ret_t require_test(duk_context *ctx) {$/;"	f	namespace:mods::js::test
requirements	mods/forge-engine/generator.hpp	/^		requirements_t requirements;$/;"	m	struct:mods::forge_engine::generated_explosive_t
requirements_t	mods/forge-engine/requirements.hpp	/^	struct requirements_t {$/;"	s	namespace:mods::forge_engine
reread_wizlist	comm.cpp	/^byte reread_wizlist;		\/* signal: SIGUSR1 *\/$/;"	v
reread_wizlists	comm.cpp	/^RETSIGTYPE reread_wizlists(int sig) {$/;"	f
reserved	interpreter.cpp	/^const char *reserved[] = {$/;"	v
reserved	mods/lmdb.hpp	/^		uint32_t reserved;$/;"	m	struct:mods::lmdb::_selector
reserved_mobs	act.builder.cpp	/^	static std::vector<int> reserved_mobs;$/;"	m	namespace:mods::adhoc	file:
reserved_objects	act.builder.cpp	/^	static std::vector<int> reserved_objects;$/;"	m	namespace:mods::adhoc	file:
reserved_rooms	act.builder.cpp	/^	static std::vector<int> reserved_rooms;$/;"	m	namespace:mods::adhoc	file:
reserved_word	interpreter.cpp	/^int reserved_word(char *argument) {$/;"	f
reserved_zones	act.builder.cpp	/^	static std::vector<int> reserved_zones;$/;"	m	namespace:mods::adhoc	file:
reset	mods/catch.hpp	/^			void reset() {$/;"	f	class:Catch::Ptr
reset	mods/mini-games/line-up.cpp	/^	void line_up::reset(){$/;"	f	class:mods::mini_games::line_up
reset	mods/mini-games/wires.cpp	/^	void wires::reset(){$/;"	f	class:mods::mini_games::wires
reset_char	db.cpp	/^void reset_char(char_data *ch) {$/;"	f
reset_com	db.h	/^	reset_com() : command('X'),$/;"	f	struct:reset_com
reset_com	db.h	/^struct reset_com {$/;"	s
reset_hack	mods/mini-games/line-up.cpp	/^	void reset_hack(player_ptr_t& player){$/;"	f	namespace:mods::mini_games
reset_mode	db.h	/^		int	reset_mode;         \/* conditions for reset (see below)   *\/$/;"	m	struct:zone_data
reset_points	mods/player-scaffolding.cpp	/^	void player_scaffolding::reset_points(player_ptr_t player,std::map<std::string_view,int> * points_map){$/;"	f	class:mods::player_scaffolding
reset_q	db.cpp	/^struct reset_q_type reset_q;	\/* queue of zones to be reset	 *\/$/;"	v	typeref:struct:reset_q_type
reset_q_element	db.h	/^struct reset_q_element {$/;"	s
reset_q_type	db.h	/^struct reset_q_type {$/;"	s
reset_str	mods/colors.hpp	/^static inline std::string reset_str(){$/;"	f	namespace:mods::colors
reset_time	db.cpp	/^void reset_time(void) {$/;"	f
reset_zone	db.cpp	/^void reset_zone(zone_rnum zone) {$/;"	f
reset_zone	mods/zone.cpp	/^	void reset_zone(zone_rnum zone) {$/;"	f	namespace:mods::zone
resolve	mods/lmdb/conf.cpp	/^int conf<StringType>::resolve(StringType node,StringType& target_host){$/;"	f	class:gdns::conf
resolve	mods/lmdb/conf.hpp	/^int resolve(StringType node,StringType& target_host){$/;"	f	struct:gdns::conf
resolve_host	mods/lmdb/gethostbyname.cpp	/^int resolve_host(const std::string & node,std::string & resolved_ptr){$/;"	f
resolve_room	mods/projectile.cpp	/^		room_rnum resolve_room(room_rnum source_room,int direction,std::size_t depth) {$/;"	f	namespace:mods::projectile
resolver	mods/lmdb/db.hpp	/^		resolver(){$/;"	f	struct:gdns::lmdb::resolver
resolver	mods/lmdb/db.hpp	/^	struct resolver {$/;"	s	namespace:gdns::lmdb
resultDisposition	mods/catch.hpp	/^		ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultDisposition	mods/catch2.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultType	mods/catch.hpp	/^		ResultWas::OfType resultType;$/;"	m	struct:Catch::AssertionResultData
result_set	mods/orm/mini-game.hpp	/^		pqxx::result result_set;$/;"	m	struct:mods::orm::mini_game
resume_contract	mods/contracts.cpp	/^	std::tuple<bool,std::string> resume_contract(player_ptr_t& player, contract_vnum_t contract_vnum) {$/;"	f	namespace:mods::contracts
retrieve_item	mods/player-contract-instance.cpp	/^	void player_contract_instance::retrieve_item(const uuid_t& item_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
return_codes	mods/meta_utils.cpp	/^	enum return_codes {$/;"	g	namespace:mods::meta_utils	file:
returning	mods/sql.hpp	/^			compositor<T>& returning(str_object column) {$/;"	f	struct:mods::sql::compositor
rev_dir	constants.cpp	/^int rev_dir[] = {$/;"	v
rev_dir	constants.hpp	/^int rev_dir[] =$/;"	v
revert_to_default	mods/values.cpp	/^		void revert_to_default(std::string in_key){$/;"	f	namespace:mods::values
revert_to_default	mods/values.cpp	/^		void revert_to_default(value_key_t in_key){$/;"	f	namespace:mods::values
reward	mods/contract-steps.cpp	/^	void contract_step::reward(const uint64_t& player_db_id) {$/;"	f	class:mods::contracts::contract_step
reward_1	mods/contract-steps.hpp	/^		std::string     reward_1;$/;"	m	namespace:mods::contracts
reward_10	mods/contract-steps.hpp	/^		std::string     reward_10;$/;"	m	namespace:mods::contracts
reward_2	mods/contract-steps.hpp	/^		std::string     reward_2;$/;"	m	namespace:mods::contracts
reward_3	mods/contract-steps.hpp	/^		std::string     reward_3;$/;"	m	namespace:mods::contracts
reward_4	mods/contract-steps.hpp	/^		std::string     reward_4;$/;"	m	namespace:mods::contracts
reward_5	mods/contract-steps.hpp	/^		std::string     reward_5;$/;"	m	namespace:mods::contracts
reward_6	mods/contract-steps.hpp	/^		std::string     reward_6;$/;"	m	namespace:mods::contracts
reward_7	mods/contract-steps.hpp	/^		std::string     reward_7;$/;"	m	namespace:mods::contracts
reward_8	mods/contract-steps.hpp	/^		std::string     reward_8;$/;"	m	namespace:mods::contracts
reward_9	mods/contract-steps.hpp	/^		std::string     reward_9;$/;"	m	namespace:mods::contracts
reward_money	mods/contract-steps.hpp	/^		uint32_t        reward_money;$/;"	m	namespace:mods::contracts
reward_player	mods/forge-engine/generator.cpp	/^	obj_ptr_t reward_player(player_ptr_t& player) {$/;"	f	namespace:mods::forge_engine
reward_player	mods/loot.cpp	/^	obj_ptr_t reward_player(player_ptr_t& player) {$/;"	f	namespace:mods::loot
reward_player_for_advancing_levels	mods/levels.cpp	/^	void reward_player_for_advancing_levels(player_ptr_t& player) {$/;"	f	namespace:mods::levels
reward_xp	mods/contract-steps.hpp	/^		uint32_t        reward_xp;$/;"	m	namespace:mods::contracts
rifle	mods/injure.cpp	/^	namespace rifle {$/;"	n	namespace:mods::injure	file:
rifle	mods/injure.hpp	/^	namespace rifle {$/;"	n	namespace:mods::injure
rifle	mods/item-types.hpp	/^	enum rifle {$/;"	g	namespace:mods::weapon::type
rifle	mods/mobs/mob.cpp	/^	obj_data* player::rifle() {$/;"	f	class:mods::player
rifle	mods/player.cpp	/^	rifle_data_t* player::rifle() {$/;"	f	class:mods::player
rifle	mods/weapon.cpp	/^	mw_rifle rifle(obj_data_ptr_t& object) {$/;"	f	namespace:mods::weapon
rifle_accuracy_map_0	mods/orm/rifle-instance.hpp	/^		double rifle_accuracy_map_0;$/;"	m	struct:mods::orm::rifle_instance
rifle_accuracy_map_1	mods/orm/rifle-instance.hpp	/^		double rifle_accuracy_map_1;$/;"	m	struct:mods::orm::rifle_instance
rifle_accuracy_map_2	mods/orm/rifle-instance.hpp	/^		double rifle_accuracy_map_2;$/;"	m	struct:mods::orm::rifle_instance
rifle_accuracy_map_3	mods/orm/rifle-instance.hpp	/^		double rifle_accuracy_map_3;$/;"	m	struct:mods::orm::rifle_instance
rifle_ammo_max	mods/orm/rifle-instance.hpp	/^		int16_t rifle_ammo_max;$/;"	m	struct:mods::orm::rifle_instance
rifle_ammo_type	mods/orm/rifle-instance.hpp	/^		std::string rifle_ammo_type;$/;"	m	struct:mods::orm::rifle_instance
rifle_anti_matter_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_anti_matter_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_attachment	mods/orm/rifle-attachment.hpp	/^		rifle_attachment() {$/;"	f	struct:mods::orm::rifle_attachment
rifle_attachment	mods/orm/rifle-attachment.hpp	/^	struct rifle_attachment : public mods::orm::orm_base<rifle_attachment,bool> {$/;"	s	namespace:mods::orm
rifle_attachment_record_t	mods/orm/rifle-attachment.hpp	/^	struct rifle_attachment_record_t {$/;"	s	namespace:mods::orm
rifle_attachment_table_name	mods/orm/rifle-attachment.hpp	/^	static constexpr std::string_view rifle_attachment_table_name = "rifle_attachment";$/;"	m	namespace:mods::orm
rifle_attachments	mods/init.hpp	/^INIT(mods::rifle_attachments);$/;"	v
rifle_attachments	mods/rifle-attachments.cpp	/^	namespace rifle_attachments {$/;"	n	namespace:mods	file:
rifle_attachments	mods/rifle-attachments.hpp	/^	namespace rifle_attachments {$/;"	n	namespace:mods
rifle_attachments_t	mods/rifle-attachments.hpp	/^			rifle_attachments_t(const encoding_t& line) {$/;"	f	struct:mods::rifle_attachments_t
rifle_attachments_t	mods/rifle-attachments.hpp	/^			rifle_attachments_t(encoding_t& line) {$/;"	f	struct:mods::rifle_attachments_t
rifle_attachments_t	mods/rifle-attachments.hpp	/^	struct rifle_attachments_t {$/;"	s	namespace:mods
rifle_attack	mods/weapons/damage-types.cpp	/^	void rifle_attack($/;"	f	namespace:mods::weapons::damage_types
rifle_attack_by_name	mods/weapons/damage-types.cpp	/^	void rifle_attack_by_name(player_ptr_t& player,std::string_view victim_name,int direction) {$/;"	f	namespace:mods::weapons::damage_types
rifle_attack_object	mods/weapons/damage-types.cpp	/^	void rifle_attack_object($/;"	f	namespace:mods::weapons::damage_types
rifle_attack_object_by_name	mods/weapons/damage-types.cpp	/^	void rifle_attack_object_by_name(player_ptr_t& player,std::string_view target_object,int direction) {$/;"	f	namespace:mods::weapons::damage_types
rifle_attack_object_with_feedback	mods/weapons/damage-types.cpp	/^	feedback_t rifle_attack_object_with_feedback($/;"	f	namespace:mods::weapons::damage_types
rifle_attack_with_feedback	mods/weapons/damage-types.cpp	/^	feedback_t rifle_attack_with_feedback($/;"	f	namespace:mods::weapons::damage_types
rifle_attributes_t	mods/forge-engine/generator.hpp	/^	enum rifle_attributes_t {$/;"	g	namespace:mods::forge_engine
rifle_chance_to_injure	mods/orm/rifle-instance.hpp	/^		float rifle_chance_to_injure;$/;"	m	struct:mods::orm::rifle_instance
rifle_clip_size	mods/orm/rifle-instance.hpp	/^		int16_t rifle_clip_size;$/;"	m	struct:mods::orm::rifle_instance
rifle_cooldown_between_shots	mods/orm/rifle-instance.hpp	/^		int16_t rifle_cooldown_between_shots;$/;"	m	struct:mods::orm::rifle_instance
rifle_corrosive_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_corrosive_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_critical_chance	mods/orm/rifle-instance.hpp	/^		int16_t rifle_critical_chance;$/;"	m	struct:mods::orm::rifle_instance
rifle_critical_range	mods/orm/rifle-instance.hpp	/^		int16_t rifle_critical_range;$/;"	m	struct:mods::orm::rifle_instance
rifle_cryogenic_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_cryogenic_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_damage_dice_count	mods/orm/rifle-instance.hpp	/^		int16_t rifle_damage_dice_count;$/;"	m	struct:mods::orm::rifle_instance
rifle_damage_dice_sides	mods/orm/rifle-instance.hpp	/^		int16_t rifle_damage_dice_sides;$/;"	m	struct:mods::orm::rifle_instance
rifle_damage_map_0	mods/orm/rifle-instance.hpp	/^		double rifle_damage_map_0;$/;"	m	struct:mods::orm::rifle_instance
rifle_damage_map_1	mods/orm/rifle-instance.hpp	/^		double rifle_damage_map_1;$/;"	m	struct:mods::orm::rifle_instance
rifle_damage_map_2	mods/orm/rifle-instance.hpp	/^		double rifle_damage_map_2;$/;"	m	struct:mods::orm::rifle_instance
rifle_damage_map_3	mods/orm/rifle-instance.hpp	/^		double rifle_damage_map_3;$/;"	m	struct:mods::orm::rifle_instance
rifle_damage_per_second	mods/orm/rifle-instance.hpp	/^		float rifle_damage_per_second;$/;"	m	struct:mods::orm::rifle_instance
rifle_data	mods/orm/rifle-attachment.hpp	/^		std::string rifle_data;$/;"	m	struct:mods::orm::rifle_attachment
rifle_data	mods/orm/rifle-attachment.hpp	/^		std::string rifle_data;$/;"	m	struct:mods::orm::rifle_attachment_record_t
rifle_description_t	mods/weapon.hpp	/^			rifle_description_t() :$/;"	f	struct:mods::weapon::yaml::rifle_description_t
rifle_description_t	mods/weapon.hpp	/^		struct rifle_description_t {$/;"	s	namespace:mods::weapon::yaml
rifle_description_t	mods/yaml.hpp	/^		rifle_description_t() {$/;"	f	struct:mods::yaml::rifle_description_t
rifle_description_t	mods/yaml.hpp	/^	struct rifle_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
rifle_disorient_amount	mods/orm/rifle-instance.hpp	/^		float rifle_disorient_amount;$/;"	m	struct:mods::orm::rifle_instance
rifle_effective_firing_range	mods/orm/rifle-instance.hpp	/^		int16_t rifle_effective_firing_range;$/;"	m	struct:mods::orm::rifle_instance
rifle_emp_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_emp_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_explosive_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_explosive_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_file	mods/orm/rifle-instance.hpp	/^		std::string rifle_file;$/;"	m	struct:mods::orm::rifle_instance
rifle_filename	mods/orm/rifle-index.hpp	/^		std::string rifle_filename;$/;"	m	struct:mods::orm::rifle_index_record_t
rifle_headshot_bonus	mods/orm/rifle-instance.hpp	/^		float rifle_headshot_bonus;$/;"	m	struct:mods::orm::rifle_instance
rifle_id	mods/orm/rifle-instance.hpp	/^		uint64_t rifle_id;$/;"	m	struct:mods::orm::rifle_instance
rifle_incendiary_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_incendiary_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_index	mods/orm/rifle-index.hpp	/^		rifle_index() : id(0) {$/;"	f	struct:mods::orm::rifle_index
rifle_index	mods/orm/rifle-index.hpp	/^	struct rifle_index : public mods::orm::orm_base<rifle_index,std::string> {$/;"	s	namespace:mods::orm
rifle_index_changed	mods/forge-engine/generated-rifle.cpp	/^	void rifle_index_changed() {$/;"	f	namespace:mods::forge_engine
rifle_index_record_t	mods/orm/rifle-index.hpp	/^	struct rifle_index_record_t {$/;"	s	namespace:mods::orm
rifle_instance	mods/orm/rifle-instance.cpp	/^	rifle_instance::rifle_instance(obj_ptr_t& obj) {$/;"	f	class:mods::orm::rifle_instance
rifle_instance	mods/orm/rifle-instance.hpp	/^		rifle_instance() : rifle_id(0) {$/;"	f	struct:mods::orm::rifle_instance
rifle_instance	mods/orm/rifle-instance.hpp	/^	struct rifle_instance : public mods::orm::orm_base<rifle_instance,bool> {$/;"	s	namespace:mods::orm
rifle_instance	structs.h	/^		std::unique_ptr<rifle_instance_data<attachment_data_t,std::shared_ptr<obj_data>,uuid_t>> rifle_instance;$/;"	m	struct:obj_data
rifle_instance_data	mods/rifle-instance-data.hpp	/^		rifle_instance_data() : ammo(0) {$/;"	f	struct:rifle_instance_data
rifle_instance_data	mods/rifle-instance-data.hpp	/^	struct rifle_instance_data {$/;"	s
rifle_level	mods/orm/rifle-attachment.hpp	/^		uint16_t rifle_level;$/;"	m	struct:mods::orm::rifle_attachment
rifle_level	mods/orm/rifle-attachment.hpp	/^		uint16_t rifle_level;$/;"	m	struct:mods::orm::rifle_attachment_record_t
rifle_manufacturer	mods/orm/rifle-instance.hpp	/^		std::string rifle_manufacturer;$/;"	m	struct:mods::orm::rifle_instance
rifle_max_range	mods/orm/rifle-instance.hpp	/^		int16_t rifle_max_range;$/;"	m	struct:mods::orm::rifle_instance
rifle_muzzle_velocity	mods/orm/rifle-instance.hpp	/^		int16_t rifle_muzzle_velocity;$/;"	m	struct:mods::orm::rifle_instance
rifle_name	mods/orm/rifle-instance.hpp	/^		std::string rifle_name;$/;"	m	struct:mods::orm::rifle_instance
rifle_player_id	mods/orm/rifle-attachment.hpp	/^		uint64_t rifle_player_id;$/;"	m	struct:mods::orm::rifle_attachment
rifle_player_id	mods/orm/rifle-attachment.hpp	/^		uint64_t rifle_player_id;$/;"	m	struct:mods::orm::rifle_attachment_record_t
rifle_position	mods/orm/rifle-attachment.hpp	/^		std::string rifle_position;$/;"	m	struct:mods::orm::rifle_attachment
rifle_position	mods/orm/rifle-attachment.hpp	/^		std::string rifle_position;$/;"	m	struct:mods::orm::rifle_attachment_record_t
rifle_radioactive_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_radioactive_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_range_multiplier	mods/orm/rifle-instance.hpp	/^		float rifle_range_multiplier;$/;"	m	struct:mods::orm::rifle_instance
rifle_rarity	mods/orm/rifle-instance.hpp	/^		std::string rifle_rarity;$/;"	m	struct:mods::orm::rifle_instance
rifle_reload_time	mods/orm/rifle-instance.hpp	/^		int16_t rifle_reload_time;$/;"	m	struct:mods::orm::rifle_instance
rifle_rounds_per_minute	mods/orm/rifle-instance.hpp	/^		int16_t rifle_rounds_per_minute;$/;"	m	struct:mods::orm::rifle_instance
rifle_shock_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_shock_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_shrapnel_damage	mods/orm/rifle-instance.hpp	/^		int16_t rifle_shrapnel_damage;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_armor	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_armor;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_chemistry	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_chemistry;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_constitution	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_constitution;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_demolitions	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_demolitions;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_dexterity	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_dexterity;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_electronics	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_electronics;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_intelligence	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_intelligence;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_marksmanship	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_marksmanship;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_medical	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_medical;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_sniping	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_sniping;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_strategy	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_strategy;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_strength	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_strength;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_weapon_handling	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_weapon_handling;$/;"	m	struct:mods::orm::rifle_instance
rifle_stat_wisdom	mods/orm/rifle-instance.hpp	/^		int16_t rifle_stat_wisdom;$/;"	m	struct:mods::orm::rifle_instance
rifle_str_type	mods/orm/rifle-instance.hpp	/^		std::string rifle_str_type;$/;"	m	struct:mods::orm::rifle_instance
rifle_type	mods/orm/rifle-index.hpp	/^		std::string rifle_type;$/;"	m	struct:mods::orm::rifle_index
rifle_type	mods/orm/rifle-index.hpp	/^		std::string rifle_type;$/;"	m	struct:mods::orm::rifle_index_record_t
rifle_type	mods/orm/rifle-instance.hpp	/^		std::string rifle_type;$/;"	m	struct:mods::orm::rifle_instance
rifle_types_t	mods/forge-engine/generator.hpp	/^	enum rifle_types_t {$/;"	g	namespace:mods::forge_engine
rifle_vnum	mods/orm/rifle-instance.hpp	/^		int16_t rifle_vnum;$/;"	m	struct:mods::orm::rifle_instance
right_join	mods/sql.hpp	/^			compositor<T>& right_join(std::string_view table) {$/;"	f	struct:mods::sql::compositor
right_outer_join	mods/sql.hpp	/^			compositor<T>& right_outer_join(std::string_view table) {$/;"	f	struct:mods::sql::compositor
rnum	boards.h	/^	obj_rnum rnum;	\/* rnum of this board *\/$/;"	m	struct:board_info_type
roam_recorder	mods/mob-roam.cpp	/^	roam_recorder::roam_recorder($/;"	f	class:mods::mob_roam::roam_recorder
roam_recorder	mods/mob-roam.hpp	/^	struct roam_recorder {$/;"	s	namespace:mods::mob_roam
roam_recorder_data	mods/mob-roam.cpp	/^	static std::vector<std::shared_ptr<mods::mob_roam::roam_recorder>> roam_recorder_data;$/;"	m	namespace:mods::mob_roam	file:
roam_recorder_help_screen	mods/mob-roam.cpp	/^	const std::vector<std::string>& roam_recorder_help_screen() {$/;"	f	namespace:mods::mob_roam
roaming_data	mods/mob-roam.cpp	/^	static std::map<mob_vnum,roaming_data_t> roaming_data;$/;"	m	namespace:mods::mob_roam	file:
roaming_profile_name	mods/mob-roam.cpp	/^	std::string_view roam_recorder::roaming_profile_name() {$/;"	f	class:mods::mob_roam::roam_recorder
roll	mods/fluxkraft/generator.cpp	/^	bool generator::roll<bool>() {$/;"	f	class:mods::fluxkraft::generator
roll	mods/fluxkraft/generator.hpp	/^			TRandomType roll() {$/;"	f	struct:mods::fluxkraft::generator
roll	mods/forge-engine/generated-armor.cpp	/^	obj_ptr_t generated_armor_t::roll() {$/;"	f	class:mods::forge_engine::generated_armor_t
roll	mods/forge-engine/generated-rifle.cpp	/^	obj_ptr_t generated_rifle_t::roll() {$/;"	f	class:mods::forge_engine::generated_rifle_t
roll	mods/forge-engine/generator.cpp	/^	bool generator::roll<bool>() {$/;"	f	class:mods::forge_engine::generator
roll	mods/forge-engine/generator.hpp	/^			TRandomType roll() {$/;"	f	struct:mods::forge_engine::generator
roll	mods/rand.cpp	/^	int roll(int number, int size) {$/;"	f	namespace:mods::rand
roll_between	mods/fluxkraft/generator.hpp	/^			TUintWidth roll_between(TUintWidth LO, TUintWidth HI) {$/;"	f	struct:mods::fluxkraft::generator
roll_between	mods/forge-engine/generator.hpp	/^			TUintWidth roll_between(TUintWidth LO, TUintWidth HI) {$/;"	f	struct:mods::forge_engine::generator
roll_between	mods/forge-engine/util.hpp	/^	TUintWidth roll_between(TUintWidth LO, TUintWidth HI) {$/;"	f	namespace:mods::forge_engine
roll_float	mods/fluxkraft/generator.hpp	/^			float roll_float(float LO, float HI) {$/;"	f	struct:mods::fluxkraft::generator
roll_float	mods/forge-engine/generator.hpp	/^			float roll_float(float LO, float HI) {$/;"	f	struct:mods::forge_engine::generator
roll_heat_accumulation_hp_gain	mods/classes/pyrexia.cpp	/^		uint16_t pyrexia::roll_heat_accumulation_hp_gain(obj_ptr_t& attacking_weapon){$/;"	f	class:mods::classes::pyrexia
roll_incendiary_shot	mods/classes/pyrexia.cpp	/^		uint16_t pyrexia::roll_incendiary_shot(obj_ptr_t& attacking_weapon,uuid_t target){$/;"	f	class:mods::classes::pyrexia
roll_real_abils	class.cpp	/^void roll_real_abils(char_data *ch) {$/;"	f
room	graph.cpp	/^	room_rnum room;$/;"	m	struct:bfs_queue_struct	file:
room	mods/camera.cpp	/^	int camera::room() {$/;"	f	class:mods::camera
room	mods/contract-steps.hpp	/^		room_vnum				room;$/;"	m	namespace:mods::contracts
room	mods/fluxkraft/arcon-bar.hpp	/^			room_counter_t room;$/;"	m	struct:mods::fluxkraft::arcon::attach_point_t
room	mods/fluxkraft/arcon-metropolitan.hpp	/^		room_counter_t room;$/;"	m	struct:mods::fluxkraft::arcon::attach_point_t
room	mods/fluxkraft/shape-dictionary.cpp	/^		room_counter_t room;$/;"	m	struct:mods::fluxkraft::attach_point_t	file:
room	mods/intimidate.hpp	/^		room_vnum room;$/;"	m	struct:mods::zone::replenish_command
room	mods/js.cpp	/^		static duk_ret_t room(duk_context *ctx) {$/;"	f	namespace:mods::js
room	mods/mobs/mini-gunner.cpp	/^	room_rnum mini_gunner::room() {$/;"	f	class:mods::mobs::mini_gunner
room	mods/mobs/mob.hpp	/^			room_rnum& room(){$/;"	f	class:mods::player
room	mods/mobs/smart-mob.cpp	/^	room_rnum smart_mob::room() {$/;"	f	class:mods::mobs::smart_mob
room	mods/orm/room.cpp	/^	room::room(const pqxx::result::reference& r) {$/;"	f	class:mods::orm::room
room	mods/orm/room.hpp	/^		room() : base(), id(0) {$/;"	f	struct:mods::orm::room
room	mods/orm/room.hpp	/^	struct room : public base {$/;"	s	namespace:mods::orm
room	mods/player.hpp	/^			room_rnum& room() {$/;"	f	struct:mods::player
room	mods/zone.hpp	/^		room_vnum room;$/;"	m	struct:mods::zone::replenish_command
room_bits	constants.cpp	/^const char *room_bits[] = {$/;"	v
room_bits	constants.hpp	/^const char *room_bits[] = {$/;"	v
room_bits_count	constants.cpp	/^size_t	room_bits_count = sizeof(room_bits) \/ sizeof(room_bits[0]) - 1,$/;"	v
room_bits_count	constants.hpp	/^size_t	room_bits_count = sizeof(room_bits) \/ sizeof(room_bits[0]) - 1,$/;"	v
room_counter	mods/fluxkraft/arcon-bar.hpp	/^			room_counter_t room_counter;$/;"	m	struct:mods::fluxkraft::arcon::bar
room_counter	mods/fluxkraft/arcon-metropolitan.hpp	/^		room_counter_t room_counter;$/;"	m	struct:mods::fluxkraft::arcon::metro
room_counter	mods/fluxkraft/shape-dictionary.cpp	/^		room_counter_t room_counter;$/;"	m	struct:mods::fluxkraft::shape_description	file:
room_data	structs.cpp	/^room_data::room_data() {$/;"	f	class:room_data
room_data	structs.cpp	/^room_data::room_data(const room_data& r) {$/;"	f	class:room_data
room_data	structs.h	/^struct room_data {$/;"	s
room_direction_data	structs.h	/^struct room_direction_data {$/;"	s
room_distance	mods/scan.cpp	/^	std::tuple<bool,distance_t> room_distance(room_rnum& source,room_rnum& dest) {$/;"	f	namespace:mods::scan
room_entry	mods/mobs/room-watching.cpp	/^		void room_entry(room_rnum room,uuid_t player){$/;"	f	namespace:mods::mobs::room_watching::events
room_event	globals.cpp	/^		void room_event(room_vnum room,mods::ai_state::event_type_t event) {$/;"	f	namespace:mods::globals
room_exit	mods/mobs/room-watching.cpp	/^		void room_exit(room_rnum room,uuid_t player){$/;"	f	namespace:mods::mobs::room_watching::events
room_fire_damage	mods/weapons/elemental.cpp	/^	void room_fire_damage(player_ptr_t& player,uint16_t damage) {$/;"	f	namespace:mods::weapons::elemental
room_flag	mods/orm/room.hpp	/^		uint64_t room_flag;$/;"	m	struct:mods::orm::room
room_flag_from_string	mods/rooms.hpp	/^	static inline std::optional<int> room_flag_from_string(std::string& s) {$/;"	f	namespace:mods::rooms
room_flag_strings	mods/rooms.hpp	/^	static const std::map<int,std::string> room_flag_strings = {$/;"	m	namespace:mods::rooms
room_flags	structs.h	/^		int room_flags;		\/* DEATH,DARK ... etc *\/$/;"	v
room_info	mods/orm/shop.hpp	/^		shop_rooms room_info;$/;"	m	struct:mods::orm::shop
room_info	shop.h	/^	TRoomInfo room_info;$/;"	m	struct:shop_data
room_is_dark	utils.cpp	/^int room_is_dark(room_rnum room) {$/;"	f
room_keeper_map	mods/orm/shop.hpp	/^		std::map<room_vnum,std::shared_ptr<mods::npc>> room_keeper_map;$/;"	m	struct:mods::orm::shop_rooms
room_list	globals.cpp	/^		room_list_t room_list;$/;"	m	namespace:mods::globals	file:
room_list	globals.hpp	/^inline mods::globals::player_list_t& room_list(room_rnum r) {$/;"	f
room_list	mods/builder-data.hpp	/^		room_list_t room_list;$/;"	m	struct:room_recorder_t
room_mappings	mods/builder.cpp	/^	static std::map<int,int> room_mappings;$/;"	m	namespace:mods::builder	file:
room_number	mods/orm/room.hpp	/^		room_vnum room_number;$/;"	m	struct:mods::orm::room
room_pave_mode	mods/builder-data.hpp	/^	bool room_pave_mode;$/;"	m	struct:builder_data_t
room_pave_mode	mods/player.cpp	/^	bool player::room_pave_mode() {$/;"	f	class:mods::player
room_pavement_list	mods/builder-data.hpp	/^	std::vector<room_pavement_t> room_pavement_list;$/;"	m	struct:builder_data_t
room_pavement_t	mods/builder-data.hpp	/^	room_pavement_t() : start_room(0), transact_id(-1),$/;"	f	struct:room_pavement_t
room_pavement_t	mods/builder-data.hpp	/^	room_pavement_t(int start,int z_id) :  start_room(start), transact_id(0),$/;"	f	struct:room_pavement_t
room_pavement_t	mods/builder-data.hpp	/^	room_pavement_t(int start,int z_id,int t_id) :  start_room(start), transact_id(t_id),$/;"	f	struct:room_pavement_t
room_pavement_t	mods/builder-data.hpp	/^struct room_pavement_t {$/;"	s
room_pavements	mods/builder-data.hpp	/^	room_pavement_t room_pavements;$/;"	m	struct:builder_data_t
room_pointer	mods/fluxkraft/arcon-bar.hpp	/^			std::shared_ptr<char_data> room_pointer;$/;"	m	struct:mods::fluxkraft::arcon::attach_point_t
room_pointer	mods/fluxkraft/arcon-metropolitan.hpp	/^		std::shared_ptr<char_data> room_pointer;$/;"	m	struct:mods::fluxkraft::arcon::attach_point_t
room_pointer	mods/fluxkraft/shape-dictionary.cpp	/^		std::shared_ptr<char_data> room_pointer;$/;"	m	struct:mods::fluxkraft::attach_point_t	file:
room_recorder	mods/builder-data.hpp	/^	room_recorder_t room_recorder;$/;"	m	struct:builder_data_t
room_recorder_t	mods/builder-data.cpp	/^room_recorder_t::room_recorder_t() : record(0) {}$/;"	f	class:room_recorder_t
room_recorder_t	mods/builder-data.hpp	/^struct room_recorder_t {$/;"	s
room_rnum	mods/index-type.hpp	/^typedef IDXTYPE room_rnum;$/;"	t
room_rnum	mods/scan.hpp	/^			uint32_t room_rnum;$/;"	m	struct:mods::scan::__anon4
room_rnum	mods/scan.hpp	/^			uint32_t room_rnum;$/;"	m	struct:mods::scan::find_results_t
room_shopmap	shop.cpp	/^	std::map<room_rnum,std::shared_ptr<shop_data_t>> room_shopmap;$/;"	m	namespace:mods::globals	file:
room_smoke_damage	mods/weapons/elemental.cpp	/^	void room_smoke_damage(player_ptr_t& player, uint16_t damage) {$/;"	f	namespace:mods::weapons::elemental
room_transaction_id	mods/builder-data.hpp	/^	int room_transaction_id;$/;"	m	struct:builder_data_t
room_virtual_number	mods/orm/mob-roam.hpp	/^		uint32_t room_virtual_number;$/;"	m	struct:mods::orm::mob_roam_record_t
room_vnum	mods/index-type.hpp	/^typedef IDXTYPE room_vnum;$/;"	t
room_vnums	mods/builder-data.cpp	/^room_recorder_t::room_vnum_list_t room_recorder_t::room_vnums() {$/;"	f	class:room_recorder_t
room_watching	mods/mobs/room-watching.cpp	/^namespace mods::mobs::room_watching {$/;"	n	class:mods::mobs	file:
room_watching	mods/mobs/room-watching.hpp	/^namespace mods::mobs::room_watching {$/;"	n	class:mods::mobs
rooms	db.cpp	/^namespace mods::rooms {$/;"	n	class:mods	file:
rooms	globals.cpp	/^		namespace rooms {$/;"	n	namespace:mods::globals	file:
rooms	globals.hpp	/^		namespace rooms {$/;"	n	namespace:mods::globals
rooms	mods/builder-data.cpp	/^room_recorder_t::room_list_t& room_recorder_t::rooms() {$/;"	f	class:room_recorder_t
rooms	mods/builder-data.hpp	/^	std::vector<int> rooms;$/;"	m	struct:room_pavement_t
rooms	mods/events.cpp	/^		namespace rooms {$/;"	n	namespace:mods::events::publish	file:
rooms	mods/events.hpp	/^		namespace rooms {$/;"	n	namespace:mods::events::publish
rooms	mods/mob-roam.cpp	/^	std::vector<room_vnum>& roam_recorder::rooms() {$/;"	f	class:mods::mob_roam::roam_recorder
rooms	mods/orm/shop.hpp	/^		room_list_t rooms;$/;"	m	struct:mods::orm::shop_rooms
rooms	mods/player.cpp	/^namespace mods::rooms {$/;"	n	class:mods	file:
rooms	mods/rooms.cpp	/^namespace mods::rooms {$/;"	n	class:mods	file:
rooms	mods/rooms.hpp	/^namespace mods::rooms {$/;"	n	class:mods
rooms	mods/world-configuration.cpp	/^	rooms_t rooms;$/;"	m	namespace:mods::world_conf	file:
rotate_camera_feed	mods/integral-objects.cpp	/^	void rotate_camera_feed(room_vnum room_v_num) {$/;"	f	namespace:mods::integral_objects
rotate_left	mods/mini-games/line-up.cpp	/^	std::string line_up::rotate_left(int in_row){$/;"	f	class:mods::mini_games::line_up
rotate_left	mods/mini-games/line-up.cpp	/^	void rotate_left(player_ptr_t& player){$/;"	f	namespace:mods::mini_games
rotate_right	mods/mini-games/line-up.cpp	/^	std::string line_up::rotate_right(int in_row){$/;"	f	class:mods::mini_games::line_up
rotate_right	mods/mini-games/line-up.cpp	/^	void rotate_right(player_ptr_t& player){$/;"	f	namespace:mods::mini_games
rotl	mods/rand.cpp	/^	static inline uint64_t rotl(const uint64_t x, int k) {$/;"	f	namespace:mods::rand::xoroshiro
round	bsd-snprintf.cpp	/^round(long double value) {$/;"	f	file:
rounds_per_minute	mods/weapon.hpp	/^			int rounds_per_minute;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
routines	spells.h	/^	int routines;$/;"	m	struct:spell_info_type
row_count	mods/mini-games/line-up.cpp	/^	int line_up::row_count(){$/;"	f	class:mods::mini_games::line_up
row_id	mods/lmdb.hpp	/^		uint64_t row_id;$/;"	m	struct:mods::lmdb::_selector
rows	mods/mini-games/line-up.hpp	/^		std::vector<std::vector<uint8_t>> rows;$/;"	m	namespace:mods::mini_games
rows	mods/orm/armor-index.hpp	/^		std::vector<armor_index_record_t> rows;$/;"	m	struct:mods::orm::armor_index
rows	mods/orm/contract-steps.hpp	/^		std::vector<contract_steps_record_t> rows;$/;"	m	struct:mods::orm::contract_steps
rows	mods/orm/mob-roam.hpp	/^		std::vector<mob_roam_record_t> rows;$/;"	m	struct:mods::orm::mob_roam
rows	mods/orm/player-skill-points.hpp	/^		std::vector<player_skill_points_record_t> rows;$/;"	m	struct:mods::orm::player_skill_points
rows	mods/orm/player-skill-usage.hpp	/^		std::vector<player_skill_usage_record_t> rows;$/;"	m	struct:mods::orm::player_skill_usage
rows	mods/orm/rifle-attachment.hpp	/^		std::deque<rifle_attachment_record_t> rows;$/;"	m	struct:mods::orm::rifle_attachment
rows	mods/orm/rifle-index.hpp	/^		std::vector<rifle_index_record_t> rows;$/;"	m	struct:mods::orm::rifle_index
rows	mods/orm/skill-points.hpp	/^		std::vector<skill_points_record_t> rows;$/;"	m	struct:mods::orm::skill_points
rows	mods/orm/skill-trees.hpp	/^		std::vector<skill_trees_record_t> rows;$/;"	m	struct:mods::orm::skill_trees
rr_debug	mods/intimidate.cpp	11;"	d	file:
rr_debug	mods/intimidate.cpp	8;"	d	file:
rr_debug	mods/intimidate.cpp	95;"	d	file:
rr_debug	mods/zone.cpp	12;"	d	file:
rr_debug	mods/zone.cpp	15;"	d	file:
rr_debug	mods/zone.cpp	335;"	d	file:
rst_text	mods/acl/color.hpp	6;"	d
rtrim	mods/lmdb/db.hpp	/^		static inline void rtrim(std::string &s) {$/;"	f	struct:gdns::util
rtrim_copy	mods/lmdb/db.hpp	/^		static inline std::string rtrim_copy(std::string s) {$/;"	f	struct:gdns::util
rule	mods/acl/config-parser.hpp	/^                typedef std::vector<bool>  rule;$/;"	t	class:mods::acl::FileParser
run	mods/behaviour_tree.hpp	/^		run_status run(LambdaArgument arg) {$/;"	f	struct:mods::behaviour_tree
run	mods/behaviour_tree_node.hpp	/^			run_status_t run(LambdaArgument& arg) {$/;"	f	struct:mods::behaviour_tree_node
run	mods/debug-pre-game.hpp	/^	bool run() {$/;"	f	namespace:mods::debug::pre_game
run	mods/replenish.cpp	/^	void run(){$/;"	f	namespace:mods::replenish
run	mods/unit-tests/elemental.cpp	/^	int run() {$/;"	f	namespace:mods::unit_tests
run_autowiz	limits.cpp	/^void run_autowiz(void) {$/;"	f
run_behaviour_trees	comm.cpp	/^void run_behaviour_trees() {$/;"	f
run_intents	mods/intent.cpp	/^	void run_intents(){$/;"	f	namespace:mods::intent
run_migration	mods/migrations.cpp	/^	std::tuple<bool,int,std::string> run_migration(std::string identifier, std::string purpose,std::string direction){$/;"	f	namespace:mods::migrations
run_profile_scripts	config.cpp	/^	bool run_profile_scripts;$/;"	m	namespace:config	file:
run_profile_scripts	mods/js.cpp	/^		void run_profile_scripts(const std::string& player_name) {$/;"	f	namespace:mods::js
run_status_t	mods/behaviour_tree_node.hpp	/^			} run_status_t;$/;"	t	struct:mods::behaviour_tree_node	typeref:struct:mods::behaviour_tree_node::__anon2
run_test_suite	mods/js.cpp	/^		bool run_test_suite(mods::player& player,std::string_view suite) {$/;"	f	namespace:mods::js
run_trees	mods/behaviour_tree_impl.cpp	/^	void run_trees() {$/;"	f	namespace:mods::behaviour_tree_impl
run_trigger	mods/contracts.cpp	/^	int run_trigger(player_ptr_t& player) {$/;"	f	namespace:mods::contracts
run_zone_replenish	mods/intimidate.cpp	/^	void run_zone_replenish(){$/;"	f	namespace:mods::zone
s	mods/catch.hpp	/^			static std::ostream& s;$/;"	m	struct:Catch::Detail::IsStreamInsertable
s	mods/rand.cpp	/^	static uint64_t s[4];$/;"	m	namespace:mods::rand::xoroshiro	file:
s_addr	sysdep.h	/^	unsigned long int s_addr;	\/* for inet_addr, etc. *\/$/;"	m	struct:in_addr
s_contract_vnum	mods/orm/contract-steps.hpp	/^		contract_vnum_t s_contract_vnum;$/;"	m	struct:mods::orm::contract_steps
s_contract_vnum	mods/orm/contract-steps.hpp	/^		contract_vnum_t s_contract_vnum;$/;"	m	struct:mods::orm::contract_steps_record_t
s_description	mods/orm/contract-steps.hpp	/^		std::string s_description;$/;"	m	struct:mods::orm::contract_steps
s_description	mods/orm/contract-steps.hpp	/^		std::string s_description;$/;"	m	struct:mods::orm::contract_steps_record_t
s_empty	mods/catch2.hpp	/^        static constexpr char const* const s_empty = "";$/;"	m	class:Catch::StringRef
s_is_optional	mods/orm/contract-steps.hpp	/^		bool s_is_optional;$/;"	m	struct:mods::orm::contract_steps
s_is_optional	mods/orm/contract-steps.hpp	/^		bool s_is_optional;$/;"	m	struct:mods::orm::contract_steps_record_t
s_mob_vnum	mods/orm/contract-steps.hpp	/^		mob_vnum s_mob_vnum;$/;"	m	struct:mods::orm::contract_steps
s_mob_vnum	mods/orm/contract-steps.hpp	/^		mob_vnum s_mob_vnum;$/;"	m	struct:mods::orm::contract_steps_record_t
s_object_yaml	mods/orm/contract-steps.hpp	/^		std::string s_object_yaml;$/;"	m	struct:mods::orm::contract_steps
s_object_yaml	mods/orm/contract-steps.hpp	/^		std::string s_object_yaml;$/;"	m	struct:mods::orm::contract_steps_record_t
s_order	mods/orm/contract-steps.hpp	/^		uint8_t s_order;$/;"	m	struct:mods::orm::contract_steps
s_order	mods/orm/contract-steps.hpp	/^		uint8_t s_order;$/;"	m	struct:mods::orm::contract_steps_record_t
s_quota	mods/orm/contract-steps.hpp	/^		quota_t s_quota;$/;"	m	struct:mods::orm::contract_steps
s_quota	mods/orm/contract-steps.hpp	/^		quota_t s_quota;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_1	mods/orm/contract-steps.hpp	/^		std::string s_reward_1;$/;"	m	struct:mods::orm::contract_steps
s_reward_1	mods/orm/contract-steps.hpp	/^		std::string s_reward_1;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_10	mods/orm/contract-steps.hpp	/^		std::string s_reward_10;$/;"	m	struct:mods::orm::contract_steps
s_reward_10	mods/orm/contract-steps.hpp	/^		std::string s_reward_10;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_2	mods/orm/contract-steps.hpp	/^		std::string s_reward_2;$/;"	m	struct:mods::orm::contract_steps
s_reward_2	mods/orm/contract-steps.hpp	/^		std::string s_reward_2;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_3	mods/orm/contract-steps.hpp	/^		std::string s_reward_3;$/;"	m	struct:mods::orm::contract_steps
s_reward_3	mods/orm/contract-steps.hpp	/^		std::string s_reward_3;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_4	mods/orm/contract-steps.hpp	/^		std::string s_reward_4;$/;"	m	struct:mods::orm::contract_steps
s_reward_4	mods/orm/contract-steps.hpp	/^		std::string s_reward_4;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_5	mods/orm/contract-steps.hpp	/^		std::string s_reward_5;$/;"	m	struct:mods::orm::contract_steps
s_reward_5	mods/orm/contract-steps.hpp	/^		std::string s_reward_5;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_6	mods/orm/contract-steps.hpp	/^		std::string s_reward_6;$/;"	m	struct:mods::orm::contract_steps
s_reward_6	mods/orm/contract-steps.hpp	/^		std::string s_reward_6;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_7	mods/orm/contract-steps.hpp	/^		std::string s_reward_7;$/;"	m	struct:mods::orm::contract_steps
s_reward_7	mods/orm/contract-steps.hpp	/^		std::string s_reward_7;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_8	mods/orm/contract-steps.hpp	/^		std::string s_reward_8;$/;"	m	struct:mods::orm::contract_steps
s_reward_8	mods/orm/contract-steps.hpp	/^		std::string s_reward_8;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_9	mods/orm/contract-steps.hpp	/^		std::string s_reward_9;$/;"	m	struct:mods::orm::contract_steps
s_reward_9	mods/orm/contract-steps.hpp	/^		std::string s_reward_9;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_money	mods/orm/contract-steps.hpp	/^		uint32_t s_reward_money;$/;"	m	struct:mods::orm::contract_steps
s_reward_money	mods/orm/contract-steps.hpp	/^		uint32_t s_reward_money;$/;"	m	struct:mods::orm::contract_steps_record_t
s_reward_xp	mods/orm/contract-steps.hpp	/^		uint32_t s_reward_xp;$/;"	m	struct:mods::orm::contract_steps
s_reward_xp	mods/orm/contract-steps.hpp	/^		uint32_t s_reward_xp;$/;"	m	struct:mods::orm::contract_steps_record_t
s_room_vnum	mods/orm/contract-steps.hpp	/^		room_vnum s_room_vnum;$/;"	m	struct:mods::orm::contract_steps
s_room_vnum	mods/orm/contract-steps.hpp	/^		room_vnum s_room_vnum;$/;"	m	struct:mods::orm::contract_steps_record_t
s_task_target	mods/orm/contract-steps.hpp	/^		task_target_t s_task_target;$/;"	m	struct:mods::orm::contract_steps
s_task_target	mods/orm/contract-steps.hpp	/^		task_target_t s_task_target;$/;"	m	struct:mods::orm::contract_steps_record_t
s_task_type	mods/orm/contract-steps.hpp	/^		task_type_t s_task_type;$/;"	m	struct:mods::orm::contract_steps
s_task_type	mods/orm/contract-steps.hpp	/^		task_type_t s_task_type;$/;"	m	struct:mods::orm::contract_steps_record_t
same_obj	shop.cpp	/^int same_obj(struct obj_data *obj1, struct obj_data *obj2) {$/;"	f
sandbox_data_t	mods/builder.cpp	/^	sandbox_data_t::sandbox_data_t($/;"	f	class:mods::builder::sandbox_data_t
sandbox_data_t	mods/builder.cpp	/^	sandbox_data_t::sandbox_data_t() : m_name("") {}$/;"	f	class:mods::builder::sandbox_data_t
sandbox_data_t	mods/builder.hpp	/^	struct sandbox_data_t {$/;"	s	namespace:mods::builder
sandboxes	mods/builder.cpp	/^	sandbox_list_t sandboxes;$/;"	m	namespace:mods::builder	file:
sanitize	mods/util.cpp	/^	std::function<void(const std::string&,std::string&)> sanitize = [](const std::string& command,std::string& sanitized) {$/;"	m	namespace:mods::util	file:
sanitize_key	mods/lmdb.cpp	/^std::string sanitize_key(std::string key){$/;"	f
sasg12	mods/weapons/shotgun-sasg12.cpp	/^	sasg12::sasg12(){$/;"	f	class:mods::weapons::shotgun::sasg12
sasg12	mods/weapons/shotgun-sasg12.hpp	/^		struct sasg12 {$/;"	s	namespace:mods::weapons::shotgun
save	mods/classes/contagion.cpp	/^	int16_t contagion::save() {$/;"	f	class:mods::classes::contagion
save	mods/classes/engineer.cpp	/^	int16_t engineer::save() {$/;"	f	class:mods::classes::engineer
save	mods/classes/forge.cpp	/^	int16_t forge::save(){$/;"	f	class:mods::classes::forge
save	mods/classes/ghost.cpp	/^	int16_t ghost::save(){$/;"	f	class:mods::classes::ghost
save	mods/classes/marine.cpp	/^	int16_t marine::save() {$/;"	f	class:mods::classes::marine
save	mods/classes/psyop.cpp	/^	int16_t psyop::save() {$/;"	f	class:mods::classes::psyop
save	mods/classes/sniper.cpp	/^	int16_t sniper::save() {$/;"	f	class:mods::classes::sniper
save	mods/classes/support.cpp	/^	int16_t support::save() {$/;"	f	class:mods::classes::support
save	mods/mob-roam.cpp	/^	std::tuple<int16_t,std::string> roam_recorder::save() {$/;"	f	class:mods::mob_roam::roam_recorder
save	mods/orm/armor-index.cpp	/^	int16_t armor_index::save() {$/;"	f	class:mods::orm::armor_index
save	mods/orm/breacher.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::breacher
save	mods/orm/camera-feed.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::camera_feed
save	mods/orm/contract-steps.cpp	/^	int16_t contract_steps::save() {$/;"	f	class:mods::orm::contract_steps
save	mods/orm/contracts.cpp	/^	int16_t contracts::save() {$/;"	f	class:mods::orm::contracts
save	mods/orm/door-event.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::door_event
save	mods/orm/elevator.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::elevator
save	mods/orm/engineer.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::engineer
save	mods/orm/forge.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::forge
save	mods/orm/ghost.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::ghost
save	mods/orm/hq.hpp	/^		int16_t save() {$/;"	f	struct:mods::orm::hq
save	mods/orm/integral-object.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::integral_object
save	mods/orm/marine.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::marine
save	mods/orm/medic.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::medic
save	mods/orm/mob-equipment-map.hpp	/^		int16_t save() {$/;"	f	struct:mods::orm::mob_equipment_map
save	mods/orm/mob-equipment.hpp	/^		int16_t save() {$/;"	f	struct:mods::orm::mob_equipment
save	mods/orm/mob-roam.cpp	/^	int16_t mob_roam::save() {$/;"	f	class:mods::orm::mob_roam
save	mods/orm/player-base-ability.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::player_base_ability
save	mods/orm/player-contract-state.cpp	/^	int16_t player_contract_state::save() {$/;"	f	class:mods::orm::player_contract_state
save	mods/orm/player-skill-points.cpp	/^	int16_t player_skill_points::save() {$/;"	f	class:mods::orm::player_skill_points
save	mods/orm/player-skill-usage.cpp	/^	int16_t player_skill_usage::save() {$/;"	f	class:mods::orm::player_skill_usage
save	mods/orm/pyrexia.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::pyrexia
save	mods/orm/rifle-attachment.cpp	/^	int16_t rifle_attachment::save() {$/;"	f	class:mods::orm::rifle_attachment
save	mods/orm/rifle-index.cpp	/^	int16_t rifle_index::save() {$/;"	f	class:mods::orm::rifle_index
save	mods/orm/rifle-instance.hpp	/^		int16_t save() {$/;"	f	struct:mods::orm::rifle_instance
save	mods/orm/shop.cpp	/^	std::tuple<bool,db_id_t,std::string> shop::save(){$/;"	f	class:mods::orm::shop
save	mods/orm/skill-points.cpp	/^	int16_t skill_points::save() {$/;"	f	class:mods::orm::skill_points
save	mods/orm/skill-trees.cpp	/^	int16_t skill_trees::save() {$/;"	f	class:mods::orm::skill_trees
save	mods/orm/sniper.hpp	/^		int16_t save() {$/;"	f	struct:mods::orm::sniper
save	mods/orm/striker.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::striker
save	mods/orm/support.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::support
save	mods/orm/syndrome.hpp	/^		int16_t save(){$/;"	f	struct:mods::orm::syndrome
save	shop.cpp	/^std::tuple<bool,uint64_t,std::string> shop_data<mods::orm::shop,mods::orm::shop_rooms,mods::orm::shop_objects>::save() {$/;"	f	class:shop_data
save_armor_locker	mods/integral-objects-db.cpp	/^	void save_armor_locker(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
save_armor_locker_quota	mods/integral-objects-db.cpp	/^	void save_armor_locker_quota(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
save_by_player	mods/orm/player-base-ability.cpp	/^	int16_t player_base_ability::save_by_player(player_ptr_t& player) {$/;"	f	class:mods::orm::player_base_ability
save_camera_feed	mods/integral-objects-db.cpp	/^	void save_camera_feed(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
save_catchy_name	mods/integral-objects-db.cpp	/^	void save_catchy_name(player_ptr_t& player, std::string_view identifier, std::string_view name,std::string_view deep_object_description){$/;"	f	namespace:mods::integral_objects_db
save_char	mods/db.cpp	/^	tuple_status_t save_char(player_ptr_t player_ptr) {$/;"	f	namespace:mods::db
save_dummy	mods/target-practice-db.cpp	/^	void save_dummy(player_ptr_t& player, std::vector<std::string>& args) {$/;"	f	namespace:mods::target_practice_db
save_from	mods/players/db-load.cpp	/^	void save_from(player_ptr_t& player_ptr,save_from_t from) {$/;"	f	namespace:mods::players::db_load
save_from_t	mods/players/db-load.hpp	/^	enum save_from_t {$/;"	g	namespace:mods::players::db_load
save_function	mods/builder.cpp	/^	save_function_t save_function;$/;"	m	struct:command_t	file:
save_hostile_targets	mods/mobs/smart-mob.cpp	/^	void smart_mob::save_hostile_targets(vec_t<uuid_t>& t) {$/;"	f	class:mods::mobs::smart_mob
save_item_to_db	mods/db.cpp	/^void save_item_to_db(player_ptr_t& player, std::string section_name, std::vector<std::string>& args) {$/;"	f
save_mud_time	db.cpp	/^void save_mud_time(struct time_info_data *when) {$/;"	f
save_new	mods/orm/integral-object.cpp	/^	int16_t integral_object::save_new(){$/;"	f	class:mods::orm::integral_object
save_new_char	mods/db.cpp	/^	tuple_status_t save_new_char($/;"	f	namespace:mods::db
save_new_char	mods/players/db-load.cpp	/^	int16_t save_new_char(player_ptr_t& player) {$/;"	f	namespace:mods::players::db_load
save_object	mods/builder.cpp	/^	std::pair<bool,std::string> save_object(int item_number,int obj_type,std::string feed_file) {$/;"	f	namespace:mods::builder
save_object_vector	mods/builder_util.hpp	/^	void save_object_vector($/;"	f	namespace:mods::builder_util
save_player	mods/builder.cpp	/^	std::pair<bool,std::string> save_player(char_data* obj) {$/;"	f	namespace:mods::builder
save_player_password	mods/players/db-load.cpp	/^	int save_player_password(player_ptr_t& player,std::string_view password) {$/;"	f	namespace:mods::players::db_load
save_record	mods/db.cpp	/^	tuple_status_t save_record(const std::string& table,mutable_map_t* values,std::string pk_id) {$/;"	f	namespace:mods::db
save_record_get_id	mods/db.cpp	/^	aligned_int_t save_record_get_id($/;"	f	namespace:mods::db
save_room_distance_to_cache	mods/scan.cpp	/^	void save_room_distance_to_cache(const room_rnum& hunters_room,$/;"	f	namespace:mods::scan
save_shop_objects	mods/orm/shop.cpp	/^	void save_shop_objects(shop_objects& so_list){$/;"	f	namespace:mods::orm
save_shop_rooms	mods/orm/shop.cpp	/^	void save_shop_rooms(shop_rooms& sr_list){$/;"	f	namespace:mods::orm
save_step_data	mods/player-contract-instance.cpp	/^	void player_contract_instance::save_step_data() {$/;"	f	class:mods::contracts::player_contract_instance
save_targets	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::save_targets(vec_t<uuid_t>& t) {$/;"	f	class:mods::mobs::mini_gunner
save_targets	mods/mobs/smart-mob.cpp	/^	void smart_mob::save_targets(vec_t<uuid_t>& t) {$/;"	f	class:mods::mobs::smart_mob
save_to_db	mods/builder.cpp	/^	int save_to_db(room_rnum in_room,std::string& error_string) {$/;"	f	namespace:mods::builder
save_to_db	mods/builder_util.hpp	/^	std::pair<bool,std::string> save_to_db($/;"	f	namespace:mods::builder_util
save_to_lmdb	mods/values.cpp	/^		void save_to_lmdb(std::string key,std::string value){$/;"	f	namespace:mods::values
save_to_lmdb	mods/values.cpp	/^		void save_to_lmdb(value_key_t v_key,std::string value){$/;"	f	namespace:mods::values
save_weapon_locker	mods/integral-objects-db.cpp	/^	void save_weapon_locker(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
save_weapon_locker_quota	mods/integral-objects-db.cpp	/^	void save_weapon_locker_quota(player_ptr_t& player, std::vector<std::string>& args){$/;"	f	namespace:mods::integral_objects_db
save_yaml_exceptions_to_disk	mods/object-utils.hpp	/^	static inline std::tuple<int32_t,std::string> save_yaml_exceptions_to_disk() {$/;"	f	namespace:mods::object_utils
save_zone_to_db	mods/builder.cpp	/^	std::tuple<bool,zone_pkid_t> save_zone_to_db(int virtual_number,std::string_view zone_name,int zone_start,int zone_end,int lifespan,int reset_mode) {$/;"	f	namespace:mods::builder
saved	mods/player.hpp	/^			char_special_data_saved& saved() {$/;"	f	struct:mods::player
say_random	globals.cpp	/^		const char* say_random(const mods::ai_state::event_type_t& event) {$/;"	f	namespace:mods::globals
say_spell	spell_parser.cpp	/^void say_spell(char_data *ch, int spellnum, char_data *tch,$/;"	f
sbyte	structs.h	/^typedef signed char		sbyte;$/;"	t
scaled_heal	act.medic.cpp	/^int scaled_heal(player_ptr_t& target) {$/;"	f
scaled_heal	mods/classes/medic.cpp	/^	int scaled_heal(TPlayer& target) {$/;"	f	namespace:mods::classes
scan	mods/scan.cpp	/^namespace mods::scan {$/;"	n	class:mods	file:
scan	mods/scan.hpp	/^	namespace scan {$/;"	n	namespace:mods
scan_file	mail.cpp	/^int scan_file(void) {$/;"	f
scan_file	mods/hell.hpp	/^	constexpr inline bool scan_file = false;$/;"	m	namespace:mods::hell
scan_from_room	mods/sensor-grenade.cpp	/^	std::vector<int> scan_from_room(int blast_radius,const room_rnum& room_number) {$/;"	f	namespace:mods::sensor_grenade
scan_results	mods/players/search.hpp	/^			typedef std::array<std::vector<std::string>,6> scan_results;$/;"	t	namespace:mods::player::util
scan_to_find_hostile_activity	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto scan_to_find_hostile_activity() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
scan_to_find_targets	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto scan_to_find_targets() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
scheck	comm.cpp	/^int scheck = 0;			\/* for syntax checking mode *\/$/;"	v
schema	mods/schema.hpp	/^namespace mods::schema { $/;"	n	class:mods
scope_t	mods/weapon.hpp	/^	enum scope_t {$/;"	g	namespace:mods::weapon
screen_width	mods/player.cpp	/^	int player::screen_width() {$/;"	f	class:mods::player
seal_off_room_with_wall_of_fire	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::seal_off_room_with_wall_of_fire(room_rnum room_id){$/;"	f	class:mods::classes::pyrexia
seal_off_room_with_wall_of_fire	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::seal_off_room_with_wall_of_fire(room_rnum room_id){$/;"	f	class:mods::orm::pyrexia
search	mods/players/search.hpp	/^					search(const scan_results& s) : m_scan_results(s) {$/;"	f	class:mods::player::util::search
search	mods/players/search.hpp	/^			class search {$/;"	c	namespace:mods::player::util
search_block	interpreter.cpp	/^int search_block(char *arg, const char **list, int exact) { \/** FIXME: arg 2  *\/$/;"	f
search_screen	mods/screen-searcher.hpp	/^	void search_screen(TPlayerPtr& player, const std::vector<std::string>& screen, const std::vector<std::string>& vec_args, std::size_t limit){$/;"	f	namespace:mods
secondary	mods/player.cpp	/^	obj_data_ptr_t player::secondary() {$/;"	f	class:mods::player
secondary_choice_t	mods/weapon.hpp	/^		enum secondary_choice_t {$/;"	g	namespace:mods::weapon::ghost
secondary_choice_t	mods/weapon.hpp	/^		enum secondary_choice_t {$/;"	g	namespace:mods::weapon::medic
secondary_choice_t	mods/weapon.hpp	/^		enum secondary_choice_t {$/;"	g	namespace:mods::weapon::sniper
section_key	mods/db.cpp	/^	std::string section_key(std::string section_name,std::string prefix, std::string type) {$/;"	f	namespace:mods::db
section_key_count	mods/db.cpp	/^	std::string section_key_count(std::string section_name,std::string prefix, std::string type) {$/;"	f	namespace:mods::db
section_key_index	mods/db.cpp	/^	std::string section_key_index(std::string section_name,std::string prefix, std::string type) {$/;"	f	namespace:mods::db
sector_from_string	mods/rooms.cpp	/^	std::optional<sector_type_t> sector_from_string(std::string m) {$/;"	f	namespace:mods::rooms
sector_type	mods/orm/room.hpp	/^		uint32_t sector_type;$/;"	m	struct:mods::orm::room
sector_type	structs.h	/^		uint16_t	sector_type;            \/* sector type (move\/hide)            *\/$/;"	v
sector_type_t	mods/rooms.hpp	/^	enum sector_type_t {$/;"	g	namespace:mods::rooms
sector_types	constants.cpp	/^const char *sector_types[] = {$/;"	v
sector_types	constants.hpp	/^const char *sector_types[] = {$/;"	v
security_force_matches	mods/response-team/radio.cpp	/^	const std::vector<std::string_view>& security_force_matches() {$/;"	f	namespace:mods::response_team::radio
seed	mods/ai_state.cpp	/^	void seed() {$/;"	f	namespace:mods
seed	mods/mini-games/line-up.cpp	/^	void line_up::seed(){$/;"	f	class:mods::mini_games::line_up
seed	mods/mini-games/wires.cpp	/^	void wires::seed(){$/;"	f	class:mods::mini_games::wires
seed	random.cpp	/^static unsigned long seed;$/;"	v	file:
seed_player_classes	mods/orm/chargen.cpp	/^	void seed_player_classes() {$/;"	f	namespace:mods::orm
seed_player_races	mods/orm/chargen.cpp	/^	void seed_player_races() {$/;"	f	namespace:mods::orm
select	mods/sql.hpp	/^			compositor<T>& select(str_object fields) {$/;"	f	struct:mods::sql::compositor
select_randomly	globals.cpp	/^		Iter select_randomly(Iter start, Iter end) {$/;"	f	namespace:mods::globals
select_randomly	globals.cpp	/^		Iter select_randomly(Iter start, Iter end, RandomGenerator& g) {$/;"	f	namespace:mods::globals
select_value	mods/world-configuration.cpp	/^	std::pair<bool,std::string> select_value(std::string_view table,$/;"	f	namespace:mods::world_conf
selector	mods/lmdb.cpp	/^	selector_type_t transaction_t::selector(const key_type_t & column,const uint64_t & row_id){$/;"	f	class:mods::lmdb::transaction_t
sell_price	shop.cpp	/^int sell_price(struct obj_data *obj, int shop_nr, char_data *keeper, char_data *seller) {$/;"	f
send	mods/js.cpp	/^		static duk_ret_t send(duk_context *ctx) {$/;"	f	namespace:mods::js
send	mods/lmdb/gethostbyname.cpp	/^ssize_t send(int sockfd,const void* buf,size_t len,int flags){$/;"	f
send	mods/player.cpp	/^	size_t player::send(const char *messg, ...) {$/;"	f	class:mods::player
send	mods/player.cpp	/^	void player::send(const std::vector<std::string>& list) {$/;"	f	class:mods::player
send_bandit_help_menu	mods/help.cpp	/^	void send_bandit_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_breacher_help_menu	mods/help.cpp	/^	void send_breacher_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_butcher_help_menu	mods/help.cpp	/^	void send_butcher_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_class_footer	mods/help.cpp	/^	void send_class_footer(player_ptr_t& player,std::string_view class_name) {$/;"	f	namespace:mods::help
send_class_header	mods/help.cpp	/^	void send_class_header(player_ptr_t& player,std::string_view class_name) {$/;"	f	namespace:mods::help
send_combat_messages	mods/weapons/damage-types.cpp	/^		void send_combat_messages(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
send_contagion_help_menu	mods/help.cpp	/^	void send_contagion_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_dealer_help_menu	mods/help.cpp	/^	void send_dealer_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_forge_help_menu	mods/help.cpp	/^	void send_forge_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_ghost_help_menu	mods/help.cpp	/^	void send_ghost_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_help	mods/help.cpp	/^	bool send_help(std::string_view from, std::shared_ptr<mods::player>& player) {$/;"	f	namespace:mods::help
send_machinist_help_menu	mods/help.cpp	/^	void send_machinist_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_malady_help_menu	mods/help.cpp	/^	void send_malady_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_marksman_help_menu	mods/help.cpp	/^	void send_marksman_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_obstructor_help_menu	mods/help.cpp	/^	void send_obstructor_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_pyrexia_help_menu	mods/help.cpp	/^	void send_pyrexia_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_rbuild_help	mods/builder/coordinates.cpp	/^	void send_rbuild_help(player_ptr_t& player){$/;"	f	namespace:mods::builder::rectangle_layouts
send_rbuild_help	mods/builder/rectangle-layouts.cpp	/^	void send_rbuild_help(player_ptr_t& player){$/;"	f	namespace:mods::builder::rectangle_layouts
send_requirements	mods/forge-engine/util.cpp	/^	void send_requirements(requirements_t& requirements, player_ptr_t& player) {$/;"	f	namespace:mods::forge_engine
send_results	mods/sensor-grenade.cpp	/^	void send_results(uuid_t nade_uuid,uuid_t player_uuid) {$/;"	f	namespace:mods::sensor_grenade
send_results_multi	mods/sensor-grenade.cpp	/^	void send_results_multi(uuid_t nade_uuid,const std::vector<uuid_t>& players) {$/;"	f	namespace:mods::sensor_grenade
send_stats_to_player	mods/forge-engine/generated-armor.cpp	/^	void generated_armor_t::send_stats_to_player(player_ptr_t& player) {$/;"	f	class:mods::forge_engine::generated_armor_t
send_stats_to_player	mods/forge-engine/generated-rifle.cpp	/^	void generated_rifle_t::send_stats_to_player(player_ptr_t& player) {$/;"	f	class:mods::forge_engine::generated_rifle_t
send_striker_help_menu	mods/help.cpp	/^	void send_striker_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_syndrome_help_menu	mods/help.cpp	/^	void send_syndrome_help_menu(player_ptr_t& player) {$/;"	f	namespace:mods::help
send_to_all	comm.cpp	/^void send_to_all(const char *messg, ...) {$/;"	f
send_to_char	comm.cpp	/^size_t send_to_char(char_data *ch, const char *messg, ...) {$/;"	f
send_to_char	mods/js.cpp	/^		static duk_ret_t send_to_char(duk_context *ctx) {$/;"	f	namespace:mods::js
send_to_outdoor	comm.cpp	/^void send_to_outdoor(const char *messg, ...) {$/;"	f
send_to_room	comm.cpp	/^void send_to_room(room_rnum room, const char *messg, ...) {$/;"	f
send_to_room_except	comm.cpp	/^void send_to_room_except(room_rnum room, const std::vector<char_data*>& except, const char *messg, ...) {$/;"	f
send_to_room_except	comm.cpp	/^void send_to_room_except(room_rnum room, const std::vector<player_ptr_t>& except, const char *messg, ...) {$/;"	f
send_to_room_except	comm.cpp	/^void send_to_room_except(room_rnum room, player_ptr_t except_me, const char *messg, ...) {$/;"	f
send_to_room_except	comm.cpp	/^void send_to_room_except(room_rnum room, std::vector<uuid_t> except, const char *messg, ...) {$/;"	f
send_to_uuid	mods/js.cpp	/^		static duk_ret_t send_to_uuid(duk_context *ctx) {$/;"	f	namespace:mods::js
send_yaml_exceptions_to	mods/object-utils.hpp	/^	static inline void send_yaml_exceptions_to(TPlayerPointer& player) {$/;"	f	namespace:mods::object_utils
sendln	mods/classes/sentinel.cpp	/^		void sentinel::sendln(std::string_view msg){ m_player->sendln(msg); }$/;"	f	class:mods::classes::sentinel
sendln	mods/player.cpp	/^	void player::sendln(mods::string& str) {$/;"	f	class:mods::player
sendln	mods/player.cpp	/^	void player::sendln(std::string_view str) {$/;"	f	class:mods::player
sense_player	mods/calc-visibility.cpp	/^	bool sense_player(obj_ptr_t& device, player_ptr_t& target) {$/;"	f	namespace:mods::calc_visibility
sensor_grenade	mods/sensor-grenade.cpp	/^namespace mods::sensor_grenade {$/;"	n	class:mods	file:
sensor_grenade	mods/sensor-grenade.hpp	/^namespace mods::sensor_grenade {$/;"	n	class:mods
sentinel	mods/classes/sentinel.cpp	/^		sentinel::sentinel(){$/;"	f	class:mods::classes::sentinel
sentinel	mods/classes/sentinel.cpp	/^		sentinel::sentinel(player_ptr_t p){$/;"	f	class:mods::classes::sentinel
sentinel	mods/classes/sentinel.hpp	/^	struct sentinel : base {$/;"	s	namespace:mods::classes
sentinel	mods/weapon.hpp	/^	namespace sentinel {$/;"	n	namespace:mods::weapon
sentinel_skillset	class.cpp	/^std::string sentinel_skillset() {$/;"	f
serialize_date	mods/date-time.cpp	/^	std::string serialize_date() {$/;"	f	namespace:mods::date_time
server	mods/lmdb/db.hpp	/^			server(): m_good(false) {}$/;"	f	struct:gdns::lmdb::server
server	mods/lmdb/db.hpp	/^			server(const char* file,const char* dbi_name){$/;"	f	struct:gdns::lmdb::server
server	mods/lmdb/db.hpp	/^		struct server {$/;"	s	namespace:gdns::lmdb
set	mods/prefs.cpp	/^	void prefs::set(const std::string& key,const std::string& value,char_data* ch) {$/;"	f	class:mods::prefs
set	mods/sql.hpp	/^			compositor<T>& set(const value_map& values) {$/;"	f	struct:mods::sql::compositor
setFile	mods/acl/config-parser.hpp	/^                void setFile(const char* f){m_file_name = f; }$/;"	f	class:mods::acl::FileParser
set_access_rights	mods/acl_list.cpp	/^	void set_access_rights(player_ptr_t player,$/;"	f	namespace:mods::acl_list
set_ada	mods/player.hpp	/^			void set_ada(bool s) {$/;"	f	struct:mods::player
set_ada_data	mods/player.cpp	/^	void player::set_ada_data(std::string_view key,std::string_view value) {$/;"	f	class:mods::player
set_affect_max_amount	mods/rooms.cpp	/^	void set_affect_max_amount(room_rnum room,affect_t affect,affect_amount_t amount) {$/;"	f	namespace:mods::rooms::affects
set_affect_to_decrement	mods/rooms.cpp	/^	void set_affect_to_decrement(room_rnum room,affect_t affect) {$/;"	f	namespace:mods::rooms::affects
set_affect_to_increment	mods/rooms.cpp	/^	void set_affect_to_increment(room_rnum room,affect_t affect) {$/;"	f	namespace:mods::rooms::affects
set_ammo	mods/object-utils.hpp	/^		void set_ammo(obj_ptr_t& weapon,uint16_t ammo) {$/;"	f	namespace:mods::object_utils::gods
set_ammo	mods/player.hpp	/^			uint16_t set_ammo(uint16_t value) {$/;"	f	struct:mods::player
set_attacker	mods/js.cpp	/^		static duk_ret_t set_attacker(duk_context *ctx) {$/;"	f	namespace:mods::js
set_attacker	mods/player.hpp	/^			void set_attacker(uuid_t a) {$/;"	f	struct:mods::player
set_attacking_with	mods/player.hpp	/^			void set_attacking_with(obj_ptr_t weapon) {$/;"	f	struct:mods::player
set_attacking_with_primary	mods/player.cpp	/^	void player::set_attacking_with_primary() {$/;"	f	class:mods::player
set_attacking_with_secondary	mods/player.cpp	/^	void player::set_attacking_with_secondary() {$/;"	f	class:mods::player
set_attribute_on_object_vector	mods/builder_util.hpp	/^	void set_attribute_on_object_vector($/;"	f	namespace:mods::builder_util
set_authenticated	mods/player.hpp	/^			void set_authenticated(bool b) {$/;"	f	struct:mods::player
set_bad_password_count	mods/player.cpp	/^	void player::set_bad_password_count(int i) {$/;"	f	class:mods::player
set_base_command	mods/builder/slotted-builder.hpp	/^			void set_base_command(std::string base) {$/;"	f	struct:mods::builder::slotted_builder
set_behaviour_tree	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::set_behaviour_tree(std::string_view name) {$/;"	f	class:mods::mobs::mini_gunner
set_behaviour_tree	mods/mobs/smart-mob.cpp	/^	void smart_mob::set_behaviour_tree(std::string_view name) {$/;"	f	class:mods::mobs::smart_mob
set_behaviour_tree	structs.cpp	/^void mob_special_data::set_behaviour_tree(std::string_view name) {$/;"	f	class:mob_special_data
set_behaviour_tree_to_engage	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto set_behaviour_tree_to_engage() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
set_behaviour_tree_to_engage	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto set_behaviour_tree_to_engage() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
set_behaviour_tree_to_pursuit	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto set_behaviour_tree_to_pursuit() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
set_breacher	mods/player.cpp	/^	void player::set_breacher(std::shared_ptr<mods::classes::breacher> g) {$/;"	f	class:mods::player
set_bui_mode	mods/player.cpp	/^	void player::set_bui_mode(bool b) {$/;"	f	class:mods::player
set_builder	mods/builder/slotted-builder.hpp	/^			void set_builder(player_ptr_t player) {$/;"	f	struct:mods::builder::slotted_builder
set_callback	mods/affects.hpp	/^			void set_callback(TAffects affect, std::function<void(TEntityId,TAffects,uint32_t)> f) {$/;"	f	struct:mods::affects::dissolver
set_camera	mods/player.cpp	/^	void player::set_camera(obj_data_ptr_t obj) {$/;"	f	class:mods::player
set_camera_viewing	mods/player.cpp	/^	void player::set_camera_viewing(bool b) {$/;"	f	class:mods::player
set_cd	mods/drone.hpp	/^			void set_cd(char_data* ch) {$/;"	f	struct:mods::drone_impl
set_cd	mods/mobs/mob.hpp	/^			void set_cd(char_data* ch) {$/;"	f	class:mods::player
set_cd	mods/player.cpp	/^	void player::set_cd(char_data* ch) {$/;"	f	class:mods::player
set_char_on_descriptor	mods/mobs/mob.cpp	/^	void player::set_char_on_descriptor(std::deque<descriptor_data>::iterator it){$/;"	f	class:mods::player
set_char_on_descriptor	mods/player.cpp	/^	void player::set_char_on_descriptor(std::deque<descriptor_data>::iterator it) {$/;"	f	class:mods::player
set_char_pk_id	mods/js.cpp	/^		static duk_ret_t set_char_pk_id(duk_context *ctx) {$/;"	f	namespace:mods::js
set_children	mods/behaviour_tree_node.hpp	/^			void set_children(const children_t& child_nodes) {$/;"	f	struct:mods::behaviour_tree_node
set_class	mods/orm/chargen.cpp	/^		void player_classes::set_class(player_class_t pclass){$/;"	f	class:mods::orm::player_classes
set_class	mods/player.cpp	/^	void player::set_class(player_class_t c) {$/;"	f	class:mods::player
set_class	mods/players/db-load.cpp	/^	void set_class(player_ptr_t& player, player_class_t p_class) {$/;"	f	namespace:mods::players::db_load
set_class_capability	mods/mobs/mob.cpp	/^	void player::set_class_capability(const class_capability_t& caps) {$/;"	f	class:mods::player
set_context	mods/js.hpp	/^				inline void set_context(duk_context *ctx) {$/;"	f	struct:mods::js::include
set_currently_hacking	mods/player.cpp	/^	void player::set_currently_hacking(uint32_t id,uint8_t row) {$/;"	f	class:mods::player
set_db_id	mods/player.cpp	/^	void player::set_db_id(aligned_int_t id) {$/;"	f	class:mods::player
set_db_id	structs.h	/^		void set_db_id(uint64_t i) {$/;"	f	struct:obj_data
set_desc	mods/mobs/mob.hpp	/^			void set_desc(std::deque<descriptor_data>::iterator it){ $/;"	f	class:mods::player
set_desc	mods/mobs/mob.hpp	/^			void set_desc(std::shared_ptr<descriptor_data> it){ $/;"	f	class:mods::player
set_desc	mods/player.cpp	/^	void player::set_desc(std::deque<descriptor_data>::iterator it) {$/;"	f	class:mods::player
set_desc	mods/player.cpp	/^	void player::set_desc(std::shared_ptr<descriptor_data> it) {$/;"	f	class:mods::player
set_device_id	mods/mini-games/line-up.cpp	/^	void line_up::set_device_id(int i){$/;"	f	class:mods::mini_games::line_up
set_device_id	mods/mini-games/wires.cpp	/^	void wires::set_device_id(int i){$/;"	f	class:mods::mini_games::wires
set_dir	mods/js.hpp	/^				inline void set_dir(const std::string& m) {$/;"	f	struct:mods::js::include
set_dir_option	structs.cpp	/^void room_data::set_dir_option(byte i,$/;"	f	class:room_data
set_direction	mods/affects.hpp	/^			void set_direction(TAffects affect, bool direction) {$/;"	f	struct:mods::affects::dissolver
set_done_breaching	mods/object-utils.hpp	/^	void set_done_breaching(T& obj) {$/;"	f	namespace:mods::object_utils
set_done_installing	mods/demolitions.cpp	/^	void set_done_installing(uuid_t object_uuid,uuid_t player_uuid) {$/;"	f	namespace:mods::demolitions
set_done_installing	mods/object-utils.hpp	/^	void set_done_installing(T& obj) {$/;"	f	namespace:mods::object_utils
set_engineer	mods/player.cpp	/^	void player::set_engineer(std::shared_ptr<mods::classes::engineer> g) {$/;"	f	class:mods::player
set_feed_file	structs.h	/^		void set_feed_file(std::string f) {$/;"	f	struct:obj_data
set_fields	act.wizard.cpp	/^} set_fields[] = {$/;"	v	typeref:struct:set_struct
set_fight_timestamp	mods/player.cpp	/^	void player::set_fight_timestamp() {$/;"	f	class:mods::player
set_fighting	fight.cpp	/^void set_fighting(char_data *ch, char_data *vict) {$/;"	f
set_file	mods/js.hpp	/^				inline void set_file(const std::string& m) {$/;"	f	struct:mods::js::include
set_fire	mods/rooms.cpp	/^	void set_fire(room_rnum room,bool on,std::string& level,player_ptr_t& player) {$/;"	f	namespace:mods::rooms::gods
set_fire_nade_level	mods/classes/super-user-fiddler.cpp	/^	void super_user_fiddler::set_fire_nade_level(player_ptr_t& player,int level) {$/;"	f	class:mods::classes::super_user_fiddler
set_fire_nades	mods/classes/super-user-fiddler.cpp	/^	void super_user_fiddler::set_fire_nades(player_ptr_t& player,int charges) {$/;"	f	class:mods::classes::super_user_fiddler
set_flag	mods/player.hpp	/^			aligned_int_t set_flag(chunk_type_t chunk,aligned_int_t bit) {$/;"	f	struct:mods::player
set_flag	mods/rooms.hpp	/^	static inline void set_flag(room_rnum room, int flag) {$/;"	f	namespace:mods::rooms
set_flag_absolute	mods/rooms.cpp	/^	void set_flag_absolute(room_rnum room, int flag) {$/;"	f	namespace:mods::rooms
set_forge	mods/player.cpp	/^	void player::set_forge(std::shared_ptr<mods::classes::forge> f) {$/;"	f	class:mods::player
set_frozen_room	mods/world-configuration.cpp	/^	std::pair<bool,std::string> set_frozen_room(room_vnum room_id){$/;"	f	namespace:mods::world_conf
set_ghost	mods/player.cpp	/^	void player::set_ghost(std::shared_ptr<mods::classes::ghost> g) {$/;"	f	class:mods::player
set_god_mode	mods/player.cpp	/^	void player::set_god_mode(bool b) {$/;"	f	class:mods::player
set_heading	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::set_heading(int dir) {$/;"	f	class:mods::mobs::mini_gunner
set_heading	mods/mobs/smart-mob.cpp	/^	void smart_mob::set_heading(uint8_t dir) {$/;"	f	class:mods::mobs::smart_mob
set_host	mods/player.cpp	/^	void player::set_host(std::string host) {$/;"	f	class:mods::player
set_hunting	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::set_hunting(const uuidvec_t& hunting) {$/;"	f	class:mods::mobs::mini_gunner
set_hunting	mods/mobs/smart-mob.cpp	/^	void smart_mob::set_hunting(const uuidvec_t& hunting) {$/;"	f	class:mods::mobs::smart_mob
set_id	db.h	/^		void set_id(int64_t i) {$/;"	f	struct:zone_data
set_idle_room	mods/world-configuration.cpp	/^	std::pair<bool,std::string> set_idle_room(room_vnum room_id){$/;"	f	namespace:mods::world_conf
set_immortal_start_room	mods/world-configuration.cpp	/^	std::pair<bool,std::string> set_immortal_start_room(room_vnum room_id){$/;"	f	namespace:mods::world_conf
set_imp_mode	mods/player.cpp	/^	void player::set_imp_mode(bool b) {$/;"	f	class:mods::player
set_is_breaching	mods/object-utils.hpp	/^	void set_is_breaching(T& obj, P& player,int direction) {$/;"	f	namespace:mods::object_utils
set_is_installing	mods/object-utils.hpp	/^	void set_is_installing(T& obj, P& player,int direction) {$/;"	f	namespace:mods::object_utils
set_lense	mods/player.hpp	/^			void set_lense(const lense_type_t& lense) {$/;"	f	struct:mods::player
set_level	mods/rifle-attachments.hpp	/^			void set_level(uint16_t level) {$/;"	f	struct:mods::rifle_attachments_t
set_location_data	structs.h	/^		void set_location_data(location_data_t i) {$/;"	f	struct:obj_data
set_logic	mods/behaviour_tree_node.hpp	/^			void set_logic(const callback_t& logic) {$/;"	f	struct:mods::behaviour_tree_node
set_marine	mods/player.cpp	/^	void player::set_marine(std::shared_ptr<mods::classes::marine> g) {$/;"	f	class:mods::player
set_max_amount	mods/affects.hpp	/^			void set_max_amount(TAffects affect, uint32_t max) {$/;"	f	struct:mods::affects::dissolver
set_medic	mods/player.cpp	/^	void player::set_medic(std::shared_ptr<mods::classes::medic> g) {$/;"	f	class:mods::player
set_misc_pref	mods/player.hpp	/^			void set_misc_pref(misc_pref_enum_t bit,bool on_off) {$/;"	f	struct:mods::player
set_mortal_start_room	mods/world-configuration.cpp	/^	std::pair<bool,std::string> set_mortal_start_room(room_vnum room_id){$/;"	f	namespace:mods::world_conf
set_name	mods/builder.cpp	/^	void sandbox_data_t::set_name(std::string_view n) {$/;"	f	class:mods::builder::sandbox_data_t
set_name	mods/chat.cpp	/^	void channel::set_name(std::string_view name) {$/;"	f	class:mods::chat::channel
set_name	mods/player.cpp	/^	void player::set_name(std::string n) {$/;"	f	class:mods::player
set_node	mods/behaviour_tree.hpp	/^		void set_node(const node & btree_node){$/;"	f	struct:mods::behaviour_tree
set_node_type	mods/behaviour_tree_node.hpp	/^			void set_node_type(const node_type_t& n) {$/;"	f	struct:mods::behaviour_tree_node
set_obj_from_room	mods/world-configuration.cpp	/^		void set_obj_from_room(bool b){ mods::world_conf::toggle::status_obj_from_room = b; }$/;"	f	namespace:mods::world_conf::toggle
set_orm_list	mods/builder/slotted-builder.hpp	/^			void set_orm_list(orm_container_t* container) {$/;"	f	struct:mods::builder::slotted_builder
set_overhead_map_height	mods/player.hpp	/^			void set_overhead_map_height(uint8_t h) {$/;"	f	struct:mods::player
set_overhead_map_width	mods/player.hpp	/^			void set_overhead_map_width(uint8_t w) {$/;"	f	struct:mods::player
set_owner	structs.h	/^		void set_owner(uuid_t p) {$/;"	f	struct:obj_data
set_owner_uuid	mods/rifle-attachments.hpp	/^			void set_owner_uuid(uuid_t u) {$/;"	f	struct:mods::rifle_attachments_t
set_password	mods/auto-login.cpp	/^	void set_password(std::string_view pass){$/;"	f	namespace:mods::auto_login
set_password	mods/player.cpp	/^	void player::set_password(std::string pw) {$/;"	f	class:mods::player
set_player	mods/classes/breacher.cpp	/^		void breacher::set_player(player_ptr_t p){$/;"	f	class:mods::classes::breacher
set_player	mods/classes/forge.cpp	/^	void forge::set_player(player_ptr_t p){$/;"	f	class:mods::classes::forge
set_player	mods/classes/ghost.cpp	/^	void ghost::set_player(player_ptr_t p){$/;"	f	class:mods::classes::ghost
set_player	mods/classes/pyrexia.cpp	/^		void pyrexia::set_player(player_ptr_t p){$/;"	f	class:mods::classes::pyrexia
set_player	mods/classes/sentinel.cpp	/^		void sentinel::set_player(player_ptr_t p){$/;"	f	class:mods::classes::sentinel
set_player	mods/classes/syndrome.cpp	/^		void syndrome::set_player(player_ptr_t p){$/;"	f	class:mods::classes::syndrome
set_player_level_mock	mods/classes/super-user-fiddler.cpp	/^	void set_player_level_mock(uuid_t& player,uint8_t level) {$/;"	f	namespace:mods::classes
set_players	mods/player-scaffolding.cpp	/^	int player_scaffolding::set_players(player_ptr_t ch,$/;"	f	class:mods::player_scaffolding
set_players	mods/player-scaffolding.cpp	/^	int player_scaffolding::set_players(std::string_view main_player,$/;"	f	class:mods::player_scaffolding
set_players	mods/player-scaffolding.cpp	/^	std::vector<player_ptr_t>& player_scaffolding::set_players(std::string_view main_player,$/;"	f	class:mods::player_scaffolding
set_pluck_filter	mods/lmdb.cpp	/^	void _db_handle::set_pluck_filter(const std::vector<std::string> & cols){$/;"	f	class:mods::lmdb::_db_handle
set_points	mods/js.cpp	/^		static duk_ret_t set_points(duk_context *ctx) {$/;"	f	namespace:mods::js
set_position	mods/player.cpp	/^	void player::set_position(byte pos) {$/;"	f	class:mods::player
set_prefs	mods/player.hpp	/^			void set_prefs(long prefs) {$/;"	f	struct:mods::player
set_private	mods/chat.hpp	/^			void set_private(bool b_private) {$/;"	f	struct:mods::chat::channel
set_pyrexia	mods/player.cpp	/^	void player::set_pyrexia(std::shared_ptr<mods::classes::pyrexia> g) {$/;"	f	class:mods::player
set_rate_limit	mods/rate-limiting.cpp	/^	void set_rate_limit(action_t action,int times,int seconds) {$/;"	f	namespace:mods::rate_limiting
set_rate_limit_help	mods/rate-limiting.cpp	/^	static const char* set_rate_limit_help = "usage: set_rate_limit <action> <times> <seconds>";$/;"	m	namespace:mods::rate_limiting	file:
set_reporter_lambda	mods/players/db-load.cpp	/^	void set_reporter_lambda(reporter_t f) {$/;"	f	namespace:mods::players::db_load
set_roaming_profile_name	mods/mob-roam.cpp	/^	void roam_recorder::set_roaming_profile_name(std::string_view n) {$/;"	f	class:mods::mob_roam::roam_recorder
set_room	mods/player.hpp	/^			void set_room(room_rnum r) {$/;"	f	struct:mods::player
set_scanned	mods/classes/ghost.cpp	/^	void ghost::set_scanned(std::vector<uuid_t> s){$/;"	f	class:mods::classes::ghost
set_scripted_response	mods/player.hpp	/^			void set_scripted_response(std::string r) {$/;"	f	struct:mods::player
set_sector_type	mods/rooms.cpp	/^	void set_sector_type(room_rnum room_id, int sector_type) {$/;"	f	namespace:mods::rooms
set_sendbuf	comm.cpp	/^int set_sendbuf(socket_t s) {$/;"	f
set_sex	mods/player.hpp	/^			void set_sex(byte s) {$/;"	f	struct:mods::player
set_shared_ptr	mods/mobs/mob.cpp	/^	void player::set_shared_ptr(player_ptr_t& self_ptr) {$/;"	f	class:mods::player
set_shared_ptr	mods/object.cpp	/^	object& object::set_shared_ptr(std::shared_ptr<obj_data>& ptr){$/;"	f	class:mods::object
set_shared_ptr	mods/player.cpp	/^	void player::set_shared_ptr(player_ptr_t& self_ptr) {$/;"	f	class:mods::player
set_skill	mods/player.cpp	/^	void player::set_skill(int skill,uint16_t proficiency) {$/;"	f	class:mods::player
set_slot	mods/builder/slotted-builder.hpp	/^			void set_slot(const TVnumType& vnum,std::string key,std::string value) {$/;"	f	struct:mods::builder::slotted_builder
set_slot	mods/orm/hq.cpp	/^	std::tuple<bool,std::string> hq::set_slot(std::string_view key,std::string_view value) {$/;"	f	class:mods::orm::hq
set_slot	mods/orm/mob-equipment.cpp	/^	std::tuple<bool,std::string> mob_equipment::set_slot(std::string_view slot, std::string_view value) {$/;"	f	class:mods::orm::mob_equipment
set_slot	mods/orm/orm-base.hpp	/^		virtual std::tuple<bool,std::string> set_slot(std::string_view key,std::string_view value) {$/;"	f	struct:mods::orm::orm_base
set_slot_list	mods/builder/slotted-builder.hpp	/^			void set_slot_list(std::vector<std::string> s) {$/;"	f	struct:mods::builder::slotted_builder
set_sniper	mods/player.cpp	/^	void player::set_sniper(std::shared_ptr<mods::classes::sniper> g) {$/;"	f	class:mods::player
set_socket	mods/player.cpp	/^	void player::set_socket(socket_t d) {$/;"	f	class:mods::player
set_state	mods/player.cpp	/^	void player::set_state(int state) {$/;"	f	class:mods::player
set_str_table	mods/lmdb.hpp	/^		void set_str_table(table_type_t e_table){$/;"	f	struct:mods::lmdb::transaction_t
set_struct	act.wizard.cpp	/^struct set_struct {$/;"	s	file:
set_support	mods/player.cpp	/^	void player::set_support(std::shared_ptr<mods::classes::support> g) {$/;"	f	class:mods::player
set_syndrome	mods/player.cpp	/^	void player::set_syndrome(std::shared_ptr<mods::classes::syndrome> s) {$/;"	f	class:mods::player
set_time_birth	mods/player.cpp	/^	void player::set_time_birth(time_t b) {$/;"	f	class:mods::player
set_time_logon	mods/player.cpp	/^	void player::set_time_logon(time_t t) {$/;"	f	class:mods::player
set_time_played	mods/player.cpp	/^	void player::set_time_played(int t) {$/;"	f	class:mods::player
set_title	limits.cpp	/^void set_title(char_data* ch, const char* title) {$/;"	f
set_title	limits.cpp	/^void set_title(player_ptr_t player, const char* title) {$/;"	f
set_title	mods/player.hpp	/^			void set_title(const std::string& t) {$/;"	f	struct:mods::player
set_type	mods/player.cpp	/^	void player::set_type(player_type_enum_t type) {$/;"	f	class:mods::player
set_user	mods/auto-login.cpp	/^	void set_user(std::string_view user){$/;"	f	namespace:mods::auto_login
set_value	mods/world-configuration.cpp	/^	std::pair<bool,std::string> set_value(std::string_view column, room_vnum room_id){$/;"	f	namespace:mods::world_conf
set_variation	mods/mobs/lowly-security.cpp	/^	void lowly_security::set_variation(std::string v) {$/;"	f	class:mods::mobs::lowly_security
set_variation	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::set_variation(std::string v) {$/;"	f	class:mods::mobs::mini_gunner
set_variation	mods/mobs/smart-mob.cpp	/^	void smart_mob::set_variation(std::string v) {$/;"	f	class:mods::mobs::smart_mob
set_verb	mods/chat.cpp	/^	void channel::set_verb(std::string_view verb) {$/;"	f	class:mods::chat::channel
set_watching	mods/player.hpp	/^			void set_watching(direction_t dir) {$/;"	f	struct:mods::player
set_weapon	mods/rifle-instance-data.hpp	/^	void set_weapon(TUUID weapon){$/;"	f	struct:heat
set_who_line	mods/super-users.cpp	/^	void set_who_line(std::string_view player_name,std::string_view line) {$/;"	f	namespace:mods::super_users
set_with_password	mods/sql.hpp	/^			compositor<T>& set_with_password(const value_map& values,std::string_view password_field) {$/;"	f	struct:mods::sql::compositor
set_yaml_initiator	mods/object-utils.hpp	/^	static inline void set_yaml_initiator($/;"	f	namespace:mods::object_utils
set_yaml_transaction_id	mods/object-utils.hpp	/^	static inline void set_yaml_transaction_id(uint32_t i) {$/;"	f	namespace:mods::object_utils
settings	mods/lmdb/conf.cpp	/^static struct translation *settings = NULL;$/;"	m	namespace:gdns	typeref:struct:gdns::translation	file:
settings	mods/lmdb/conf.hpp	/^	conf_map& settings() { return m_settings; }$/;"	f	struct:gdns::conf
settings_head	mods/lmdb/conf.cpp	/^static struct translation *settings_head = NULL;$/;"	m	namespace:gdns	typeref:struct:gdns::translation	file:
setup_damage_callbacks	mods/mobs/lowly-security.cpp	/^	void lowly_security::setup_damage_callbacks() {$/;"	f	class:mods::mobs::lowly_security
setup_damage_callbacks	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::setup_damage_callbacks() {$/;"	f	class:mods::mobs::mini_gunner
setup_damage_callbacks	mods/mobs/smart-mob.cpp	/^	void smart_mob::setup_damage_callbacks() {$/;"	f	class:mods::mobs::smart_mob
setup_log	comm.cpp	/^void setup_log(const char *filename, int fd) {$/;"	f
setup_public_channels	mods/chat.cpp	/^	void setup_public_channels() {$/;"	f	namespace:mods::chat
severity_t	mods/response-team/radio.hpp	/^	enum severity_t {$/;"	g	namespace:mods::response_team::radio
sex	mods/mobs/mob.hpp	/^			byte& sex(){$/;"	f	class:mods::player
sex	mods/player.hpp	/^			uint8_t& sex() {$/;"	f	struct:mods::player
sex_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,3> sex_flags = { {$/;"	m	namespace:mods::builder	file:
sh_segment	mods/lmdb/gethostbyname.cpp	/^static std::unique_ptr<gdns::shm> sh_segment;$/;"	v	file:
shape_description	mods/fluxkraft/shape-dictionary.cpp	/^		shape_description(std::string_view shape_name,const std::vector<std::string>& directions) {$/;"	f	struct:mods::fluxkraft::shape_description
shape_description	mods/fluxkraft/shape-dictionary.cpp	/^	struct shape_description {$/;"	s	namespace:mods::fluxkraft	file:
shape_dictionary	mods/fluxkraft/shape-dictionary.cpp	/^	shape_dictionary::shape_dictionary() {$/;"	f	class:mods::fluxkraft::shape_dictionary
shape_dictionary	mods/fluxkraft/shape-dictionary.hpp	/^	struct shape_dictionary {$/;"	s	namespace:mods::fluxkraft
shape_list	mods/fluxkraft/shape-dictionary.cpp	/^	std::vector<shape_description>& shape_list() {$/;"	f	namespace:mods::fluxkraft
shield_proficiency_levels_t	mods/classes/sentinel.hpp	/^		enum shield_proficiency_levels_t {$/;"	g	struct:mods::classes::sentinel
shm	mods/lmdb/shm-config.hpp	/^namespace shm {$/;"	n
shm	mods/lmdb/shm.hpp	/^class  shm {$/;"	c	namespace:gdns
shm	mods/lmdb/shm.hpp	/^shm::shm(){$/;"	f	class:gdns::shm
shock_damage	mods/weapons/elemental.cpp	/^	void shock_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
shock_damage_percent	mods/rifle-attachments.hpp	/^			int16_t shock_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
shock_resistance_percent	mods/player.cpp	/^	int16_t& player::shock_resistance_percent() {$/;"	f	class:mods::player
shop	mods/orm/shop.hpp	/^		shop() : base(), loaded(false) {}$/;"	f	struct:mods::orm::shop
shop	mods/orm/shop.hpp	/^	struct shop : public base {$/;"	s	namespace:mods::orm
shop	mods/shop.cpp	/^namespace mods::shop {$/;"	n	class:mods	file:
shop	mods/shop.hpp	/^namespace mods::shop  {$/;"	n	class:mods
shop_bankAccount	mods/orm/shop.hpp	/^		int shop_bankAccount;		\/* Store all gold over 15000 (disabled)	*\/$/;"	m	struct:mods::orm::shop
shop_bits	shop.cpp	/^const char *shop_bits[] = {$/;"	v
shop_bitvector	mods/orm/shop.hpp	/^		bitvector_t shop_bitvector;	\/* Can attack? Use bank? Cast here?	*\/$/;"	m	struct:mods::orm::shop
shop_buy_data	shop.h	/^struct shop_buy_data {$/;"	s
shop_close1	mods/orm/shop.hpp	/^		int	 shop_close1;$/;"	m	struct:mods::orm::shop
shop_close2	mods/orm/shop.hpp	/^		int shop_close2;	\/* When does the shop close?		*\/$/;"	m	struct:mods::orm::shop
shop_data	shop.cpp	/^shop_data<mods::orm::shop,mods::orm::shop_rooms,mods::orm::shop_objects>::shop_data() {$/;"	f	class:shop_data
shop_data	shop.h	/^struct shop_data {$/;"	s
shop_description	mods/orm/shop.hpp	/^		mods::string shop_description;$/;"	m	struct:mods::orm::shop
shop_do_not_buy	mods/orm/shop.hpp	/^		mods::string shop_do_not_buy;		\/* If keeper dosn't buy such things	*\/$/;"	m	struct:mods::orm::shop
shop_flags	mods/orm/shop.hpp	/^		uint64_t shop_flags;$/;"	m	struct:mods::orm::shop
shop_id	mods/orm/shop.hpp	/^		db_id_t shop_id;$/;"	m	struct:mods::orm::shop
shop_in_room	mods/orm/shop.hpp	/^		room_vnum shop_in_room;$/;"	m	struct:mods::orm::shop
shop_keeper	act.other.cpp	/^SPECIAL(shop_keeper);$/;"	v
shop_keeper	mods/orm/shop.hpp	/^		mob_rnum shop_keeper;	\/* The mobile who owns the shop (rnum)	*\/$/;"	m	struct:mods::orm::shop
shop_keeper	shop.cpp	/^SPECIAL(shop_keeper);$/;"	v
shop_lastsort	mods/orm/shop.hpp	/^		int shop_lastsort;		\/* How many items are sorted in inven?	*\/$/;"	m	struct:mods::orm::shop
shop_list	db.cpp	/^std::deque<std::shared_ptr<shop_data_t>> shop_list;$/;"	v
shop_message_buy	mods/orm/shop.hpp	/^		mods::string shop_message_buy;		\/* Message when player buys item	*\/$/;"	m	struct:mods::orm::shop
shop_message_sell	mods/orm/shop.hpp	/^		mods::string shop_message_sell;		\/* Message when player sells item	*\/$/;"	m	struct:mods::orm::shop
shop_missing_cash1	mods/orm/shop.hpp	/^		mods::string shop_missing_cash1;		\/* Message if keeper hasn't got cash	*\/$/;"	m	struct:mods::orm::shop
shop_missing_cash2	mods/orm/shop.hpp	/^		mods::string shop_missing_cash2;		\/* Message if player hasn't got cash	*\/$/;"	m	struct:mods::orm::shop
shop_no_such_item1	mods/orm/shop.hpp	/^		mods::string shop_no_such_item1;		\/* Message if keeper hasn't got an item	*\/$/;"	m	struct:mods::orm::shop
shop_no_such_item2	mods/orm/shop.hpp	/^		mods::string shop_no_such_item2;		\/* Message if player hasn't got an item	*\/$/;"	m	struct:mods::orm::shop
shop_objects	mods/orm/shop.hpp	/^		shop_objects() : base(), shop_vnum_id(0) {}$/;"	f	struct:mods::orm::shop_objects
shop_objects	mods/orm/shop.hpp	/^	struct shop_objects : public base {$/;"	s	namespace:mods::orm
shop_open1	mods/orm/shop.hpp	/^		int shop_open1;$/;"	m	struct:mods::orm::shop
shop_open2	mods/orm/shop.hpp	/^		int shop_open2;		\/* When does the shop open?		*\/$/;"	m	struct:mods::orm::shop
shop_producing	shop.cpp	/^int shop_producing(struct obj_data *item, int shop_nr) {$/;"	f
shop_profit_buy	mods/orm/shop.hpp	/^		float shop_profit_buy;		\/* Factor to multiply cost with		*\/$/;"	m	struct:mods::orm::shop
shop_profit_sell	mods/orm/shop.hpp	/^		float shop_profit_sell;		\/* Factor to multiply cost with		*\/$/;"	m	struct:mods::orm::shop
shop_proto	db.cpp	/^std::deque<shop_data_t> shop_proto;	\/* prototypes for objs		 *\/$/;"	v
shop_rnum	mods/index-type.hpp	/^typedef IDXTYPE shop_rnum;$/;"	t
shop_rooms	mods/orm/shop.hpp	/^		shop_rooms() : base(), shop_vnum_id(0) {}$/;"	f	struct:mods::orm::shop_rooms
shop_rooms	mods/orm/shop.hpp	/^	struct shop_rooms : public base {$/;"	s	namespace:mods::orm
shop_temper1	mods/orm/shop.hpp	/^		int shop_temper1;		\/* How does keeper react if no money	*\/$/;"	m	struct:mods::orm::shop
shop_title	mods/orm/shop.hpp	/^		mods::string shop_title;$/;"	m	struct:mods::orm::shop
shop_type	mods/orm/shop.hpp	/^		int shop_type;$/;"	m	struct:mods::orm::shop
shop_type	shop.h	/^	int shop_type;$/;"	m	struct:shop_data
shop_view_item	shop.cpp	/^void shop_view_item(player_ptr_t& player, int16_t item_number) {$/;"	f
shop_vnum	mods/index-type.hpp	/^typedef IDXTYPE shop_vnum;$/;"	t
shop_vnum	structs.h	/^		room_vnum shop_vnum;$/;"	v
shop_vnum_id	mods/orm/shop.hpp	/^		shop_vnum shop_vnum_id;		\/* Virtual number of this shop		*\/$/;"	m	struct:mods::orm::shop
shop_vnum_id	mods/orm/shop.hpp	/^		shop_vnum shop_vnum_id;$/;"	m	struct:mods::orm::shop_objects
shop_vnum_id	mods/orm/shop.hpp	/^		shop_vnum shop_vnum_id;$/;"	m	struct:mods::orm::shop_rooms
shop_with_who	mods/orm/shop.hpp	/^		int shop_with_who;		\/* Who does the shop trade with?	*\/$/;"	m	struct:mods::orm::shop
shopping_buy	shop.cpp	/^void shopping_buy(char *arg, char_data *ch, char_data *keeper, int shop_nr) {$/;"	f
shopping_list	shop.cpp	/^void shopping_list(char *arg, char_data *ch, char_data *keeper, int shop_nr) {$/;"	f
shopping_sell	shop.cpp	/^void shopping_sell(char *arg, char_data *ch, char_data *keeper, int shop_nr) {$/;"	f
shopping_value	shop.cpp	/^void shopping_value(char *arg, char_data *ch, char_data *keeper, int shop_nr) {$/;"	f
short_desc	mods/rifle-attachments.cpp	/^	std::string short_desc(auto& in_a) {$/;"	f	namespace:mods
short_descr	mods/player.hpp	/^			mods::string& short_descr() {$/;"	f	struct:mods::player
short_description	mods/yaml.hpp	/^		std::string short_description;$/;"	m	struct:mods::yaml::yaml_description_t
short_description	structs.h	/^		mods::string short_description;       \/* when worn\/carry\/in cont.         *\/$/;"	m	struct:obj_data
shotgun	mods/weapons/shotgun-sasg12.cpp	/^namespace mods::weapons::shotgun {$/;"	n	class:mods::weapons	file:
shotgun	mods/weapons/shotgun-sasg12.hpp	/^namespace mods::weapons::shotgun {$/;"	n	class:mods::weapons
shotguns	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> shotguns;$/;"	m	namespace:mods::forge_engine	file:
shouldContinueOnFailure	mods/catch.hpp	/^	inline bool shouldContinueOnFailure(int flags)    {$/;"	f	namespace:Catch
shouldSuppressFailure	mods/catch.hpp	/^	inline bool shouldSuppressFailure(int flags)      {$/;"	f	namespace:Catch
should_continue	mods/help.cpp	/^	bool should_continue(std::string_view from,std::string_view argument, std::shared_ptr<mods::player>& player,bool zero_is_help) {$/;"	f	namespace:mods::help
should_do	mods/mobs/smart-mob.hpp	/^			bool should_do(uint16_t action) {$/;"	f	struct:mods::mobs::smart_mob
should_highlight	mods/mini-games/line-up.cpp	/^	bool line_up::should_highlight(int row, uint8_t value){$/;"	f	class:mods::mini_games::line_up
should_record	mods/builder-data.cpp	/^bool room_recorder_t::should_record() const {$/;"	f	class:room_recorder_t
should_throttle	mods/rate-limiting.cpp	/^	bool should_throttle(action_t action, player_ptr_t& player) {$/;"	f	namespace:mods::rate_limiting
shout	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::shout(std::string_view msg) {$/;"	f	class:mods::mobs::mini_gunner
shout	mods/mobs/smart-mob.cpp	/^	void smart_mob::shout(std::string_view msg) {$/;"	f	class:mods::mobs::smart_mob
shout_random	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto shout_random() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
shout_random	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto shout_random() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
shout_where_are_you_random_string	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto shout_where_are_you_random_string() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
show_blind_friendly_chargen_prompt	mods/chargen.cpp	/^	void show_blind_friendly_chargen_prompt(player_ptr_t& player){$/;"	f	namespace:mods::chargen
show_blind_friendly_class_menu	mods/chargen.cpp	/^	void show_blind_friendly_class_menu(player_ptr_t& player){$/;"	f	namespace:mods::chargen
show_blind_stats	mods/chargen.cpp	/^	void show_blind_stats(player_ptr_t& player){$/;"	f	namespace:mods::chargen
show_class_menu	mods/chargen.cpp	/^	void show_class_menu(player_ptr_t& player){$/;"	f	namespace:mods::chargen
show_finalized_chargen_screen	mods/chargen.cpp	/^	void show_finalized_chargen_screen(player_ptr_t p){$/;"	f	namespace:mods::chargen
show_item	mods/shop.hpp	/^	static inline void show_item(player_ptr_t& player,TShopMap& shop_map, int16_t item_number) {$/;"	f	namespace:mods::shop
show_nonconst_vector	mods/builder_util.hpp	/^	void show_nonconst_vector($/;"	f	namespace:mods::builder_util
show_obj_modifiers	act.informative.cpp	/^void show_obj_modifiers(struct obj_data *obj, char_data *ch) {$/;"	f
show_obj_to_char	act.informative.cpp	/^void show_obj_to_char(obj_ptr_t& object, player_ptr_t& player, int mode,int count) {$/;"	f
show_obj_to_char	act.informative.cpp	/^void show_obj_to_char(struct obj_data *obj, char_data *ch, int mode) {$/;"	f
show_object_vector	mods/builder_util.hpp	/^	void show_object_vector($/;"	f	namespace:mods::builder_util
show_shop_by_index	mods/builder.cpp	/^void show_shop_by_index(std::size_t i,player_ptr_t& player) {$/;"	f
show_shops	shop.cpp	/^void show_shops(char_data *ch, char *arg) {$/;"	f
show_string	modify.cpp	/^void show_string(mods::descriptor_data d, char *input) {$/;"	f
show_tics	mods/debug.cpp	/^	bool state::show_tics() { return m_show_tics; }$/;"	f	class:mods::debug::state
show_tics	mods/debug.cpp	/^	void state::show_tics(bool b){ m_show_tics = b; }$/;"	f	class:mods::debug::state
show_triads	mods/chargen.cpp	/^	void show_triads(player_ptr_t& player, player_class_t p_class){$/;"	f	namespace:mods::chargen
shptr	mods/loops.hpp	/^	namespace shptr {$/;"	n	namespace:mods::loops
shrapnel_damage	mods/weapons/elemental.cpp	/^	void shrapnel_damage(player_ptr_t& player,int requested_damage) {$/;"	f	namespace:mods::weapons::elemental
shrapnel_damage_percent	mods/rifle-attachments.hpp	/^			int16_t shrapnel_damage_percent;$/;"	m	struct:mods::rifle_attachments_t
shrapnel_resistance_percent	mods/player.cpp	/^	int16_t& player::shrapnel_resistance_percent() {$/;"	f	class:mods::player
shuffle	mods/util.hpp	/^	static inline void shuffle(T& vec) {$/;"	f	namespace:mods::util
shutdown	globals.cpp	/^		void shutdown(void) {$/;"	f	namespace:mods::globals
siderail_t	mods/weapon.hpp	/^	enum siderail_t {$/;"	g	namespace:mods::weapon
sigfunc	comm.h	/^typedef RETSIGTYPE sigfunc(int);$/;"	t
signal_setup	comm.cpp	/^void signal_setup(void) {$/;"	f
simulate	mods/drone.cpp	/^		void simulate(uuid_t  owner_uuid,bool value) {$/;"	f	namespace:mods::drone
singular	spells.h	/^	const char	*singular;$/;"	m	struct:attack_hit_type
site	db.h	/^	char	site[BANNED_SITE_LENGTH+1];$/;"	m	struct:ban_list_element
siteok_everyone	config.cpp	/^int siteok_everyone = TRUE;$/;"	v
sizer	mods/catch.hpp	/^			char sizer[1];$/;"	m	struct:Catch::Detail::TrueType
sizer	mods/catch.hpp	/^			char sizer[2];$/;"	m	struct:Catch::Detail::FalseType
skill	mods/classes/pyrexia.hpp	/^				skillset_t skill;$/;"	m	struct:mods::classes::pyrexia::skillset_info_t
skill	mods/player.cpp	/^	uint16_t player::skill(int t) {$/;"	f	class:mods::player
skill_category	mods/orm/skill-trees.hpp	/^		std::string skill_category;$/;"	m	struct:mods::orm::skill_trees_record_t
skill_description	mods/orm/skill-trees.hpp	/^		std::string skill_description;$/;"	m	struct:mods::orm::skill_trees_record_t
skill_id	mods/orm/player-skill-points.hpp	/^		uint32_t skill_id;$/;"	m	struct:mods::orm::player_skill_points
skill_id	mods/orm/player-skill-points.hpp	/^		uint32_t skill_id;$/;"	m	struct:mods::orm::player_skill_points_record_t
skill_id	mods/orm/player-skill-usage.hpp	/^		uint64_t skill_id;$/;"	m	struct:mods::orm::player_skill_usage
skill_id	mods/orm/player-skill-usage.hpp	/^		uint64_t skill_id;$/;"	m	struct:mods::orm::player_skill_usage_record_t
skill_message	fight.cpp	/^int skill_message(int dam, char_data *ch, char_data *vict,$/;"	f
skill_name	mods/orm/skill-trees.hpp	/^		std::string skill_name;$/;"	m	struct:mods::orm::skill_trees_record_t
skill_name	spell_parser.cpp	/^const char *skill_name(int num) {$/;"	f
skill_order	mods/orm/skill-trees.hpp	/^		uint16_t skill_order;$/;"	m	struct:mods::orm::skill_trees_record_t
skill_orm_adaptor	mods/skill-orm-adaptor.cpp	/^namespace mods::skill_orm_adaptor {$/;"	n	class:mods	file:
skill_orm_adaptor	mods/skill-orm-adaptor.hpp	/^namespace mods::skill_orm_adaptor {$/;"	n	class:mods
skill_parent_id	mods/orm/skill-trees.hpp	/^		uint32_t skill_parent_id;$/;"	m	struct:mods::orm::skill_trees_record_t
skill_player_class	mods/orm/skill-trees.hpp	/^		std::string skill_player_class;$/;"	m	struct:mods::orm::skill_trees_record_t
skill_points	mods/orm/player-skill-points.hpp	/^		uint16_t skill_points;$/;"	m	struct:mods::orm::player_skill_points
skill_points	mods/orm/player-skill-points.hpp	/^		uint16_t skill_points;$/;"	m	struct:mods::orm::player_skill_points_record_t
skill_points	mods/orm/skill-points.hpp	/^		skill_points() {$/;"	f	struct:mods::orm::skill_points
skill_points	mods/orm/skill-points.hpp	/^		uint16_t skill_points;$/;"	m	struct:mods::orm::skill_points_record_t
skill_points	mods/orm/skill-points.hpp	/^	struct skill_points : public mods::orm::orm_base<skill_points,std::string> {$/;"	s	namespace:mods::orm
skill_points_record_t	mods/orm/skill-points.hpp	/^	struct skill_points_record_t {$/;"	s	namespace:mods::orm
skill_points_table_name	mods/orm/skill-points.hpp	/^	static constexpr std::string_view skill_points_table_name = "skill_points";$/;"	m	namespace:mods::orm
skill_screen	mods/classes/forge.cpp	/^	std::string forge::skill_screen() const {$/;"	f	class:mods::classes::forge
skill_screen	mods/classes/ghost.cpp	/^	std::string ghost::skill_screen() const {$/;"	f	class:mods::classes::ghost
skill_trees	mods/orm/chargen.hpp	/^		skill_trees()  : base(), id(0) {}$/;"	f	struct:mods::orm::skill_trees
skill_trees	mods/orm/chargen.hpp	/^	struct skill_trees : public base {$/;"	s	namespace:mods::orm
skill_trees	mods/orm/skill-trees.hpp	/^		skill_trees() {$/;"	f	struct:mods::orm::skill_trees
skill_trees	mods/orm/skill-trees.hpp	/^	struct skill_trees : public mods::orm::orm_base<skill_trees,std::string> {$/;"	s	namespace:mods::orm
skill_trees_record_t	mods/orm/skill-trees.hpp	/^	struct skill_trees_record_t {$/;"	s	namespace:mods::orm
skill_trees_table_name	mods/orm/skill-trees.hpp	/^	static constexpr std::string_view skill_trees_table_name = "skill_trees";$/;"	m	namespace:mods::orm
skill_usage	mods/orm/sniper.hpp	/^		std::map<uint64_t,uint16_t> skill_usage;$/;"	m	struct:mods::orm::sniper
skillo	spell_parser.cpp	831;"	d	file:
skills	db.cpp	/^namespace mods::skills {$/;"	n	class:mods	file:
skills	globals.cpp	/^namespace mods::skills {$/;"	n	class:mods	file:
skills	globals.hpp	/^namespace mods::skills {$/;"	n	class:mods
skills	mods/classes/pyrexia.hpp	/^			std::list<skillset_info_t> skills;$/;"	m	struct:mods::classes::pyrexia
skills	mods/init.hpp	/^INIT(mods::skills);$/;"	v
skills	mods/skills.cpp	/^namespace mods::skills {$/;"	n	class:mods	file:
skills	mods/skills.hpp	/^namespace mods::skills {$/;"	n	class:mods
skillset_info_t	mods/classes/pyrexia.hpp	/^			struct skillset_info_t {$/;"	s	struct:mods::classes::pyrexia
skip_spaces	interpreter.cpp	/^void skip_spaces(char **string) {$/;"	f
sktree_class	mods/orm/chargen.hpp	/^		uint64_t sktree_class;\/\/INTEGER NOT NULL REFERENCES player_classes(id),$/;"	m	struct:mods::orm::skill_trees
sktree_class_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<player_classes> sktree_class_ptr;$/;"	m	struct:mods::orm::skill_trees
sktree_skill_description	mods/orm/chargen.hpp	/^		std::string sktree_skill_description;\/\/TEXT,$/;"	m	struct:mods::orm::skill_trees
sktree_skill_level_unlock	mods/orm/chargen.hpp	/^		uint64_t sktree_skill_level_unlock;\/\/INTEGER NOT NULL,$/;"	m	struct:mods::orm::skill_trees
sktree_skill_name	mods/orm/chargen.hpp	/^		std::string sktree_skill_name;\/\/VARCHAR(32) NOT NULL,$/;"	m	struct:mods::orm::skill_trees
sktree_skill_order	mods/orm/chargen.hpp	/^		uint64_t sktree_skill_order;\/\/INTEGER NOT NULL DEFAULT 0$/;"	m	struct:mods::orm::skill_trees
sktree_skill_parent_id	mods/orm/chargen.hpp	/^		uint64_t sktree_skill_parent_id;\/\/INTEGER REFERENCES skill_trees(id),$/;"	m	struct:mods::orm::skill_trees
sktree_skill_parent_id_ptr	mods/orm/chargen.hpp	/^		std::shared_ptr<skill_trees> sktree_skill_parent_id_ptr;\/\/INTEGER REFERENCES skill_trees(id),$/;"	m	struct:mods::orm::skill_trees
slc_names	telnet.h	/^char *slc_names[] = {$/;"	v
slice_option_off	globals.cpp	/^		std::string slice_option_off(std::string_view argv,std::string_view option_including_equals) {$/;"	f	namespace:mods::globals
slide_obj	shop.cpp	/^struct obj_data *slide_obj(struct obj_data *obj, char_data *keeper,$/;"	f
slot_names_for_type	mods/util.cpp	/^	std::vector<std::string> slot_names_for_type(std::string_view type) {$/;"	f	namespace:mods::util
slot_num	boards.h	/^	int	slot_num;     \/* pos of message in "master index" *\/$/;"	m	struct:board_msginfo
slotted_builder	mods/builder/slotted-builder.hpp	/^			slotted_builder() {$/;"	f	struct:mods::builder::slotted_builder
slotted_builder	mods/builder/slotted-builder.hpp	/^	struct slotted_builder {$/;"	s	namespace:mods::builder
sm_debug	mods/mobs/smart-mob.cpp	7;"	d	file:
sm_debug	mods/mobs/smart-mob.cpp	9;"	d	file:
smart_mob	mods/mobs/smart-mob.cpp	/^	smart_mob::smart_mob() {$/;"	f	class:mods::mobs::smart_mob
smart_mob	mods/mobs/smart-mob.cpp	/^	smart_mob::smart_mob(uuid_t mob_uuid, std::string variation) {$/;"	f	class:mods::mobs::smart_mob
smart_mob	mods/mobs/smart-mob.hpp	/^	struct smart_mob {$/;"	s	namespace:mods::mobs
smash_tilde	modify.cpp	/^void smash_tilde(char *str) {$/;"	f
smg	mods/weapons/smg-mp5.cpp	/^namespace mods::weapons::smg {$/;"	n	class:mods::weapons	file:
smg	mods/weapons/smg-mp5.hpp	/^namespace mods::weapons::smg {$/;"	n	class:mods::weapons
smoke_room	mods/projectile.cpp	/^		void smoke_room(room_rnum room) {$/;"	f	namespace:mods::projectile
snake	spec_assign.cpp	/^SPECIAL(snake);$/;"	v
snake	spec_procs.cpp	/^SPECIAL(snake);$/;"	v
snipe	mods/weapon.hpp	/^		static constexpr uint64_t snipe = (1 << 0);$/;"	m	struct:mods::weapon::mask
snipe_tracking	mods/behaviour_tree_impl.hpp	/^		snipe_tracking = 1,$/;"	e	enum:mods::behaviour_tree_impl::type
sniper	mods/classes/sniper.cpp	/^	sniper::sniper() {$/;"	f	class:mods::classes::sniper
sniper	mods/classes/sniper.cpp	/^	sniper::sniper(player_ptr_t p) {$/;"	f	class:mods::classes::sniper
sniper	mods/classes/sniper.cpp	/^namespace mods::class_abilities::sniper {$/;"	n	class:mods::class_abilities	file:
sniper	mods/classes/sniper.hpp	/^	struct sniper : base {$/;"	s	namespace:mods::classes
sniper	mods/init.hpp	/^INIT(mods::class_abilities::sniper);$/;"	v
sniper	mods/orm/sniper.hpp	/^		sniper() : id(0) {$/;"	f	struct:mods::orm::sniper
sniper	mods/orm/sniper.hpp	/^	struct sniper : public mods::orm::orm_base<sniper,mods::weapon::sniper::primary_choice_t> {$/;"	s	namespace:mods::orm
sniper	mods/player.cpp	/^	std::shared_ptr<mods::classes::sniper>& player::sniper() {$/;"	f	class:mods::player
sniper	mods/weapon.hpp	/^	namespace sniper {$/;"	n	namespace:mods::weapon
sniper_id	mods/orm/sniper.hpp	/^		uint64_t sniper_id;$/;"	m	struct:mods::orm::sniper
sniper_list	mods/replenish.cpp	/^	static std::vector<uuid_t> sniper_list;$/;"	m	namespace:mods::replenish	file:
sniper_player_id	mods/orm/sniper.hpp	/^		uint64_t sniper_player_id;$/;"	m	struct:mods::orm::sniper
sniper_primary_type	mods/orm/sniper.hpp	/^		std::string sniper_primary_type;$/;"	m	struct:mods::orm::sniper
sniper_primary_weapon_id	mods/orm/sniper.hpp	/^		uint64_t sniper_primary_weapon_id;$/;"	m	struct:mods::orm::sniper
sniper_ptrs	mods/replenish.cpp	/^	static std::map<uuid_t,sniper_ptr_t> sniper_ptrs;$/;"	m	namespace:mods::replenish	file:
sniper_rifle	mods/weapons/sniper-rifle-l96aw.cpp	/^namespace mods::weapons::sniper_rifle {$/;"	n	class:mods::weapons	file:
sniper_rifle	mods/weapons/sniper-rifle-l96aw.hpp	/^namespace mods::weapons::sniper_rifle {$/;"	n	class:mods::weapons
sniper_rifle	mods/weapons/sniper-rifle-psg1.cpp	/^namespace mods::weapons::sniper_rifle {$/;"	n	class:mods::weapons	file:
sniper_rifle	mods/weapons/sniper-rifle-psg1.hpp	/^namespace mods::weapons::sniper_rifle {$/;"	n	class:mods::weapons
sniper_rifles	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> sniper_rifles;$/;"	m	namespace:mods::forge_engine	file:
sniper_secondary_type	mods/orm/sniper.hpp	/^		std::string sniper_secondary_type;$/;"	m	struct:mods::orm::sniper
sniper_secondary_weapon_id	mods/orm/sniper.hpp	/^		uint64_t sniper_secondary_weapon_id;$/;"	m	struct:mods::orm::sniper
sniper_skillset	class.cpp	/^std::string sniper_skillset() {$/;"	f
sniping	mods/player.hpp	/^			uint16_t& sniping() {$/;"	f	struct:mods::player
snoop_check	act.wizard.cpp	/^void snoop_check(char_data *ch) {$/;"	f
snprintf	bsd-snprintf.cpp	/^snprintf(char *str,size_t count,const char *fmt,...) {$/;"	f
snprintf	sysdep.h	350;"	d
soc_mess_list	act.social.cpp	/^} *soc_mess_list;$/;"	v	typeref:struct:social_messg
social_messg	act.social.cpp	/^struct social_messg {$/;"	s	file:
socket	mods/player.cpp	/^	socket_t player::socket() {$/;"	f	class:mods::player
socket_map	globals.cpp	/^		socket_map_t socket_map;$/;"	m	namespace:mods::globals	file:
socket_t	mods/ban_system.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/builder.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/conf.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/contracts.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/immortal.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/js.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/pq.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/projectile.hpp	/^typedef int socket_t;$/;"	t
socket_t	mods/scan.hpp	/^typedef int socket_t;$/;"	t
socket_t	sysdep.h	/^typedef SOCKET		socket_t;$/;"	t
socklen_t	mods/lmdb/gethostbyname.cpp	/^typedef uint32_t socklen_t;$/;"	t	file:
solar_assistance	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::solar_assistance(room_rnum room_id){$/;"	f	class:mods::orm::pyrexia
solo_gain	fight.cpp	/^void solo_gain(char_data *ch, char_data *victim) {$/;"	f
solution	mods/intent.hpp	/^		std::vector<std::string> solution;$/;"	m	struct:mods::intent::intent_t
solution	mods/mini-games/wires.hpp	/^		std::tuple<uint8_t,uint8_t> solution;$/;"	m	struct:mods::mini_games::wires
solutions	mods/mini-games/line-up.hpp	/^		std::vector<uint8_t> solutions;$/;"	m	namespace:mods::mini_games
sort_commands	act.informative.cpp	/^void sort_commands(void) {$/;"	f
sort_commands	mods/hell.hpp	/^	constexpr inline bool sort_commands = false;$/;"	m	namespace:mods::hell
sort_commands_helper	act.informative.cpp	/^int sort_commands_helper(const void *a, const void *b) {$/;"	f
sort_keeper_objs	shop.cpp	/^void sort_keeper_objs(char_data *keeper, int shop_nr) {$/;"	f
sort_spells	mods/hell.hpp	/^	constexpr inline bool sort_spells = false;$/;"	m	namespace:mods::hell
sort_spells	spec_procs.cpp	/^void sort_spells(void) {$/;"	f
spare0	house.h	/^	long spare0;$/;"	m	struct:house_control_rec
spare0	structs.h	/^	int	spare0;$/;"	m	struct:rent_info
spare1	house.h	/^	long spare1;$/;"	m	struct:house_control_rec
spare1	structs.h	/^	int	spare1;$/;"	m	struct:rent_info
spare2	house.h	/^	long spare2;$/;"	m	struct:house_control_rec
spare2	structs.h	/^	int	spare2;$/;"	m	struct:rent_info
spare3	house.h	/^	long spare3;$/;"	m	struct:house_control_rec
spare3	structs.h	/^	int	spare3;$/;"	m	struct:rent_info
spare4	house.h	/^	long spare4;$/;"	m	struct:house_control_rec
spare4	structs.h	/^	int	spare4;$/;"	m	struct:rent_info
spare5	house.h	/^	long spare5;$/;"	m	struct:house_control_rec
spare5	structs.h	/^	int	spare5;$/;"	m	struct:rent_info
spare6	house.h	/^	long spare6;$/;"	m	struct:house_control_rec
spare6	structs.h	/^	int	spare6;$/;"	m	struct:rent_info
spare7	house.h	/^	long spare7;$/;"	m	struct:house_control_rec
spare7	structs.h	/^	int	spare7;$/;"	m	struct:rent_info
special	interpreter.cpp	/^int special(char_data *ch, int cmd, char *arg) {$/;"	f
specialty_skills	mods/orm/chargen.hpp	/^		specialty_skills()  : base(), id(0) {}$/;"	f	struct:mods::orm::specialty_skills
specialty_skills	mods/orm/chargen.hpp	/^	struct specialty_skills : public base {$/;"	s	namespace:mods::orm
spell_charm	spells.h	/^ASPELL(spell_charm);$/;"	v
spell_create_water	spells.h	/^ASPELL(spell_create_water);$/;"	v
spell_detect_poison	spells.h	/^ASPELL(spell_detect_poison);$/;"	v
spell_enchant_weapon	spells.h	/^ASPELL(spell_enchant_weapon);$/;"	v
spell_identify	spells.h	/^ASPELL(spell_identify);$/;"	v
spell_info	spell_parser.cpp	/^struct spell_info_type spell_info[TOP_SPELL_DEFINE + 1];$/;"	v	typeref:struct:spell_info_type
spell_info_type	spells.h	/^struct spell_info_type {$/;"	s
spell_information	spells.h	/^ASPELL(spell_information);$/;"	v
spell_level	spell_parser.cpp	/^void spell_level(int spell, int chclass, int level) {$/;"	f
spell_locate_object	spells.h	/^ASPELL(spell_locate_object);$/;"	v
spell_recall	spells.h	/^ASPELL(spell_recall);$/;"	v
spell_sort_info	spec_procs.cpp	/^int spell_sort_info[MAX_SKILLS + 1];$/;"	v
spell_summon	spells.h	/^ASPELL(spell_summon);$/;"	v
spell_teleport	spells.h	/^ASPELL(spell_teleport);$/;"	v
spello	spell_parser.cpp	/^void spello(int spl, const char *name, int max_mana, int min_mana,$/;"	f
split	mods/util-conf.hpp	/^			std::vector<std::string> split(const std::string& in_string,const std::string& delimiter,unsigned int limit = 1024) {$/;"	f	namespace:mods::util::text
spray	mods/mobs/lowly-security.cpp	/^	feedback_t& lowly_security::spray(uint8_t dir) {$/;"	f	class:mods::mobs::lowly_security
spray	mods/mobs/mini-gunner.cpp	/^	feedback_t& mini_gunner::spray(int dir) {$/;"	f	class:mods::mobs::mini_gunner
spray_direction	mods/mobs/lowly-security-behaviour-tree.hpp	/^	auto spray_direction() {$/;"	f	namespace:mods::mobs::lowly_security_behaviour_tree
spray_direction	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto spray_direction() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
spray_direction	mods/mobs/mini-gunner.hpp	/^			int spray_direction;$/;"	m	struct:mods::mobs::mini_gunner
spray_direction	mods/mobs/smart-mob.hpp	/^			uint8_t spray_direction;$/;"	m	struct:mods::mobs::smart_mob
spray_direction	mods/weapons/damage-types.cpp	/^	void spray_direction(player_ptr_t& player,int direction) {$/;"	f	namespace:mods::weapons::damage_types
spray_direction_with_feedback	mods/weapons/damage-types.cpp	/^	feedback_t spray_direction_with_feedback(player_ptr_t& player,int direction) {$/;"	f	namespace:mods::weapons::damage_types
sprintbit	utils.cpp	/^size_t sprintbit(bitvector_t bitvector, const char *names[], char *result, size_t reslen) {$/;"	f
sprinttype	utils.cpp	/^size_t sprinttype(int type, const char *names[], char *result, size_t reslen) {$/;"	f
spskill_description	mods/orm/chargen.hpp	/^		std::string spskill_description;\/\/TEXT$/;"	m	struct:mods::orm::specialty_skills
spskill_name	mods/orm/chargen.hpp	/^		std::string spskill_name;\/\/VARCHAR(64) NOT NULL,$/;"	m	struct:mods::orm::specialty_skills
sql	mods/orm/inventory.cpp	/^	namespace sql {$/;"	n	namespace:mods::orm::inventory	file:
sql	mods/orm/inventory.hpp	/^	namespace sql {$/;"	n	namespace:mods::orm::inventory
sql	mods/sql.hpp	/^			str_object sql() {$/;"	f	struct:mods::sql::compositor
sql	mods/sql.hpp	/^namespace mods::sql {$/;"	n	class:mods
sql_compositor	mods/builder_util.hpp	/^typedef mods::sql::compositor<mods::pq::transaction> sql_compositor;$/;"	t
stack_data	shop.h	/^struct stack_data {$/;"	s
start	mods/drone.cpp	/^		void start(uuid_t  owner_uuid) {$/;"	f	namespace:mods::drone
start	mods/mob-roam.cpp	/^	std::tuple<int16_t,std::string> roam_recorder::start() {$/;"	f	class:mods::mob_roam::roam_recorder
start	mods/mob-roam.cpp	/^	std::tuple<int16_t,std::string> start(player_ptr_t& player, const std::vector<mob_vnum>& mobs, std::string_view profile_name) {$/;"	f	namespace:mods::mob_roam
start_contract	mods/contracts.cpp	/^	bool start_contract(player_ptr_t& player,int contract_id) {$/;"	f	namespace:mods::contracts
start_contract	mods/contracts.cpp	/^	std::tuple<bool,std::string> start_contract(player_ptr_t& player, contract_vnum_t contract_vnum) {$/;"	f	namespace:mods::contracts
start_contract	mods/player.cpp	/^	std::shared_ptr<mods::contracts::player_contract_instance> player::start_contract(int c_num) {$/;"	f	class:mods::player
start_fire_dissolver	mods/rooms.cpp	/^	void start_fire_dissolver(room_rnum room) {$/;"	f	namespace:mods::rooms
start_first_or_create	mods/contracts.cpp	/^	void start_first_or_create(player_ptr_t& player, contract_vnum_t contract_vnum) {$/;"	f	namespace:mods::contracts
start_histfile	mods/player.cpp	/^	void player::start_histfile() {$/;"	f	class:mods::player
start_or_resume_contract	mods/player-contract-instance.cpp	/^	std::tuple<bool,std::string> player_contract_instance::start_or_resume_contract(contract_vnum_t in_vnum) {$/;"	f	class:mods::contracts::player_contract_instance
start_recording	mods/builder-data.cpp	/^void room_recorder_t::start_recording() {$/;"	f	class:room_recorder_t
start_room	mods/builder-data.hpp	/^	int start_room;$/;"	m	struct:room_pavement_t
started	mods/drone.cpp	/^		bool started(uuid_t  owner_uuid) {$/;"	f	namespace:mods::drone
starting_point	structs.h	/^		bool starting_point;$/;"	v
stat_bonuses	mods/player.cpp	/^namespace mods::stat_bonuses {$/;"	n	class:mods	file:
stat_bonuses	mods/stat-bonuses.cpp	/^namespace mods::stat_bonuses {$/;"	n	class:mods	file:
stat_bonuses	mods/stat-bonuses.hpp	/^namespace mods::stat_bonuses {$/;"	n	class:mods
stat_boosts	mods/forge-engine/generator.hpp	/^		std::vector<std::pair<stat_types_t,std::variant<uint32_t,float>>> stat_boosts;$/;"	m	struct:mods::forge_engine::generated_explosive_t
stat_high	mods/forge-engine/value-scaler.hpp	/^		float stat_high;$/;"	m	struct:mods::forge_engine::value_scaler
stat_low	mods/forge-engine/value-scaler.hpp	/^		float stat_low;$/;"	m	struct:mods::forge_engine::value_scaler
stat_types_t	mods/forge-engine/requirements.hpp	/^		enum stat_types_t {$/;"	g	namespace:mods::forge_engine
state	mods/ai_state.hpp	/^			enum state {$/;"	g	class:mods::ai_state
state	mods/debug.cpp	/^	state::state(bool _show_tics) : m_show_tics(_show_tics) {$/;"	f	class:mods::debug::state
state	mods/debug.hpp	/^	struct state {$/;"	s	namespace:mods::debug
state	mods/player.cpp	/^	int player::state() {$/;"	f	class:mods::player
state_fetch	globals.cpp	/^		std::unique_ptr<ai_state>& state_fetch(char_data* ch) {$/;"	f	namespace:mods::globals
statement_t	mods/orm/util.hpp	/^		statement_t(std::string c_where,$/;"	f	struct:mods::orm::util::statement_t
statement_t	mods/orm/util.hpp	/^	struct statement_t {$/;"	s	namespace:mods::orm::util
states	globals.cpp	/^		ai_state_map states;$/;"	m	namespace:mods::globals	file:
stats	mods/forge-engine/requirements.hpp	/^		std::vector<std::pair<stat_types_t,uint32_t>> stats;$/;"	m	struct:mods::forge_engine::requirements_t
status	mods/behaviour_tree_node.hpp	/^				behaviour_tree_status status;$/;"	m	struct:mods::behaviour_tree_node::__anon2
status_obj_from_room	mods/world-configuration.cpp	/^		bool status_obj_from_room;$/;"	m	namespace:mods::world_conf::toggle	file:
status_step_count	mods/lmdb.hpp	/^		constexpr static std::size_t status_step_count = 5;$/;"	m	struct:mods::lmdb::_db_handle
stc	mods/drone.hpp	/^			void stc(const char* m) {$/;"	f	struct:mods::drone_impl
stc	mods/drone.hpp	/^			void stc(const std::string m) {$/;"	f	struct:mods::drone_impl
stc	mods/drone.hpp	/^			void stc(int m) {$/;"	f	struct:mods::drone_impl
stc	mods/mobs/mob.cpp	/^	void player::stc(const char* m) {$/;"	f	class:mods::player
stc	mods/mobs/mob.cpp	/^	void player::stc(const std::string m) {$/;"	f	class:mods::player
stc	mods/mobs/mob.cpp	/^	void player::stc(int m) {$/;"	f	class:mods::player
stc	mods/player.cpp	/^	void player::stc(const char* m) {$/;"	f	class:mods::player
stc	mods/player.cpp	/^	void player::stc(const mods::string& m) {$/;"	f	class:mods::player
stc	mods/player.cpp	/^	void player::stc(const std::string m) {$/;"	f	class:mods::player
stc	mods/player.cpp	/^	void player::stc(int m) {$/;"	f	class:mods::player
stc	mods/player.cpp	/^	void player::stc(std::string_view sview) {$/;"	f	class:mods::player
stc_room	mods/mobs/mob.cpp	/^	void player::stc_room(const room_rnum& rnum) {$/;"	f	class:mods::player
stc_room	mods/player.cpp	/^	void player::stc_room(const room_rnum& rnum) {$/;"	f	class:mods::player
stc_room_desc	mods/mobs/mob.cpp	/^	void player::stc_room_desc(const room_rnum& rnum) {$/;"	f	class:mods::player
stealth_levels_t	mods/orm/striker.hpp	/^		enum stealth_levels_t {$/;"	g	struct:mods::orm::striker
step_by_vnum	mods/builder/conbuild.cpp	/^		std::optional<std::shared_ptr<mods::orm::contract_steps>> step_by_vnum(conbuild_vnum_t vnum) {$/;"	f	struct:mods::builder::conbuild::conbuild_interface
step_counter	mods/player-contract-instance.hpp	/^			const auto& step_counter() const {$/;"	f	struct:mods::contracts::player_contract_instance
step_list	mods/builder/conbuild.cpp	/^		std::deque<std::shared_ptr<mods::orm::contract_steps>> step_list;$/;"	m	struct:mods::builder::conbuild::conbuild_interface	file:
step_one	mods/weapons/damage-types.cpp	/^		int step_one(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
step_two	mods/weapons/damage-types.cpp	/^		int step_two(char_data *ch, char_data *victim, int dam, int attacktype) {$/;"	f	namespace:mods::weapons::damage_types::legacy
steps	mods/contract-types.hpp	/^		std::vector<contract_step> steps;$/;"	m	struct:mods::contracts::contract
stfu	mods/util-conf.hpp	/^			static bool stfu = true;$/;"	m	namespace:mods::util::conf
still_alive	mods/contracts.cpp	/^	static duk_ret_t still_alive(duk_context *ctx) {$/;"	f	namespace:mods::contracts
stim_pistol_ammo	mods/classes/medic.cpp	/^	uint8_t& medic::stim_pistol_ammo() {$/;"	f	class:mods::classes::medic
stock	mods/rifle-attachments.hpp	/^			obj_ptr_t stock;$/;"	m	struct:mods::rifle_attachments_t
stoi	mods/orm/util.hpp	/^	T stoi(const std::string& i) {$/;"	f	namespace:mods::orm::util
stoi	mods/pq.hpp	/^T stoi(const std::string& i) {$/;"	f
stoi	mods/util.cpp	/^	std::optional<int> stoi(std::string_view str) {$/;"	f	namespace:mods::util
stoi	mods/util.hpp	/^	T stoi(const pqxx::result::reference& i) {$/;"	f	namespace:mods::util
stoi	mods/util.hpp	/^	T stoi(const std::string& i) {$/;"	f	namespace:mods::util
stoi_optional	mods/util.hpp	/^	std::optional<T> stoi_optional(std::string_view str) {$/;"	f	namespace:mods::util
stop	mods/drone.cpp	/^		void stop(uuid_t  owner_uuid) {$/;"	f	namespace:mods::drone
stop	mods/mob-roam.cpp	/^	std::tuple<int16_t,std::string> roam_recorder::stop() {$/;"	f	class:mods::mob_roam::roam_recorder
stop	mods/mob-roam.cpp	/^	std::tuple<int16_t,std::string> stop(player_ptr_t& player, std::string_view profile_name) {$/;"	f	namespace:mods::mob_roam
stop_contract	mods/contracts.cpp	/^	std::tuple<bool,std::string> stop_contract(player_ptr_t& player, contract_vnum_t contract_vnum) {$/;"	f	namespace:mods::contracts
stop_contract	mods/player-contract-instance.cpp	/^	void player_contract_instance::stop_contract() {$/;"	f	class:mods::contracts::player_contract_instance
stop_contract	mods/player.cpp	/^	void player::stop_contract(int c_num) {$/;"	f	class:mods::player
stop_fighting	fight.cpp	/^void stop_fighting(char_data *ch) {$/;"	f
stop_fire_dissolver	mods/rooms.hpp	/^	static inline void stop_fire_dissolver(room_rnum room) {$/;"	f	namespace:mods::rooms
stop_follower	utils.cpp	/^void stop_follower(char_data *ch) {$/;"	f
stop_histfile	mods/player.cpp	/^	void player::stop_histfile() {$/;"	f	class:mods::player
stop_recording	mods/builder-data.cpp	/^void room_recorder_t::stop_recording() {$/;"	f	class:room_recorder_t
stop_snooping	act.wizard.cpp	/^void stop_snooping(char_data *ch) {$/;"	f
stop_watching	mods/mobs/room-watching.cpp	/^	void stop_watching(uuid_t mob){$/;"	f	namespace:mods::mobs::room_watching
store_mail	mail.cpp	/^void store_mail(long to, long from, char *message_pointer) {$/;"	f
stoul	mods/util.cpp	/^	std::optional<unsigned> stoul(std::string_view str) {$/;"	f	namespace:mods::util
str	mods/string.cpp	/^	std::string string::str() const {$/;"	f	class:mods::string
str_affect_player	mods/affects.cpp	/^	void str_affect_player(std::vector<std::string> a,player_ptr_t p) {$/;"	f	namespace:mods::affects
str_app	constants.cpp	/^cpp_extern const struct str_app_type str_app[] = {$/;"	v	typeref:struct:str_app_type
str_app	constants.hpp	/^cpp_extern const struct str_app_type str_app[] = {$/;"	v	typeref:struct:str_app_type
str_cmp	sysdep.h	326;"	d
str_cmp	utils.cpp	/^int str_cmp(const char *arg1, const char *arg2) {$/;"	f
str_command	interpreter.h	/^	std::string str_command;$/;"	m	struct:command_info
str_escape	mods/jx.hpp	/^			std::string str_escape(const std::string& value) {$/;"	f	struct:mods::jx::compositor
str_object	mods/sql.hpp	/^typedef std::string str_object;$/;"	t
str_object	mods/sql.hpp	/^typedef std::string_view str_object;$/;"	t
str_or	mods/string.cpp	/^	std::string string::str_or(std::string f) const {$/;"	f	class:mods::string
str_queue_on_player	mods/affects.cpp	/^void str_queue_on_player(std::vector<std::string> affects,player_ptr_t player) {$/;"	f
str_queue_on_room	mods/affects.cpp	/^void str_queue_on_room(std::vector<std::string> affects,int room_id) {$/;"	f
str_sub_type	structs.h	/^		std::string str_sub_type;	\/\/i.e.: SENSOR_GRENADE$/;"	m	struct:obj_data
str_type	mods/yaml.hpp	/^		std::string str_type;$/;"	m	struct:mods::yaml::yaml_description_t
str_type	structs.h	/^		std::string str_type;	\/\/i.e.: explosive$/;"	m	struct:obj_data
strap	mods/rifle-attachments.hpp	/^			obj_ptr_t strap;$/;"	m	struct:mods::rifle_attachments_t
strategy	mods/player.hpp	/^			uint16_t& strategy() {$/;"	f	struct:mods::player
strdup	utils.cpp	/^char *strdup(const char *source) {$/;"	f
strength	mods/player.hpp	/^			uint16_t& strength() {$/;"	f	struct:mods::player
striker	mods/orm/striker.hpp	/^		striker() : id(0) { this->init(); loaded = 0; }$/;"	f	struct:mods::orm::striker
striker	mods/orm/striker.hpp	/^	struct striker : public mods::orm::orm_base<striker,int> {$/;"	s	namespace:mods::orm
striker_feign_death_level	mods/orm/striker.hpp	/^		feign_death_levels_t striker_feign_death_level;$/;"	m	struct:mods::orm::striker
striker_id	mods/orm/striker.hpp	/^		uint64_t striker_id;$/;"	m	struct:mods::orm::striker
striker_player_id	mods/orm/striker.hpp	/^		uint64_t striker_player_id;$/;"	m	struct:mods::orm::striker
striker_stealth_level	mods/orm/striker.hpp	/^		stealth_levels_t striker_stealth_level;$/;"	m	struct:mods::orm::striker
striker_summon_extraction_level	mods/orm/striker.hpp	/^		summon_extraction_levels_t striker_summon_extraction_level;$/;"	m	struct:mods::orm::striker
striker_teep_level	mods/orm/striker.hpp	/^		teep_levels_t striker_teep_level;$/;"	m	struct:mods::orm::striker
striker_xray_shot_level	mods/orm/striker.hpp	/^		xray_shot_levels_t striker_xray_shot_level;$/;"	m	struct:mods::orm::striker
string	mods/catch2.hpp	/^        auto str() const -> std::string;$/;"	m	class:Catch::ReusableStringStream::std
string	mods/catch2.hpp	/^    auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;$/;"	m	class:Catch::std
string	mods/string.cpp	/^	string::string(){$/;"	f	class:mods::string
string	mods/string.cpp	/^	string::string(const char* str){$/;"	f	class:mods::string
string	mods/string.cpp	/^	string::string(const string& str){$/;"	f	class:mods::string
string	mods/string.cpp	/^	string::string(mentoc_pqxx_result_t str) {$/;"	f	class:mods::string
string	mods/string.cpp	/^	string::string(mentoc_pqxx_result_t::reference other) {$/;"	f	class:mods::string
string	mods/string.hpp	/^	struct string {$/;"	s	namespace:mods
string_add	modify.cpp	/^void string_add(mods::descriptor_data d, char *str) {$/;"	f
string_fields	modify.cpp	/^const char *string_fields[] = {$/;"	v
string_map	mods/affects.hpp	/^	const static std::map<std::string,affect_t> string_map = {$/;"	m	namespace:mods::affects
string_to_action	mods/rate-limiting.cpp	/^	action_t string_to_action(std::string_view action) {$/;"	f	namespace:mods::rate_limiting
string_types	mods/values.cpp	/^static const std::vector<value_key_t> string_types = {$/;"	m	namespace:mods::values	file:
string_write	modify.cpp	/^void string_write(mods::descriptor_data d, char **writeto, size_t len, long mailto, void *data) {$/;"	f
stringify	mods/catch2.hpp	/^        inline std::string stringify( NSString* nsstring ) {$/;"	f	namespace:Catch::Detail
stringify	mods/catch2.hpp	/^        std::string stringify(const T& e) {$/;"	f	namespace:Catch::Detail
strings	mods/mobs/extended-types.cpp	/^	std::vector<std::string> strings() {$/;"	f	namespace:mods::mobs::extended_types
strip_colors	globals.cpp	/^		std::string strip_colors(std::string_view buffer) {$/;"	f	namespace:mods::globals
strip_identifier	mods/migrations.cpp	/^	std::tuple<int,std::string> strip_identifier(std::string identifier){$/;"	f	namespace:mods::migrations
strlcpy	utils.cpp	/^size_t strlcpy(char *dest, const char *source, size_t totalsize) {$/;"	f
strn_cmp	sysdep.h	333;"	d
strn_cmp	utils.cpp	/^int strn_cmp(const char *arg1, const char *arg2, int n) {$/;"	f
stun_player_id_ptr	mods/orm/chargen.hpp	/^		player_ptr_t stun_player_id_ptr;\/\/INTEGER NOT NULL REFERENCES player(id),$/;"	m	struct:mods::orm::player_skill_trees_unlocked
sub_machine_guns	mods/forge-engine/generated-rifle.cpp	/^	static std::vector<std::string> sub_machine_guns;$/;"	m	namespace:mods::forge_engine	file:
subcmd	interpreter.h	/^	int	subcmd;$/;"	m	struct:command_info
subcmd_args	mods/util.hpp	/^	inline std::optional<Container> subcmd_args(std::string argument,const char* subcmd) {$/;"	f	namespace:mods::util
success	mods/db.hpp	/^	constexpr static int_status_t success = 0;$/;"	m	namespace:mods::lmdb::error
summon_extraction	mods/classes/ghost.cpp	/^	std::pair<int16_t,std::string> ghost::summon_extraction(room_rnum room){$/;"	f	class:mods::classes::ghost
summon_extraction_levels_t	mods/orm/striker.hpp	/^		enum summon_extraction_levels_t {$/;"	g	struct:mods::orm::striker
summon_napalm_strike	mods/orm/pyrexia.cpp	/^	std::pair<bool,std::string> pyrexia::summon_napalm_strike(room_rnum room_id){$/;"	f	class:mods::orm::pyrexia
super_user_fiddler	mods/classes/super-user-fiddler.hpp	/^	struct super_user_fiddler {$/;"	s	namespace:mods::classes
super_users	globals.cpp	/^namespace mods::super_users {$/;"	n	class:mods	file:
super_users	mods/init.hpp	/^INIT(mods::super_users);$/;"	v
super_users	mods/interpreter.cpp	/^namespace mods::super_users {$/;"	n	class:mods	file:
super_users	mods/super-users.cpp	/^	static std::set<std::string> super_users;$/;"	m	namespace:mods::super_users	file:
super_users	mods/super-users.cpp	/^namespace mods::super_users {$/;"	n	class:mods	file:
super_users	mods/super-users.hpp	/^namespace mods::super_users {$/;"	n	class:mods
super_users_initialized	mods/super-users.cpp	/^	static bool super_users_initialized = 0;$/;"	m	namespace:mods::super_users	file:
support	mods/classes/support.cpp	/^	support::support(){$/;"	f	class:mods::classes::support
support	mods/classes/support.cpp	/^	support::support(player_ptr_t p){$/;"	f	class:mods::classes::support
support	mods/classes/support.hpp	/^	struct support : base {$/;"	s	namespace:mods::classes
support	mods/orm/support.hpp	/^		support() : id(0) {$/;"	f	struct:mods::orm::support
support	mods/orm/support.hpp	/^	struct support : public mods::orm::orm_base<support,mods::weapon::support::primary_choice_t> {$/;"	s	namespace:mods::orm
support	mods/player.cpp	/^	std::shared_ptr<mods::classes::support>& player::support() {$/;"	f	class:mods::player
support	mods/weapon.hpp	/^	namespace support {$/;"	n	namespace:mods::weapon
support_id	mods/orm/support.hpp	/^		uint64_t support_id;$/;"	m	struct:mods::orm::support
support_list	mods/replenish.cpp	/^	static std::vector<uuid_t> support_list;$/;"	m	namespace:mods::replenish	file:
support_player_id	mods/orm/support.hpp	/^		uint64_t support_player_id;$/;"	m	struct:mods::orm::support
support_ptrs	mods/replenish.cpp	/^	static std::map<uuid_t,support_ptr_t> support_ptrs;$/;"	m	namespace:mods::replenish	file:
suspicious_roaming	mods/behaviour_tree_impl.hpp	/^		suspicious_roaming,$/;"	e	enum:mods::behaviour_tree_impl::type
svtostr	globals.hpp	60;"	d
swap	mods/catch.hpp	/^			void swap(Ptr& other) {$/;"	f	class:Catch::Ptr
syllable	spell_parser.cpp	/^struct syllable {$/;"	s	file:
syls	spell_parser.cpp	/^struct syllable syls[] = {$/;"	v	typeref:struct:syllable
sync_equipment	mods/armor/advanced-protection.cpp	/^	void advanced_protection::sync_equipment(uuid_t player_uuid) {$/;"	f	class:mods::armor::advanced_protection
sync_equipment	mods/armor/basic-protection.cpp	/^	void basic_protection::sync_equipment(uuid_t player_uuid) {$/;"	f	class:mods::armor::basic_protection
sync_equipment	mods/armor/elite-protection.cpp	/^	void elite_protection::sync_equipment(uuid_t player_uuid) {$/;"	f	class:mods::armor::elite_protection
sync_player_skill_usage	mods/orm/player-skill-usage.cpp	/^	std::tuple<int16_t,std::string> sync_player_skill_usage(const uint64_t& player_id, std::map<uint64_t,uint16_t>& usage) {$/;"	f	namespace:mods::orm
sync_player_with_class_skills	mods/players/db-load.cpp	/^	void sync_player_with_class_skills(const uint64_t& player_id,const std::string& player_class) {$/;"	f	namespace:mods::players::db_load
syndrome	mods/classes/syndrome.cpp	/^		syndrome::syndrome(){$/;"	f	class:mods::classes::syndrome
syndrome	mods/classes/syndrome.cpp	/^		syndrome::syndrome(player_ptr_t p){$/;"	f	class:mods::classes::syndrome
syndrome	mods/classes/syndrome.hpp	/^	struct syndrome : base {$/;"	s	namespace:mods::classes
syndrome	mods/orm/syndrome.hpp	/^		syndrome() : id(0) { this->init(); loaded = 0; }$/;"	f	struct:mods::orm::syndrome
syndrome	mods/orm/syndrome.hpp	/^	struct syndrome : public mods::orm::orm_base<syndrome,mods::weapon::ghost::primary_choice_t> {$/;"	s	namespace:mods::orm
syndrome	mods/player.cpp	/^	std::shared_ptr<mods::classes::syndrome>& player::syndrome() {$/;"	f	class:mods::player
syndrome_advance_level	mods/classes/syndrome.cpp	/^	void syndrome_advance_level(player_ptr_t& player){$/;"	f	namespace:mods::classes
syndrome_id	mods/orm/syndrome.hpp	/^		uint64_t syndrome_id;$/;"	m	struct:mods::orm::syndrome
syndrome_player_id	mods/orm/syndrome.hpp	/^		uint64_t syndrome_player_id;$/;"	m	struct:mods::orm::syndrome
t	mods/catch.hpp	/^			static T  const& t;$/;"	m	struct:Catch::Detail::IsStreamInsertable
table	mods/builder.cpp	/^	str_t table;$/;"	m	struct:command_t	file:
table	mods/lmdb.hpp	/^		table_type_t table() const { return m_table; }$/;"	f	struct:mods::lmdb::transaction_t
table	mods/lmdb.hpp	/^		table_type_t table;$/;"	m	struct:mods::lmdb::_selector
table	mods/sql.hpp	/^			compositor<T>& table(str_object table) {$/;"	f	struct:mods::sql::compositor
table_cstr	mods/lmdb.hpp	/^		std::string table_cstr() const { return m_str_table; }$/;"	f	struct:mods::lmdb::transaction_t
table_name	mods/orm/armor-index.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::armor_index
table_name	mods/orm/armor-index.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::armor_index_record_t
table_name	mods/orm/breacher.hpp	/^		std::string table_name() const { return "class_breacher"; }$/;"	f	struct:mods::orm::breacher
table_name	mods/orm/camera-feed.hpp	/^		std::string table_name() const { return "camera_feed"; }$/;"	f	struct:mods::orm::camera_feed
table_name	mods/orm/chargen.hpp	/^		static constexpr const char* table_name = "player_classes";$/;"	m	struct:mods::orm::player_classes
table_name	mods/orm/chargen.hpp	/^		static constexpr const char* table_name = "player_generated_data";$/;"	m	struct:mods::orm::player_generated_data
table_name	mods/orm/chargen.hpp	/^		static constexpr const char* table_name = "player_race_perks";$/;"	m	struct:mods::orm::player_race_perks
table_name	mods/orm/chargen.hpp	/^		static constexpr const char* table_name = "player_races";$/;"	m	struct:mods::orm::player_races
table_name	mods/orm/chargen.hpp	/^		static constexpr const char* table_name = "player_skill_trees_unlocked";$/;"	m	struct:mods::orm::player_skill_trees_unlocked
table_name	mods/orm/chargen.hpp	/^		static constexpr const char* table_name = "skill_trees";$/;"	m	struct:mods::orm::skill_trees
table_name	mods/orm/chargen.hpp	/^		static constexpr const char* table_name = "specialty_skills";$/;"	m	struct:mods::orm::specialty_skills
table_name	mods/orm/contract-steps.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::contract_steps
table_name	mods/orm/contract-steps.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::contract_steps_record_t
table_name	mods/orm/contracts.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::contracts
table_name	mods/orm/door-event.hpp	/^		std::string table_name() const { return "door_event"; }$/;"	f	struct:mods::orm::door_event
table_name	mods/orm/elevator.hpp	/^		std::string table_name() const { return "elevator"; }$/;"	f	struct:mods::orm::elevator
table_name	mods/orm/engineer.hpp	/^		std::string table_name() const { return "class_engineer"; }$/;"	f	struct:mods::orm::engineer
table_name	mods/orm/forge.hpp	/^		std::string table_name(){ return "class_forge"; }$/;"	f	struct:mods::orm::forge
table_name	mods/orm/ghost.hpp	/^		std::string table_name(){ return "class_ghost"; }$/;"	f	struct:mods::orm::ghost
table_name	mods/orm/hq.hpp	/^		std::string table_name() {$/;"	f	struct:mods::orm::hq
table_name	mods/orm/integral-object.hpp	/^		std::string table_name() const { return "integral_object"; }$/;"	f	struct:mods::orm::integral_object
table_name	mods/orm/marine.hpp	/^		std::string table_name() const { return "class_marine"; }$/;"	f	struct:mods::orm::marine
table_name	mods/orm/medic.hpp	/^		std::string table_name() const { return "class_medic"; }$/;"	f	struct:mods::orm::medic
table_name	mods/orm/mini-game.hpp	/^		std::string table_name() const { return "mini_game"; }$/;"	f	struct:mods::orm::mini_game
table_name	mods/orm/mob-equipment-map.hpp	/^		std::string table_name() {$/;"	f	struct:mods::orm::mob_equipment_map
table_name	mods/orm/mob-equipment.hpp	/^		std::string table_name() {$/;"	f	struct:mods::orm::mob_equipment
table_name	mods/orm/mob-roam.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::mob_roam
table_name	mods/orm/mob-roam.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::mob_roam_record_t
table_name	mods/orm/orm-base.hpp	/^		virtual std::string table_name() {$/;"	f	struct:mods::orm::orm_base
table_name	mods/orm/player-base-ability.hpp	/^		std::string table_name(){ return "player_base_ability"; }$/;"	f	struct:mods::orm::player_base_ability
table_name	mods/orm/player-contract-state.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::player_contract_state
table_name	mods/orm/player-skill-points.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::player_skill_points
table_name	mods/orm/player-skill-points.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::player_skill_points_record_t
table_name	mods/orm/player-skill-usage.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::player_skill_usage
table_name	mods/orm/player-skill-usage.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::player_skill_usage_record_t
table_name	mods/orm/pyrexia.hpp	/^		std::string table_name(){ return "class_pyrexia"; }$/;"	f	struct:mods::orm::pyrexia
table_name	mods/orm/quotes.hpp	/^			static constexpr const char* table_name = "quotes";$/;"	m	struct:mods::orm::base_quotes
table_name	mods/orm/rifle-attachment.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::rifle_attachment_record_t
table_name	mods/orm/rifle-attachment.hpp	/^		std::string table_name() {$/;"	f	struct:mods::orm::rifle_attachment
table_name	mods/orm/rifle-index.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::rifle_index
table_name	mods/orm/rifle-index.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::rifle_index_record_t
table_name	mods/orm/rifle-instance.hpp	/^		std::string table_name() {$/;"	f	struct:mods::orm::rifle_instance
table_name	mods/orm/room.hpp	/^		std::string table_name() {$/;"	f	struct:mods::orm::room
table_name	mods/orm/shop.hpp	/^		static constexpr const char* table_name = "shop_objects";$/;"	m	struct:mods::orm::shop_objects
table_name	mods/orm/shop.hpp	/^		static constexpr const char* table_name = "shop_rooms";$/;"	m	struct:mods::orm::shop_rooms
table_name	mods/orm/shop.hpp	/^		static constexpr const char* table_name = "shops";$/;"	m	struct:mods::orm::shop
table_name	mods/orm/skill-points.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::skill_points
table_name	mods/orm/skill-points.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::skill_points_record_t
table_name	mods/orm/skill-trees.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::skill_trees
table_name	mods/orm/skill-trees.hpp	/^		std::string table_name() const {$/;"	f	struct:mods::orm::skill_trees_record_t
table_name	mods/orm/sniper.hpp	/^		std::string table_name() {$/;"	f	struct:mods::orm::sniper
table_name	mods/orm/striker.hpp	/^		std::string table_name(){ return "class_striker"; }$/;"	f	struct:mods::orm::striker
table_name	mods/orm/support.hpp	/^		std::string table_name() const { return "class_support"; }$/;"	f	struct:mods::orm::support
table_name	mods/orm/syndrome.hpp	/^		std::string table_name(){ return "class_syndrome"; }$/;"	f	struct:mods::orm::syndrome
table_name	mods/pq.hpp	/^	virtual std::string table_name() {$/;"	f	struct:orm_base
table_name_value	mods/orm/contract-steps.hpp	/^		static constexpr const char* table_name_value = "contract_steps";$/;"	m	struct:mods::orm::contract_steps
table_name_value	mods/orm/contracts.hpp	/^		static constexpr const char* table_name_value = "contracts";$/;"	m	struct:mods::orm::contracts
table_name_value	mods/orm/hq.hpp	/^		static constexpr const char* table_name_value = "hq_locations";$/;"	m	struct:mods::orm::hq
table_name_value	mods/orm/mob-equipment-map.hpp	/^		static constexpr const char* table_name_value = "mob_equipment_map";$/;"	m	struct:mods::orm::mob_equipment_map
table_name_value	mods/orm/mob-equipment.hpp	/^		static constexpr const char* table_name_value = "mob_equipment";$/;"	m	struct:mods::orm::mob_equipment
tag	structs.h	/^		std::string tag;$/;"	m	struct:obj_data
tags	mods/catch2.hpp	/^    StringRef tags;$/;"	m	struct:Catch::NameAndTags
tail	db.h	/^	struct reset_q_element *tail;$/;"	m	struct:reset_q_type	typeref:struct:reset_q_type::reset_q_element
talk_to	mods/player-contract-instance.cpp	/^	void player_contract_instance::talk_to(const uuid_t& mob_uuid) {$/;"	f	class:mods::contracts::player_contract_instance
target	mods/contract-steps.hpp	/^		task_target_t 	target;$/;"	m	namespace:mods::contracts
target	mods/player-contract-instance.hpp	/^			const target_t& target() const {$/;"	f	struct:mods::contracts::player_contract_instance
target_dead	mods/values.hpp	/^			static inline void target_dead(T& p){$/;"	f	namespace:mods::values::msg
target_died	mods/classes/sniper.cpp	/^	void sniper::target_died(uuid_t target) {$/;"	f	class:mods::classes::sniper
target_practice	mods/init.hpp	/^INIT(mods::target_practice);$/;"	v
target_practice	mods/target-practice.cpp	/^namespace mods::target_practice {$/;"	n	class:mods	file:
target_practice	mods/target-practice.hpp	/^namespace mods::target_practice {$/;"	n	class:mods
target_practice_db	mods/target-practice-db.cpp	/^namespace mods::target_practice_db {$/;"	n	class:mods	file:
target_practice_db	mods/target-practice-db.hpp	/^namespace mods::target_practice_db {$/;"	n	class:mods
target_room_id	mods/intent.hpp	/^		room_rnum						target_room_id;$/;"	m	struct:mods::intent::intent_t
target_string_map	mods/contract-steps.hpp	/^	static inline std::map<std::string,target_t> target_string_map() {$/;"	f
targeting	mods/mobs/mini-gunner.hpp	/^			vec_t<uuid_t> targeting;$/;"	m	struct:mods::mobs::mini_gunner
targeting	mods/mobs/smart-mob.hpp	/^			vec_t<uuid_t> targeting;$/;"	m	struct:mods::mobs::smart_mob
targets	mods/intent.hpp	/^		std::vector<uuid_t> targets;$/;"	m	struct:mods::intent::intent_t
targets	spells.h	/^	int targets;         \/* See below for use with TAR_XXX  *\/$/;"	m	struct:spell_info_type
task_string_map	mods/contract-steps.hpp	/^	static inline std::map<std::string,task_t> task_string_map() {$/;"	f
teep_levels_t	mods/orm/striker.hpp	/^		enum teep_levels_t {$/;"	g	struct:mods::orm::striker
telcmds	telnet.h	/^char *telcmds[] = {$/;"	v
telopts	telnet.h	/^char *telopts[NTELOPTS+1] = {$/;"	v
temper1	shop.h	/^	int	 temper1;		\/* How does keeper react if no money	*\/$/;"	m	struct:shop_data
test	mods/js.cpp	/^		namespace test {$/;"	n	namespace:mods::js	file:
text	mods/util-conf.hpp	/^		namespace text {$/;"	n	namespace:mods::util
text_overflow	comm.cpp	/^const char *text_overflow = "**OVERFLOW**\\r\\n";$/;"	v
texture_from_string	mods/rooms.hpp	/^	static inline std::optional<txt> texture_from_string(std::string& s) {$/;"	f	namespace:mods::rooms
texture_level	structs.h	/^		texture_level_t& texture_level(texture_type_t type) {$/;"	f
texture_strings	mods/rooms.hpp	/^	static std::map<txt,std::string> texture_strings = {$/;"	m	namespace:mods::rooms
texture_to_string	mods/rooms.hpp	/^	static inline std::optional<std::string> texture_to_string(txt t) {$/;"	f	namespace:mods::rooms
textures	structs.cpp	/^std::set<room_data::texture_type_t>& room_data::textures() {$/;"	f	class:room_data
textures_that_have_levels	structs.h	/^		constexpr static std::array<texture_type_t,5> textures_that_have_levels = {$/;"	v
texturize_room	mods/deferred.hpp	/^			void texturize_room(uint64_t ticks_in_future,room_rnum& room_id,TTextureList& textures){$/;"	f	class:mods::deferred
texturize_room	mods/util.cpp	/^	void texturize_room(room_rnum room_id, room_data::texture_type_t texture_type) {$/;"	f	namespace:mods::util
thaco	class.cpp	/^int thaco(int class_num, int level) {$/;"	f
thermite_breached	mods/doors.hpp	/^	static inline void thermite_breached(const room_rnum room,int8_t direction) {$/;"	f	namespace:mods::doors
thief	spec_assign.cpp	/^SPECIAL(thief);$/;"	v
thief	spec_procs.cpp	/^SPECIAL(thief);$/;"	v
three_arguments	interpreter.cpp	/^char* three_arguments(char* argument,char *first_arg,char* second_arg,char* third_arg) {$/;"	f
throw_fire_nade	mods/classes/pyrexia.cpp	/^		std::pair<bool,std::string> pyrexia::throw_fire_nade(uint8_t direction,uint8_t depth){$/;"	f	class:mods::classes::pyrexia
throw_object	mods/projectile.cpp	/^		void throw_object(player_ptr_t& player, int direction, std::size_t depth,$/;"	f	namespace:mods::projectile
tick	mods/affects.hpp	/^			std::size_t tick() {$/;"	f	struct:mods::affects::dissolver
tick	mods/deferred.cpp	/^	void deferred::tick() {$/;"	f	class:mods::deferred
ticks_per_minute	mods/affects.cpp	/^	static uint32_t ticks_per_minute = 0;$/;"	m	namespace:mods::affects	file:
ticks_per_minute_sample	mods/affects.cpp	/^	static uint32_t ticks_per_minute_sample = 0;$/;"	m	namespace:mods::affects	file:
tics	comm.cpp	/^uint64_t tics = 0;			\/* for extern checkpointing *\/$/;"	v
tier	globals.hpp	292;"	d
tim	castle.cpp	/^SPECIAL(tim);$/;"	v
time	mods/mobs/mob.hpp	/^			time_type_t time() const {$/;"	f	class:mods::player
time	mods/object-utils.hpp	/^		time_t time;$/;"	m	struct:mods::object_utils::YamlFeedExceptionInfo
time	mods/player.cpp	/^	player::time_type_t player::time() const {$/;"	f	class:mods::player
time	structs.h	/^	int	time;$/;"	m	struct:rent_info
time_info	db.cpp	/^struct time_info_data time_info;\/* the infomation about the time    *\/$/;"	v	typeref:struct:time_info_data
time_log_file_handle	mods/date-time.cpp	/^	static FILE* time_log_file_handle = nullptr;$/;"	m	namespace:mods::date_time	file:
time_string	mods/util.cpp	/^	std::string time_string() {$/;"	f	namespace:mods::util
time_tracker_per_minute	mods/affects.cpp	/^	static time_t time_tracker_per_minute = time(nullptr);$/;"	m	namespace:mods::affects	file:
timeadd	comm.cpp	/^void timeadd(struct timeval *rslt, struct timeval *a, struct timeval *b) {$/;"	f
timediff	comm.cpp	/^void timediff(struct timeval *rslt, struct timeval *a, struct timeval *b) {$/;"	f
timelog	mods/date-time.cpp	/^	void timelog(const std::string& msg) {$/;"	f	namespace:mods::date_time
timeout	mods/intent.hpp	/^		uint64_t						timeout;$/;"	m	struct:mods::intent::intent_t
timer	mods/player.hpp	/^			int&	timer() {$/;"	f	struct:mods::player
timer	structs.h	/^	int	timer;		\/* Timer for object                 *\/$/;"	m	struct:obj_flag_data
timer	structs.h	/^	int	timer;$/;"	m	struct:obj_file_elem
times_message	shop.cpp	/^char *times_message(struct obj_data *obj, char *name, int num) {$/;"	f
title	mods/builder.cpp	/^	bool title(room_rnum room_id,std::string_view str_title) {$/;"	f	namespace:mods::builder
title	mods/contract-types.hpp	/^		std::string title;$/;"	m	struct:mods::contracts::contract
title	mods/player.hpp	/^			mods::string& title() {$/;"	f	struct:mods::player
title	shop.h	/^	mods::string title;$/;"	m	struct:shop_data
title_female	class.cpp	/^const char *title_female(int chclass, int level) {$/;"	f
title_male	class.cpp	/^const char *title_male(int chclass, int level) {$/;"	f
to	mail.h	/^	long to;			\/* idnum of mail's recipient		*\/$/;"	m	struct:header_data_type
toString	mods/catch.hpp	/^					std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::MatcherUntypedBase
toString	mods/catch.hpp	/^	std::string toString(std::vector<T,Allocator> const& v) {$/;"	f	namespace:Catch
to_affect	mods/affects.cpp	/^	affect_t to_affect(std::string str) {$/;"	f	namespace:mods::affects
to_affect	mods/affects.cpp	/^	mods::affects::affect_vector_t to_affect(std::vector<std::string> strings) {$/;"	f	namespace:mods::affects
to_classification	mods/yaml.hpp	/^	static inline armor_classification_type_t to_classification(std::string_view cf) {$/;"	f	namespace:mods::yaml
to_direction	globals.cpp	/^std::pair<bool,direction_t> to_direction(std::string_view str) {$/;"	f
to_direction	mods/projectile.cpp	/^		int to_direction(const std::string& str) {$/;"	f	namespace:mods::projectile
to_direction	mods/util.hpp	/^	int to_direction(TStringObject str) {$/;"	f	namespace:mods::util
to_dirstr	mods/doors.hpp	/^	static inline std::string to_dirstr(const int& direction) {$/;"	f	namespace:mods::doors
to_durability_profile	mods/yaml.hpp	/^	static inline durability_profile_type_t to_durability_profile(std::string_view dp) {$/;"	f	namespace:mods::yaml
to_hex_digit	mods/util-conf.hpp	/^			char to_hex_digit(unsigned int target) {$/;"	f	namespace:mods::util::conf
to_player_class	mods/util.cpp	/^	player_class_t to_player_class(std::string_view str) {$/;"	f	namespace:mods::util
to_room	structs.h	/^	room_rnum to_room;		\/* Where direction leads (NOWHERE)	*\/$/;"	m	struct:room_direction_data
to_string	globals.hpp	/^inline std::string const& to_string(std::string const& s) {$/;"	f	class:std
to_string	mods/aoe.hpp	/^	static inline std::string to_string(const types_t& type) {$/;"	f	namespace:mods::aoe
to_string	mods/classes/types.hpp	/^	static inline std::string to_string(mods::classes::types t){$/;"	f	namespace:mods::classes
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(armor_attributes_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(armor_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(attachment_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(elemental_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(explosive_attributes_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(explosive_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(item_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(player_class_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(player_class_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(rifle_attributes_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(rifle_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/forge-engine/util.cpp	/^	std::string to_string(stat_types_t t) {$/;"	f	namespace:mods::forge_engine
to_string	mods/mobs/extended-types.cpp	/^	std::string to_string(extended_types_t t) {$/;"	f	namespace:mods::mobs::extended_types
to_string	mods/object-utils.hpp	/^		std::string to_string() {$/;"	f	struct:mods::object_utils::YamlFeedExceptionInfo
to_string	mods/rooms.hpp	/^	static inline std::string to_string(room_data::fire_status_t stat) {$/;"	f	namespace:mods::rooms
to_string	mods/values.cpp	/^		std::string to_string(value_key_t k){$/;"	f	namespace:mods::values
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::breacher
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::contagion
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::engineer
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::ghost
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::marine
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::medic
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::psyop
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::sentinel
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::sniper
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(primary_choice_t s) {$/;"	f	namespace:mods::weapon::support
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(secondary_choice_t s) {$/;"	f	namespace:mods::weapon::ghost
to_string	mods/weapon.hpp	/^		static inline std::string_view to_string(secondary_choice_t s) {$/;"	f	namespace:mods::weapon::sniper
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_armor_t armor_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_attachment_t attachment_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_consumable_t consumable_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_drone_t drone_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_explosive_t explosive_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_gadget_t gadget_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_melee_t melee_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_rifle_t rifle_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_trap_t trap_type) {$/;"	f	namespace:mods::weapon
to_string	mods/weapon.hpp	/^	static inline std::string to_string(weapon_vehicle_t vehicle_type) {$/;"	f	namespace:mods::weapon
to_string	mods/yaml.cpp	/^	inline std::string to_string<std::string>(std::string& item) {$/;"	f	namespace:mods::yaml
to_string	mods/yaml.cpp	/^	static inline std::string to_string(T& item) {$/;"	f	namespace:mods::yaml
to_string_from_classification	mods/yaml.hpp	/^	static inline std::string to_string_from_classification(armor_classification_type_t cf) {$/;"	f	namespace:mods::yaml
to_string_from_durability_profile	mods/yaml.hpp	/^	static inline std::string to_string_from_durability_profile(durability_profile_type_t dp) {$/;"	f	namespace:mods::yaml
to_string_with_precision	mods/orm/rifle-instance.cpp	/^static inline std::string to_string_with_precision(const T a_value, const int n = 6) {$/;"	f	file:
to_vk_from_string	mods/values.cpp	/^		value_key_t  to_vk_from_string(std::string s){$/;"	f	namespace:mods::values
todirstr	mods/projectile.cpp	/^		std::string todirstr(int direction,bool prefix,bool suffix) {$/;"	f	namespace:mods::projectile
toggle	mods/world-configuration.cpp	/^	namespace toggle {$/;"	n	namespace:mods::world_conf	file:
toggle	mods/world-configuration.hpp	/^	namespace toggle {$/;"	n	namespace:mods::world_conf
toggle_flag	mods/player.hpp	/^			aligned_int_t toggle_flag(chunk_type_t chunk,aligned_int_t bit) {$/;"	f	struct:mods::player
tohex	mods/util-conf.hpp	/^			std::string tohex(char c) {$/;"	f	namespace:mods::util::conf
tom	castle.cpp	/^SPECIAL(tom);$/;"	v
top	db.h	/^		uint64_t top;           \/* upper limit for rooms in this zone *\/$/;"	m	struct:zone_data
top	shop.cpp	/^int top(struct stack_data *stack) {$/;"	f
top_idnum	db.cpp	/^long top_idnum = 0;		\/* highest idnum in use		 *\/$/;"	v
top_of_helpt	db.cpp	/^int top_of_helpt = 0;		\/* top of help index table	 *\/$/;"	v
top_of_mobt	db.cpp	/^mob_rnum top_of_mobt = 0;	\/* top of mobile index table	 *\/$/;"	v
top_of_objt	db.cpp	/^obj_rnum top_of_objt = 0;	\/* top of object index table	 *\/$/;"	v
top_of_p_table	db.cpp	/^int top_of_p_table = 0;		\/* ref to top of table		 *\/$/;"	v
top_of_world	db.cpp	/^room_rnum top_of_world = 0;	\/* ref to top element of world	 *\/$/;"	v
top_of_zone_table	db.cpp	/^zone_rnum top_of_zone_table = 0;\/* top element of zone tab	 *\/$/;"	v
top_shop	shop.cpp	/^int top_shop = -1;$/;"	v
toss_cryogenic_grenade_towards	mods/classes/ghost.cpp	/^	std::tuple<bool,std::string> ghost::toss_cryogenic_grenade_towards(uint8_t direction, uint8_t rooms){$/;"	f	class:mods::classes::ghost
tostr	globals.hpp	59;"	d
tostr	mods/yaml.cpp	8;"	d	file:
total	mods/projectile.cpp	/^			int total;$/;"	m	struct:mods::projectile::explosive_damage_t	file:
touch	utils.cpp	/^int touch(const char *path) {$/;"	f
tr_key	mods/acl/config-parser.hpp	/^                typedef std::string tr_key;$/;"	t	class:mods::acl::FileParser
tr_value	mods/acl/config-parser.hpp	/^                typedef rule tr_value;$/;"	t	class:mods::acl::FileParser
track_through_doors	config.cpp	/^int track_through_doors = YES;$/;"	v
tracking_shot	mods/classes/sniper.cpp	/^	std::tuple<bool,std::string> sniper::tracking_shot(std::string_view target, direction_t direction) {$/;"	f	class:mods::classes::sniper
trade_letters	shop.cpp	/^const char *trade_letters[] = {$/;"	v
trade_with	shop.cpp	/^int trade_with(struct obj_data *item, int shop_nr) {$/;"	f
train_skill	mods/skills.cpp	/^void train_skill(player_ptr_t& player,std::string_view skill_name, int16_t amount) {$/;"	f
train_user_skill	mods/skills.cpp	/^void train_user_skill(player_ptr_t& player,uint32_t skill_id,int16_t amount) {$/;"	f
training_master	castle.cpp	/^SPECIAL(training_master);$/;"	v
transact_id	mods/builder-data.hpp	/^	int transact_id;$/;"	m	struct:room_pavement_t
transact_type_t	mods/lmdb.hpp	/^	enum transact_type_t {$/;"	g	namespace:mods::lmdb
transaction_amt	shop.cpp	/^int transaction_amt(char *arg) {$/;"	f
transaction_id	mods/object-utils.hpp	/^		uint32_t transaction_id;$/;"	m	struct:mods::object_utils::YamlFeedExceptionInfo
transaction_t	mods/lmdb.cpp	/^	transaction_t::transaction_t(std::string ce_table,transact_type_t type) : m_type(type){$/;"	f	class:mods::lmdb::transaction_t
transaction_t	mods/lmdb.cpp	/^	transaction_t::transaction_t(table_type_t e_table,transact_type_t type) : m_table(e_table), m_type(type){$/;"	f	class:mods::lmdb::transaction_t
transaction_t	mods/lmdb.hpp	/^	struct transaction_t {$/;"	s	namespace:mods::lmdb
translations	mods/lmdb/conf.hpp	/^	conf_map& translations() { return m_translations; }$/;"	f	struct:gdns::conf
transmit	mods/chat.cpp	/^	void channel::transmit(std::string_view user,std::string_view message) {$/;"	f	class:mods::chat::channel
transmit	mods/chat.cpp	/^	void transmit(std::string verb,std::string_view player_name,std::string_view message) {$/;"	f	namespace:mods::chat
trap	mods/item-types.hpp	/^	enum trap {$/;"	g	namespace:mods::weapon::type
trap_description_t	mods/yaml.hpp	/^		trap_description_t() {$/;"	f	struct:mods::yaml::trap_description_t
trap_description_t	mods/yaml.hpp	/^	struct trap_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
travel_to	mods/projectile.cpp	/^		int travel_to(room_rnum from, int direction, std::size_t depth, std::shared_ptr<obj_data> object) {$/;"	f	namespace:mods::projectile
tree	mods/acl/config-parser.hpp	/^                typedef std::map<tr_key,tr_value> tree;$/;"	t	class:mods::acl::FileParser
tree_mapping	mods/behaviour_tree_impl.cpp	/^	container_mapping_t tree_mapping;$/;"	m	namespace:mods::behaviour_tree_impl	file:
triads	mods/player.cpp	/^	std::array<uint8_t,5> player::triads() {$/;"	f	class:mods::player
trigger_callback	mods/affects.hpp	/^			void trigger_callback(TAffects affect) {$/;"	f	struct:mods::affects::dissolver
trigger_callback_for_affect	mods/rooms.cpp	/^	void trigger_callback_for_affect(room_rnum room,affect_t affect) {$/;"	f	namespace:mods::rooms::affects
trigger_exists	mods/contracts.cpp	/^	bool trigger_exists(player_ptr_t& player,int contract_id) {$/;"	f	namespace:mods::contracts
trigger_key	mods/contracts.cpp	/^	std::string trigger_key(player_ptr_t& player,room_vnum room,int n_index) {$/;"	f	namespace:mods::contracts
trim	mods/lmdb/db.hpp	/^		static inline void trim(std::string &s) {$/;"	f	struct:gdns::util
trim	mods/util.cpp	/^	std::string trim(std::string& str) {$/;"	f	namespace:mods::util
trim_rate_limit_data	mods/rate-limiting.cpp	/^	void trim_rate_limit_data(action_t action,mods::player::rate_limit_data_t& data,int times,int seconds) {$/;"	f	namespace:mods::rate_limiting
trim_string	mods/lmdb/conf.cpp	/^void trim_string(char* string,char** out){$/;"	f	namespace:gdns
trim_view	mods/util.cpp	/^	std::string trim_view(std::string_view str) {$/;"	f	namespace:mods::util
trueValue	mods/catch.hpp	/^			void trueValue() const {}$/;"	f	class:Catch::SafeBool
true_given	mods/catch2.hpp	/^    template <typename> struct true_given : std::true_type {};$/;"	s	namespace:Catch
true_path	mods/yaml.cpp	/^	std::string true_path(std::string_view type,std::string_view in_file) {$/;"	f	namespace:mods::yaml
tunnel_size	config.cpp	/^int tunnel_size = 2;$/;"	v
tuple_wrap	mods/builder/slotted-builder.hpp	/^			bool tuple_wrap(status_response_t s) {$/;"	f	struct:mods::builder::slotted_builder
two_arguments	interpreter.cpp	/^char *two_arguments(char *argument, char *first_arg, char *second_arg) {$/;"	f
txn	mods/lmdb/db.hpp	/^			MDB_txn *txn;$/;"	m	struct:gdns::lmdb::gdns_txn
txn	mods/lmdb/db.hpp	/^			std::unique_ptr<gdns_txn> txn;$/;"	m	struct:gdns::lmdb::db
txn	mods/pq.hpp	/^inline mods::pq::transaction txn() {$/;"	f
txt	globals.hpp	/^namespace txt {$/;"	n
txt	mail.h	/^	char	txt[DATA_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:data_block_type_d
txt	mail.h	/^	char	txt[HEADER_BLOCK_DATASIZE+1]; \/* actual text plus 1 for null	*\/$/;"	m	struct:header_block_type_d
type	act.wizard.cpp	/^	const char type;$/;"	m	struct:set_struct	file:
type	db.h	/^	int	type;$/;"	m	struct:ban_list_element
type	interpreter.h	/^	int type;$/;"	m	struct:alias_data
type	mods/behaviour_tree_impl.hpp	/^	enum type {$/;"	g	namespace:mods::behaviour_tree_impl
type	mods/forge-engine/generator.hpp	/^		explosive_types_t type;$/;"	m	struct:mods::forge_engine::generated_explosive_t
type	mods/intimidate.hpp	/^		std::string type;$/;"	m	struct:mods::zone::replenish_command
type	mods/item-types.hpp	/^namespace mods::weapon::type {$/;"	n	class:mods::weapon
type	mods/lmdb.hpp	/^		transact_type_t type() const { return m_type; }$/;"	f	struct:mods::lmdb::transaction_t
type	mods/mini-games.hpp	/^		std::string type;$/;"	m	struct:mods::mini_games::mini_game_payload_t
type	mods/orm/inventory.cpp	/^			char type[4];$/;"	m	struct:mods::orm::inventory::lmdb::player_inventory_data	file:
type	mods/orm/inventory.cpp	/^			char type[4];$/;"	m	struct:mods::orm::inventory::lmdb::player_wear_key_t	file:
type	mods/orm/inventory.cpp	/^			uint8_t type;$/;"	m	struct:mods::orm::inventory::lmdb::player_wear_t	file:
type	mods/player.hpp	/^			player_type_enum_t type() {$/;"	f	struct:mods::player
type	mods/weapon.hpp	/^			mw_rifle type;$/;"	m	struct:mods::weapon::yaml::rifle_description_t
type	mods/yaml.hpp	/^		int type;$/;"	m	struct:mods::yaml::yaml_description_t
type	mods/zone.hpp	/^		std::string type;$/;"	m	struct:mods::zone::replenish_command
type	shop.h	/^	int type;$/;"	m	struct:shop_buy_data
type	shop.h	/^	struct shop_buy_data *type;	\/* Which items to trade			*\/$/;"	m	struct:shop_data	typeref:struct:shop_data::shop_buy_data
type	structs.h	/^		int16_t type;$/;"	m	struct:obj_data
type	structs.h	/^	int type;$/;"	m	struct:obj_flag_data
type2_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,3> type2_flags = { {$/;"	m	namespace:mods::builder	file:
type_flag	structs.h	/^	int type_flag;	\/* Type of item			    *\/$/;"	m	struct:obj_flag_data
type_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,24> type_flags = { {$/;"	m	namespace:mods::builder	file:
type_list	mods/item-types.hpp	/^	enum type_list {$/;"	g	namespace:mods::weapon::type
types	mods/classes/types.hpp	/^	enum types {$/;"	g	namespace:mods::classes
types_t	mods/aoe.hpp	/^	enum types_t {$/;"	g	namespace:mods::aoe
ubyte	structs.h	/^typedef unsigned char		ubyte;$/;"	t
ucname	mods/player.cpp	/^	std::string player::ucname() {$/;"	f	class:mods::player
uint16_t	mods/damage-event.hpp	/^enum damage_event_t : uint16_t {$/;"	g
uint16_types	mods/values.cpp	/^static const std::vector<value_key_t> uint16_types = {$/;"	m	namespace:mods::values	file:
uint32_t	mods/lmdb/gethostbyname.cpp	/^typedef unsigned int uint32_t;$/;"	t	file:
uint32_types	mods/values.cpp	/^static const std::vector<value_key_t> uint32_types = {$/;"	m	namespace:mods::values	file:
uint8_t	mods/levels.hpp	/^enum triad : uint8_t {$/;"	g
uint8_t	mods/skills.hpp	/^enum skill_familiarity_t : uint8_t {$/;"	g
uint8_t	structs.h	/^		enum fire_status_t : uint8_t {$/;"	g
uint8_types	mods/values.cpp	/^static const std::vector<value_key_t> uint8_types = {$/;"	m	namespace:mods::values	file:
uint_high	mods/forge-engine/value-scaler.hpp	/^		uint32_t uint_high;$/;"	m	struct:mods::forge_engine::value_scaler
uint_low	mods/forge-engine/value-scaler.hpp	/^		uint32_t uint_low;$/;"	m	struct:mods::forge_engine::value_scaler
unblock_event	mods/classes/base.cpp	/^		void unblock_event(uint32_t unblock_event,uuid_t player_uuid){$/;"	f	namespace:mods::classes
unblock_event	mods/player.cpp	/^	void player::unblock_event(uint32_t unblock) {$/;"	f	class:mods::player
uncarry	mods/player.cpp	/^	void player::uncarry(obj_ptr_t obj) {$/;"	f	class:mods::player
under_barrel	mods/rifle-attachments.hpp	/^			obj_ptr_t under_barrel;$/;"	m	struct:mods::rifle_attachments_t
underbarrel_launcher_type	mods/rifle-attachments.hpp	/^			std::string underbarrel_launcher_type;$/;"	m	struct:mods::rifle_attachments_t
undo_make_char	mods/chargen.cpp	/^	void undo_make_char(player_ptr_t player){$/;"	f	namespace:mods::chargen
unequip	mods/armor/advanced-protection.cpp	/^	void advanced_protection::unequip(int where) {$/;"	f	class:mods::armor::advanced_protection
unequip	mods/armor/basic-protection.cpp	/^	void basic_protection::unequip(int where) {$/;"	f	class:mods::armor::basic_protection
unequip	mods/armor/elite-protection.cpp	/^	void elite_protection::unequip(int where) {$/;"	f	class:mods::armor::elite_protection
unequip	mods/player.cpp	/^	void player::unequip(int pos) {$/;"	f	class:mods::player
unequip_char	handler.cpp	/^obj_ptr_t unequip_char(player_ptr_t player, int pos) {$/;"	f
unequip_into_inventory	mods/player.cpp	/^	void player::unequip_into_inventory(int pos) {$/;"	f	class:mods::player
unit_tests	globals.cpp	/^namespace mods::unit_tests {$/;"	n	class:mods	file:
unit_tests	mods/unit-tests/elemental.cpp	/^namespace mods::unit_tests {$/;"	n	class:mods	file:
unplug_all	mods/mini-games/wires.cpp	/^	void wires::unplug_all() {$/;"	f	class:mods::mini_games::wires
unregister_authenticated_player	globals.cpp	/^		void unregister_authenticated_player(player_ptr_t player) {$/;"	f	namespace:mods::globals
unregister_by_uuid	mods/behaviour_tree_impl.cpp	/^	int8_t unregister_by_uuid(const uuid_t& m_uuid) {$/;"	f	namespace:mods::behaviour_tree_impl
unregister_mob	mods/behaviour_tree_impl.cpp	/^	int8_t unregister_mob(argument_type mob) {$/;"	f	namespace:mods::behaviour_tree_impl
unregister_mob	mods/behaviour_tree_impl.cpp	/^	void unregister_mob(uuid_t m_uuid) {$/;"	f	namespace:mods::behaviour_tree_impl
unrestrict_game	comm.cpp	/^RETSIGTYPE unrestrict_game(int sig) {$/;"	f
unsafe_code	mods/js.cpp	/^		static duk_ret_t unsafe_code(duk_context *ctx,void* udata) {$/;"	f	namespace:mods::js
until_zero	mods/deferred.hpp	/^		bool until_zero;$/;"	m	struct:mods::chunk_affect_t
unused_spell	spell_parser.cpp	/^void unused_spell(int spl) {$/;"	f
unused_spellname	spell_parser.cpp	/^const char *unused_spellname = "!UNUSED!"; \/* So we can get &unused_spellname *\/$/;"	v
update	mods/orm/base.hpp	/^		static inline std::tuple<int16_t,std::string> update(TObject& s, std::map<std::string,std::string>& values) {$/;"	f	struct:mods::orm::base
update	mods/orm/contracts.cpp	/^	std::tuple<int16_t,std::string> contracts::update() {$/;"	f	class:mods::orm::contracts
update	mods/orm/orm-base.hpp	/^		static inline std::tuple<int16_t,std::string> update(TClass* c) {$/;"	f	struct:mods::orm::orm_base
update	mods/orm/util.hpp	/^	static inline std::tuple<int16_t,std::string> update(TObject* s) {$/;"	f	namespace:mods::orm::util
update	mods/pq.hpp	/^	static inline std::tuple<int16_t,std::string> update(TClass* c) {$/;"	f	struct:orm_base
update	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> update(TObject& s) {$/;"	f
update	mods/pq.hpp	/^static inline std::tuple<int16_t,std::string> update(TObject& s, std::map<std::string,std::string>& values) {$/;"	f
update	mods/sql.hpp	/^			compositor<T>& update(str_object table) {$/;"	f	struct:mods::sql::compositor
update_char_objects	handler.cpp	/^void update_char_objects(char_data *ch) {$/;"	f
update_game	mods/orm/mini-game.hpp	/^		auto update_game(uint64_t pk_id,mods::mini_games::mini_game_payload_t game){$/;"	f	struct:mods::orm::mini_game
update_obj_file	mods/hell.hpp	/^	constexpr inline bool update_obj_file = false;$/;"	m	namespace:mods::hell
update_obj_file	objsave.cpp	/^void update_obj_file(void) {$/;"	f
update_object	handler.cpp	/^void update_object(struct obj_data *obj, int use) {$/;"	f
update_or_insert	mods/world-configuration.cpp	/^	std::pair<bool,std::string> update_or_insert(std::string_view table,$/;"	f	namespace:mods::world_conf
update_player_affected_by	magic.cpp	/^void update_player_affected_by(player_ptr_t& player){$/;"	f
update_player_data	mods/orm/player-contract-state.cpp	/^	std::tuple<int16_t,std::string> player_contract_state::update_player_data(const uint64_t& in_player_id,const contract_vnum_t& in_c_vnum,const std::string& buffer) {$/;"	f	class:mods::orm::player_contract_state
update_pos	fight.cpp	/^void update_pos(char_data *victim) {$/;"	f
update_position	mods/weapons/damage-types.cpp	/^		void update_position(char_data* ch) {$/;"	f	namespace:mods::weapons::damage_types::legacy
update_row	mods/orm/contract-steps.cpp	/^	std::tuple<int16_t,std::string> contract_steps::update_row() {$/;"	f	class:mods::orm::contract_steps
update_zone_commands	mods/builder.cpp	/^	std::pair<bool,std::string> update_zone_commands(zone_rnum zone_id) {$/;"	f	namespace:mods::builder
update_zone_with_placements	mods/builder.cpp	/^	std::tuple<bool,zone_pkid_t,std::string> update_zone_with_placements(int virtual_number,player_ptr_t player) {$/;"	f	namespace:mods::builder
updated_at	mods/orm/breacher.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::breacher
updated_at	mods/orm/camera-feed.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::camera_feed
updated_at	mods/orm/contract-steps.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::contract_steps
updated_at	mods/orm/contract-steps.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::contract_steps_record_t
updated_at	mods/orm/contracts.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::contracts
updated_at	mods/orm/door-event.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::door_event
updated_at	mods/orm/elevator.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::elevator
updated_at	mods/orm/engineer.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::engineer
updated_at	mods/orm/forge.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::forge
updated_at	mods/orm/ghost.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::ghost
updated_at	mods/orm/hq.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::hq
updated_at	mods/orm/integral-object.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::integral_object
updated_at	mods/orm/marine.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::marine
updated_at	mods/orm/medic.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::medic
updated_at	mods/orm/mini-game.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::mini_game
updated_at	mods/orm/mob-equipment-map.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::mob_equipment_map
updated_at	mods/orm/mob-equipment.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::mob_equipment
updated_at	mods/orm/orm-base.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::orm_base
updated_at	mods/orm/player-base-ability.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::player_base_ability
updated_at	mods/orm/player-contract-state.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::player_contract_state
updated_at	mods/orm/pyrexia.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::pyrexia
updated_at	mods/orm/rifle-attachment.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::rifle_attachment
updated_at	mods/orm/rifle-instance.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::rifle_instance
updated_at	mods/orm/sniper.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::sniper
updated_at	mods/orm/striker.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::striker
updated_at	mods/orm/support.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::support
updated_at	mods/orm/syndrome.hpp	/^		long updated_at;$/;"	m	struct:mods::orm::syndrome
updated_at	mods/pq.hpp	/^	long updated_at;$/;"	m	struct:orm_base
upkeep	mods/super-users.cpp	/^	void upkeep(player_ptr_t& player) {$/;"	f	namespace:mods::super_users
usage	mods/lmdb/shm-viewer.cpp	/^void usage(const char* prog){$/;"	f
usage_count	mods/orm/player-skill-usage.hpp	/^		uint16_t usage_count;$/;"	m	struct:mods::orm::player_skill_usage
usage_count	mods/orm/player-skill-usage.hpp	/^		uint16_t usage_count;$/;"	m	struct:mods::orm::player_skill_usage_record_t
use_autowiz	config.cpp	/^int use_autowiz = YES;$/;"	v
use_claymore	mods/classes/ghost.cpp	/^	void ghost::use_claymore(uuid_t object_uuid){$/;"	f	class:mods::classes::ghost
use_claymore	mods/classes/sniper.cpp	/^	void sniper::use_claymore(uuid_t object_uuid) {$/;"	f	class:mods::classes::sniper
use_flash_underbarrel	mods/classes/ghost.cpp	/^	std::tuple<bool,std::string> ghost::use_flash_underbarrel(){$/;"	f	class:mods::classes::ghost
use_pluck_filter	mods/lmdb.cpp	/^		void _db_handle::use_pluck_filter(bool b){$/;"	f	class:mods::lmdb::_db_handle
user	mods/auto-login.hpp	/^	static std::string user;$/;"	m	namespace:mods::auto_login
util	mods/deferred.hpp	/^namespace mods::util {$/;"	n	class:mods
util	mods/help.hpp	/^namespace mods::util {$/;"	n	class:mods
util	mods/lmdb/db.hpp	/^	struct util{$/;"	s	namespace:gdns
util	mods/orm/util.hpp	/^namespace mods::orm::util {$/;"	n	class:mods::orm
util	mods/players/search.hpp	/^		namespace util {$/;"	n	namespace:mods::player
util	mods/players/util.hpp	/^		namespace util {$/;"	n	namespace:mods::players
util	mods/util-conf.hpp	/^	namespace util {$/;"	n	namespace:mods
util	mods/util-map.hpp	/^	namespace util {$/;"	n	namespace:mods
util	mods/util.cpp	/^namespace mods::util {$/;"	n	class:mods	file:
util	mods/util.hpp	/^namespace mods::util {$/;"	n	class:mods
util_print_until	mods/acl/config-parser.cpp	/^        inline void FileParser::util_print_until(char c){ $/;"	f	class:mods::acl::FileParser
utils	mods/js.cpp	/^		namespace utils {$/;"	n	namespace:mods::js	file:
uuid	mods/drone.hpp	/^			uuid_t uuid() const {$/;"	f	struct:mods::drone_impl
uuid	mods/js.cpp	/^		static duk_ret_t uuid(duk_context *ctx) {$/;"	f	namespace:mods::js
uuid	mods/mobs/mini-gunner.hpp	/^			uuid_t uuid;$/;"	m	struct:mods::mobs::mini_gunner
uuid	mods/mobs/mob.hpp	/^			uuid_t uuid() const {$/;"	f	class:mods::player
uuid	mods/mobs/smart-mob.hpp	/^			uuid_t uuid;$/;"	m	struct:mods::mobs::smart_mob
uuid	mods/player.hpp	/^			uuid_t& uuid() const {$/;"	f	struct:mods::player
uuid	mods/scan.hpp	/^			uuid_t uuid;$/;"	m	struct:mods::scan::__anon4
uuid	shop.h	/^	uint64_t uuid;$/;"	m	struct:shop_data
uuid	structs.h	/^		uuid_t uuid;$/;"	m	struct:obj_data
uuid_schema_list	mods/rifle-attachments.cpp	/^		std::map<uuid_t,std::string>& uuid_schema_list() {$/;"	f	namespace:mods::rifle_attachments
valid_action_types	mods/rate-limiting.cpp	/^	static const std::vector<action_t> valid_action_types = {$/;"	m	namespace:mods::rate_limiting	file:
valid_affiliation	mods/builder/hqbuild.cpp	/^	bool valid_affiliation(std::string_view aff) {$/;"	f	namespace:mods::builder::hqbuild
valid_armor_affects	mods/forge-engine/generator.hpp	/^	static const  std::vector<stat_types_t> valid_armor_affects  = {$/;"	m	namespace:mods::forge_engine
valid_armor_attributes	mods/forge-engine/generator.hpp	/^	static const std::vector<armor_attributes_t> valid_armor_attributes = {$/;"	m	namespace:mods::forge_engine
valid_armor_placements	mods/forge-engine/generator.hpp	/^	static const  std::vector<armor_types_t> valid_armor_placements  = {$/;"	m	namespace:mods::forge_engine
valid_armor_stats	mods/forge-engine/generator.hpp	/^	static const  std::vector<stat_types_t> valid_armor_stats = {$/;"	m	namespace:mods::forge_engine
valid_elemental_types	mods/forge-engine/generator.hpp	/^	static const std::vector<elemental_types_t> valid_elemental_types = fetch_valid_elemental_types();$/;"	m	namespace:mods::forge_engine
valid_explosive_attributes	mods/forge-engine/generator.hpp	/^	static const std::vector<explosive_attributes_t> valid_explosive_attributes = {$/;"	m	namespace:mods::forge_engine
valid_requirements	mods/forge-engine/generator.hpp	/^	static const std::vector<stat_types_t> valid_requirements = {$/;"	m	namespace:mods::forge_engine
valid_rifle_attributes	mods/forge-engine/generator.hpp	/^	static const std::vector<rifle_attributes_t> valid_rifle_attributes = {$/;"	m	namespace:mods::forge_engine
valid_rifle_requirements_based_on	mods/forge-engine/generator.hpp	/^	static const  std::vector<stat_types_t> valid_rifle_requirements_based_on  = {$/;"	m	namespace:mods::forge_engine
valid_rifle_stats_boosts	mods/forge-engine/generator.hpp	/^	static const  std::vector<stat_types_t> valid_rifle_stats_boosts = {$/;"	m	namespace:mods::forge_engine
valid_rifle_types	mods/forge-engine/generator.hpp	/^	static const  std::vector<rifle_types_t> valid_rifle_types = {$/;"	m	namespace:mods::forge_engine
value	mods/catch.hpp	/^			enum { value = sizeof(testStreamable(s << t)) == sizeof(TrueType) };$/;"	e	enum:Catch::Detail::IsStreamInsertable::__anon3
value	mods/catch2.hpp	/^            static const bool value = decltype(test<std::ostream, const T&>(0))::value;$/;"	m	class:Catch::Detail::IsStreamInsertable
value	mods/orm/util.hpp	/^		std::string value;$/;"	m	struct:mods::orm::util::statement_t
value	structs.h	/^	int	value[4];	\/* Values of the item (see list)    *\/$/;"	m	struct:obj_flag_data
value	structs.h	/^	int	value[4];$/;"	m	struct:obj_file_elem
value_callback	mods/builder_util.hpp	/^	typedef std::function<void(sql_compositor::value_map&)> value_callback;$/;"	t	namespace:mods::builder_util
value_db_id	mods/orm/inventory.cpp	/^			uint64_t value_db_id;$/;"	m	struct:mods::orm::inventory::lmdb::player_inventory_data	file:
value_load	mods/js.cpp	/^		static duk_ret_t value_load(duk_context *ctx) {$/;"	f	namespace:mods::js
value_map	mods/sql.hpp	/^			typedef std::map<std::string, std::string> value_map;$/;"	t	struct:mods::sql::compositor
value_revert	mods/js.cpp	/^		static duk_ret_t value_revert(duk_context *ctx) {$/;"	f	namespace:mods::js
value_sanity_check	mods/js.cpp	/^		static duk_ret_t value_sanity_check(duk_context *ctx) {$/;"	f	namespace:mods::js
value_save	mods/js.cpp	/^		static duk_ret_t value_save(duk_context *ctx) {$/;"	f	namespace:mods::js
value_scaler	mods/forge-engine/value-scaler.cpp	/^	value_scaler::value_scaler(player_ptr_t& player) {$/;"	f	class:mods::forge_engine::value_scaler
value_scaler	mods/forge-engine/value-scaler.hpp	/^	struct value_scaler {$/;"	s	namespace:mods::forge_engine
value_scaler_static	mods/forge-engine/value-scaler.cpp	/^	namespace value_scaler_static {$/;"	n	namespace:mods::forge_engine	file:
value_scaler_static	mods/init.hpp	/^INIT(mods::forge_engine::value_scaler_static);$/;"	v
values	mods/builder.cpp	/^	str_map_t values;$/;"	m	struct:command_t	file:
values	mods/init.hpp	/^INIT(mods::values);$/;"	v
values	mods/sql.hpp	/^			compositor<T>& values(const value_map& values) {$/;"	f	struct:mods::sql::compositor
values	mods/values.cpp	/^namespace mods::values {$/;"	n	class:mods	file:
values	mods/values.hpp	/^namespace mods::values {$/;"	n	class:mods
values_with_password	mods/sql.hpp	/^			compositor<T>& values_with_password(const value_map& values, std::string_view password_field) {$/;"	f	struct:mods::sql::compositor
variation	mods/mobs/mini-gunner.hpp	/^			std::string variation;$/;"	m	struct:mods::mobs::mini_gunner
variation	mods/mobs/smart-mob.hpp	/^			std::string variation;$/;"	m	struct:mods::mobs::smart_mob
vcarrying	mods/player.cpp	/^	std::vector<obj_data*> player::vcarrying() {$/;"	f	class:mods::player
vec_player_data_element	mods/scan.hpp	/^		} vec_player_data_element;$/;"	t	namespace:mods::scan	typeref:struct:mods::scan::__anon4
vector_add_if_not_exists	mods/util.hpp	/^	void vector_add_if_not_exists(std::vector<T>& vec,T element) {$/;"	f	namespace:mods::util
vector_erase	mods/util.hpp	/^	void vector_erase(std::vector<T>& vec,T element) {$/;"	f	namespace:mods::util
vector_exists	mods/db.cpp	/^	bool vector_exists(std::string section_name,std::string prefix) {$/;"	f	namespace:mods::db
vehicle	mods/item-types.hpp	/^	enum vehicle {$/;"	g	namespace:mods::weapon::type
vehicle_description_t	mods/yaml.hpp	/^		vehicle_description_t()  {$/;"	f	struct:mods::yaml::vehicle_description_t
vehicle_description_t	mods/yaml.hpp	/^	struct vehicle_description_t : public yaml_description_t {$/;"	s	namespace:mods::yaml
vehicle_t	mods/weapon.hpp	/^	enum vehicle_t {$/;"	g	namespace:mods::weapon
vict_found	act.social.cpp	/^	char *vict_found;$/;"	m	struct:social_messg	file:
view	mods/string.cpp	/^	std::string_view string::view() const {$/;"	f	class:mods::string
view	mods/string.cpp	/^	std::string_view string::view(){$/;"	f	class:mods::string
viewing_room	mods/player.cpp	/^	int player::viewing_room() {$/;"	f	class:mods::player
violent	spells.h	/^	byte violent;$/;"	m	struct:spell_info_type
visibility	mods/player.cpp	/^	char_data::visibility_t& player::visibility() {$/;"	f	class:mods::player
visibility	structs.h	/^		visibility_t visibility;$/;"	m	struct:obj_data
vnum	boards.h	/^	obj_vnum vnum;	\/* vnum of this board *\/$/;"	m	struct:board_info_type
vnum	house.h	/^	room_vnum vnum;		\/* vnum of this house		*\/$/;"	m	struct:house_control_rec
vnum	mods/contract-types.hpp	/^		contract_vnum_t vnum;$/;"	m	struct:mods::contracts::contract
vnum	mods/mini-games.hpp	/^		int vnum;$/;"	m	struct:mods::mini_games::mini_game_payload_t
vnum	mods/npc.cpp	/^	const mob_vnum& npc::vnum() const { return cd()->nr; }$/;"	f	class:mods::npc
vnum	mods/orm/contracts.hpp	/^		auto vnum() {$/;"	f	struct:mods::orm::contracts
vnum	mods/orm/hq.hpp	/^		auto vnum() {$/;"	f	struct:mods::orm::hq
vnum	mods/orm/mob-equipment.hpp	/^		auto vnum() {$/;"	f	struct:mods::orm::mob_equipment
vnum	mods/player-contract-instance.hpp	/^			const auto& vnum() const {$/;"	f	struct:mods::contracts::player_contract_instance
vnum	mods/player.cpp	/^	room_vnum player::vnum() {$/;"	f	class:mods::player
vnum	mods/yaml.hpp	/^		int vnum;$/;"	m	struct:mods::yaml::yaml_description_t
vnum	shop.h	/^	room_vnum vnum;		\/* Virtual number of this shop		*\/$/;"	m	struct:shop_data
vnum_list	mods/yaml.hpp	/^		std::vector<int> vnum_list;$/;"	m	struct:mods::yaml::gadget_description_t
vnum_mobile	db.cpp	/^int vnum_mobile(char *searchname, char_data *ch) {$/;"	f
vnum_object	db.cpp	/^int vnum_object(char *searchname, char_data *ch) {$/;"	f
vsnprintf	bsd-snprintf.cpp	/^vsnprintf(char *str, size_t count, const char *fmt, va_list args) {$/;"	f
vsnprintf	sysdep.h	351;"	d
vwrite_to_output	comm.cpp	/^size_t vwrite_to_output(mods::descriptor_data& t, const char *format, va_list args) {$/;"	f
walk	mods/fluxkraft/arcon-bar.hpp	/^			void walk(player_ptr_t& player) {$/;"	f	struct:mods::fluxkraft::arcon::bar
walk	mods/fluxkraft/arcon-metropolitan.hpp	/^		void walk(player_ptr_t& player) {$/;"	f	struct:mods::fluxkraft::arcon::metro
walk	mods/fluxkraft/shape-dictionary.cpp	/^		void walk(player_ptr_t& player) {$/;"	f	struct:mods::fluxkraft::shape_description
wants_to	mods/intent.hpp	/^		intent_to_t 				wants_to;$/;"	m	struct:mods::intent::intent_t
warn_thermite_room	mods/doors.hpp	/^	static inline void warn_thermite_room(const room_rnum room,int8_t direction) {$/;"	f	namespace:mods::doors
watch	mods/mobs/helpers.hpp	/^	static inline void watch(uint8_t direction,TMob* ptr,uint8_t depth){$/;"	f	namespace:mods::mobs::helpers
watch	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::watch(uint8_t direction) {$/;"	f	class:mods::mobs::mini_gunner
watch	mods/mobs/smart-mob.cpp	/^	void smart_mob::watch(uint8_t direction) {$/;"	f	class:mods::mobs::smart_mob
watch_all_directions	mods/mobs/mini-gunner-behaviour-tree.hpp	/^	auto watch_all_directions() {$/;"	f	namespace:mods::mobs::mini_gunner_behaviour_tree
watch_direction	mods/mobs/room-watching.cpp	/^	void watch_direction(uuid_t mob,room_rnum room, direction_t direction,depth_t depth){$/;"	f	namespace:mods::mobs::room_watching
watch_directions	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::watch_directions(vec_t<uint8_t> directions) {$/;"	f	class:mods::mobs::mini_gunner
watch_directions	mods/mobs/smart-mob.cpp	/^	void smart_mob::watch_directions(vec_t<uint8_t> directions) {$/;"	f	class:mods::mobs::smart_mob
watch_heading	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::watch_heading() {$/;"	f	class:mods::mobs::mini_gunner
watch_heading	mods/mobs/smart-mob.cpp	/^	void smart_mob::watch_heading() {$/;"	f	class:mods::mobs::smart_mob
watch_list	mods/mobs/room-watching.cpp	/^	std::vector<room_rnum> watch_list;$/;"	m	namespace:mods::mobs::room_watching	file:
watch_map	mods/mobs/room-watching.cpp	/^	std::map<room_rnum,std::vector<uuid_t>> watch_map;$/;"	m	namespace:mods::mobs::room_watching	file:
watch_multiple	mods/mobs/helpers.hpp	/^	static inline void watch_multiple(vec_t<uint8_t> directions,TMob* ptr,uint8_t depth){$/;"	f	namespace:mods::mobs::helpers
watch_nothing	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::watch_nothing() {$/;"	f	class:mods::mobs::mini_gunner
watch_nothing	mods/mobs/smart-mob.cpp	/^	void smart_mob::watch_nothing() {$/;"	f	class:mods::mobs::smart_mob
watching	mods/mobs/mini-gunner.hpp	/^			uint8_t watching;$/;"	m	struct:mods::mobs::mini_gunner
watching	mods/mobs/smart-mob.hpp	/^			uint8_t watching;$/;"	m	struct:mods::mobs::smart_mob
watching	structs.h	/^		bool watching;$/;"	v
weapon	mods/mobs/mob.hpp	/^	namespace weapon {$/;"	n	namespace:mods
weapon	mods/weapon-types.hpp	/^namespace mods::weapon {$/;"	n	class:mods
weapon	mods/weapon.cpp	/^namespace mods::weapon {$/;"	n	class:mods	file:
weapon	mods/weapon.hpp	/^namespace mods::weapon {$/;"	n	class:mods
weapon	mods/yaml.hpp	/^namespace mods::weapon {$/;"	n	class:mods
weapon_attack_types_t	spells.h	/^enum weapon_attack_types_t {$/;"	g
weapon_cooldown_expired	mods/mobs/mob.cpp	/^	bool player::weapon_cooldown_expired(weapon_set set) {$/;"	f	class:mods::player
weapon_cooldown_expired	mods/player.cpp	/^	bool player::weapon_cooldown_expired(weapon_set set) {$/;"	f	class:mods::player
weapon_cooldown_start	mods/mobs/mob.cpp	/^	void player::weapon_cooldown_start(unsigned long duration,weapon_set set) {$/;"	f	class:mods::player
weapon_cooldown_start	mods/player.cpp	/^	void player::weapon_cooldown_start(uint16_t duration,weapon_set set) {$/;"	f	class:mods::player
weapon_flags	structs.h	/^	uint64_t weapon_flags;$/;"	m	struct:obj_flag_data
weapon_handling	mods/player.hpp	/^			uint16_t& weapon_handling() {$/;"	f	struct:mods::player
weapon_heat	mods/mobs/mini-gunner.hpp	/^			int weapon_heat;$/;"	m	struct:mods::mobs::mini_gunner
weapon_heat	mods/mobs/smart-mob.hpp	/^			int weapon_heat;$/;"	m	struct:mods::mobs::smart_mob
weapon_locker_quota	mods/integral-objects.cpp	/^	std::size_t weapon_locker_quota(const obj_ptr_t& object) {$/;"	f	namespace:mods::integral_objects
weapon_name	mods/player.cpp	/^	mods::string player::weapon_name() {$/;"	f	class:mods::player
weapon_quota	mods/integral-objects-db.cpp	/^	int weapon_quota(room_vnum room){$/;"	f	namespace:mods::integral_objects_db
weapon_set	mods/drone.hpp	/^			typedef short weapon_set;$/;"	t	struct:mods::drone_impl
weapon_set	mods/mobs/mob.hpp	/^			typedef short weapon_set;$/;"	t	class:mods::player
weapon_stats	mods/weapon-stat-list.hpp	/^	static inline weapon_stat_list_t* weapon_stats(int type){$/;"	f
weapon_type_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,13> weapon_type_flags = { {$/;"	m	namespace:mods::builder	file:
weapon_type_statistics_t	mods/weapon-types.hpp	/^	struct weapon_type_statistics_t {$/;"	s	namespace:mods::weapon
weapon_types	mods/weapon-types.hpp	/^namespace mods::weapon_types {$/;"	n	class:mods
weapons	mods/weapons/heat.cpp	/^namespace mods::weapons {$/;"	n	class:mods	file:
weapons	mods/weapons/smg.cpp	/^namespace mods::weapons {$/;"	n	class:mods	file:
weapons	mods/weapons/smg.hpp	/^namespace mods::weapons {$/;"	n	class:mods
weapons	mods/weapons/sniper-rifle.cpp	/^namespace mods::weapons {$/;"	n	class:mods	file:
weapons	mods/weapons/sniper-rifle.hpp	/^namespace mods::weapons {$/;"	n	class:mods
wear	mods/mobs/mini-gunner.cpp	/^	void mini_gunner::wear(int where,std::string_view yaml) {$/;"	f	class:mods::mobs::mini_gunner
wear	mods/mobs/smart-mob.cpp	/^	void smart_mob::wear(uint8_t where,std::string_view yaml) {$/;"	f	class:mods::mobs::smart_mob
wear_all	mods/mobs/smart-mob.cpp	/^	int8_t smart_mob::wear_all() {$/;"	f	class:mods::mobs::smart_mob
wear_bits	constants.cpp	/^const char *wear_bits[] = {$/;"	v
wear_bits	constants.hpp	/^const char *wear_bits[] = {$/;"	v
wear_bits_count	constants.cpp	/^        wear_bits_count = sizeof(wear_bits) \/ sizeof(wear_bits[0]) - 1;$/;"	v
wear_bits_count	constants.hpp	/^	wear_bits_count = sizeof(wear_bits) \/ sizeof(wear_bits[0]) - 1;$/;"	v
wear_flag_list	mods/builder/meqbuild.cpp	/^	std::string& wear_flag_list() {$/;"	f	namespace:mods::builder::meqbuild
wear_flags	mods/builder.cpp	/^	std::array<std::pair<int,std::string>,15> wear_flags = { {$/;"	m	namespace:mods::builder	file:
wear_flags	structs.h	/^	int \/*bitvector_t*\/	wear_flags;	\/* Where you can wear it	    *\/$/;"	m	struct:obj_flag_data
wear_flags_map	mods/builder/meqbuild.cpp	/^	std::map<std::string,uint8_t> wear_flags_map = {$/;"	m	namespace:mods::builder::meqbuild	file:
wear_list	mods/mobs/smart-mob.hpp	/^			std::array<std::string,NUM_WEARS> wear_list;$/;"	m	struct:mods::mobs::smart_mob
wear_message	act.item.cpp	/^void wear_message(char_data *ch, struct obj_data *obj, int where) {$/;"	f
wear_off_msg	spells.h	/^	const char *wear_off_msg;	\/* Input size not limited. Originates from string constants. *\/$/;"	m	struct:spell_info_type
wear_where	constants.cpp	/^const char *wear_where[] = {$/;"	v
wear_where	constants.hpp	/^const char *wear_where[] = {$/;"	v
weather_and_time	weather.cpp	/^void weather_and_time(int mode) {$/;"	f
weather_change	weather.cpp	/^void weather_change(void) {$/;"	f
weather_info	db.cpp	/^struct weather_data weather_info;	\/* the infomation about the weather *\/$/;"	v	typeref:struct:weather_data
weekdays	constants.cpp	/^const char *weekdays[] = {$/;"	v
weekdays	constants.hpp	/^const char *weekdays[] = {$/;"	v
weight	mods/player.hpp	/^			ubyte& weight() {$/;"	f	struct:mods::player
weight	structs.h	/^	int	weight;		\/* Weigt what else                  *\/$/;"	m	struct:obj_flag_data
weight	structs.h	/^	int	weight;$/;"	m	struct:obj_file_elem
weight_change_object	act.item.cpp	/^void weight_change_object(struct obj_data *obj, int weight) {$/;"	f
weighted_direction_decider	mods/mobs/lowly-security.cpp	/^		uint8_t weighted_direction_decider(player_ptr_t& mob) {$/;"	f	namespace:mods::mobs::lowly_sec
weighted_direction_decider	mods/mobs/mini-gunner.cpp	/^	int weighted_direction_decider(player_ptr_t& mob) {$/;"	f	namespace:mods::mobs
where	mods/orm/util.hpp	/^		std::string where;$/;"	m	struct:mods::orm::util::statement_t
where	mods/sql.hpp	/^			compositor<T>& where(str_object lhs,$/;"	f	struct:mods::sql::compositor
where_crypt	mods/sql.hpp	/^			compositor<T>& where_crypt(str_object lhs,$/;"	f	struct:mods::sql::compositor
where_in	mods/sql.hpp	/^			compositor<T>& where_in(str_object lhs,$/;"	f	struct:mods::sql::compositor
white_str	mods/colors.hpp	/^static inline std::string white_str(TStr str){$/;"	f	namespace:mods::colors
who_line	mods/super-users.cpp	/^	std::string who_line(player_ptr_t& player) {$/;"	f	namespace:mods::super_users
width	mods/builder/rectangle-layouts.hpp	/^		uint8_t width;$/;"	m	struct:mods::builder::rectangle_layouts::dimensions_t
width	mods/overhead_map.hpp	/^	constexpr static uint8_t width = 48;$/;"	m	namespace:mods::overhead_map
wire_mini_game_test	mods/debug-pre-game.hpp	/^	void wire_mini_game_test() {$/;"	f	namespace:mods::debug::pre_game
wires	mods/mini-games/wires.cpp	/^	wires::wires() {$/;"	f	class:mods::mini_games::wires
wires	mods/mini-games/wires.hpp	/^	struct wires {$/;"	s	namespace:mods::mini_games
wis_app	constants.cpp	/^cpp_extern const struct wis_app_type wis_app[] = {$/;"	v	typeref:struct:wis_app_type
wis_app	constants.hpp	/^cpp_extern const struct wis_app_type wis_app[] = {$/;"	v	typeref:struct:wis_app_type
wisdom	mods/player.hpp	/^			uint16_t& wisdom() {$/;"	f	struct:mods::player
with_who	shop.h	/^	int	 with_who;		\/* Who does the shop trade with?	*\/$/;"	m	struct:shop_data
wizlist	db.cpp	/^char *wizlist = NULL;		\/* list of higher gods		 *\/$/;"	v
word_wrap	mods/mobs/mob.cpp	/^	std::string word_wrap(std::string_view paragraph,int width) {$/;"	f	namespace:mods
word_wrap	mods/util.cpp	/^	std::string&& word_wrap(std::string_view paragraph,int width) {$/;"	f	namespace:mods::util
word_wrap_description	mods/rooms.cpp	/^	void word_wrap_description(player_ptr_t& player,room_rnum r) {$/;"	f	namespace:mods::rooms
world	db.cpp	/^std::deque<room_data> world;	\/* array of rooms		 *\/$/;"	v
world_conf	mods/world-configuration.cpp	/^namespace mods::world_conf {$/;"	n	class:mods	file:
world_conf	mods/world-configuration.hpp	/^namespace mods::world_conf {$/;"	n	class:mods
world_size	db.cpp	/^std::size_t world_size() {$/;"	f
worn_by	structs.h	/^		char_data *worn_by;	  \/* Worn by?			      *\/$/;"	m	struct:obj_data
worn_on	structs.h	/^		sh_int worn_on;		  \/* Worn where?		      *\/$/;"	m	struct:obj_data
write	comm.cpp	1540;"	d	file:
writeToStream	mods/catch2.hpp	/^        void writeToStream( std::ostream &os ) const {$/;"	f	struct:Catch::Parser
write_aliases	alias.cpp	/^void write_aliases(char_data *ch) {$/;"	f
write_ban_list	ban.cpp	/^void write_ban_list(void) {$/;"	f
write_db_values	mods/db.cpp	/^int write_db_values(std::string_view section_name, std::string_view prefix, const std::vector<std::string>& values) {$/;"	f
write_example_file	mods/yaml.cpp	/^	int16_t armor_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::armor_description_t
write_example_file	mods/yaml.cpp	/^	int16_t attachment_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::attachment_description_t
write_example_file	mods/yaml.cpp	/^	int16_t consumable_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::consumable_description_t
write_example_file	mods/yaml.cpp	/^	int16_t container_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::container_description_t
write_example_file	mods/yaml.cpp	/^	int16_t drone_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::drone_description_t
write_example_file	mods/yaml.cpp	/^	int16_t explosive_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::explosive_description_t
write_example_file	mods/yaml.cpp	/^	int16_t gadget_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::gadget_description_t
write_example_file	mods/yaml.cpp	/^	int16_t melee_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::melee_description_t
write_example_file	mods/yaml.cpp	/^	int16_t rifle_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::rifle_description_t
write_example_file	mods/yaml.cpp	/^	int16_t trap_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::trap_description_t
write_example_file	mods/yaml.cpp	/^	int16_t vehicle_description_t::write_example_file(std::string_view file) {$/;"	f	class:mods::yaml::vehicle_description_t
write_histfile	mods/player.cpp	/^	void player::write_histfile(std::string_view line) {$/;"	f	class:mods::player
write_lvl	boards.h	/^	int	write_lvl;	\/* min level to write messages on this board *\/$/;"	m	struct:board_info_type
write_meta	mods/meta_utils.cpp	/^	void write_meta(std::string table,mutable_map_t* values){$/;"	f	namespace:mods::meta_utils
write_to_char	mods/player.cpp	/^	void player::write_to_char(std::string_view msg, bool newline,bool plain) {$/;"	f	class:mods::player
write_to_descriptor	comm.cpp	/^int write_to_descriptor(socket_t desc, const char *txt) {$/;"	f
write_to_file	mail.cpp	/^void write_to_file(void *buf, int size, long filepos) {$/;"	f
write_to_output	comm.cpp	/^size_t write_to_output(mods::descriptor_data& t, const char *txt, ...) {$/;"	f
write_to_q	comm.cpp	/^void	write_to_q(std::string_view txt, mods::descriptor_data& d, int aliased) {$/;"	f
x	structs.h	/^		int x;$/;"	v
xEOF	telnet.h	61;"	d
xoroshiro	mods/rand.cpp	/^namespace mods::rand::xoroshiro {$/;"	n	class:mods::rand	file:
xray_shot	mods/classes/ghost.cpp	/^	std::pair<int16_t,std::string> ghost::xray_shot(){$/;"	f	class:mods::classes::ghost
xray_shot	mods/classes/sniper.cpp	/^	std::tuple<bool,std::string> sniper::xray_shot() {$/;"	f	class:mods::classes::sniper
xray_shot_levels_t	mods/orm/striker.hpp	/^		enum xray_shot_levels_t {$/;"	g	struct:mods::orm::striker
y	structs.h	/^		int y;$/;"	v
yaml	mods/orm/inventory.cpp	/^		namespace yaml {$/;"	n	namespace:mods::orm::inventory::lmdb	file:
yaml	mods/orm/rifle-instance.cpp	/^namespace mods::yaml {$/;"	n	class:mods	file:
yaml	mods/weapon.hpp	/^	namespace yaml {$/;"	n	namespace:mods::weapon
yaml	mods/yaml.cpp	/^namespace mods::yaml {$/;"	n	class:mods	file:
yaml	mods/yaml.hpp	/^namespace mods::yaml {$/;"	n	class:mods
yaml_caps_to_lower	mods/util.cpp	/^	std::string yaml_caps_to_lower(std::string type) {$/;"	f	namespace:mods::util
yaml_description_t	mods/yaml.hpp	/^		yaml_description_t() :$/;"	f	struct:mods::yaml::yaml_description_t
yaml_description_t	mods/yaml.hpp	/^	struct yaml_description_t {$/;"	s	namespace:mods::yaml
yaml_feed_exceptions	mods/object-utils.hpp	/^	static yaml_exception_list_t yaml_feed_exceptions;$/;"	m	namespace:mods::object_utils
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(contagion::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(engineer::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(ghost::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(marine::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(medic::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(psyop::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(sentinel::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(sniper::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file	mods/weapon.hpp	/^	static inline std::string yaml_file(support::primary_choice_t s) {$/;"	f	namespace:mods::weapon
yaml_file_doesnt_exist	mods/object-utils.hpp	/^	static inline void yaml_file_doesnt_exist(std::string from_where) {$/;"	f	namespace:mods::object_utils
yaml_file_exists	mods/util.cpp	/^	bool yaml_file_exists(std::string path) {$/;"	f	namespace:mods::util
yaml_file_path_is_sane	mods/util.cpp	/^	bool yaml_file_path_is_sane(std::string path) {$/;"	f	namespace:mods::util
yaml_import	mods/object-utils.hpp	/^	static inline obj_ptr_t yaml_import(std::string object_type,std::string in_yaml_file) {$/;"	f	namespace:mods::object_utils
yaml_initiator	mods/object-utils.hpp	/^	static std::string yaml_initiator = "";$/;"	m	namespace:mods::object_utils
yaml_int_to_string	mods/util.cpp	/^	std::string yaml_int_to_string(int type) {$/;"	f	namespace:mods::util
yaml_list	mods/forge-engine/generated-armor.cpp	/^	const std::vector<std::string>& generated_armor_t::yaml_list(armor_types_t t) {$/;"	f	class:mods::forge_engine::generated_armor_t
yaml_list	mods/forge-engine/generated-rifle.cpp	/^	const std::vector<std::string>& generated_rifle_t::yaml_list(rifle_types_t t) {$/;"	f	class:mods::forge_engine::generated_rifle_t
yaml_map	mods/rifle-attachments.cpp	/^	std::map<std::string,std::string> rifle_attachments_t::yaml_map() {$/;"	f	class:mods::rifle_attachments_t
yaml_string_to_int	mods/util.cpp	/^	int yaml_string_to_int(std::string type) {$/;"	f	namespace:mods::util
yaml_transaction_id	mods/object-utils.hpp	/^	static uint32_t yaml_transaction_id = 0;$/;"	m	namespace:mods::object_utils
yaml_type_t	mods/util.hpp	/^	enum yaml_type_t {$/;"	g	namespace:mods::util
year	mods/date-time.cpp	/^	static uint8_t year;$/;"	m	namespace:mods::date_time	file:
yellow_str	mods/colors.hpp	/^static inline std::string yellow_str(TStr str){$/;"	f	namespace:mods::colors
youre_injured	mods/values.hpp	/^			static inline void youre_injured(T& p){$/;"	f	namespace:mods::values::msg
z	structs.h	/^		int z;$/;"	v
z_debug	mods/intimidate.cpp	10;"	d	file:
z_debug	mods/intimidate.cpp	7;"	d	file:
z_debug	mods/intimidate.cpp	96;"	d	file:
z_debug	mods/zone.cpp	11;"	d	file:
z_debug	mods/zone.cpp	14;"	d	file:
z_debug	mods/zone.cpp	336;"	d	file:
zone	db.cpp	/^namespace mods::zone {$/;"	n	class:mods	file:
zone	mods/init.hpp	/^INIT(mods::zone);$/;"	v
zone	mods/intimidate.cpp	/^namespace mods::zone {$/;"	n	class:mods	file:
zone	mods/intimidate.hpp	/^namespace mods::zone {$/;"	n	class:mods
zone	mods/orm/room.hpp	/^		zone_vnum zone;$/;"	m	struct:mods::orm::room
zone	mods/zone.cpp	/^namespace mods::zone {$/;"	n	class:mods	file:
zone	mods/zone.hpp	/^namespace mods::zone {$/;"	n	class:mods
zone	structs.h	/^		zone_rnum zone;              \/* Room zone (for resetting)          *\/$/;"	v
zone_command_upkeep	mods/zone.cpp	/^	bool zone_command_upkeep(reset_com& command) {$/;"	f	namespace:mods::zone
zone_data	db.h	/^		zone_data() :$/;"	f	struct:zone_data
zone_data	db.h	/^struct zone_data {$/;"	s
zone_id	mods/builder-data.hpp	/^	int zone_id;$/;"	m	struct:room_pavement_t
zone_id_blacklist	mods/zone.cpp	/^	static std::vector<int> zone_id_blacklist;$/;"	m	namespace:mods::zone	file:
zone_pave_mode	mods/builder-data.hpp	/^	bool zone_pave_mode;$/;"	m	struct:builder_data_t
zone_pave_mode	mods/player.cpp	/^	bool player::zone_pave_mode() {$/;"	f	class:mods::player
zone_pavement_list	mods/builder-data.hpp	/^	std::vector<zone_pavement_t> zone_pavement_list;$/;"	m	struct:builder_data_t
zone_pavement_t	mods/builder-data.hpp	/^struct zone_pavement_t {$/;"	s
zone_pavements	mods/builder-data.hpp	/^	zone_pavement_t zone_pavements;$/;"	m	struct:builder_data_t
zone_place	mods/builder.cpp	/^	std::pair<bool,std::string> zone_place(int zone_id,std::string_view zone_command,std::string_view if_flag,std::string_view arg1,std::string_view arg2,std::string_view arg3) {$/;"	f	namespace:mods::builder
zone_rnum	mods/index-type.hpp	/^typedef IDXTYPE zone_rnum;$/;"	t
zone_table	db.cpp	/^std::deque<zone_data> zone_table;	\/* zone table			 *\/$/;"	v
zone_to_reset	db.h	/^	zone_rnum zone_to_reset;            \/* ref to zone_data *\/$/;"	m	struct:reset_q_element
zone_transaction_id	mods/builder-data.hpp	/^	int zone_transaction_id;$/;"	m	struct:builder_data_t
zone_update	db.cpp	/^void zone_update() {$/;"	f
zone_update	mods/intimidate.cpp	/^	void zone_update(){$/;"	f	namespace:mods::zone
zone_update	mods/zone.cpp	/^	void zone_update() {$/;"	f	namespace:mods::zone
zone_vnum	mods/index-type.hpp	/^typedef IDXTYPE zone_vnum;$/;"	t
zoom_multiplier	mods/rifle-attachments.hpp	/^			float zoom_multiplier;						\/** honored [ 2021-04-13 ] *\/$/;"	m	struct:mods::rifle_attachments_t
~DecomposedExpression	mods/catch.hpp	/^			virtual ~DecomposedExpression() {}$/;"	f	struct:Catch::DecomposedExpression
~FileParser	mods/acl/config-parser.cpp	/^        FileParser::~FileParser(){$/;"	f	class:mods::acl::FileParser
~MethodTestCase	mods/catch.hpp	/^			virtual ~MethodTestCase() {}$/;"	f	class:Catch::MethodTestCase
~Ptr	mods/catch.hpp	/^			~Ptr() {$/;"	f	class:Catch::Ptr
~_db_handle	mods/lmdb.cpp	/^	_db_handle::~_db_handle(){$/;"	f	class:mods::lmdb::_db_handle
~char_data	structs.cpp	/^char_data::~char_data() {$/;"	f	class:char_data
~char_player_data	structs.cpp	/^char_player_data::~char_player_data() {$/;"	f	class:char_player_data
~client	mods/lmdb/db.hpp	/^				~client(){$/;"	f	struct:gdns::lmdb::client
~conf	mods/lmdb/conf.cpp	/^void conf<StringType>::~conf(void){$/;"	f	class:gdns::conf
~conf	mods/lmdb/conf.hpp	/^~conf(){$/;"	f	struct:gdns::conf
~gdns_env	mods/lmdb/db.hpp	/^			~gdns_env(){$/;"	f	struct:gdns::lmdb::gdns_env
~generator	mods/fluxkraft/generator.cpp	/^	generator::~generator() {$/;"	f	class:mods::fluxkraft::generator
~generator	mods/forge-engine/generator.cpp	/^	generator::~generator() {$/;"	f	class:mods::forge_engine::generator
~l96aw	mods/weapons/sniper-rifle-l96aw.cpp	/^	l96aw::~l96aw(){$/;"	f	class:mods::weapons::sniper_rifle::l96aw
~mini_gunner	mods/mobs/mini-gunner.cpp	/^	mini_gunner::~mini_gunner() {$/;"	f	class:mods::mobs::mini_gunner
~mob_special_data	structs.cpp	/^mob_special_data::~mob_special_data() {$/;"	f	class:mob_special_data
~mp5	mods/weapons/smg-mp5.cpp	/^	mp5::~mp5(){$/;"	f	class:mods::weapons::smg::mp5
~npc	mods/npc.cpp	/^	npc::~npc(){$/;"	f	class:mods::npc
~object	mods/object.cpp	/^	object::~object(){$/;"	f	class:mods::object
~player	mods/mobs/mob.cpp	/^	player::~player(){$/;"	f	class:mods::player
~player	mods/player.cpp	/^	player::~player() {$/;"	f	class:mods::player
~psg1	mods/weapons/sniper-rifle-psg1.cpp	/^	psg1::~psg1(){$/;"	f	class:mods::weapons::sniper_rifle::psg1
~resolver	mods/lmdb/db.hpp	/^		~resolver(){$/;"	f	struct:gdns::lmdb::resolver
~room_data	structs.cpp	/^room_data::~room_data() {$/;"	f	class:room_data
~sasg12	mods/weapons/shotgun-sasg12.cpp	/^	sasg12::~sasg12(){$/;"	f	class:mods::weapons::shotgun::sasg12
~server	mods/lmdb/db.hpp	/^			~server(){$/;"	f	struct:gdns::lmdb::server
~shape_dictionary	mods/fluxkraft/shape-dictionary.cpp	/^	shape_dictionary::~shape_dictionary() {$/;"	f	class:mods::fluxkraft::shape_dictionary
~shm	mods/lmdb/shm.hpp	/^        ~shm(){ if(m_data && m_id){ detach(); } }$/;"	f	class:gdns::shm
~slotted_builder	mods/builder/slotted-builder.hpp	/^			virtual ~slotted_builder() {$/;"	f	struct:mods::builder::slotted_builder
~smart_mob	mods/mobs/smart-mob.cpp	/^	smart_mob::~smart_mob() {$/;"	f	class:mods::mobs::smart_mob
~string	mods/string.cpp	/^	string::~string(){$/;"	f	class:mods::string
~value_scaler	mods/forge-engine/value-scaler.cpp	/^	value_scaler::~value_scaler() {$/;"	f	class:mods::forge_engine::value_scaler
~yaml_description_t	mods/yaml.hpp	/^		virtual ~yaml_description_t() {};$/;"	f	struct:mods::yaml::yaml_description_t
