#september{2017}
[x] -> Create AMMO item type
[x] -> Create RIFLE item type
[x] -> do_snipe: Must have AMMO before shooting
[x] -> :Must be LOADED before sniping
[x] -> :[race condition]User must be in room before damage dealt
[ ] -> MOB behaviour to track down snipers {medium}
[ ] -> :implement a behaviour tree for tracking down snipers {medium}
[ ] -> :Utilize graph.c to find path to sniper
[x] -> Global include file that doesn't require a million deps
[x] -> Update sniping behaviour strings to not say dagger stuff
[-] -> Create world viewer/builder in browser
[ ] -> :Create in-game world builder {medium}
[ ] -> :flush these rooms to lmdb {small}
[ ] -> :when parsing rooms in db.cpp also parse lmdb rooms {small}
#october{2017}
[x] -> Create preferences list and store it per player in lmdb {medium}
[x] -> :create screen width preference {small}
[ ] -> :create automap preference
[x] -> Create breachable doors
[x] -> :create thermite and breach items
[ ] -> :create thermite command
[x] -> :create breach command
[x] -> create mute items
[ ] -> :jam thermite and breach charges
[ ] -> Create thermite only breachable doors
[x] -> Drones are players too ya know
[ ] -> implement spray mechanics
[ ] -> :spraying with shotgun types
[ ] -> :when in same room, default is spray
[x] -> create shotgun weapon types
[ ] -> :shotgun damage rolls are good when in same room
[ ] -> create assault rifle weapon types
[ ] -> create heavy rifle weapon types 
[ ] -> :5 second reload time 
[x] -> create smg weapon types
[ ] -> implement primary and secondary weapons
[ ] -> create automap functionality
[ ] -> :maps should appear alongside room description text
[ ] -> :create algorithm to do automap functionality
[ ] -> create dynamic dice 
[ ] -> :ump45 should have better dice rolls when close to target
[ ] -> :xm109 should have better dice rolls when further away
[ ] -> :xm109 should have *terrible* dice rolls when close to target
[ ] -> spraying with smg's should have *terrible* dice rolls when not close to target 
[x] -> Find out what the memory footprint is of a single duktape context
[ ] -> create internal memory to javascript object of a character
#november{2017}
[x] -> implement 'recall' functionality {small}
[x] -> :when recall occurs, execute look to see the current room description {small}
[x] -> :implement cooldown if user has been in combat in the past 20 seconds {small}
[ ] -> implement 'add_exp(user,X)' js {small}
[ ] -> implement 'add_gold(user,X)' js {small}
[x] -> implement a recoverable fatal error handler for duktape {small}
[ ] -> implement 'quest progress' command {small}
[ ] -> create different types of ammo with different effects on gameplay {medium}
[ ] -> :armor piercing rounds (+10 DICE SIDES) {small}
[ ] -> create storage containers that cost money {medium}
[ ] -> expand CAN_SEE macro to match behaviour when special goggles are worn {small}
[ ] -> fix sniper rifle description. The long description is mistakenly the short description {small}
[ ] -> group together XM109 ammo into xN descriptions when multiple are in the room {small}
[ ] -> when a character dies, only certain pieces of inventory should stay on the body {small}
[ ] -> use decision trees to fight players {gigantic}
[x] -> make room titles colored {tiny}
[x] -> create drones {medium}
[x] -> :drones can go from room to room {medium}
[ ] -> :when a mute jammer is in a room, a drone can not see or do anything {small}
[x] -> create a room update system and store a list of pointers to characters in an lmdb key {large}
[ ] -> implement dynamic room descriptions
[x] -> color code exits {tiny}
[ ] -> implement corrosive effects {medium}
[ ] -> implement SCAN command for scanning a weapon's meta data
[ ] -> migrate all room files to lmdb {large}
