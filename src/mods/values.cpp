#include "values.hpp"
#include "lmdb.hpp"
#include <map>
#include <string>
#include <vector>
#include "super-users.hpp"
#include "interpreter.hpp"
#include "screen-searcher.hpp"
#include <boost/preprocessor.hpp>

#define __MENTOC_MODS_VALUES_SHOW_DEBUG_OUTPUT__
#ifdef  __MENTOC_MODS_VALUES_SHOW_DEBUG_OUTPUT__
#define m_debug(a) std::cerr << "[mods::values]: '" << a << "'\n";
#else
#define m_debug(a)
#endif

extern bool key_exists(std::string key);
namespace mods::values {
		std::map<value_key_t,variants_t> alt_value_map;
		std::map<value_key_t,variants_t> current_value_map;
		std::string to_string(value_key_t k){
			return std::to_string(k);
		}
		value_key_t  to_vk_from_string(std::string s){
			return (value_key_t)mods::util::stoi(s).value_or(0);
		}
		static const std::vector<value_key_t> bool_types = {
			vk_ALLOW_MOCK_LEVELS,
		};
		static const std::vector<value_key_t> uint32_types = {
			vk_BREACHER_REPLENISH_CALL_COUNT,
			vk_GHOST_DISSIPATE_TICKS_DURATION,
			vk_SNIPER_XRAY_SHOT_MAX_COUNT,

		};
		static const std::vector<value_key_t> float_types = {
		vk_LEVELS_FIRST_TIER,
		vk_ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER,
		vk_EXPLOSIVE_CRITICAL_MULTIPLIER,
		vk_RIFLE_CRITICAL_MULTIPLIER,
		vk_INJURED_MAX_HP_MULTIPLIER,
		vk_MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER,
		vk_CHANCE_TO_INJURE_SKILL_MODIFIER,
		vk_INJURE_RESISTANCE_SKILL_MODIFIER,
		vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER,
		};
		static const std::vector<value_key_t> int_types = {
		vk_FIRE_DAMAGE_TICK_RESOLUTION,
		vk_FLASHBANG_COOLDOWN_TICKS,
		vk_FIRE_EVERY_N_TICKS,
		vk_FIRE_WOODEN_ADDITIONAL_TICKS,
		vk_FIRE_CARPET_ADDITIONAL_TICKS,
		vk_DAMAGE_DIVISOR,
		vk_FRAG_GRENADE_TICKS,
		vk_EMP_GRENADE_TICKS,
		vk_SENSOR_GRENADE_TICKS,
		vk_FLASHBANG_GRENADE_TICKS,
		vk_SMOKE_GRENADE_TICKS,
		vk_INCENDIARY_GRENADE_TICKS,
		vk_FIRE_STATUS_KINDLING_DAMAGE,
		vk_FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE,
		vk_FIRE_STATUS_SMOLDERING_DAMAGE,
		vk_FIRE_STATUS_SMOKING_DAMAGE,
				vk_ADVANCE_LEVEL_BONUS_HP_DICE,
				vk_ADVANCE_LEVEL_BONUS_HP_SIDES,
				vk_ADVANCE_LEVEL_BONUS_HP_THRESHOLD,
		};
		static const std::vector<value_key_t> uint8_types = {
		vk_ENGINEER_REPLENISH_PULSE,
		vk_ENGINEER_SENSOR_GRENADE_MAX_COUNT,
		vk_ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT,

		vk_SNIPER_REPLENISH_PULSE,
		vk_SNIPER_CLAYMORE_MAX_COUNT,
		vk_GHOST_DISSIPATE_CHARGE_MAX_COUNT,
		vk_MARKSMAN_CLASS_TRIADS_MELEE,
		vk_MARKSMAN_CLASS_TRIADS_WEAPONS,
		vk_MARKSMAN_CLASS_TRIADS_INTEL,
		vk_MARKSMAN_CLASS_TRIADS_SPEED,
		vk_MARKSMAN_CLASS_TRIADS_ARMOR,

		vk_BANDIT_CLASS_TRIADS_MELEE,
		vk_BANDIT_CLASS_TRIADS_WEAPONS,
		vk_BANDIT_CLASS_TRIADS_INTEL,
		vk_BANDIT_CLASS_TRIADS_SPEED,
		vk_BANDIT_CLASS_TRIADS_ARMOR,

		vk_BUTCHER_CLASS_TRIADS_MELEE,
		vk_BUTCHER_CLASS_TRIADS_WEAPONS,
		vk_BUTCHER_CLASS_TRIADS_INTEL,
		vk_BUTCHER_CLASS_TRIADS_SPEED,
		vk_BUTCHER_CLASS_TRIADS_ARMOR,

		vk_STRIKER_CLASS_TRIADS_MELEE,
		vk_STRIKER_CLASS_TRIADS_WEAPONS,
		vk_STRIKER_CLASS_TRIADS_INTEL,
		vk_STRIKER_CLASS_TRIADS_SPEED,
		vk_STRIKER_CLASS_TRIADS_ARMOR,

		vk_OBSTRUCTOR_CLASS_TRIADS_MELEE,
		vk_OBSTRUCTOR_CLASS_TRIADS_WEAPONS,
		vk_OBSTRUCTOR_CLASS_TRIADS_INTEL,
		vk_OBSTRUCTOR_CLASS_TRIADS_SPEED,
		vk_OBSTRUCTOR_CLASS_TRIADS_ARMOR,

		vk_MALADY_CLASS_TRIADS_MELEE,
		vk_MALADY_CLASS_TRIADS_WEAPONS,
		vk_MALADY_CLASS_TRIADS_INTEL,
		vk_MALADY_CLASS_TRIADS_SPEED,
		vk_MALADY_CLASS_TRIADS_ARMOR,

		vk_PYREXIA_CLASS_TRIADS_MELEE,
		vk_PYREXIA_CLASS_TRIADS_WEAPONS,
		vk_PYREXIA_CLASS_TRIADS_INTEL,
		vk_PYREXIA_CLASS_TRIADS_SPEED,
		vk_PYREXIA_CLASS_TRIADS_ARMOR,

		vk_DEALER_CLASS_TRIADS_MELEE,
		vk_DEALER_CLASS_TRIADS_WEAPONS,
		vk_DEALER_CLASS_TRIADS_INTEL,
		vk_DEALER_CLASS_TRIADS_SPEED,
		vk_DEALER_CLASS_TRIADS_ARMOR,

		vk_FORGE_CLASS_TRIADS_MELEE,
		vk_FORGE_CLASS_TRIADS_WEAPONS,
		vk_FORGE_CLASS_TRIADS_INTEL,
		vk_FORGE_CLASS_TRIADS_SPEED,
		vk_FORGE_CLASS_TRIADS_ARMOR,

		vk_SYNDROME_CLASS_TRIADS_MELEE,
		vk_SYNDROME_CLASS_TRIADS_WEAPONS,
		vk_SYNDROME_CLASS_TRIADS_INTEL,
		vk_SYNDROME_CLASS_TRIADS_SPEED,
		vk_SYNDROME_CLASS_TRIADS_ARMOR,

		vk_MACHINIST_CLASS_TRIADS_MELEE,
		vk_MACHINIST_CLASS_TRIADS_WEAPONS,
		vk_MACHINIST_CLASS_TRIADS_INTEL,
		vk_MACHINIST_CLASS_TRIADS_SPEED,
		vk_MACHINIST_CLASS_TRIADS_ARMOR,

		vk_GHOST_CLASS_TRIADS_MELEE,
		vk_GHOST_CLASS_TRIADS_WEAPONS,
		vk_GHOST_CLASS_TRIADS_INTEL,
		vk_GHOST_CLASS_TRIADS_SPEED,
		vk_GHOST_CLASS_TRIADS_ARMOR,

		vk_GHOST_REPLENISH_PULSE,
		vk_PYREXIA_REPLENISH_PULSE,
		vk_FORGE_REPLENISH_PULSE,
		vk_SYNDROME_REPLENISH_PULSE,
		vk_GHOST_CLAYMORE_MAX_COUNT,
		vk_PYREXIA_FIRE_NADE_CHARGES_DEFAULT,
		vk_PYREXIA_FIRE_NADE_CHARGES_INITIATE,
		vk_PYREXIA_FIRE_NADE_CHARGES_FAMILIAR,
		vk_PYREXIA_FIRE_NADE_CHARGES_MASTER,
		vk_SINGLE_SHOT_SHOTGUN,
		vk_SINGLE_SHOT_ASSAULT_RIFLE,
		vk_SINGLE_SHOT_SUB_MACHINE_GUN,
		vk_SINGLE_SHOT_SNIPER,
		vk_SINGLE_SHOT_HANDGUN,
		vk_SINGLE_SHOT_PISTOL,
		vk_SINGLE_SHOT_MACHINE_PISTOL,
		vk_SINGLE_SHOT_LIGHT_MACHINE_GUN,
		vk_SPRAY_SHOT_SHOTGUN,
		vk_SPRAY_SHOT_ASSAULT_RIFLE,
		vk_SPRAY_SHOT_SUB_MACHINE_GUN,
		vk_SPRAY_SHOT_SNIPER,
		vk_SPRAY_SHOT_HANDGUN,
		vk_SPRAY_SHOT_PISTOL,
		vk_SPRAY_SHOT_MACHINE_PISTOL,
		vk_SPRAY_SHOT_LIGHT_MACHINE_GUN,
		vk_SPRAY_CHANCE,
		vk_SPRAY_HEADSHOT_CHANCE,
		vk_SPRAY_CRITICAL_CHANCE,
		vk_SPRAY_CRITICAL_REDUCTION_DIVISOR,
		vk_REVIVE_TICKS,
		vk_REVIVE_HP,
		vk_INJURED_HP,
		vk_RIFLE_CRITICAL_MULTIPLIER,
		vk_MINI_GUNNER_SCAN_DEPTH,
		vk_SPRAY_CHANCE_SKILL_MODIFIER,
		vk_HEADSHOT_SKILL_MODIFIER,
		vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE,
		vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT,
		vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES,
		vk_SHOW_UNIMPLEMENTED_SKILLS,
		vk_GHOST_FEIGN_DEATH_INITIATE_DURATION,
		vk_GHOST_FEIGN_DEATH_FAMILIAR_DURATION,
		vk_GHOST_FEIGN_DEATH_MASTER_DURATION,
		vk_EXPLOSIVE_DAMAGE_MULTIPLIER,
		vk_CAMERA_INSTALLATION_TICS,
		vk_CLAYMORE_INSTALLATION_TICS,
		};


		static const std::vector<value_key_t> uint16_types = {
			vk_BREACHER_EXPLOSIVE_SHOT_MAX_COUNT,
			vk_SKILL_PYREXIA_THROW_FIRE_NADE,
			vk_SKILL_PYREXIA_DRENCH_IN_GASOLINE,
			vk_SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE,
			vk_SKILL_PYREXIA_CONVERT_TO_FIRE_NADE,
			vk_SKILL_PYREXIA_ATTACH_INC_LAUNCHER,
			vk_SKILL_PYREXIA_ATTACH_FLAMETHROWER,
			vk_SKILL_PYREXIA_CREATE_WALL_OF_FIRE,
			vk_SKILL_PYREXIA_SEAL_OFF_ROOM,
vk_SKILL_GHOST_DRONE_SCAN,
vk_SKILL_GHOST_STEALTH,
vk_SKILL_GHOST_SUMMON_EXTRACTION,
vk_SKILL_GHOST_XRAY_SHOT,
vk_SKILL_GHOST_FEIGN_DEATH,
vk_SKILL_GHOST_PLANT_CLAYMORE,
vk_SKILL_GHOST_PENETRATING_SHOT,
vk_SKILL_GHOST_INTIMIDATION,
vk_SKILL_GHOST_CRYOGENIC_GRENADE,
vk_SKILL_GHOST_FLASH_UNDERBARREL,
	 	vk_GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT,
	 	vk_GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT,
	 	vk_GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT,
		vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE,
		vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR,
		vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER,
		vk_WSL_SHOTGUN_0_ALLOWABLE,
		vk_WSL_SHOTGUN_0_ACCURACY,
		vk_WSL_SHOTGUN_0_DAMAGE,
		vk_WSL_SHOTGUN_1_ALLOWABLE,
		vk_WSL_SHOTGUN_1_ACCURACY,
		vk_WSL_SHOTGUN_1_DAMAGE,
		vk_WSL_SHOTGUN_2_ALLOWABLE,
		vk_WSL_SHOTGUN_2_ACCURACY,
		vk_WSL_SHOTGUN_2_DAMAGE,
		vk_WSL_SHOTGUN_3_ALLOWABLE,
		vk_WSL_SHOTGUN_3_ACCURACY,
		vk_WSL_SHOTGUN_3_DAMAGE,
		vk_WSL_SHOTGUN_4_ALLOWABLE,
		vk_WSL_SHOTGUN_4_ACCURACY,
		vk_WSL_SHOTGUN_4_DAMAGE,
		vk_WSL_AR_0_ALLOWABLE,
		vk_WSL_AR_0_ACCURACY,
		vk_WSL_AR_0_DAMAGE,
		vk_WSL_AR_1_ALLOWABLE,
		vk_WSL_AR_1_ACCURACY,
		vk_WSL_AR_1_DAMAGE,
		vk_WSL_AR_2_ALLOWABLE,
		vk_WSL_AR_2_ACCURACY,
		vk_WSL_AR_2_DAMAGE,
		vk_WSL_AR_3_ALLOWABLE,
		vk_WSL_AR_3_ACCURACY,
		vk_WSL_AR_3_DAMAGE,
		vk_WSL_AR_4_ALLOWABLE,
		vk_WSL_AR_4_ACCURACY,
		vk_WSL_AR_4_DAMAGE,
		vk_WSL_SMG_0_ALLOWABLE,
		vk_WSL_SMG_0_ACCURACY,
		vk_WSL_SMG_0_DAMAGE,
		vk_WSL_SMG_1_ALLOWABLE,
		vk_WSL_SMG_1_ACCURACY,
		vk_WSL_SMG_1_DAMAGE,
		vk_WSL_SMG_2_ALLOWABLE,
		vk_WSL_SMG_2_ACCURACY,
		vk_WSL_SMG_2_DAMAGE,
		vk_WSL_SMG_3_ALLOWABLE,
		vk_WSL_SMG_3_ACCURACY,
		vk_WSL_SMG_3_DAMAGE,
		vk_WSL_SMG_4_ALLOWABLE,
		vk_WSL_SMG_4_ACCURACY,
		vk_WSL_SMG_4_DAMAGE,
		vk_WSL_MACHINE_PISTOL_0_ALLOWABLE,
		vk_WSL_MACHINE_PISTOL_0_ACCURACY,
		vk_WSL_MACHINE_PISTOL_0_DAMAGE,
		vk_WSL_MACHINE_PISTOL_1_ALLOWABLE,
		vk_WSL_MACHINE_PISTOL_1_ACCURACY,
		vk_WSL_MACHINE_PISTOL_1_DAMAGE,
		vk_WSL_MACHINE_PISTOL_2_ALLOWABLE,
		vk_WSL_MACHINE_PISTOL_2_ACCURACY,
		vk_WSL_MACHINE_PISTOL_2_DAMAGE,
		vk_WSL_MACHINE_PISTOL_3_ALLOWABLE,
		vk_WSL_MACHINE_PISTOL_3_ACCURACY,
		vk_WSL_MACHINE_PISTOL_3_DAMAGE,
		vk_WSL_MACHINE_PISTOL_4_ALLOWABLE,
		vk_WSL_MACHINE_PISTOL_4_ACCURACY,
		vk_WSL_MACHINE_PISTOL_4_DAMAGE,
		vk_WSL_HANDGUN_0_ALLOWABLE,
		vk_WSL_HANDGUN_0_ACCURACY,
		vk_WSL_HANDGUN_0_DAMAGE,
		vk_WSL_HANDGUN_1_ALLOWABLE,
		vk_WSL_HANDGUN_1_ACCURACY,
		vk_WSL_HANDGUN_1_DAMAGE,
		vk_WSL_HANDGUN_2_ALLOWABLE,
		vk_WSL_HANDGUN_2_ACCURACY,
		vk_WSL_HANDGUN_2_DAMAGE,
		vk_WSL_HANDGUN_3_ALLOWABLE,
		vk_WSL_HANDGUN_3_ACCURACY,
		vk_WSL_HANDGUN_3_DAMAGE,
		vk_WSL_HANDGUN_4_ALLOWABLE,
		vk_WSL_HANDGUN_4_ACCURACY,
		vk_WSL_HANDGUN_4_DAMAGE,
		vk_WSL_LMG_0_ALLOWABLE,
		vk_WSL_LMG_0_ACCURACY,
		vk_WSL_LMG_0_DAMAGE,
		vk_WSL_LMG_1_ALLOWABLE,
		vk_WSL_LMG_1_ACCURACY,
		vk_WSL_LMG_1_DAMAGE,
		vk_WSL_LMG_2_ALLOWABLE,
		vk_WSL_LMG_2_ACCURACY,
		vk_WSL_LMG_2_DAMAGE,
		vk_WSL_LMG_3_ALLOWABLE,
		vk_WSL_LMG_3_ACCURACY,
		vk_WSL_LMG_3_DAMAGE,
		vk_WSL_LMG_4_ALLOWABLE,
		vk_WSL_LMG_4_ACCURACY,
		vk_WSL_LMG_4_DAMAGE,
		vk_WSL_SNIPER_0_ALLOWABLE,
		vk_WSL_SNIPER_0_ACCURACY,
		vk_WSL_SNIPER_0_DAMAGE,
		vk_WSL_SNIPER_1_ALLOWABLE,
		vk_WSL_SNIPER_1_ACCURACY,
		vk_WSL_SNIPER_1_DAMAGE,
		vk_WSL_SNIPER_2_ALLOWABLE,
		vk_WSL_SNIPER_2_ACCURACY,
		vk_WSL_SNIPER_2_DAMAGE,
		vk_WSL_SNIPER_3_ALLOWABLE,
		vk_WSL_SNIPER_3_ACCURACY,
		vk_WSL_SNIPER_3_DAMAGE,
		vk_WSL_SNIPER_4_ALLOWABLE,
		vk_WSL_SNIPER_4_ACCURACY,
		vk_WSL_SNIPER_4_DAMAGE,
		vk_HEADSHOT_DIVISOR,
vk_SKILL_CAMERA_PLACEMENT,
vk_SKILL_DETECT_CAMERAS,
vk_SKILL_CAMERA_DESTRUCTION,
vk_SKILL_ELECTRIFIED_DAMAGE,
vk_SKILL_PROTECT_FROM_EMP,
vk_SKILL_CREATE_EMP_WEAPONS,
vk_SKILL_COUNTER_SHOCK,
vk_SKILL_TOGGLE_THERMAL,
vk_SKILL_TOGGLE_NIGHT_VISION,
vk_SKILL_HEADGEAR_INTROSPECTION,
vk_SKILL_PROXIMITY_ALARM,
vk_SKILL_DEPLOYABLE_TURRET,
vk_SKILL_DEPLOYABLE_FIRE_TURRET,
vk_SKILL_DOOR_CAMERA,
vk_SKILL_BASIC_ARMOR,
vk_SKILL_ADVANCED_ARMOR,
vk_SKILL_ELITE_ARMOR,
vk_SKILL_THIEF,
vk_SKILL_MOLD,
vk_SKILL_NO_FACTOR_BASIC,
vk_SKILL_NO_FACTOR_ADVANCED,
vk_SKILL_NO_FACTOR_ELITE,
vk_SKILL_EXPLOSIVE_RESISTANCE,
vk_SKILL_INJURE_RESISTANCE,
vk_SKILL_MUNITIONS_REFLECTOR,
vk_SKILL_SENTINEL_DISCIPLINE,
vk_SKILL_DEPLOYABLE_SHIELD,
vk_SKILL_SPRAY_CHANCE,
vk_SKILL_HEADSHOT_CHANCE,
vk_SKILL_LIMB_CHANCE,
vk_SKILL_BETTER_SNIPING_ACCURACY,
vk_SKILL_TARGET_LIMB,
vk_SKILL_ACCURACY,
vk_SKILL_VIP,
vk_SKILL_TRACKER,
vk_SKILL_QUIETER_SNIPER_SHOTS,
vk_SKILL_FASTER_BREACHES,
vk_SKILL_FURTHER_C4S,
vk_SKILL_STRONGER_FRAG_ARM,
vk_SKILL_BIGGER_CLAYMORES,
vk_SKILL_FASTER_THERMITES,
vk_SKILL_BIGGER_FIRE_NADES,
vk_SKILL_CRAFTY_C4,
vk_SKILL_BETTER_EXPLOSIONS,
vk_SKILL_RETROFIT_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_STUN_GRENADE_LAUNCHER,
vk_SKILL_STEROID_DEALER,
vk_SKILL_HGH_DEALER,
vk_SKILL_NOXIOUS_NADE_CRAFTER,
vk_SKILL_DUTCH_OVEN,
vk_SKILL_FIRE_NADE_DEALER,
vk_SKILL_PRO_WEAPON_HANDLER,
vk_SKILL_BETTER_WEAPON_ACCURACY,
vk_SKILL_FASTER_TRIGGER_FINGER,
vk_SKILL_FASTER_RELOADING,
vk_SKILL_BASIC_PISTOL,
vk_SKILL_BASIC_ASSAULT_RIFLE,
vk_SKILL_BASIC_SHOTGUN,
vk_SKILL_BASIC_SNIPER_RIFLE,
vk_SKILL_BASIC_SUB_MACHINE_GUN,
vk_SKILL_INTERMEDIATE_PISTOL,
vk_SKILL_INTERMEDIATE_ASSAULT_RIFLE,
vk_SKILL_INTERMEDIATE_SHOTGUN,
vk_SKILL_INTERMEDIATE_SNIPER_RIFLE,
vk_SKILL_INTERMEDIATE_SUB_MACHINE_GUN,
vk_SKILL_ADVANCED_PISTOL,
vk_SKILL_ADVANCED_ASSAULT_RIFLE,
vk_SKILL_ADVANCED_SHOTGUN,
vk_SKILL_ADVANCED_SNIPER_RIFLE,
vk_SKILL_ADVANCED_SUB_MACHINE_GUN,
vk_SKILL_EXPERT_PISTOL,
vk_SKILL_EXPERT_ASSAULT_RIFLE,
vk_SKILL_EXPERT_SHOTGUN,
vk_SKILL_EXPERT_SNIPER_RIFLE,
vk_SKILL_EXPERT_SUB_MACHINE_GUN,
vk_SKILL_ARMOR_PENETRATION_SHOT,
vk_SKILL_NONSTOP_PENETRATION_SHOT,
vk_SKILL_INCREASED_INJURE_CHANCE,
vk_SKILL_ASSAULT_RIFLE_SHRAPNEL,
vk_SKILL_ENTRY_DENIAL,
vk_SKILL_MISDIRECTION,
vk_SKILL_SNIPER_SUPPORT,
vk_SKILL_REDUCED_DETECTION_CHANCE,
vk_SKILL_INCREASED_AWARENESS,
vk_SKILL_TRICK_MAGAZINE,
vk_SKILL_CHAINABLE_BREACHING,
vk_SKILL_HGH_MORE_POWERFUL,
vk_SKILL_BASIC_HP_RECOVERY,
vk_SKILL_PARASITIC_HP_RECOVERY,
vk_SKILL_SUTURE,
vk_SKILL_ADRENALINE_BOOST,
		vk_GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS,
		};
			static const std::vector<value_key_t> string_types = {
		vk_ADVANCE_LEVEL_CONGRATS,
				vk_CAN_BE_SEARCHED,
		vk_PYREXIA_REPLENISH_MESSAGE,
		vk_SANITY_CHECK,
		vk_MINI_GUNNER_WEAR_LIGHT,
		vk_MINI_GUNNER_WEAR_FINGER_R,
		vk_MINI_GUNNER_WEAR_FINGER_L,
		vk_MINI_GUNNER_WEAR_NECK_1,
		vk_MINI_GUNNER_WEAR_NECK_2,
		vk_MINI_GUNNER_WEAR_BODY,
		vk_MINI_GUNNER_WEAR_HEAD,
		vk_MINI_GUNNER_WEAR_LEGS,
		vk_MINI_GUNNER_WEAR_FEET,
		vk_MINI_GUNNER_WEAR_HANDS,
		vk_MINI_GUNNER_WEAR_ARMS,
		vk_MINI_GUNNER_WEAR_SHIELD,
		vk_MINI_GUNNER_WEAR_ABOUT,
		vk_MINI_GUNNER_WEAR_WAIST,
		vk_MINI_GUNNER_WEAR_WRIST_R,
		vk_MINI_GUNNER_WEAR_WRIST_L,
		vk_MINI_GUNNER_WEAR_PRIMARY,
		vk_MINI_GUNNER_WEAR_WIELD,
		vk_MINI_GUNNER_WEAR_HOLD,
		vk_MINI_GUNNER_WEAR_SECONDARY_WEAPON,
		vk_MINI_GUNNER_WEAR_SECONDARY,
		vk_MINI_GUNNER_WEAR_WEAPON_ATTACHMENT,
		vk_MINI_GUNNER_WEAR_SHOULDERS_L,
		vk_MINI_GUNNER_WEAR_SHOULDERS_R,
		vk_MINI_GUNNER_WEAR_BACKPACK,
		vk_MINI_GUNNER_WEAR_GOGGLES,
		vk_MINI_GUNNER_WEAR_VEST_PACK,
		vk_MINI_GUNNER_WEAR_ELBOW_L,
		vk_MINI_GUNNER_WEAR_ELBOW_R,
		vk_LUNATIC_WEAR_LIGHT,
		vk_LUNATIC_WEAR_FINGER_R,
		vk_LUNATIC_WEAR_FINGER_L,
		vk_LUNATIC_WEAR_NECK_1,
		vk_LUNATIC_WEAR_NECK_2,
		vk_LUNATIC_WEAR_BODY,
		vk_LUNATIC_WEAR_HEAD,
		vk_LUNATIC_WEAR_LEGS,
		vk_LUNATIC_WEAR_FEET,
		vk_LUNATIC_WEAR_HANDS,
		vk_LUNATIC_WEAR_ARMS,
		vk_LUNATIC_WEAR_SHIELD,
		vk_LUNATIC_WEAR_ABOUT,
		vk_LUNATIC_WEAR_WAIST,
		vk_LUNATIC_WEAR_WRIST_R,
		vk_LUNATIC_WEAR_WRIST_L,
		vk_LUNATIC_WEAR_PRIMARY,
		vk_LUNATIC_WEAR_WIELD,
		vk_LUNATIC_WEAR_HOLD,
		vk_LUNATIC_WEAR_SECONDARY_WEAPON,
		vk_LUNATIC_WEAR_SECONDARY,
		vk_LUNATIC_WEAR_WEAPON_ATTACHMENT,
		vk_LUNATIC_WEAR_SHOULDERS_L,
		vk_LUNATIC_WEAR_SHOULDERS_R,
		vk_LUNATIC_WEAR_BACKPACK,
		vk_LUNATIC_WEAR_GOGGLES,
		vk_LUNATIC_WEAR_VEST_PACK,
		vk_LUNATIC_WEAR_ELBOW_L,
		vk_LUNATIC_WEAR_ELBOW_R,
		vk_MSG_CRITICAL,
		vk_MSG_HEADSHOT,
		vk_MSG_HIT,
		vk_MSG_OUT_OF_AMMO,
		vk_MSG_MISSED_TARGET,
		vk_MSG_TARGET_DEAD,
		vk_MSG_YOURE_INJURED,
		vk_MSG_FIRE_DAMAGE,
		vk_MSG_SMOKE_DAMAGE,
		vk_MSG_NARROWLY_MISSED_ME,
		vk_MSG_YOU_ARE_INJURED,
		vk_MSG_YOUR_TARGET_IS_DEAD,
		vk_MSG_HIT_BY_RIFLE_ATTACK,
		vk_MSG_HIT_BY_SPRAY_ATTACK,
		vk_MSG_TARGET_IN_PEACEFUL_ROOM,
		vk_MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS,
		vk_MSG_NO_PRIMARY_WIELDED,
		vk_MSG_OUT_OF_AMMO,
		vk_MSG_COOLDOWN_IN_EFFECT,
		vk_MSG_COULDNT_FIND_TARGET,
		vk_MSG_HIT_BY_HEADSHOT,
		vk_MSG_YOU_INJURED_SOMEONE,
		vk_DEFAULT_PUBLIC_CHANNELS,
		vk_EXTENDED_PREFERENCES,
		vk_EXTENDED_PREFERENCES_DEFAULTS,
		vk_SUPER_USERS_LIST,
		vk_MINI_GUNNER_RANDOM_DISORIENT_STRINGS,
		vk_PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION,
		vk_PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION,
		vk_CHARGEN_TRIADS_FORMAT,

		vk_MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS,
		vk_MSG_YOU_REFLECTED_MUNITIONS,
		vk_MSG_YOU_INFLICTED_AR_SHRAPNEL,
		vk_MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL,
		vk_SUPER_USER_REJECT_MESSAGE,
		vk_ADMIN_SUCCESS_MESSAGE,
		vk_ADMIN_FAILURE_MESSAGE,
		vk_UNIMPLEMENTED_MESSAGE,
		vk_STOCK_STARS_MESSAGE,
		vk_STOCK_BLIND_MESSAGE,
		vk_STOCK_PITCH_BLACK_MESSAGE,
		vk_STOCK_READ_WHAT_MESSAGE,
		vk_STOCK_EXAMINE_MESSAGE,
		vk_STOCK_LOOK_INSIDE_MESSAGE,
		vk_STOCK_GOLD_BROKE_MESSAGE,
		vk_STOCK_GOLD_ONE_MISERABLE_MESSAGE,
		vk_STOCK_GOLD_PREFIX_MESSAGE,
		vk_STOCK_GOLD_SUFFIX_MESSAGE,
		vk_MSG_YOU_FEIGN_DEATH,
		vk_MSG_YOU_FAIL_FEIGN_DEATH,
			};
		bool is_int(value_key_t key){
			return (std::find(int_types.begin(),int_types.end(),key) != int_types.end());
		}
		bool is_bool(value_key_t key){
			return (std::find(bool_types.begin(),bool_types.end(),key) != bool_types.end());
		}
		bool is_uint8(value_key_t key){
			return (std::find(uint8_types.begin(),uint8_types.end(),key) != uint8_types.end());
		}
		bool is_uint16(value_key_t key){
			return (std::find(uint16_types.begin(),uint16_types.end(),key) != uint16_types.end());
		}
		bool is_uint32(value_key_t key){
			return (std::find(uint32_types.begin(),uint32_types.end(),key) != uint32_types.end());
		}
		bool is_string(value_key_t key){
			return (std::find(string_types.begin(),string_types.end(),key) != string_types.end());
		}
		bool is_float(value_key_t key){
			return (std::find(float_types.begin(),float_types.end(),key) != float_types.end());
		}

		void revert_to_default(std::string in_key){
			alt_value_map.erase(to_vk_from_string(in_key));
		}
		void revert_to_default(value_key_t in_key){
			alt_value_map.erase(in_key);
		}
		void save_to_lmdb(value_key_t v_key,std::string value){
			mods::db::lmdb_renew();
			std::string key = db_key({"values",to_string(v_key)});
			m_debug("setting lmdb: '" << key << "' -> '" << value << "'");
			mods::db::lmdb_put(key,value);
			mods::db::lmdb_commit();
		}

		void save_to_lmdb(std::string key,std::string value){
			save_to_lmdb(to_vk_from_string(key),value);
		}

		void load_from_lmdb(value_key_t v_key){
			mods::db::lmdb_renew();
			std::string key = db_key({"values",std::to_string(v_key)});
			m_debug("load from lmdb: '" << key << "'");
			if(!key_exists(key)){
				m_debug(key << " doesn't exist... returning...");
				mods::db::lmdb_commit();
				return;
			}
			std::string value = mods::db::lmdb_get(key);
			if(is_int(v_key)){
				alt_value_map[v_key] = static_cast<int>(atoi(value.c_str()));
				mods::db::lmdb_commit();
				return;
			}
			if(is_uint8(v_key)){
				alt_value_map[v_key] = static_cast<uint8_t>(atoi(value.c_str()));
				mods::db::lmdb_commit();
				return;
			}
			if(is_uint16(v_key)){
				alt_value_map[v_key] = static_cast<uint16_t>(atoi(value.c_str()));
				m_debug(key << " uint16_t exists.... value:'" << value.c_str() << "'");
				mods::db::lmdb_commit();
				return;
			}
			if(is_string(v_key)){
				alt_value_map[v_key] = value;
				mods::db::lmdb_commit();
				return;
			}
			if(is_float(v_key)){
				alt_value_map[v_key] = static_cast<float>(atof(value.c_str()));
				mods::db::lmdb_commit();
				return;
			}
			if(is_bool(v_key)){
				if(value.compare("1") == 0 || value.compare("true") == 0){
					alt_value_map[v_key] = true;
				}else if (value.compare("0") == 0 || value.compare("false") == 0){
					alt_value_map[v_key] = false;
				}
				mods::db::lmdb_commit();
				return;
			}
			log("[WARNING] key doesnt exist in int or string types!->'%s'",key.c_str());
			mods::db::lmdb_commit();
		}
		void load_from_lmdb(std::string in_key){
			load_from_lmdb(to_vk_from_string(in_key));
		}

		std::string random_key_string(std::string value){
					std::vector<std::string> strings;
					std::string current = "";
					for(auto ch : value){
						if(ch == '|' && current.length()){
							strings.emplace_back(current);
							current = "";
							continue;
						}
						current += ch;
					}
					if(current.length()){
						strings.emplace_back(current);
					}
				return strings[rand_number(0,strings.size()-1)];
		}

#if 0
		value_setters[#KEY] = [&alt_value_map](std::string value){\
			std::string type = #A;\
			if(type.compare("int") == 0 || type.compare("int") == 0 || type.compare("int") == 0){\
				alt_value_map[#KEY] = atoi(value.c_str());\
			}\
			if(type.compare("std::string") == 0){\
				alt_value_map[#KEY] = value;\
			}\
		};
#endif
#define CGET_DEF(A,KEY,MENTOC_DEFAULT)\
		A KEY(){\
			return CONSTGET<A>(BOOST_PP_CAT(value_key_t::vk_,KEY),MENTOC_DEFAULT);\
		}

		CGET_DEF(bool,ALLOW_MOCK_LEVELS,false);

		CGET_DEF(int,FIRE_DAMAGE_TICK_RESOLUTION,30);
		CGET_DEF(int,FLASHBANG_COOLDOWN_TICKS,3);
		CGET_DEF(int,FIRE_EVERY_N_TICKS,400);
		CGET_DEF(int,FIRE_WOODEN_ADDITIONAL_TICKS,80);
		CGET_DEF(int,FIRE_CARPET_ADDITIONAL_TICKS,60);
		CGET_DEF(int,DAMAGE_DIVISOR,3);
		CGET_DEF(int,FRAG_GRENADE_TICKS,6);
		CGET_DEF(int,EMP_GRENADE_TICKS,6);
		CGET_DEF(int,SENSOR_GRENADE_TICKS,6);
		CGET_DEF(int,FLASHBANG_GRENADE_TICKS,6);
		CGET_DEF(int,SMOKE_GRENADE_TICKS,6);
		CGET_DEF(int,INCENDIARY_GRENADE_TICKS,6);
		CGET_DEF(int,FIRE_STATUS_KINDLING_DAMAGE,10);
		CGET_DEF(int,FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE,70);
		CGET_DEF(int,FIRE_STATUS_SMOLDERING_DAMAGE,40);
		CGET_DEF(int,FIRE_STATUS_SMOKING_DAMAGE,15);
		CGET_DEF(int,ADVANCE_LEVEL_BONUS_HP_DICE,6);
		CGET_DEF(int,ADVANCE_LEVEL_BONUS_HP_SIDES,6);
		CGET_DEF(int,ADVANCE_LEVEL_BONUS_HP_THRESHOLD,12);

		CGET_DEF(uint16_t,BREACHER_EXPLOSIVE_SHOT_MAX_COUNT,2);
		CGET_DEF(uint16_t,SKILL_GHOST_DRONE_SCAN,50);
		CGET_DEF(uint16_t,SKILL_GHOST_STEALTH,50);
		CGET_DEF(uint16_t,SKILL_GHOST_SUMMON_EXTRACTION,50);
		CGET_DEF(uint16_t,SKILL_GHOST_XRAY_SHOT,50);
		CGET_DEF(uint16_t,SKILL_GHOST_FEIGN_DEATH,50);
		CGET_DEF(uint16_t,SKILL_GHOST_PLANT_CLAYMORE,50);
		CGET_DEF(uint16_t,SKILL_GHOST_PENETRATING_SHOT,50);
		CGET_DEF(uint16_t,SKILL_GHOST_INTIMIDATION,50);
		CGET_DEF(uint16_t,SKILL_GHOST_CRYOGENIC_GRENADE,50);
		CGET_DEF(uint16_t,SKILL_GHOST_FLASH_UNDERBARREL,50);
		CGET_DEF(uint16_t,WSL_SHOTGUN_0_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SHOTGUN_0_ACCURACY,80);
		CGET_DEF(uint16_t,WSL_SHOTGUN_0_DAMAGE,80);
		CGET_DEF(uint16_t,WSL_SHOTGUN_1_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SHOTGUN_1_ACCURACY,15);
		CGET_DEF(uint16_t,WSL_SHOTGUN_1_DAMAGE,15);
		CGET_DEF(uint16_t,WSL_SHOTGUN_2_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_2_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_2_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_3_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_3_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_3_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_4_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_4_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_SHOTGUN_4_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_AR_0_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_AR_0_ACCURACY,40);
		CGET_DEF(uint16_t,WSL_AR_0_DAMAGE,40);
		CGET_DEF(uint16_t,WSL_AR_1_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_AR_1_ACCURACY,40);
		CGET_DEF(uint16_t,WSL_AR_1_DAMAGE,40);
		CGET_DEF(uint16_t,WSL_AR_2_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_AR_2_ACCURACY,40);
		CGET_DEF(uint16_t,WSL_AR_2_DAMAGE,40);
		CGET_DEF(uint16_t,WSL_AR_3_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_AR_3_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_AR_3_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_AR_4_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_AR_4_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_AR_4_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_SMG_0_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SMG_0_ACCURACY,90);
		CGET_DEF(uint16_t,WSL_SMG_0_DAMAGE,40);
		CGET_DEF(uint16_t,WSL_SMG_1_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_SMG_1_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_SMG_1_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_SMG_2_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_SMG_2_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_SMG_2_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_SMG_3_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_SMG_3_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_SMG_3_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_SMG_4_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_SMG_4_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_SMG_4_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_0_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_0_ACCURACY,25);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_0_DAMAGE,15);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_1_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_1_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_1_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_2_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_2_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_2_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_3_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_3_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_3_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_4_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_4_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_4_DAMAGE,0);
		CGET_DEF(uint16_t,HEADSHOT_DIVISOR,3);



		CGET_DEF(uint16_t,WSL_HANDGUN_0_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_HANDGUN_0_ACCURACY,55);
		CGET_DEF(uint16_t,WSL_HANDGUN_0_DAMAGE,10);
		CGET_DEF(uint16_t,WSL_HANDGUN_1_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_1_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_1_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_2_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_2_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_2_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_3_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_3_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_3_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_4_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_4_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_HANDGUN_4_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_LMG_0_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_LMG_0_ACCURACY,40);
		CGET_DEF(uint16_t,WSL_LMG_0_DAMAGE,40);
		CGET_DEF(uint16_t,WSL_LMG_1_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_LMG_1_ACCURACY,35);
		CGET_DEF(uint16_t,WSL_LMG_1_DAMAGE,35);
		CGET_DEF(uint16_t,WSL_LMG_2_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_LMG_2_ACCURACY,30);
		CGET_DEF(uint16_t,WSL_LMG_2_DAMAGE,30);
		CGET_DEF(uint16_t,WSL_LMG_3_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_LMG_3_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_LMG_3_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_LMG_4_ALLOWABLE,0);
		CGET_DEF(uint16_t,WSL_LMG_4_ACCURACY,0);
		CGET_DEF(uint16_t,WSL_LMG_4_DAMAGE,0);
		CGET_DEF(uint16_t,WSL_SNIPER_0_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SNIPER_0_ACCURACY,10);
		CGET_DEF(uint16_t,WSL_SNIPER_0_DAMAGE,10);
		CGET_DEF(uint16_t,WSL_SNIPER_1_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SNIPER_1_ACCURACY,35);
		CGET_DEF(uint16_t,WSL_SNIPER_1_DAMAGE,35);
		CGET_DEF(uint16_t,WSL_SNIPER_2_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SNIPER_2_ACCURACY,60);
		CGET_DEF(uint16_t,WSL_SNIPER_2_DAMAGE,60);
		CGET_DEF(uint16_t,WSL_SNIPER_3_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SNIPER_3_ACCURACY,75);
		CGET_DEF(uint16_t,WSL_SNIPER_3_DAMAGE,75);
		CGET_DEF(uint16_t,WSL_SNIPER_4_ALLOWABLE,1);
		CGET_DEF(uint16_t,WSL_SNIPER_4_ACCURACY,75);
		CGET_DEF(uint16_t,WSL_SNIPER_4_DAMAGE,75);
		CGET_DEF(uint16_t, SKILL_CAMERA_PLACEMENT, 50 );
		CGET_DEF(uint16_t, SKILL_DETECT_CAMERAS, 50 );
		CGET_DEF(uint16_t, SKILL_CAMERA_DESTRUCTION, 100 );
		CGET_DEF(uint16_t, SKILL_ELECTRIFIED_DAMAGE, 100 );
		CGET_DEF(uint16_t, SKILL_PROTECT_FROM_EMP, 200 );
		CGET_DEF(uint16_t, SKILL_CREATE_EMP_WEAPONS, 200 );
		CGET_DEF(uint16_t, SKILL_COUNTER_SHOCK, 4 );
		CGET_DEF(uint16_t, SKILL_TOGGLE_THERMAL, 2050 );
		CGET_DEF(uint16_t, SKILL_TOGGLE_NIGHT_VISION, 2050 );
		CGET_DEF(uint16_t, SKILL_HEADGEAR_INTROSPECTION, 3050 );
		CGET_DEF(uint16_t, SKILL_PROXIMITY_ALARM, 3050 );
		CGET_DEF(uint16_t, SKILL_DEPLOYABLE_TURRET, 3050 );
		CGET_DEF(uint16_t, SKILL_DEPLOYABLE_FIRE_TURRET, 3050 );
		CGET_DEF(uint16_t, SKILL_DOOR_CAMERA, 3050 );
		CGET_DEF(uint16_t, SKILL_BASIC_ARMOR, 50 );
		CGET_DEF(uint16_t, SKILL_ADVANCED_ARMOR, 50 );
		CGET_DEF(uint16_t, SKILL_ELITE_ARMOR, 50 );
		CGET_DEF(uint16_t, SKILL_THIEF, 200 );
		CGET_DEF(uint16_t, SKILL_MOLD, 350 );
		CGET_DEF(uint16_t, SKILL_NO_FACTOR_BASIC, 400 );
		CGET_DEF(uint16_t, SKILL_NO_FACTOR_ADVANCED, 850 );
		CGET_DEF(uint16_t, SKILL_NO_FACTOR_ELITE, 900 );
		CGET_DEF(uint16_t, SKILL_EXPLOSIVE_RESISTANCE, 2050 );
		CGET_DEF(uint16_t, SKILL_INJURE_RESISTANCE, 3050 );
		CGET_DEF(uint16_t, SKILL_MUNITIONS_REFLECTOR, 4 );
		CGET_DEF(uint16_t, SKILL_SENTINEL_DISCIPLINE, 3 );
		CGET_DEF(uint16_t, SKILL_DEPLOYABLE_SHIELD, 8050 );
		CGET_DEF(uint16_t, SKILL_SPRAY_CHANCE, 150 );
		CGET_DEF(uint16_t, SKILL_HEADSHOT_CHANCE, 250 );
		CGET_DEF(uint16_t, SKILL_LIMB_CHANCE, 350 );
		CGET_DEF(uint16_t, SKILL_BETTER_SNIPING_ACCURACY, 450 );
		CGET_DEF(uint16_t, SKILL_TARGET_LIMB, 850 );
		CGET_DEF(uint16_t, SKILL_ACCURACY, 150 );
		CGET_DEF(uint16_t, SKILL_VIP, 250 );
		CGET_DEF(uint16_t, SKILL_TRACKER, 350 );
		CGET_DEF(uint16_t, SKILL_QUIETER_SNIPER_SHOTS, 350 );
		CGET_DEF(uint16_t, SKILL_FASTER_BREACHES, 50 );
		CGET_DEF(uint16_t, SKILL_FURTHER_C4S, 4 );
		CGET_DEF(uint16_t, SKILL_STRONGER_FRAG_ARM, 50 );
		CGET_DEF(uint16_t, SKILL_BIGGER_CLAYMORES, 50 );
		CGET_DEF(uint16_t, SKILL_FASTER_THERMITES, 50 );
		CGET_DEF(uint16_t, SKILL_BIGGER_FIRE_NADES, 50 );
		CGET_DEF(uint16_t, SKILL_CRAFTY_C4, 4 );
		CGET_DEF(uint16_t, SKILL_BETTER_EXPLOSIONS, 33 );
		CGET_DEF(uint16_t, SKILL_RETROFIT_GRENADE_LAUNCHER, 50 );
		CGET_DEF(uint16_t, SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER, 50 );
		CGET_DEF(uint16_t, SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER, 50 );
		CGET_DEF(uint16_t, SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER, 50 );
		CGET_DEF(uint16_t, SKILL_RETROFIT_STUN_GRENADE_LAUNCHER, 50 );
		CGET_DEF(uint16_t, SKILL_STEROID_DEALER, 50 );
		CGET_DEF(uint16_t, SKILL_HGH_DEALER, 50 );
		CGET_DEF(uint16_t, SKILL_NOXIOUS_NADE_CRAFTER, 50 );
		CGET_DEF(uint16_t, SKILL_DUTCH_OVEN, 50 );
		CGET_DEF(uint16_t, SKILL_FIRE_NADE_DEALER, 50 );
		CGET_DEF(uint16_t, SKILL_PRO_WEAPON_HANDLER, 50 );
		CGET_DEF(uint16_t, SKILL_BETTER_WEAPON_ACCURACY, 50 );
		CGET_DEF(uint16_t, SKILL_FASTER_TRIGGER_FINGER, 50 );
		CGET_DEF(uint16_t, SKILL_FASTER_RELOADING, 50 );
		CGET_DEF(uint16_t, SKILL_BASIC_PISTOL, 150 );
		CGET_DEF(uint16_t, SKILL_BASIC_ASSAULT_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_BASIC_SHOTGUN, 150 );
		CGET_DEF(uint16_t, SKILL_BASIC_SNIPER_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_BASIC_SUB_MACHINE_GUN, 150 );
		CGET_DEF(uint16_t, SKILL_INTERMEDIATE_PISTOL, 150 );
		CGET_DEF(uint16_t, SKILL_INTERMEDIATE_ASSAULT_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_INTERMEDIATE_SHOTGUN, 150 );
		CGET_DEF(uint16_t, SKILL_INTERMEDIATE_SNIPER_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_INTERMEDIATE_SUB_MACHINE_GUN, 150 );
		CGET_DEF(uint16_t, SKILL_ADVANCED_PISTOL, 150 );
		CGET_DEF(uint16_t, SKILL_ADVANCED_ASSAULT_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_ADVANCED_SHOTGUN, 150 );
		CGET_DEF(uint16_t, SKILL_ADVANCED_SNIPER_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_ADVANCED_SUB_MACHINE_GUN, 150 );
		CGET_DEF(uint16_t, SKILL_EXPERT_PISTOL, 150 );
		CGET_DEF(uint16_t, SKILL_EXPERT_ASSAULT_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_EXPERT_SHOTGUN, 150 );
		CGET_DEF(uint16_t, SKILL_EXPERT_SNIPER_RIFLE, 150 );
		CGET_DEF(uint16_t, SKILL_EXPERT_SUB_MACHINE_GUN, 150 );
		CGET_DEF(uint16_t, SKILL_ARMOR_PENETRATION_SHOT, 150 );
		CGET_DEF(uint16_t, SKILL_NONSTOP_PENETRATION_SHOT, 150 );
		CGET_DEF(uint16_t, SKILL_INCREASED_INJURE_CHANCE, 150 );
		CGET_DEF(uint16_t, SKILL_ASSAULT_RIFLE_SHRAPNEL, 150 );
		CGET_DEF(uint16_t, SKILL_ENTRY_DENIAL, 2050 );
		CGET_DEF(uint16_t, SKILL_MISDIRECTION, 2050 );
		CGET_DEF(uint16_t, SKILL_SNIPER_SUPPORT, 2050 );
		CGET_DEF(uint16_t, SKILL_REDUCED_DETECTION_CHANCE, 4 );
		CGET_DEF(uint16_t, SKILL_INCREASED_AWARENESS, 2050 );
		CGET_DEF(uint16_t, SKILL_TRICK_MAGAZINE, 2050 );
		CGET_DEF(uint16_t, SKILL_CHAINABLE_BREACHING, 1 );
		CGET_DEF(uint16_t, SKILL_HGH_MORE_POWERFUL, 2050 );
		CGET_DEF(uint16_t, SKILL_BASIC_HP_RECOVERY, 2050 );
		CGET_DEF(uint16_t, SKILL_PARASITIC_HP_RECOVERY, 2050 );
		CGET_DEF(uint16_t, SKILL_SUTURE, 2050 );
		CGET_DEF(uint16_t, SKILL_ADRENALINE_BOOST, 2050 );
		CGET_DEF(uint16_t, GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS,60);
		CGET_DEF(uint16_t,PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE,390);
		CGET_DEF(uint16_t,PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR,280);
		CGET_DEF(uint16_t,PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER,170);
	 	CGET_DEF(uint16_t,GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT,10);
	 	CGET_DEF(uint16_t,GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT,8);
	 	CGET_DEF(uint16_t,GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT,5);
			CGET_DEF(uint16_t,SKILL_PYREXIA_THROW_FIRE_NADE,50);
			CGET_DEF(uint16_t,SKILL_PYREXIA_DRENCH_IN_GASOLINE,50);
			CGET_DEF(uint16_t,SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE,50);
			CGET_DEF(uint16_t,SKILL_PYREXIA_CONVERT_TO_FIRE_NADE,50);
			CGET_DEF(uint16_t,SKILL_PYREXIA_ATTACH_INC_LAUNCHER,50);
			CGET_DEF(uint16_t,SKILL_PYREXIA_ATTACH_FLAMETHROWER,50);
			CGET_DEF(uint16_t,SKILL_PYREXIA_CREATE_WALL_OF_FIRE,50);
			CGET_DEF(uint16_t,SKILL_PYREXIA_SEAL_OFF_ROOM,50);



		CGET_DEF(uint8_t,ENGINEER_REPLENISH_PULSE,3);
		CGET_DEF(uint8_t,ENGINEER_SENSOR_GRENADE_MAX_COUNT,2);
		CGET_DEF(uint8_t,ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT,3);

		CGET_DEF(uint8_t,SNIPER_REPLENISH_PULSE,3);
		CGET_DEF(uint8_t,SNIPER_CLAYMORE_MAX_COUNT,1);
		CGET_DEF(uint8_t,GHOST_REPLENISH_PULSE,5);
		CGET_DEF(uint8_t,GHOST_DISSIPATE_CHARGE_MAX_COUNT,2);
		CGET_DEF(uint8_t,PYREXIA_REPLENISH_PULSE,5);
		CGET_DEF(uint8_t,FORGE_REPLENISH_PULSE,5);
		CGET_DEF(uint8_t,SYNDROME_REPLENISH_PULSE,5);
		CGET_DEF(uint8_t,GHOST_CLAYMORE_MAX_COUNT,2);
		CGET_DEF(uint8_t,CAMERA_INSTALLATION_TICS,30);
		CGET_DEF(uint8_t,CLAYMORE_INSTALLATION_TICS,10);
		CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_DEFAULT,3);
		CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_INITIATE,3);
		CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_FAMILIAR,6);
		CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_MASTER,9);
		CGET_DEF(uint8_t,SINGLE_SHOT_SHOTGUN,1);
		CGET_DEF(uint8_t,SINGLE_SHOT_ASSAULT_RIFLE,3);
		CGET_DEF(uint8_t,SINGLE_SHOT_SUB_MACHINE_GUN,3);
		CGET_DEF(uint8_t,SINGLE_SHOT_SNIPER,1);
		CGET_DEF(uint8_t,SINGLE_SHOT_HANDGUN,1);
		CGET_DEF(uint8_t,SINGLE_SHOT_PISTOL,1);
		CGET_DEF(uint8_t,SINGLE_SHOT_MACHINE_PISTOL,6);
		CGET_DEF(uint8_t,SINGLE_SHOT_LIGHT_MACHINE_GUN,8);
		CGET_DEF(uint8_t,SPRAY_SHOT_SHOTGUN,2);
		CGET_DEF(uint8_t,SPRAY_SHOT_ASSAULT_RIFLE,9);
		CGET_DEF(uint8_t,SPRAY_SHOT_SUB_MACHINE_GUN,6);
		CGET_DEF(uint8_t,SPRAY_SHOT_SNIPER,1);
		CGET_DEF(uint8_t,SPRAY_SHOT_HANDGUN,1);
		CGET_DEF(uint8_t,SPRAY_SHOT_PISTOL,1);
		CGET_DEF(uint8_t,SPRAY_SHOT_MACHINE_PISTOL,12);
		CGET_DEF(uint8_t,SPRAY_SHOT_LIGHT_MACHINE_GUN,16);
		CGET_DEF(uint8_t,SPRAY_CHANCE,25);
		CGET_DEF(uint8_t,SPRAY_HEADSHOT_CHANCE,3);
		CGET_DEF(uint8_t,SPRAY_CRITICAL_CHANCE,2);
		CGET_DEF(uint8_t,SPRAY_CRITICAL_REDUCTION_DIVISOR,10);
		CGET_DEF(uint8_t,REVIVE_TICKS,40);
		CGET_DEF(uint8_t,REVIVE_HP,50);
		CGET_DEF(uint8_t,INJURED_HP,5);
		CGET_DEF(uint8_t,MINI_GUNNER_SCAN_DEPTH,5);
		CGET_DEF(uint8_t,SPRAY_CHANCE_SKILL_MODIFIER,17);
		CGET_DEF(uint8_t,HEADSHOT_SKILL_MODIFIER,5);
		CGET_DEF(uint8_t,ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE,10);
		CGET_DEF(uint8_t,ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT,3);
		CGET_DEF(uint8_t,ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES,30);
		CGET_DEF(uint8_t,SHOW_UNIMPLEMENTED_SKILLS,1);
		CGET_DEF(uint8_t,GHOST_FEIGN_DEATH_INITIATE_DURATION,33);
		CGET_DEF(uint8_t,GHOST_FEIGN_DEATH_FAMILIAR_DURATION,66);
		CGET_DEF(uint8_t,GHOST_FEIGN_DEATH_MASTER_DURATION,99);

		CGET_DEF(float,LEVELS_FIRST_TIER,10.00);

		CGET_DEF(float,ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER,2.5);
		CGET_DEF(float,EXPLOSIVE_CRITICAL_MULTIPLIER,0.75);
		CGET_DEF(float,RIFLE_CRITICAL_MULTIPLIER,0.75);
		CGET_DEF(float,INJURED_MAX_HP_MULTIPLIER,0.10);
		CGET_DEF(float,MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER,0.75);
		CGET_DEF(float,CHANCE_TO_INJURE_SKILL_MODIFIER,3.75);
		CGET_DEF(float,INJURE_RESISTANCE_SKILL_MODIFIER,2.75);
		CGET_DEF(float,ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER,0.33);

		static std::string default_public_channels = IMPLODE({"chat","gossip","newbie","gratz"},"|");
		CGET_DEF(std::string,CAN_BE_SEARCHED,"This command can be searched by typing the command followed by a space and a word that you would like to search for.");
		CGET_DEF(std::string,SANITY_CHECK,"sanity-check");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_LIGHT,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_FINGER_R,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_FINGER_L,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_NECK_1,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_NECK_2,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_BODY,"objects/armor/vanguard-spiked-vest.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_HEAD,"objects/armor/ballistic-helmet.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_LEGS,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_FEET,"objects/armor/phagia-corps-ballistic-boots.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_HANDS,"objects/armor/weight-lifting-gloves.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_ARMS,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_SHIELD,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_ABOUT,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_WAIST,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_WRIST_R,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_WRIST_L,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_PRIMARY,"objects/rifle/belt-fed-minigun.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_WIELD,"objects/rifle/belt-fed-minigun.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_HOLD,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_SECONDARY_WEAPON,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_SECONDARY,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_WEAPON_ATTACHMENT,"objects/attachment/belt-feeder.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_SHOULDERS_L,"objects/armor/vanguard-shoulder-pad.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_SHOULDERS_R,"objects/armor/vanguard-shoulder-pad.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_BACKPACK,"objects/armor/ammo-backpack.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_GOGGLES,"objects/armor/ballistic-eye-gaurd.yml");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_VEST_PACK,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_ELBOW_L,"");
		CGET_DEF(std::string,MINI_GUNNER_WEAR_ELBOW_R,"objects/armor/vanguard-elbow-guard.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_LIGHT,"");
		CGET_DEF(std::string,LUNATIC_WEAR_FINGER_R,"");
		CGET_DEF(std::string,LUNATIC_WEAR_FINGER_L,"objects/armor/spiked-skull-ring.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_NECK_1,"objects/armor/qi-wol-clock-chain.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_NECK_2,"");
		CGET_DEF(std::string,LUNATIC_WEAR_BODY,"objects/armor/weak-tanktop.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_HEAD,"objects/armor/generic-hat.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_LEGS,"objects/armor/generic-red-jeans.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_FEET,"objects/armor/iconic-shoes.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_HANDS,"");
		CGET_DEF(std::string,LUNATIC_WEAR_ARMS,"");
		CGET_DEF(std::string,LUNATIC_WEAR_SHIELD,"");
		CGET_DEF(std::string,LUNATIC_WEAR_ABOUT,"");
		CGET_DEF(std::string,LUNATIC_WEAR_WAIST,"objects/armor/plain-black-belt.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_WRIST_R,"");
		CGET_DEF(std::string,LUNATIC_WEAR_WRIST_L,"");
		CGET_DEF(std::string,LUNATIC_WEAR_PRIMARY,"objects/rifle/uzi-machine-pistol.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_WIELD,"objects/rifle/uzi-machine-pistol.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_HOLD,"");
		CGET_DEF(std::string,LUNATIC_WEAR_SECONDARY_WEAPON,"");
		CGET_DEF(std::string,LUNATIC_WEAR_SECONDARY,"");
		CGET_DEF(std::string,LUNATIC_WEAR_WEAPON_ATTACHMENT,"objects/attachment/high-velocity-magazine.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_SHOULDERS_L,"");
		CGET_DEF(std::string,LUNATIC_WEAR_SHOULDERS_R,"");
		CGET_DEF(std::string,LUNATIC_WEAR_BACKPACK,"");
		CGET_DEF(std::string,LUNATIC_WEAR_GOGGLES,"objects/armor/idiots-sunglasses.yml");
		CGET_DEF(std::string,LUNATIC_WEAR_VEST_PACK,"");
		CGET_DEF(std::string,LUNATIC_WEAR_ELBOW_L,"");
		CGET_DEF(std::string,LUNATIC_WEAR_ELBOW_R,"");
		CGET_DEF(std::string,MSG_CRITICAL,"{red}***CRITICAL***{/red} --");
		CGET_DEF(std::string,MSG_HEADSHOT,"{red}***HEADSHOT***{/red} -- ");
		CGET_DEF(std::string,MSG_HIT_BY_HEADSHOT,"{red}*** YOU'VE BEEN HEADSHOTTED ***{/red} -- ");
		CGET_DEF(std::string,MSG_HIT,"{yel}--[HIT]--{/yel}");
		CGET_DEF(std::string,MSG_OUT_OF_AMMO,"{gld}*CLICK*{/gld} Your weapon is out of ammo!");
		CGET_DEF(std::string,MSG_MISSED_TARGET ,"You missed your target!");
		CGET_DEF(std::string,MSG_TARGET_DEAD ,"It appears that your target is dead.");
		CGET_DEF(std::string,MSG_YOURE_INJURED ,"You are injured!");
		CGET_DEF(std::string,MSG_FIRE_DAMAGE ,"[%d] You suffer burns from the roaring fire!\r\n");
		CGET_DEF(std::string,MSG_SMOKE_DAMAGE ,"[%d] You struggle to breath as smoke fills your lungs!\r\n");
		CGET_DEF(std::string,MSG_NARROWLY_MISSED_ME,"You just barely get out of the way of a potentially fatal shot!\r\n");
		CGET_DEF(std::string,MSG_YOU_ARE_INJURED,"{red}***YOU ARE INJURED***{/red} --");
		CGET_DEF(std::string,MSG_YOUR_TARGET_IS_DEAD,"{grn}*** YOUR TARGET IS DEAD ***{/grn}\r\n");
		CGET_DEF(std::string,MSG_HIT_BY_RIFLE_ATTACK,"{red}*** YOUR ARE HIT ***{/red} -- ");
		CGET_DEF(std::string,MSG_HIT_BY_SPRAY_ATTACK,"{red}*** YOUR ARE HIT BY A SPRAY OF BULLETS ***{/red} -- ");
		CGET_DEF(std::string,MSG_TARGET_IN_PEACEFUL_ROOM,"{gld}Your target is in a peaceful room{/gld}");
		CGET_DEF(std::string,MSG_NO_PRIMARY_WIELDED,"{gld}You aren't wielding a primary weapon.{/gld}");
		CGET_DEF(std::string,MSG_COOLDOWN_IN_EFFECT,"{gld}Weapon cooldown in effect.{/gld}");
		CGET_DEF(std::string,MSG_COULDNT_FIND_TARGET,"You couldn't find your target!");
		static std::string mini_gunner_random_attack = IMPLODE({"It's a dangerous game!","Have I ever told you the path to insanity?",
				"Come out, come out, wherever you are...",
				"The ones who hate me the most are the ones who don't scare me.",
				"Do you have the slightest clue how easily I could kill you right now?"
				},"|");
		static std::string mini_gunner_random_disorient_stings = IMPLODE(
				{
					"My EYES! My EYESSSSSSSS!!!!",
					"Enough of your tricks! Come out and fight me like a MAN!!!",
					"You're only delaying the inevitable!",
					"Tricks?! You're trying to defeat me with... TRICKS!?!"
				},"|");
		CGET_DEF(std::string,MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS,mini_gunner_random_attack);
		CGET_DEF(std::string,MINI_GUNNER_RANDOM_DISORIENT_STRINGS,mini_gunner_random_disorient_stings);
		CGET_DEF(std::string,MSG_YOU_INJURED_SOMEONE ,"{red}*** YOU INJURED %s{/red}!");
		CGET_DEF(std::string,DEFAULT_PUBLIC_CHANNELS,default_public_channels);
		CGET_DEF(std::string,EXTENDED_PREFERENCES,IMPLODE({"nochat","nogossip","nonewbie","nogratz"},"|"));
		CGET_DEF(std::string,EXTENDED_PREFERENCES_DEFAULTS,IMPLODE({"0","0","0","0"},"|"));
		CGET_DEF(std::string,SUPER_USERS_LIST,IMPLODE({"far"},"|"));
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION,"A bolt-action semi-automatic sniper rifle.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION,"A reliable semi-automatic sniper rifle that works well in very cold conditions.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION,"Standard issue marine corps automatic rifle.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION,"Lighter and shorter variant of the M16A2.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION,"Widely used in SWAT teams across the world, the MP5 is *the* SMG for tactical operations.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION,"Semi-automatic shotgun with large spread, but limited range.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION,"A dual-mode shotgun with pump-action and semi-automatic modes.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION,"Assault rifle known for it's high rate of fire.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION,"A new prototype of foldable machine guns.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION,"Assault rifle known for it's high rate of fire.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION,"A sub-machine-gun form of the popular AUG-A3 assault rifle.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION,"The TAR-21 is a reliable assault rifle with two firing modes.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION,"Gas-operated assault rifle used by SOCOM operatives.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION,"Dubbed the 'Universal Sub Machinegun', the UMP-45 is a versatile and reliable SMG.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION,"The MK-46 LMG is a perfect balance of firepower, portability, and accuracy.\r\n");
		CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION,"General purpose LMG widely used in tactical teams all over the world.\r\n");
		CGET_DEF(std::string,MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS,"*** [ You are HIT by {red} REFLECTED MUNITIONS {/red}] *** ");
		CGET_DEF(std::string,MSG_YOU_REFLECTED_MUNITIONS,"*** [ You {grn} REFLECTED part of that attack {/grn}] *** ");
		CGET_DEF(std::string,MSG_YOU_INFLICTED_AR_SHRAPNEL,"{grn}*** [ You INFLICTED A.R. ::SHRAPNEL:: ] *** {/grn}");
		CGET_DEF(std::string,MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL,"{red}*** [ You got hit by A.R. ::SHRAPNEL:: ] *** {/red}");
		CGET_DEF(std::string,SUPER_USER_REJECT_MESSAGE,"{red}You are not a super user.\r\nA man with no teeth spits on you.{/red}");
		CGET_DEF(std::string,ADMIN_SUCCESS_MESSAGE,"{grn}[+] It is done.{/grn}");
		CGET_DEF(std::string,ADMIN_FAILURE_MESSAGE,"{red}[-] Failure.{/red}");
		CGET_DEF(std::string,UNIMPLEMENTED_MESSAGE,"{red}this command is unimplemented{/red}");
		CGET_DEF(std::string,STOCK_STARS_MESSAGE,"You can't see anything but stars!");
		CGET_DEF(std::string,STOCK_BLIND_MESSAGE,"You can't see a damned thing, you're blind!");
		CGET_DEF(std::string,STOCK_PITCH_BLACK_MESSAGE,"It is pitch black...");
		CGET_DEF(std::string,STOCK_READ_WHAT_MESSAGE,"Read what?");
		CGET_DEF(std::string,STOCK_EXAMINE_MESSAGE,"Examine what?");
		CGET_DEF(std::string,STOCK_LOOK_INSIDE_MESSAGE, "When you look inside, you see:");
		CGET_DEF(std::string,STOCK_GOLD_BROKE_MESSAGE,"You're broke!");
		CGET_DEF(std::string,STOCK_GOLD_ONE_MISERABLE_MESSAGE,"You have one miserable little gold coin.");
		CGET_DEF(std::string,STOCK_GOLD_PREFIX_MESSAGE,"You have ");
		CGET_DEF(std::string,STOCK_GOLD_SUFFIX_MESSAGE," gold coins.");
		CGET_DEF(std::string,MSG_YOU_FEIGN_DEATH,"You succesfully feign death. The enemy is none the wiser...");
		CGET_DEF(std::string,MSG_YOU_FAIL_FEIGN_DEATH,"You fail at feigning death...\r\nYou are on the ground and vulnerable!");
		CGET_DEF(std::string,ADVANCE_LEVEL_CONGRATS,"{grn}Congratulations on advancing, soldier! You are proving to be a well-rounded member of the {blu}Counter Terrorist Unit{/blu}.");
		CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_MELEE,1);
		CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_WEAPONS,3);
		CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_INTEL,2);
		CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_SPEED,1);
		CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_ARMOR,3);


			CGET_DEF(std::string,CHARGEN_TRIADS_FORMAT,
							"Melee: %d\r\n"
							"Weapons: %d\r\n"
							"Intel: %d\r\n"
							"Speed: %d\r\n"
							"Armor: %d\r\n"
					);
		CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_MELEE,1);
		CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_WEAPONS,3);
		CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_INTEL,2);
		CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_SPEED,2);
		CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_ARMOR,2);
		CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_MELEE,2);
		CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_WEAPONS,2);
		CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_INTEL,3);
		CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_SPEED,3);
		CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_ARMOR,1);
		CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_MELEE,3);
		CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_WEAPONS,2);
		CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_INTEL,2);
		CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_SPEED,2);
		CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_ARMOR,2);
		CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_MELEE,3);
		CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_WEAPONS,3);
		CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_INTEL,1);
		CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_SPEED,3);
		CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_ARMOR,1);
		CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_MELEE,3);
		CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_WEAPONS,2);
		CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_INTEL,2);
		CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_SPEED,1);
		CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_ARMOR,3);
		CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_MELEE,2);
		CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_WEAPONS,2);
		CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_INTEL,3);
		CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_SPEED,2);
		CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_ARMOR,2);
		CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_MELEE,1);
		CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_WEAPONS,3);
		CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_INTEL,3);
		CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_SPEED,3);
		CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_ARMOR,1);
		CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_MELEE,1);
		CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_WEAPONS,3);
		CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_INTEL,3);
		CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_SPEED,1);
		CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_ARMOR,3);
		CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_MELEE,2);
		CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_WEAPONS,2);
		CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_INTEL,3);
		CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_SPEED,2);
		CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_ARMOR,2);
		CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_MELEE,1);
		CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_WEAPONS,3);
		CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_INTEL,3);
		CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_SPEED,3);
		CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_ARMOR,1);
		CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_MELEE,2);
		CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_WEAPONS,2);
		CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_INTEL,3);
		CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_SPEED,1);
		CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_ARMOR,3);
			CGET_DEF(std::string,PYREXIA_REPLENISH_MESSAGE,"A {red}FIRE NADE{/red} has been replenished to your inventory.");
#undef CGET_DEF

			/**************/
			/** set_value */
			/**************/
			ACMD(do_set_value) {
				ADMIN_REJECT();
				DO_HELP("set_value");
				static constexpr const char* usage = "usage: set_value <key> <value>\r\nAlso see: list_values\r\n";
				auto vec_args = PARSE_ARGS();
				if(vec_args.size() != 2){
					player->errorln(usage);
					return;
				}
				player->send(vec_args);
				mods::values::save_to_lmdb(vec_args[0],vec_args[1]);
				mods::values::load_from_lmdb(vec_args[0]);
				ADMIN_DONE();
			}
			/**************/
			/** get_value */
			/**************/
			ACMD(do_get_value) {
				ADMIN_REJECT();
				DO_HELP("get_value");
				static constexpr const char* usage = "usage: get_value <key>...<keyN>\r\nAlso see: list_values\r\n";
				auto vec_args = PARSE_ARGS();
				if(vec_args.size() < 1){
					player->errorln(usage);
					return;
				}

				for(auto vk_key : vec_args){
					value_key_t key = to_vk_from_string(vk_key);
					if(is_int(key)){
						auto it = std::find(int_types.begin(),int_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<int>(*it,0),"'"));
					}
					if(is_uint8(key)){
						auto it = std::find(uint8_types.begin(),uint8_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<uint8_t>(*it,0),"'"));
					}
					if(is_uint16(key)){
						auto it = std::find(uint16_types.begin(),uint16_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<uint16_t>(*it,0),"'"));
					}
					if(is_float(key)){
						auto it = std::find(float_types.begin(),float_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<float>(*it,0),"'"));
					}
					if(is_string(key)){
						auto it = std::find(string_types.begin(),string_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<std::string>(*it,""),"'"));
					}
				}
				ADMIN_DONE();
			}

			/****************************/
			/** revert_value_to_default */
			/****************************/
			ACMD(do_revert_value_to_default){
				ADMIN_REJECT();
				DO_HELP("revert_value_to_default");
				static constexpr const char* usage = "usage: revert_value_to_default <arg>...<argN>";
				auto vec_args = PARSE_ARGS();
				if(vec_args.size() < 1){
					player->errorln(usage);
					return;
				}
				for(auto arg : vec_args){
					mods::values::revert_to_default(arg);
				}
				ADMIN_DONE();
			}

			/****************/
			/** list_values */
			/****************/
			ACMD(do_list_values) {
				ADMIN_REJECT();
				DO_HELP("list_values");
				auto vec_args = PARSE_ARGS();
				std::vector<std::string> screen;
				for(auto section : {uint8_types,uint16_types,int_types,string_types}){
					for(auto item : section){
						screen.emplace_back(to_string(item));
					}
				}
				if(vec_args.size()){
					mods::search_screen(player, screen, vec_args, 255);
					player->sendln("Done listing.");
					player->sendln(CAN_BE_SEARCHED());
					return;
				}
				player->send(screen);
				player->sendln("Done listing.");
				player->sendln(CAN_BE_SEARCHED());
				ADMIN_DONE();
			}
			void init(){
				mods::interpreter::add_command("revert_value_to_default", POS_RESTING, do_revert_value_to_default, LVL_BUILDER,0);
				mods::interpreter::add_command("list_values", POS_RESTING, do_list_values, LVL_BUILDER,0);
				mods::interpreter::add_command("list_value", POS_RESTING, do_list_values, LVL_BUILDER,0);
				mods::interpreter::add_command("set_value", POS_RESTING, do_set_value, LVL_BUILDER,0);
				mods::interpreter::add_command("get_value", POS_RESTING, do_get_value, LVL_BUILDER,0);
			}
};
