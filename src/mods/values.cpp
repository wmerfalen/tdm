#include "values.hpp"
#include "lmdb.hpp"
#include <map>
#include <string>
#include <vector>
#include "super-users.hpp"
#include "interpreter.hpp"
#include "screen-searcher.hpp"
#include <boost/preprocessor.hpp>

#define __MENTOC_MODS_VALUES_SHOW_DEBUG_OUTPUT__
#ifdef  __MENTOC_MODS_VALUES_SHOW_DEBUG_OUTPUT__
#define m_debug(a) std::cerr << "[mods::values]: '" << a << "'\n";
#else
#define m_debug(a)
#endif

extern bool key_exists(std::string key);
namespace mods::values {
#define CGET_DEF(A,KEY,MENTOC_DEFAULT)\
		A KEY(){\
			return CONSTGET<A>(BOOST_PP_CAT(value_key_t::vk_,KEY),MENTOC_DEFAULT);\
		}
		std::map<value_key_t,variants_t> alt_value_map;
		std::map<value_key_t,variants_t> current_value_map;
		std::string to_string(value_key_t k){
			switch(k){
				default: return "";

case vk_ALLOW_MOCK_LEVELS: return "ALLOW_MOCK_LEVELS";
case vk_FIRE_DAMAGE_TICK_RESOLUTION: return "FIRE_DAMAGE_TICK_RESOLUTION";
case vk_FLASHBANG_COOLDOWN_TICKS: return "FLASHBANG_COOLDOWN_TICKS";
case vk_FIRE_EVERY_N_TICKS: return "FIRE_EVERY_N_TICKS";
case vk_FIRE_WOODEN_ADDITIONAL_TICKS: return "FIRE_WOODEN_ADDITIONAL_TICKS";
case vk_FIRE_CARPET_ADDITIONAL_TICKS: return "FIRE_CARPET_ADDITIONAL_TICKS";
case vk_DAMAGE_DIVISOR: return "DAMAGE_DIVISOR";
case vk_FRAG_GRENADE_TICKS: return "FRAG_GRENADE_TICKS";
case vk_EMP_GRENADE_TICKS: return "EMP_GRENADE_TICKS";
case vk_SENSOR_GRENADE_TICKS: return "SENSOR_GRENADE_TICKS";
case vk_FLASHBANG_GRENADE_TICKS: return "FLASHBANG_GRENADE_TICKS";
case vk_SMOKE_GRENADE_TICKS: return "SMOKE_GRENADE_TICKS";
case vk_INCENDIARY_GRENADE_TICKS: return "INCENDIARY_GRENADE_TICKS";
case vk_FIRE_STATUS_KINDLING_DAMAGE: return "FIRE_STATUS_KINDLING_DAMAGE";
case vk_FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE: return "FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE";
case vk_FIRE_STATUS_SMOLDERING_DAMAGE: return "FIRE_STATUS_SMOLDERING_DAMAGE";
case vk_FIRE_STATUS_SMOKING_DAMAGE: return "FIRE_STATUS_SMOKING_DAMAGE";
case vk_ADVANCE_LEVEL_BONUS_HP_DICE: return "ADVANCE_LEVEL_BONUS_HP_DICE";
case vk_ADVANCE_LEVEL_BONUS_HP_SIDES: return "ADVANCE_LEVEL_BONUS_HP_SIDES";
case vk_ADVANCE_LEVEL_BONUS_HP_THRESHOLD: return "ADVANCE_LEVEL_BONUS_HP_THRESHOLD";
case vk_LOWLY_SECURITY_ROAM_TICK: return "LOWLY_SECURITY_ROAM_TICK";
case vk_LOWLY_SECURITY_RANDOM_TRIVIAL_TICK: return "LOWLY_SECURITY_RANDOM_TRIVIAL_TICK";
case vk_BREACHER_EXPLOSIVE_SHOT_MAX_COUNT: return "BREACHER_EXPLOSIVE_SHOT_MAX_COUNT";
case vk_SKILL_GHOST_DRONE_SCAN: return "SKILL_GHOST_DRONE_SCAN";
case vk_SKILL_GHOST_STEALTH: return "SKILL_GHOST_STEALTH";
case vk_SKILL_GHOST_SUMMON_EXTRACTION: return "SKILL_GHOST_SUMMON_EXTRACTION";
case vk_SKILL_GHOST_XRAY_SHOT: return "SKILL_GHOST_XRAY_SHOT";
case vk_SKILL_GHOST_FEIGN_DEATH: return "SKILL_GHOST_FEIGN_DEATH";
case vk_SKILL_GHOST_PLANT_CLAYMORE: return "SKILL_GHOST_PLANT_CLAYMORE";
case vk_SKILL_GHOST_PENETRATING_SHOT: return "SKILL_GHOST_PENETRATING_SHOT";
case vk_SKILL_GHOST_INTIMIDATION: return "SKILL_GHOST_INTIMIDATION";
case vk_SKILL_GHOST_CRYOGENIC_GRENADE: return "SKILL_GHOST_CRYOGENIC_GRENADE";
case vk_SKILL_GHOST_FLASH_UNDERBARREL: return "SKILL_GHOST_FLASH_UNDERBARREL";
case vk_SKILL_SNIPER_TRACKING_SHOT: return "SKILL_SNIPER_TRACKING_SHOT";
case vk_SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN: return "SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN";
case vk_SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER: return "SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER";
case vk_SKILL_SNIPER_GUIDED_MISSILE: return "SKILL_SNIPER_GUIDED_MISSILE";
case vk_SKILL_SNIPER_TARGET_LIMB: return "SKILL_SNIPER_TARGET_LIMB";
case vk_SKILL_SNIPER_PLANT_CLAYMORE: return "SKILL_SNIPER_PLANT_CLAYMORE";
case vk_SKILL_SNIPER_XRAY_SHOT: return "SKILL_SNIPER_XRAY_SHOT";
case vk_SKILL_SNIPER_SUMMON_AREA_SCAN: return "SKILL_SNIPER_SUMMON_AREA_SCAN";
case vk_SKILL_GRENADE_USAGE: return "SKILL_GRENADE_USAGE";
case vk_SKILL_CLAYMORE_USAGE: return "SKILL_CLAYMORE_USAGE";
case vk_SKILL_BREACH_USAGE: return "SKILL_BREACH_USAGE";
case vk_WSL_SHOTGUN_0_ALLOWABLE: return "WSL_SHOTGUN_0_ALLOWABLE";
case vk_WSL_SHOTGUN_0_ACCURACY: return "WSL_SHOTGUN_0_ACCURACY";
case vk_WSL_SHOTGUN_0_DAMAGE: return "WSL_SHOTGUN_0_DAMAGE";
case vk_WSL_SHOTGUN_1_ALLOWABLE: return "WSL_SHOTGUN_1_ALLOWABLE";
case vk_WSL_SHOTGUN_1_ACCURACY: return "WSL_SHOTGUN_1_ACCURACY";
case vk_WSL_SHOTGUN_1_DAMAGE: return "WSL_SHOTGUN_1_DAMAGE";
case vk_WSL_SHOTGUN_2_ALLOWABLE: return "WSL_SHOTGUN_2_ALLOWABLE";
case vk_WSL_SHOTGUN_2_ACCURACY: return "WSL_SHOTGUN_2_ACCURACY";
case vk_WSL_SHOTGUN_2_DAMAGE: return "WSL_SHOTGUN_2_DAMAGE";
case vk_WSL_SHOTGUN_3_ALLOWABLE: return "WSL_SHOTGUN_3_ALLOWABLE";
case vk_WSL_SHOTGUN_3_ACCURACY: return "WSL_SHOTGUN_3_ACCURACY";
case vk_WSL_SHOTGUN_3_DAMAGE: return "WSL_SHOTGUN_3_DAMAGE";
case vk_WSL_SHOTGUN_4_ALLOWABLE: return "WSL_SHOTGUN_4_ALLOWABLE";
case vk_WSL_SHOTGUN_4_ACCURACY: return "WSL_SHOTGUN_4_ACCURACY";
case vk_WSL_SHOTGUN_4_DAMAGE: return "WSL_SHOTGUN_4_DAMAGE";
case vk_WSL_AR_0_ALLOWABLE: return "WSL_AR_0_ALLOWABLE";
case vk_WSL_AR_0_ACCURACY: return "WSL_AR_0_ACCURACY";
case vk_WSL_AR_0_DAMAGE: return "WSL_AR_0_DAMAGE";
case vk_WSL_AR_1_ALLOWABLE: return "WSL_AR_1_ALLOWABLE";
case vk_WSL_AR_1_ACCURACY: return "WSL_AR_1_ACCURACY";
case vk_WSL_AR_1_DAMAGE: return "WSL_AR_1_DAMAGE";
case vk_WSL_AR_2_ALLOWABLE: return "WSL_AR_2_ALLOWABLE";
case vk_WSL_AR_2_ACCURACY: return "WSL_AR_2_ACCURACY";
case vk_WSL_AR_2_DAMAGE: return "WSL_AR_2_DAMAGE";
case vk_WSL_AR_3_ALLOWABLE: return "WSL_AR_3_ALLOWABLE";
case vk_WSL_AR_3_ACCURACY: return "WSL_AR_3_ACCURACY";
case vk_WSL_AR_3_DAMAGE: return "WSL_AR_3_DAMAGE";
case vk_WSL_AR_4_ALLOWABLE: return "WSL_AR_4_ALLOWABLE";
case vk_WSL_AR_4_ACCURACY: return "WSL_AR_4_ACCURACY";
case vk_WSL_AR_4_DAMAGE: return "WSL_AR_4_DAMAGE";
case vk_WSL_SMG_0_ALLOWABLE: return "WSL_SMG_0_ALLOWABLE";
case vk_WSL_SMG_0_ACCURACY: return "WSL_SMG_0_ACCURACY";
case vk_WSL_SMG_0_DAMAGE: return "WSL_SMG_0_DAMAGE";
case vk_WSL_SMG_1_ALLOWABLE: return "WSL_SMG_1_ALLOWABLE";
case vk_WSL_SMG_1_ACCURACY: return "WSL_SMG_1_ACCURACY";
case vk_WSL_SMG_1_DAMAGE: return "WSL_SMG_1_DAMAGE";
case vk_WSL_SMG_2_ALLOWABLE: return "WSL_SMG_2_ALLOWABLE";
case vk_WSL_SMG_2_ACCURACY: return "WSL_SMG_2_ACCURACY";
case vk_WSL_SMG_2_DAMAGE: return "WSL_SMG_2_DAMAGE";
case vk_WSL_SMG_3_ALLOWABLE: return "WSL_SMG_3_ALLOWABLE";
case vk_WSL_SMG_3_ACCURACY: return "WSL_SMG_3_ACCURACY";
case vk_WSL_SMG_3_DAMAGE: return "WSL_SMG_3_DAMAGE";
case vk_WSL_SMG_4_ALLOWABLE: return "WSL_SMG_4_ALLOWABLE";
case vk_WSL_SMG_4_ACCURACY: return "WSL_SMG_4_ACCURACY";
case vk_WSL_SMG_4_DAMAGE: return "WSL_SMG_4_DAMAGE";
case vk_WSL_MACHINE_PISTOL_0_ALLOWABLE: return "WSL_MACHINE_PISTOL_0_ALLOWABLE";
case vk_WSL_MACHINE_PISTOL_0_ACCURACY: return "WSL_MACHINE_PISTOL_0_ACCURACY";
case vk_WSL_MACHINE_PISTOL_0_DAMAGE: return "WSL_MACHINE_PISTOL_0_DAMAGE";
case vk_WSL_MACHINE_PISTOL_1_ALLOWABLE: return "WSL_MACHINE_PISTOL_1_ALLOWABLE";
case vk_WSL_MACHINE_PISTOL_1_ACCURACY: return "WSL_MACHINE_PISTOL_1_ACCURACY";
case vk_WSL_MACHINE_PISTOL_1_DAMAGE: return "WSL_MACHINE_PISTOL_1_DAMAGE";
case vk_WSL_MACHINE_PISTOL_2_ALLOWABLE: return "WSL_MACHINE_PISTOL_2_ALLOWABLE";
case vk_WSL_MACHINE_PISTOL_2_ACCURACY: return "WSL_MACHINE_PISTOL_2_ACCURACY";
case vk_WSL_MACHINE_PISTOL_2_DAMAGE: return "WSL_MACHINE_PISTOL_2_DAMAGE";
case vk_WSL_MACHINE_PISTOL_3_ALLOWABLE: return "WSL_MACHINE_PISTOL_3_ALLOWABLE";
case vk_WSL_MACHINE_PISTOL_3_ACCURACY: return "WSL_MACHINE_PISTOL_3_ACCURACY";
case vk_WSL_MACHINE_PISTOL_3_DAMAGE: return "WSL_MACHINE_PISTOL_3_DAMAGE";
case vk_WSL_MACHINE_PISTOL_4_ALLOWABLE: return "WSL_MACHINE_PISTOL_4_ALLOWABLE";
case vk_WSL_MACHINE_PISTOL_4_ACCURACY: return "WSL_MACHINE_PISTOL_4_ACCURACY";
case vk_WSL_MACHINE_PISTOL_4_DAMAGE: return "WSL_MACHINE_PISTOL_4_DAMAGE";
case vk_HEADSHOT_DIVISOR: return "HEADSHOT_DIVISOR";
case vk_WSL_HANDGUN_0_ALLOWABLE: return "WSL_HANDGUN_0_ALLOWABLE";
case vk_WSL_HANDGUN_0_ACCURACY: return "WSL_HANDGUN_0_ACCURACY";
case vk_WSL_HANDGUN_0_DAMAGE: return "WSL_HANDGUN_0_DAMAGE";
case vk_WSL_HANDGUN_1_ALLOWABLE: return "WSL_HANDGUN_1_ALLOWABLE";
case vk_WSL_HANDGUN_1_ACCURACY: return "WSL_HANDGUN_1_ACCURACY";
case vk_WSL_HANDGUN_1_DAMAGE: return "WSL_HANDGUN_1_DAMAGE";
case vk_WSL_HANDGUN_2_ALLOWABLE: return "WSL_HANDGUN_2_ALLOWABLE";
case vk_WSL_HANDGUN_2_ACCURACY: return "WSL_HANDGUN_2_ACCURACY";
case vk_WSL_HANDGUN_2_DAMAGE: return "WSL_HANDGUN_2_DAMAGE";
case vk_WSL_HANDGUN_3_ALLOWABLE: return "WSL_HANDGUN_3_ALLOWABLE";
case vk_WSL_HANDGUN_3_ACCURACY: return "WSL_HANDGUN_3_ACCURACY";
case vk_WSL_HANDGUN_3_DAMAGE: return "WSL_HANDGUN_3_DAMAGE";
case vk_WSL_HANDGUN_4_ALLOWABLE: return "WSL_HANDGUN_4_ALLOWABLE";
case vk_WSL_HANDGUN_4_ACCURACY: return "WSL_HANDGUN_4_ACCURACY";
case vk_WSL_HANDGUN_4_DAMAGE: return "WSL_HANDGUN_4_DAMAGE";
case vk_WSL_LMG_0_ALLOWABLE: return "WSL_LMG_0_ALLOWABLE";
case vk_WSL_LMG_0_ACCURACY: return "WSL_LMG_0_ACCURACY";
case vk_WSL_LMG_0_DAMAGE: return "WSL_LMG_0_DAMAGE";
case vk_WSL_LMG_1_ALLOWABLE: return "WSL_LMG_1_ALLOWABLE";
case vk_WSL_LMG_1_ACCURACY: return "WSL_LMG_1_ACCURACY";
case vk_WSL_LMG_1_DAMAGE: return "WSL_LMG_1_DAMAGE";
case vk_WSL_LMG_2_ALLOWABLE: return "WSL_LMG_2_ALLOWABLE";
case vk_WSL_LMG_2_ACCURACY: return "WSL_LMG_2_ACCURACY";
case vk_WSL_LMG_2_DAMAGE: return "WSL_LMG_2_DAMAGE";
case vk_WSL_LMG_3_ALLOWABLE: return "WSL_LMG_3_ALLOWABLE";
case vk_WSL_LMG_3_ACCURACY: return "WSL_LMG_3_ACCURACY";
case vk_WSL_LMG_3_DAMAGE: return "WSL_LMG_3_DAMAGE";
case vk_WSL_LMG_4_ALLOWABLE: return "WSL_LMG_4_ALLOWABLE";
case vk_WSL_LMG_4_ACCURACY: return "WSL_LMG_4_ACCURACY";
case vk_WSL_LMG_4_DAMAGE: return "WSL_LMG_4_DAMAGE";
case vk_WSL_SNIPER_0_ALLOWABLE: return "WSL_SNIPER_0_ALLOWABLE";
case vk_WSL_SNIPER_0_ACCURACY: return "WSL_SNIPER_0_ACCURACY";
case vk_WSL_SNIPER_0_DAMAGE: return "WSL_SNIPER_0_DAMAGE";
case vk_WSL_SNIPER_1_ALLOWABLE: return "WSL_SNIPER_1_ALLOWABLE";
case vk_WSL_SNIPER_1_ACCURACY: return "WSL_SNIPER_1_ACCURACY";
case vk_WSL_SNIPER_1_DAMAGE: return "WSL_SNIPER_1_DAMAGE";
case vk_WSL_SNIPER_2_ALLOWABLE: return "WSL_SNIPER_2_ALLOWABLE";
case vk_WSL_SNIPER_2_ACCURACY: return "WSL_SNIPER_2_ACCURACY";
case vk_WSL_SNIPER_2_DAMAGE: return "WSL_SNIPER_2_DAMAGE";
case vk_WSL_SNIPER_3_ALLOWABLE: return "WSL_SNIPER_3_ALLOWABLE";
case vk_WSL_SNIPER_3_ACCURACY: return "WSL_SNIPER_3_ACCURACY";
case vk_WSL_SNIPER_3_DAMAGE: return "WSL_SNIPER_3_DAMAGE";
case vk_WSL_SNIPER_4_ALLOWABLE: return "WSL_SNIPER_4_ALLOWABLE";
case vk_WSL_SNIPER_4_ACCURACY: return "WSL_SNIPER_4_ACCURACY";
case vk_WSL_SNIPER_4_DAMAGE: return "WSL_SNIPER_4_DAMAGE";
case vk_SKILL_CAMERA_PLACEMENT: return "SKILL_CAMERA_PLACEMENT";
case vk_SKILL_DETECT_CAMERAS: return "SKILL_DETECT_CAMERAS";
case vk_SKILL_CAMERA_DESTRUCTION: return "SKILL_CAMERA_DESTRUCTION";
case vk_SKILL_ELECTRIFIED_DAMAGE: return "SKILL_ELECTRIFIED_DAMAGE";
case vk_SKILL_PROTECT_FROM_EMP: return "SKILL_PROTECT_FROM_EMP";
case vk_SKILL_CREATE_EMP_WEAPONS: return "SKILL_CREATE_EMP_WEAPONS";
case vk_SKILL_COUNTER_SHOCK: return "SKILL_COUNTER_SHOCK";
case vk_SKILL_TOGGLE_THERMAL: return "SKILL_TOGGLE_THERMAL";
case vk_SKILL_TOGGLE_NIGHT_VISION: return "SKILL_TOGGLE_NIGHT_VISION";
case vk_SKILL_HEADGEAR_INTROSPECTION: return "SKILL_HEADGEAR_INTROSPECTION";
case vk_SKILL_PROXIMITY_ALARM: return "SKILL_PROXIMITY_ALARM";
case vk_SKILL_DEPLOYABLE_TURRET: return "SKILL_DEPLOYABLE_TURRET";
case vk_SKILL_DEPLOYABLE_FIRE_TURRET: return "SKILL_DEPLOYABLE_FIRE_TURRET";
case vk_SKILL_DOOR_CAMERA: return "SKILL_DOOR_CAMERA";
case vk_SKILL_BASIC_ARMOR: return "SKILL_BASIC_ARMOR";
case vk_SKILL_ADVANCED_ARMOR: return "SKILL_ADVANCED_ARMOR";
case vk_SKILL_ELITE_ARMOR: return "SKILL_ELITE_ARMOR";
case vk_SKILL_THIEF: return "SKILL_THIEF";
case vk_SKILL_MOLD: return "SKILL_MOLD";
case vk_SKILL_NO_FACTOR_BASIC: return "SKILL_NO_FACTOR_BASIC";
case vk_SKILL_NO_FACTOR_ADVANCED: return "SKILL_NO_FACTOR_ADVANCED";
case vk_SKILL_NO_FACTOR_ELITE: return "SKILL_NO_FACTOR_ELITE";
case vk_SKILL_EXPLOSIVE_RESISTANCE: return "SKILL_EXPLOSIVE_RESISTANCE";
case vk_SKILL_INJURE_RESISTANCE: return "SKILL_INJURE_RESISTANCE";
case vk_SKILL_MUNITIONS_REFLECTOR: return "SKILL_MUNITIONS_REFLECTOR";
case vk_SKILL_SENTINEL_DISCIPLINE: return "SKILL_SENTINEL_DISCIPLINE";
case vk_SKILL_DEPLOYABLE_SHIELD: return "SKILL_DEPLOYABLE_SHIELD";
case vk_SKILL_SPRAY_CHANCE: return "SKILL_SPRAY_CHANCE";
case vk_SKILL_HEADSHOT_CHANCE: return "SKILL_HEADSHOT_CHANCE";
case vk_SKILL_LIMB_CHANCE: return "SKILL_LIMB_CHANCE";
case vk_SKILL_BETTER_SNIPING_ACCURACY: return "SKILL_BETTER_SNIPING_ACCURACY";
case vk_SKILL_TARGET_LIMB: return "SKILL_TARGET_LIMB";
case vk_SKILL_ACCURACY: return "SKILL_ACCURACY";
case vk_SKILL_VIP: return "SKILL_VIP";
case vk_SKILL_TRACKER: return "SKILL_TRACKER";
case vk_SKILL_QUIETER_SNIPER_SHOTS: return "SKILL_QUIETER_SNIPER_SHOTS";
case vk_SKILL_FASTER_BREACHES: return "SKILL_FASTER_BREACHES";
case vk_SKILL_FURTHER_C4S: return "SKILL_FURTHER_C4S";
case vk_SKILL_STRONGER_FRAG_ARM: return "SKILL_STRONGER_FRAG_ARM";
case vk_SKILL_BIGGER_CLAYMORES: return "SKILL_BIGGER_CLAYMORES";
case vk_SKILL_FASTER_THERMITES: return "SKILL_FASTER_THERMITES";
case vk_SKILL_BIGGER_FIRE_NADES: return "SKILL_BIGGER_FIRE_NADES";
case vk_SKILL_CRAFTY_C4: return "SKILL_CRAFTY_C4";
case vk_SKILL_BETTER_EXPLOSIONS: return "SKILL_BETTER_EXPLOSIONS";
case vk_SKILL_RETROFIT_GRENADE_LAUNCHER: return "SKILL_RETROFIT_GRENADE_LAUNCHER";
case vk_SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER: return "SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER";
case vk_SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER: return "SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER";
case vk_SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER: return "SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER";
case vk_SKILL_RETROFIT_STUN_GRENADE_LAUNCHER: return "SKILL_RETROFIT_STUN_GRENADE_LAUNCHER";
case vk_SKILL_STEROID_DEALER: return "SKILL_STEROID_DEALER";
case vk_SKILL_HGH_DEALER: return "SKILL_HGH_DEALER";
case vk_SKILL_NOXIOUS_NADE_CRAFTER: return "SKILL_NOXIOUS_NADE_CRAFTER";
case vk_SKILL_DUTCH_OVEN: return "SKILL_DUTCH_OVEN";
case vk_SKILL_FIRE_NADE_DEALER: return "SKILL_FIRE_NADE_DEALER";
case vk_SKILL_PRO_WEAPON_HANDLER: return "SKILL_PRO_WEAPON_HANDLER";
case vk_SKILL_BETTER_WEAPON_ACCURACY: return "SKILL_BETTER_WEAPON_ACCURACY";
case vk_SKILL_FASTER_TRIGGER_FINGER: return "SKILL_FASTER_TRIGGER_FINGER";
case vk_SKILL_FASTER_RELOADING: return "SKILL_FASTER_RELOADING";
case vk_SKILL_BASIC_PISTOL: return "SKILL_BASIC_PISTOL";
case vk_SKILL_BASIC_ASSAULT_RIFLE: return "SKILL_BASIC_ASSAULT_RIFLE";
case vk_SKILL_BASIC_SHOTGUN: return "SKILL_BASIC_SHOTGUN";
case vk_SKILL_BASIC_SNIPER_RIFLE: return "SKILL_BASIC_SNIPER_RIFLE";
case vk_SKILL_BASIC_SUB_MACHINE_GUN: return "SKILL_BASIC_SUB_MACHINE_GUN";
case vk_SKILL_INTERMEDIATE_PISTOL: return "SKILL_INTERMEDIATE_PISTOL";
case vk_SKILL_INTERMEDIATE_ASSAULT_RIFLE: return "SKILL_INTERMEDIATE_ASSAULT_RIFLE";
case vk_SKILL_INTERMEDIATE_SHOTGUN: return "SKILL_INTERMEDIATE_SHOTGUN";
case vk_SKILL_INTERMEDIATE_SNIPER_RIFLE: return "SKILL_INTERMEDIATE_SNIPER_RIFLE";
case vk_SKILL_INTERMEDIATE_SUB_MACHINE_GUN: return "SKILL_INTERMEDIATE_SUB_MACHINE_GUN";
case vk_SKILL_ADVANCED_PISTOL: return "SKILL_ADVANCED_PISTOL";
case vk_SKILL_ADVANCED_ASSAULT_RIFLE: return "SKILL_ADVANCED_ASSAULT_RIFLE";
case vk_SKILL_ADVANCED_SHOTGUN: return "SKILL_ADVANCED_SHOTGUN";
case vk_SKILL_ADVANCED_SNIPER_RIFLE: return "SKILL_ADVANCED_SNIPER_RIFLE";
case vk_SKILL_ADVANCED_SUB_MACHINE_GUN: return "SKILL_ADVANCED_SUB_MACHINE_GUN";
case vk_SKILL_EXPERT_PISTOL: return "SKILL_EXPERT_PISTOL";
case vk_SKILL_EXPERT_ASSAULT_RIFLE: return "SKILL_EXPERT_ASSAULT_RIFLE";
case vk_SKILL_EXPERT_SHOTGUN: return "SKILL_EXPERT_SHOTGUN";
case vk_SKILL_EXPERT_SNIPER_RIFLE: return "SKILL_EXPERT_SNIPER_RIFLE";
case vk_SKILL_EXPERT_SUB_MACHINE_GUN: return "SKILL_EXPERT_SUB_MACHINE_GUN";
case vk_SKILL_ARMOR_PENETRATION_SHOT: return "SKILL_ARMOR_PENETRATION_SHOT";
case vk_SKILL_NONSTOP_PENETRATION_SHOT: return "SKILL_NONSTOP_PENETRATION_SHOT";
case vk_SKILL_INCREASED_INJURE_CHANCE: return "SKILL_INCREASED_INJURE_CHANCE";
case vk_SKILL_ASSAULT_RIFLE_SHRAPNEL: return "SKILL_ASSAULT_RIFLE_SHRAPNEL";
case vk_SKILL_ENTRY_DENIAL: return "SKILL_ENTRY_DENIAL";
case vk_SKILL_MISDIRECTION: return "SKILL_MISDIRECTION";
case vk_SKILL_SNIPER_SUPPORT: return "SKILL_SNIPER_SUPPORT";
case vk_SKILL_REDUCED_DETECTION_CHANCE: return "SKILL_REDUCED_DETECTION_CHANCE";
case vk_SKILL_INCREASED_AWARENESS: return "SKILL_INCREASED_AWARENESS";
case vk_SKILL_TRICK_MAGAZINE: return "SKILL_TRICK_MAGAZINE";
case vk_SKILL_CHAINABLE_BREACHING: return "SKILL_CHAINABLE_BREACHING";
case vk_SKILL_HGH_MORE_POWERFUL: return "SKILL_HGH_MORE_POWERFUL";
case vk_SKILL_BASIC_HP_RECOVERY: return "SKILL_BASIC_HP_RECOVERY";
case vk_SKILL_PARASITIC_HP_RECOVERY: return "SKILL_PARASITIC_HP_RECOVERY";
case vk_SKILL_SUTURE: return "SKILL_SUTURE";
case vk_SKILL_ADRENALINE_BOOST: return "SKILL_ADRENALINE_BOOST";
case vk_GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS: return "GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS";
case vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE: return "PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE";
case vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR: return "PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR";
case vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER: return "PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER";
case vk_GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT: return "GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT";
case vk_GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT: return "GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT";
case vk_GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT: return "GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT";
case vk_SKILL_PYREXIA_THROW_FIRE_NADE: return "SKILL_PYREXIA_THROW_FIRE_NADE";
case vk_SKILL_PYREXIA_DRENCH_IN_GASOLINE: return "SKILL_PYREXIA_DRENCH_IN_GASOLINE";
case vk_SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE: return "SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE";
case vk_SKILL_PYREXIA_CONVERT_TO_FIRE_NADE: return "SKILL_PYREXIA_CONVERT_TO_FIRE_NADE";
case vk_SKILL_PYREXIA_ATTACH_INC_LAUNCHER: return "SKILL_PYREXIA_ATTACH_INC_LAUNCHER";
case vk_SKILL_PYREXIA_ATTACH_FLAMETHROWER: return "SKILL_PYREXIA_ATTACH_FLAMETHROWER";
case vk_SKILL_PYREXIA_CREATE_WALL_OF_FIRE: return "SKILL_PYREXIA_CREATE_WALL_OF_FIRE";
case vk_SKILL_PYREXIA_SEAL_OFF_ROOM: return "SKILL_PYREXIA_SEAL_OFF_ROOM";
case vk_SKILL_SNIPER_TRACKING_SHOT_TICKS: return "SKILL_SNIPER_TRACKING_SHOT_TICKS";
case vk_ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER: return "ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER";
case vk_EXPLOSIVE_CRITICAL_MULTIPLIER: return "EXPLOSIVE_CRITICAL_MULTIPLIER";
case vk_RIFLE_CRITICAL_MULTIPLIER: return "RIFLE_CRITICAL_MULTIPLIER";
case vk_INJURED_MAX_HP_MULTIPLIER: return "INJURED_MAX_HP_MULTIPLIER";
case vk_MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER: return "MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER";
case vk_CHANCE_TO_INJURE_SKILL_MODIFIER: return "CHANCE_TO_INJURE_SKILL_MODIFIER";
case vk_INJURE_RESISTANCE_SKILL_MODIFIER: return "INJURE_RESISTANCE_SKILL_MODIFIER";
case vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER: return "ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER";
case vk_BONUS_STRENGTH_MULTIPLIER: return "BONUS_STRENGTH_MULTIPLIER";
case vk_CONSTITUTION_STRENGTH_DAMPENER_MULTIPLIER: return "CONSTITUTION_STRENGTH_DAMPENER_MULTIPLIER";
case vk_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER: return "ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER";
case vk_TIER_ONE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER: return "TIER_ONE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER";
case vk_TIER_TWO_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER: return "TIER_TWO_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER";
case vk_TIER_THREE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER: return "TIER_THREE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER";
case vk_WEAPON_COOLDOWN_MODIFIER_TIER_ONE: return "WEAPON_COOLDOWN_MODIFIER_TIER_ONE";
case vk_WEAPON_COOLDOWN_MODIFIER_TIER_TWO: return "WEAPON_COOLDOWN_MODIFIER_TIER_TWO";
case vk_WEAPON_COOLDOWN_MODIFIER_TIER_THREE: return "WEAPON_COOLDOWN_MODIFIER_TIER_THREE";
case vk_TIER_ONE_CONSTITUTION_INJURY_DAMPENER: return "TIER_ONE_CONSTITUTION_INJURY_DAMPENER";
case vk_TIER_TWO_CONSTITUTION_INJURY_DAMPENER: return "TIER_TWO_CONSTITUTION_INJURY_DAMPENER";
case vk_TIER_THREE_CONSTITUTION_INJURY_DAMPENER: return "TIER_THREE_CONSTITUTION_INJURY_DAMPENER";
case vk_TIER_ONE_STRENGTH_BONUS_MULTIPLIER: return "TIER_ONE_STRENGTH_BONUS_MULTIPLIER";
case vk_TIER_TWO_STRENGTH_BONUS_MULTIPLIER: return "TIER_TWO_STRENGTH_BONUS_MULTIPLIER";
case vk_TIER_THREE_STRENGTH_BONUS_MULTIPLIER: return "TIER_THREE_STRENGTH_BONUS_MULTIPLIER";
case vk_TIER_ONE_CONSTITUTION_RESISTANCE_MULTIPLIER: return "TIER_ONE_CONSTITUTION_RESISTANCE_MULTIPLIER";
case vk_TIER_TWO_CONSTITUTION_RESISTANCE_MULTIPLIER: return "TIER_TWO_CONSTITUTION_RESISTANCE_MULTIPLIER";
case vk_TIER_THREE_CONSTITUTION_RESISTANCE_MULTIPLIER: return "TIER_THREE_CONSTITUTION_RESISTANCE_MULTIPLIER";
case vk_RIFLE_ATTACHMENT_LEVEL_MULTIPLIER: return "RIFLE_ATTACHMENT_LEVEL_MULTIPLIER";
case vk_LEVEL_0_BASE_DAMAGE: return "LEVEL_0_BASE_DAMAGE";
case vk_LEVEL_1_BASE_DAMAGE: return "LEVEL_1_BASE_DAMAGE";
case vk_LEVEL_2_BASE_DAMAGE: return "LEVEL_2_BASE_DAMAGE";
case vk_LEVEL_3_BASE_DAMAGE: return "LEVEL_3_BASE_DAMAGE";
case vk_LEVEL_4_BASE_DAMAGE: return "LEVEL_4_BASE_DAMAGE";
case vk_LEVEL_5_BASE_DAMAGE: return "LEVEL_5_BASE_DAMAGE";
case vk_LEVEL_6_BASE_DAMAGE: return "LEVEL_6_BASE_DAMAGE";
case vk_LEVEL_7_BASE_DAMAGE: return "LEVEL_7_BASE_DAMAGE";
case vk_LEVEL_8_BASE_DAMAGE: return "LEVEL_8_BASE_DAMAGE";
case vk_LEVEL_9_BASE_DAMAGE: return "LEVEL_9_BASE_DAMAGE";
case vk_LEVEL_10_BASE_DAMAGE: return "LEVEL_10_BASE_DAMAGE";
case vk_LEVEL_11_BASE_DAMAGE: return "LEVEL_11_BASE_DAMAGE";
case vk_LEVEL_12_BASE_DAMAGE: return "LEVEL_12_BASE_DAMAGE";
case vk_LEVEL_13_BASE_DAMAGE: return "LEVEL_13_BASE_DAMAGE";
case vk_LEVEL_14_BASE_DAMAGE: return "LEVEL_14_BASE_DAMAGE";
case vk_LEVEL_15_BASE_DAMAGE: return "LEVEL_15_BASE_DAMAGE";
case vk_LEVEL_16_BASE_DAMAGE: return "LEVEL_16_BASE_DAMAGE";
case vk_LEVEL_17_BASE_DAMAGE: return "LEVEL_17_BASE_DAMAGE";
case vk_LEVEL_18_BASE_DAMAGE: return "LEVEL_18_BASE_DAMAGE";
case vk_LEVEL_19_BASE_DAMAGE: return "LEVEL_19_BASE_DAMAGE";
case vk_LEVEL_20_BASE_DAMAGE: return "LEVEL_20_BASE_DAMAGE";
case vk_LEVEL_21_BASE_DAMAGE: return "LEVEL_21_BASE_DAMAGE";
case vk_LEVEL_22_BASE_DAMAGE: return "LEVEL_22_BASE_DAMAGE";
case vk_LEVEL_23_BASE_DAMAGE: return "LEVEL_23_BASE_DAMAGE";
case vk_LEVEL_24_BASE_DAMAGE: return "LEVEL_24_BASE_DAMAGE";
case vk_LEVEL_25_BASE_DAMAGE: return "LEVEL_25_BASE_DAMAGE";
case vk_LEVEL_26_BASE_DAMAGE: return "LEVEL_26_BASE_DAMAGE";
case vk_LEVEL_27_BASE_DAMAGE: return "LEVEL_27_BASE_DAMAGE";
case vk_LEVEL_28_BASE_DAMAGE: return "LEVEL_28_BASE_DAMAGE";
case vk_LEVEL_29_BASE_DAMAGE: return "LEVEL_29_BASE_DAMAGE";
case vk_LEVEL_30_BASE_DAMAGE: return "LEVEL_30_BASE_DAMAGE";
case vk_LEVEL_DIFF_5: return "LEVEL_DIFF_5";
case vk_LEVEL_DIFF_4: return "LEVEL_DIFF_4";
case vk_LEVEL_DIFF_3: return "LEVEL_DIFF_3";
case vk_LEVEL_DIFF_2: return "LEVEL_DIFF_2";
case vk_LEVEL_DIFF_1: return "LEVEL_DIFF_1";
case vk_LEVEL_DIFF_0: return "LEVEL_DIFF_0";
case vk_LEVEL_DIFF_NEG_1: return "LEVEL_DIFF_NEG_1";
case vk_LEVEL_DIFF_NEG_2: return "LEVEL_DIFF_NEG_2";
case vk_LEVEL_DIFF_NEG_3: return "LEVEL_DIFF_NEG_3";
case vk_LEVEL_DIFF_NEG_4: return "LEVEL_DIFF_NEG_4";
case vk_LEVEL_DIFF_NEG_5: return "LEVEL_DIFF_NEG_5";
case vk_LEVEL_DIFF_DEFAULT: return "LEVEL_DIFF_DEFAULT";
case vk_LEVEL_DIFF_GREATER_THAN_SIX: return "LEVEL_DIFF_GREATER_THAN_SIX";
case vk_LEVEL_DIFF_FOOBAR_TEST: return "LEVEL_DIFF_FOOBAR_TEST";
case vk_ARMOR_CRIT_DAMAGE_MULTIPLIER: return "ARMOR_CRIT_DAMAGE_MULTIPLIER";
case vk_MSG_NO_PRACTICE_SESSIONS: return "MSG_NO_PRACTICE_SESSIONS";
case vk_CAN_BE_SEARCHED: return "CAN_BE_SEARCHED";
case vk_SANITY_CHECK: return "SANITY_CHECK";
case vk_MINI_GUNNER_WEAR_LIGHT: return "MINI_GUNNER_WEAR_LIGHT";
case vk_MINI_GUNNER_WEAR_FINGER_R: return "MINI_GUNNER_WEAR_FINGER_R";
case vk_MINI_GUNNER_WEAR_FINGER_L: return "MINI_GUNNER_WEAR_FINGER_L";
case vk_MINI_GUNNER_WEAR_NECK_1: return "MINI_GUNNER_WEAR_NECK_1";
case vk_MINI_GUNNER_WEAR_NECK_2: return "MINI_GUNNER_WEAR_NECK_2";
case vk_MINI_GUNNER_WEAR_BODY: return "MINI_GUNNER_WEAR_BODY";
case vk_MINI_GUNNER_WEAR_HEAD: return "MINI_GUNNER_WEAR_HEAD";
case vk_MINI_GUNNER_WEAR_LEGS: return "MINI_GUNNER_WEAR_LEGS";
case vk_MINI_GUNNER_WEAR_FEET: return "MINI_GUNNER_WEAR_FEET";
case vk_MINI_GUNNER_WEAR_HANDS: return "MINI_GUNNER_WEAR_HANDS";
case vk_MINI_GUNNER_WEAR_ARMS: return "MINI_GUNNER_WEAR_ARMS";
case vk_MINI_GUNNER_WEAR_SHIELD: return "MINI_GUNNER_WEAR_SHIELD";
case vk_MINI_GUNNER_WEAR_ABOUT: return "MINI_GUNNER_WEAR_ABOUT";
case vk_MINI_GUNNER_WEAR_WAIST: return "MINI_GUNNER_WEAR_WAIST";
case vk_MINI_GUNNER_WEAR_WRIST_R: return "MINI_GUNNER_WEAR_WRIST_R";
case vk_MINI_GUNNER_WEAR_WRIST_L: return "MINI_GUNNER_WEAR_WRIST_L";
case vk_MINI_GUNNER_WEAR_PRIMARY: return "MINI_GUNNER_WEAR_PRIMARY";
case vk_MINI_GUNNER_WEAR_WIELD: return "MINI_GUNNER_WEAR_WIELD";
case vk_MINI_GUNNER_WEAR_HOLD: return "MINI_GUNNER_WEAR_HOLD";
case vk_MINI_GUNNER_WEAR_SECONDARY_WEAPON: return "MINI_GUNNER_WEAR_SECONDARY_WEAPON";
case vk_MINI_GUNNER_WEAR_SECONDARY: return "MINI_GUNNER_WEAR_SECONDARY";
case vk_MINI_GUNNER_WEAR_WEAPON_ATTACHMENT: return "MINI_GUNNER_WEAR_WEAPON_ATTACHMENT";
case vk_MINI_GUNNER_WEAR_SHOULDERS_L: return "MINI_GUNNER_WEAR_SHOULDERS_L";
case vk_MINI_GUNNER_WEAR_SHOULDERS_R: return "MINI_GUNNER_WEAR_SHOULDERS_R";
case vk_MINI_GUNNER_WEAR_BACKPACK: return "MINI_GUNNER_WEAR_BACKPACK";
case vk_MINI_GUNNER_WEAR_GOGGLES: return "MINI_GUNNER_WEAR_GOGGLES";
case vk_MINI_GUNNER_WEAR_VEST_PACK: return "MINI_GUNNER_WEAR_VEST_PACK";
case vk_MINI_GUNNER_WEAR_ELBOW_L: return "MINI_GUNNER_WEAR_ELBOW_L";
case vk_MINI_GUNNER_WEAR_ELBOW_R: return "MINI_GUNNER_WEAR_ELBOW_R";
case vk_LOWLY_SECURITY_GUARD_WEAR_LIGHT: return "LOWLY_SECURITY_GUARD_WEAR_LIGHT";
case vk_LOWLY_SECURITY_GUARD_WEAR_FINGER_R: return "LOWLY_SECURITY_GUARD_WEAR_FINGER_R";
case vk_LOWLY_SECURITY_GUARD_WEAR_FINGER_L: return "LOWLY_SECURITY_GUARD_WEAR_FINGER_L";
case vk_LOWLY_SECURITY_GUARD_WEAR_NECK_1: return "LOWLY_SECURITY_GUARD_WEAR_NECK_1";
case vk_LOWLY_SECURITY_GUARD_WEAR_NECK_2: return "LOWLY_SECURITY_GUARD_WEAR_NECK_2";
case vk_LOWLY_SECURITY_GUARD_WEAR_BODY: return "LOWLY_SECURITY_GUARD_WEAR_BODY";
case vk_LOWLY_SECURITY_GUARD_WEAR_HEAD: return "LOWLY_SECURITY_GUARD_WEAR_HEAD";
case vk_LOWLY_SECURITY_GUARD_WEAR_LEGS: return "LOWLY_SECURITY_GUARD_WEAR_LEGS";
case vk_LOWLY_SECURITY_GUARD_WEAR_FEET: return "LOWLY_SECURITY_GUARD_WEAR_FEET";
case vk_LOWLY_SECURITY_GUARD_WEAR_HANDS: return "LOWLY_SECURITY_GUARD_WEAR_HANDS";
case vk_LOWLY_SECURITY_GUARD_WEAR_ARMS: return "LOWLY_SECURITY_GUARD_WEAR_ARMS";
case vk_LOWLY_SECURITY_GUARD_WEAR_SHIELD: return "LOWLY_SECURITY_GUARD_WEAR_SHIELD";
case vk_LOWLY_SECURITY_GUARD_WEAR_ABOUT: return "LOWLY_SECURITY_GUARD_WEAR_ABOUT";
case vk_LOWLY_SECURITY_GUARD_WEAR_WAIST: return "LOWLY_SECURITY_GUARD_WEAR_WAIST";
case vk_LOWLY_SECURITY_GUARD_WEAR_WRIST_R: return "LOWLY_SECURITY_GUARD_WEAR_WRIST_R";
case vk_LOWLY_SECURITY_GUARD_WEAR_WRIST_L: return "LOWLY_SECURITY_GUARD_WEAR_WRIST_L";
case vk_LOWLY_SECURITY_GUARD_WEAR_PRIMARY: return "LOWLY_SECURITY_GUARD_WEAR_PRIMARY";
case vk_LOWLY_SECURITY_GUARD_WEAR_WIELD: return "LOWLY_SECURITY_GUARD_WEAR_WIELD";
case vk_LOWLY_SECURITY_GUARD_WEAR_HOLD: return "LOWLY_SECURITY_GUARD_WEAR_HOLD";
case vk_LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON: return "LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON";
case vk_LOWLY_SECURITY_GUARD_WEAR_SECONDARY: return "LOWLY_SECURITY_GUARD_WEAR_SECONDARY";
case vk_LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT: return "LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT";
case vk_LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L: return "LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L";
case vk_LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R: return "LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R";
case vk_LOWLY_SECURITY_GUARD_WEAR_BACKPACK: return "LOWLY_SECURITY_GUARD_WEAR_BACKPACK";
case vk_LOWLY_SECURITY_GUARD_WEAR_GOGGLES: return "LOWLY_SECURITY_GUARD_WEAR_GOGGLES";
case vk_LOWLY_SECURITY_GUARD_WEAR_VEST_PACK: return "LOWLY_SECURITY_GUARD_WEAR_VEST_PACK";
case vk_LOWLY_SECURITY_GUARD_WEAR_ELBOW_L: return "LOWLY_SECURITY_GUARD_WEAR_ELBOW_L";
case vk_LOWLY_SECURITY_GUARD_WEAR_ELBOW_R: return "LOWLY_SECURITY_GUARD_WEAR_ELBOW_R";
case vk_LUNATIC_WEAR_LIGHT: return "LUNATIC_WEAR_LIGHT";
case vk_LUNATIC_WEAR_FINGER_R: return "LUNATIC_WEAR_FINGER_R";
case vk_LUNATIC_WEAR_FINGER_L: return "LUNATIC_WEAR_FINGER_L";
case vk_LUNATIC_WEAR_NECK_1: return "LUNATIC_WEAR_NECK_1";
case vk_LUNATIC_WEAR_NECK_2: return "LUNATIC_WEAR_NECK_2";
case vk_LUNATIC_WEAR_BODY: return "LUNATIC_WEAR_BODY";
case vk_LUNATIC_WEAR_HEAD: return "LUNATIC_WEAR_HEAD";
case vk_LUNATIC_WEAR_LEGS: return "LUNATIC_WEAR_LEGS";
case vk_LUNATIC_WEAR_FEET: return "LUNATIC_WEAR_FEET";
case vk_LUNATIC_WEAR_HANDS: return "LUNATIC_WEAR_HANDS";
case vk_LUNATIC_WEAR_ARMS: return "LUNATIC_WEAR_ARMS";
case vk_LUNATIC_WEAR_SHIELD: return "LUNATIC_WEAR_SHIELD";
case vk_LUNATIC_WEAR_ABOUT: return "LUNATIC_WEAR_ABOUT";
case vk_LUNATIC_WEAR_WAIST: return "LUNATIC_WEAR_WAIST";
case vk_LUNATIC_WEAR_WRIST_R: return "LUNATIC_WEAR_WRIST_R";
case vk_LUNATIC_WEAR_WRIST_L: return "LUNATIC_WEAR_WRIST_L";
case vk_LUNATIC_WEAR_PRIMARY: return "LUNATIC_WEAR_PRIMARY";
case vk_LUNATIC_WEAR_WIELD: return "LUNATIC_WEAR_WIELD";
case vk_LUNATIC_WEAR_HOLD: return "LUNATIC_WEAR_HOLD";
case vk_LUNATIC_WEAR_SECONDARY_WEAPON: return "LUNATIC_WEAR_SECONDARY_WEAPON";
case vk_LUNATIC_WEAR_SECONDARY: return "LUNATIC_WEAR_SECONDARY";
case vk_LUNATIC_WEAR_WEAPON_ATTACHMENT: return "LUNATIC_WEAR_WEAPON_ATTACHMENT";
case vk_LUNATIC_WEAR_SHOULDERS_L: return "LUNATIC_WEAR_SHOULDERS_L";
case vk_LUNATIC_WEAR_SHOULDERS_R: return "LUNATIC_WEAR_SHOULDERS_R";
case vk_LUNATIC_WEAR_BACKPACK: return "LUNATIC_WEAR_BACKPACK";
case vk_LUNATIC_WEAR_GOGGLES: return "LUNATIC_WEAR_GOGGLES";
case vk_LUNATIC_WEAR_VEST_PACK: return "LUNATIC_WEAR_VEST_PACK";
case vk_LUNATIC_WEAR_ELBOW_L: return "LUNATIC_WEAR_ELBOW_L";
case vk_LUNATIC_WEAR_ELBOW_R: return "LUNATIC_WEAR_ELBOW_R";
case vk_MSG_CRITICAL: return "MSG_CRITICAL";
case vk_MSG_HEADSHOT: return "MSG_HEADSHOT";
case vk_MSG_HIT_BY_HEADSHOT: return "MSG_HIT_BY_HEADSHOT";
case vk_MSG_HIT: return "MSG_HIT";
case vk_MSG_OUT_OF_AMMO: return "MSG_OUT_OF_AMMO";
case vk_MSG_MISSED_TARGET: return "MSG_MISSED_TARGET";
case vk_MSG_TARGET_DEAD: return "MSG_TARGET_DEAD";
case vk_MSG_YOURE_INJURED: return "MSG_YOURE_INJURED";
case vk_MSG_YOU_ARE_DISORIENTED: return "MSG_YOU_ARE_DISORIENTED";
case vk_MSG_YOU_DISORIENT_SOMEONE: return "MSG_YOU_DISORIENT_SOMEONE";
case vk_MSG_FIRE_DAMAGE: return "MSG_FIRE_DAMAGE";
case vk_MSG_EXPLOSIVE_DAMAGE: return "MSG_EXPLOSIVE_DAMAGE";
case vk_MSG_SHRAPNEL_DAMAGE: return "MSG_SHRAPNEL_DAMAGE";
case vk_MSG_CORROSIVE_DAMAGE: return "MSG_CORROSIVE_DAMAGE";
case vk_MSG_CRYOGENIC_DAMAGE: return "MSG_CRYOGENIC_DAMAGE";
case vk_MSG_RADIOACTIVE_DAMAGE: return "MSG_RADIOACTIVE_DAMAGE";
case vk_MSG_ANTI_MATTER_DAMAGE: return "MSG_ANTI_MATTER_DAMAGE";
case vk_MSG_EMP_DAMAGE: return "MSG_EMP_DAMAGE";
case vk_MSG_SHOCK_DAMAGE: return "MSG_SHOCK_DAMAGE";
case vk_MSG_SMOKE_DAMAGE: return "MSG_SMOKE_DAMAGE";
case vk_MSG_NARROWLY_MISSED_ME: return "MSG_NARROWLY_MISSED_ME";
case vk_MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO: return "MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO";
case vk_MSG_YOU_INFLICTED_INCENDIARY_AMMO: return "MSG_YOU_INFLICTED_INCENDIARY_AMMO";
case vk_MSG_YOU_ARE_INJURED: return "MSG_YOU_ARE_INJURED";
case vk_MSG_YOUR_TARGET_IS_DEAD: return "MSG_YOUR_TARGET_IS_DEAD";
case vk_MSG_HIT_BY_RIFLE_ATTACK: return "MSG_HIT_BY_RIFLE_ATTACK";
case vk_MSG_HIT_BY_MELEE_ATTACK: return "MSG_HIT_BY_MELEE_ATTACK";
case vk_MSG_HIT_BY_BLADED_MELEE_ATTACK: return "MSG_HIT_BY_BLADED_MELEE_ATTACK";
case vk_MSG_HIT_BY_BLUNT_MELEE_ATTACK: return "MSG_HIT_BY_BLUNT_MELEE_ATTACK";
case vk_MSG_YOU_INFLICTED_MELEE_ATTACK: return "MSG_YOU_INFLICTED_MELEE_ATTACK";
case vk_MSG_YOU_INFLICTED_BLADED_MELEE_ATTACK: return "MSG_YOU_INFLICTED_BLADED_MELEE_ATTACK";
case vk_MSG_YOU_INFLICTED_BLUNT_MELEE_ATTACK: return "MSG_YOU_INFLICTED_BLUNT_MELEE_ATTACK";
case vk_MSG_YOU_INFLICTED_INCENDIARY_DAMAGE: return "MSG_YOU_INFLICTED_INCENDIARY_DAMAGE";
case vk_MSG_YOU_INFLICTED_RADIOACTIVE_DAMAGE: return "MSG_YOU_INFLICTED_RADIOACTIVE_DAMAGE";
case vk_MSG_YOU_INFLICTED_ANTI_MATTER_DAMAGE: return "MSG_YOU_INFLICTED_ANTI_MATTER_DAMAGE";
case vk_MSG_YOU_INFLICTED_CORROSIVE_DAMAGE: return "MSG_YOU_INFLICTED_CORROSIVE_DAMAGE";
case vk_MSG_YOU_INFLICTED_EMP_DAMAGE: return "MSG_YOU_INFLICTED_EMP_DAMAGE";
case vk_MSG_YOU_INFLICTED_EXPLOSIVE_DAMAGE: return "MSG_YOU_INFLICTED_EXPLOSIVE_DAMAGE";
case vk_MSG_YOU_INFLICTED_SHRAPNEL_DAMAGE: return "MSG_YOU_INFLICTED_SHRAPNEL_DAMAGE";
case vk_MSG_YOU_INFLICTED_CRYOGENIC_DAMAGE: return "MSG_YOU_INFLICTED_CRYOGENIC_DAMAGE";
case vk_MSG_YOU_INFLICTED_SHOCK_DAMAGE: return "MSG_YOU_INFLICTED_SHOCK_DAMAGE";
case vk_MSG_HIT_BY_INCENDIARY_DAMAGE: return "MSG_HIT_BY_INCENDIARY_DAMAGE";
case vk_MSG_HIT_BY_RADIOACTIVE_DAMAGE: return "MSG_HIT_BY_RADIOACTIVE_DAMAGE";
case vk_MSG_HIT_BY_ANTI_MATTER_DAMAGE: return "MSG_HIT_BY_ANTI_MATTER_DAMAGE";
case vk_MSG_HIT_BY_CORROSIVE_DAMAGE: return "MSG_HIT_BY_CORROSIVE_DAMAGE";
case vk_MSG_HIT_BY_EMP_DAMAGE: return "MSG_HIT_BY_EMP_DAMAGE";
case vk_MSG_HIT_BY_EXPLOSIVE_DAMAGE: return "MSG_HIT_BY_EXPLOSIVE_DAMAGE";
case vk_MSG_HIT_BY_SHRAPNEL_DAMAGE: return "MSG_HIT_BY_SHRAPNEL_DAMAGE";
case vk_MSG_HIT_BY_CRYOGENIC_DAMAGE: return "MSG_HIT_BY_CRYOGENIC_DAMAGE";
case vk_MSG_HIT_BY_SHOCK_DAMAGE: return "MSG_HIT_BY_SHOCK_DAMAGE";
case vk_MSG_HIT_BY_SPRAY_ATTACK: return "MSG_HIT_BY_SPRAY_ATTACK";
case vk_MSG_TARGET_IN_PEACEFUL_ROOM: return "MSG_TARGET_IN_PEACEFUL_ROOM";
case vk_MSG_NO_PRIMARY_WIELDED: return "MSG_NO_PRIMARY_WIELDED";
case vk_MSG_COOLDOWN_IN_EFFECT: return "MSG_COOLDOWN_IN_EFFECT";
case vk_MSG_COULDNT_FIND_TARGET: return "MSG_COULDNT_FIND_TARGET";
case vk_MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS: return "MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS";
case vk_MINI_GUNNER_RANDOM_DISORIENT_STRINGS: return "MINI_GUNNER_RANDOM_DISORIENT_STRINGS";
case vk_MSG_YOU_INJURED_SOMEONE: return "MSG_YOU_INJURED_SOMEONE";
case vk_DEFAULT_PUBLIC_CHANNELS: return "DEFAULT_PUBLIC_CHANNELS";
case vk_EXTENDED_PREFERENCES: return "EXTENDED_PREFERENCES";
case vk_EXTENDED_PREFERENCES_DEFAULTS: return "EXTENDED_PREFERENCES_DEFAULTS";
case vk_SUPER_USERS_LIST: return "SUPER_USERS_LIST";
case vk_PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION";
case vk_PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION: return "PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION";
case vk_MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS: return "MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS";
case vk_MSG_YOU_REFLECTED_MUNITIONS: return "MSG_YOU_REFLECTED_MUNITIONS";
case vk_MSG_YOU_INFLICTED_AR_SHRAPNEL: return "MSG_YOU_INFLICTED_AR_SHRAPNEL";
case vk_MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL: return "MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL";
case vk_SUPER_USER_REJECT_MESSAGE: return "SUPER_USER_REJECT_MESSAGE";
case vk_ADMIN_SUCCESS_MESSAGE: return "ADMIN_SUCCESS_MESSAGE";
case vk_ADMIN_FAILURE_MESSAGE: return "ADMIN_FAILURE_MESSAGE";
case vk_UNIMPLEMENTED_MESSAGE: return "UNIMPLEMENTED_MESSAGE";
case vk_STOCK_STARS_MESSAGE: return "STOCK_STARS_MESSAGE";
case vk_STOCK_BLIND_MESSAGE: return "STOCK_BLIND_MESSAGE";
case vk_STOCK_PITCH_BLACK_MESSAGE: return "STOCK_PITCH_BLACK_MESSAGE";
case vk_STOCK_READ_WHAT_MESSAGE: return "STOCK_READ_WHAT_MESSAGE";
case vk_STOCK_EXAMINE_MESSAGE: return "STOCK_EXAMINE_MESSAGE";
case vk_STOCK_LOOK_INSIDE_MESSAGE: return "STOCK_LOOK_INSIDE_MESSAGE";
case vk_STOCK_GOLD_BROKE_MESSAGE: return "STOCK_GOLD_BROKE_MESSAGE";
case vk_STOCK_GOLD_ONE_MISERABLE_MESSAGE: return "STOCK_GOLD_ONE_MISERABLE_MESSAGE";
case vk_STOCK_GOLD_PREFIX_MESSAGE: return "STOCK_GOLD_PREFIX_MESSAGE";
case vk_STOCK_GOLD_SUFFIX_MESSAGE: return "STOCK_GOLD_SUFFIX_MESSAGE";
case vk_MSG_YOU_FEIGN_DEATH: return "MSG_YOU_FEIGN_DEATH";
case vk_MSG_YOU_FAIL_FEIGN_DEATH: return "MSG_YOU_FAIL_FEIGN_DEATH";
case vk_ADVANCE_LEVEL_CONGRATS: return "ADVANCE_LEVEL_CONGRATS";
case vk_CHARGEN_TRIADS_FORMAT: return "CHARGEN_TRIADS_FORMAT";
case vk_ADVANCE_LEVEL_MESSAGE: return "ADVANCE_LEVEL_MESSAGE";
case vk_ADVANCE_MULTIPLE_LEVELS_MESSAGE: return "ADVANCE_MULTIPLE_LEVELS_MESSAGE";
case vk_ARMOR_LOCKER_QUOTA: return "ARMOR_LOCKER_QUOTA";
case vk_WEAPON_LOCKER_QUOTA: return "WEAPON_LOCKER_QUOTA";
case vk_RADIO_INITIAL_RESPONSE_TICKS: return "RADIO_INITIAL_RESPONSE_TICKS";
case vk_SNIPER_TRACKING_SHOT_MAX_COUNT: return "SNIPER_TRACKING_SHOT_MAX_COUNT";
case vk_LUCKY_DISORIENTED_VISION_CHANCE: return "LUCKY_DISORIENTED_VISION_CHANCE";
case vk_TERRIBLE_SKILL_CHANCE_OF_SUCCESS: return "TERRIBLE_SKILL_CHANCE_OF_SUCCESS";
case vk_AWFUL_SKILL_CHANCE_OF_SUCCESS: return "AWFUL_SKILL_CHANCE_OF_SUCCESS";
case vk_OKAY_SKILL_CHANCE_OF_SUCCESS: return "OKAY_SKILL_CHANCE_OF_SUCCESS";
case vk_LEARNED_SKILL_CHANCE_OF_SUCCESS: return "LEARNED_SKILL_CHANCE_OF_SUCCESS";
case vk_MASTERED_SKILL_CHANCE_OF_SUCCESS: return "MASTERED_SKILL_CHANCE_OF_SUCCESS";
case vk_ELITE_SKILL_CHANCE_OF_SUCCESS: return "ELITE_SKILL_CHANCE_OF_SUCCESS";
case vk_PERCENT_CHANCE_DISSIPATED_DETECTED_BY_THERMALS: return "PERCENT_CHANCE_DISSIPATED_DETECTED_BY_THERMALS";
case vk_ENGINEER_REPLENISH_PULSE: return "ENGINEER_REPLENISH_PULSE";
case vk_ENGINEER_SENSOR_GRENADE_MAX_COUNT: return "ENGINEER_SENSOR_GRENADE_MAX_COUNT";
case vk_ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT: return "ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT";
case vk_SNIPER_REPLENISH_PULSE: return "SNIPER_REPLENISH_PULSE";
case vk_SNIPER_CLAYMORE_MAX_COUNT: return "SNIPER_CLAYMORE_MAX_COUNT";
case vk_GHOST_REPLENISH_PULSE: return "GHOST_REPLENISH_PULSE";
case vk_GHOST_DISSIPATE_CHARGE_MAX_COUNT: return "GHOST_DISSIPATE_CHARGE_MAX_COUNT";
case vk_PYREXIA_REPLENISH_PULSE: return "PYREXIA_REPLENISH_PULSE";
case vk_FORGE_REPLENISH_PULSE: return "FORGE_REPLENISH_PULSE";
case vk_SYNDROME_REPLENISH_PULSE: return "SYNDROME_REPLENISH_PULSE";
case vk_GHOST_CLAYMORE_MAX_COUNT: return "GHOST_CLAYMORE_MAX_COUNT";
case vk_CAMERA_INSTALLATION_TICS: return "CAMERA_INSTALLATION_TICS";
case vk_CLAYMORE_INSTALLATION_TICS: return "CLAYMORE_INSTALLATION_TICS";
case vk_PYREXIA_FIRE_NADE_CHARGES_DEFAULT: return "PYREXIA_FIRE_NADE_CHARGES_DEFAULT";
case vk_PYREXIA_FIRE_NADE_CHARGES_INITIATE: return "PYREXIA_FIRE_NADE_CHARGES_INITIATE";
case vk_PYREXIA_FIRE_NADE_CHARGES_FAMILIAR: return "PYREXIA_FIRE_NADE_CHARGES_FAMILIAR";
case vk_PYREXIA_FIRE_NADE_CHARGES_MASTER: return "PYREXIA_FIRE_NADE_CHARGES_MASTER";
case vk_SINGLE_SHOT_SHOTGUN: return "SINGLE_SHOT_SHOTGUN";
case vk_SINGLE_SHOT_ASSAULT_RIFLE: return "SINGLE_SHOT_ASSAULT_RIFLE";
case vk_SINGLE_SHOT_SUB_MACHINE_GUN: return "SINGLE_SHOT_SUB_MACHINE_GUN";
case vk_SINGLE_SHOT_SNIPER: return "SINGLE_SHOT_SNIPER";
case vk_SINGLE_SHOT_HANDGUN: return "SINGLE_SHOT_HANDGUN";
case vk_SINGLE_SHOT_PISTOL: return "SINGLE_SHOT_PISTOL";
case vk_SINGLE_SHOT_MACHINE_PISTOL: return "SINGLE_SHOT_MACHINE_PISTOL";
case vk_SINGLE_SHOT_LIGHT_MACHINE_GUN: return "SINGLE_SHOT_LIGHT_MACHINE_GUN";
case vk_SPRAY_SHOT_SHOTGUN: return "SPRAY_SHOT_SHOTGUN";
case vk_SPRAY_SHOT_ASSAULT_RIFLE: return "SPRAY_SHOT_ASSAULT_RIFLE";
case vk_SPRAY_SHOT_SUB_MACHINE_GUN: return "SPRAY_SHOT_SUB_MACHINE_GUN";
case vk_SPRAY_SHOT_SNIPER: return "SPRAY_SHOT_SNIPER";
case vk_SPRAY_SHOT_HANDGUN: return "SPRAY_SHOT_HANDGUN";
case vk_SPRAY_SHOT_PISTOL: return "SPRAY_SHOT_PISTOL";
case vk_SPRAY_SHOT_MACHINE_PISTOL: return "SPRAY_SHOT_MACHINE_PISTOL";
case vk_SPRAY_SHOT_LIGHT_MACHINE_GUN: return "SPRAY_SHOT_LIGHT_MACHINE_GUN";
case vk_SPRAY_CHANCE: return "SPRAY_CHANCE";
case vk_SPRAY_HEADSHOT_CHANCE: return "SPRAY_HEADSHOT_CHANCE";
case vk_SPRAY_CRITICAL_CHANCE: return "SPRAY_CRITICAL_CHANCE";
case vk_SPRAY_CRITICAL_REDUCTION_DIVISOR: return "SPRAY_CRITICAL_REDUCTION_DIVISOR";
case vk_REVIVE_TICKS: return "REVIVE_TICKS";
case vk_REVIVE_HP: return "REVIVE_HP";
case vk_INJURED_HP: return "INJURED_HP";
case vk_LOWLY_SECURITY_SCAN_DEPTH: return "LOWLY_SECURITY_SCAN_DEPTH";
case vk_MINI_GUNNER_SCAN_DEPTH: return "MINI_GUNNER_SCAN_DEPTH";
case vk_SPRAY_CHANCE_SKILL_MODIFIER: return "SPRAY_CHANCE_SKILL_MODIFIER";
case vk_HEADSHOT_SKILL_MODIFIER: return "HEADSHOT_SKILL_MODIFIER";
case vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE: return "ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE";
case vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT: return "ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT";
case vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES: return "ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES";
case vk_SHOW_UNIMPLEMENTED_SKILLS: return "SHOW_UNIMPLEMENTED_SKILLS";
case vk_GHOST_FEIGN_DEATH_INITIATE_DURATION: return "GHOST_FEIGN_DEATH_INITIATE_DURATION";
case vk_GHOST_FEIGN_DEATH_FAMILIAR_DURATION: return "GHOST_FEIGN_DEATH_FAMILIAR_DURATION";
case vk_GHOST_FEIGN_DEATH_MASTER_DURATION: return "GHOST_FEIGN_DEATH_MASTER_DURATION";
case vk_MARKSMAN_CLASS_TRIADS_MELEE: return "MARKSMAN_CLASS_TRIADS_MELEE";
case vk_GHOST_CLASS_TRIADS_MELEE: return "GHOST_CLASS_TRIADS_MELEE";
case vk_GHOST_CLASS_TRIADS_WEAPONS: return "GHOST_CLASS_TRIADS_WEAPONS";
case vk_GHOST_CLASS_TRIADS_INTEL: return "GHOST_CLASS_TRIADS_INTEL";
case vk_GHOST_CLASS_TRIADS_SPEED: return "GHOST_CLASS_TRIADS_SPEED";
case vk_GHOST_CLASS_TRIADS_ARMOR: return "GHOST_CLASS_TRIADS_ARMOR";
case vk_MARKSMAN_CLASS_TRIADS_WEAPONS: return "MARKSMAN_CLASS_TRIADS_WEAPONS";
case vk_MARKSMAN_CLASS_TRIADS_INTEL: return "MARKSMAN_CLASS_TRIADS_INTEL";
case vk_MARKSMAN_CLASS_TRIADS_SPEED: return "MARKSMAN_CLASS_TRIADS_SPEED";
case vk_MARKSMAN_CLASS_TRIADS_ARMOR: return "MARKSMAN_CLASS_TRIADS_ARMOR";
case vk_BANDIT_CLASS_TRIADS_MELEE: return "BANDIT_CLASS_TRIADS_MELEE";
case vk_BANDIT_CLASS_TRIADS_WEAPONS: return "BANDIT_CLASS_TRIADS_WEAPONS";
case vk_BANDIT_CLASS_TRIADS_INTEL: return "BANDIT_CLASS_TRIADS_INTEL";
case vk_BANDIT_CLASS_TRIADS_SPEED: return "BANDIT_CLASS_TRIADS_SPEED";
case vk_BANDIT_CLASS_TRIADS_ARMOR: return "BANDIT_CLASS_TRIADS_ARMOR";
case vk_BUTCHER_CLASS_TRIADS_MELEE: return "BUTCHER_CLASS_TRIADS_MELEE";
case vk_BUTCHER_CLASS_TRIADS_WEAPONS: return "BUTCHER_CLASS_TRIADS_WEAPONS";
case vk_BUTCHER_CLASS_TRIADS_INTEL: return "BUTCHER_CLASS_TRIADS_INTEL";
case vk_BUTCHER_CLASS_TRIADS_SPEED: return "BUTCHER_CLASS_TRIADS_SPEED";
case vk_BUTCHER_CLASS_TRIADS_ARMOR: return "BUTCHER_CLASS_TRIADS_ARMOR";
case vk_STRIKER_CLASS_TRIADS_MELEE: return "STRIKER_CLASS_TRIADS_MELEE";
case vk_STRIKER_CLASS_TRIADS_WEAPONS: return "STRIKER_CLASS_TRIADS_WEAPONS";
case vk_STRIKER_CLASS_TRIADS_INTEL: return "STRIKER_CLASS_TRIADS_INTEL";
case vk_STRIKER_CLASS_TRIADS_SPEED: return "STRIKER_CLASS_TRIADS_SPEED";
case vk_STRIKER_CLASS_TRIADS_ARMOR: return "STRIKER_CLASS_TRIADS_ARMOR";
case vk_OBSTRUCTOR_CLASS_TRIADS_MELEE: return "OBSTRUCTOR_CLASS_TRIADS_MELEE";
case vk_OBSTRUCTOR_CLASS_TRIADS_WEAPONS: return "OBSTRUCTOR_CLASS_TRIADS_WEAPONS";
case vk_OBSTRUCTOR_CLASS_TRIADS_INTEL: return "OBSTRUCTOR_CLASS_TRIADS_INTEL";
case vk_OBSTRUCTOR_CLASS_TRIADS_SPEED: return "OBSTRUCTOR_CLASS_TRIADS_SPEED";
case vk_OBSTRUCTOR_CLASS_TRIADS_ARMOR: return "OBSTRUCTOR_CLASS_TRIADS_ARMOR";
case vk_MALADY_CLASS_TRIADS_MELEE: return "MALADY_CLASS_TRIADS_MELEE";
case vk_MALADY_CLASS_TRIADS_WEAPONS: return "MALADY_CLASS_TRIADS_WEAPONS";
case vk_MALADY_CLASS_TRIADS_INTEL: return "MALADY_CLASS_TRIADS_INTEL";
case vk_MALADY_CLASS_TRIADS_SPEED: return "MALADY_CLASS_TRIADS_SPEED";
case vk_MALADY_CLASS_TRIADS_ARMOR: return "MALADY_CLASS_TRIADS_ARMOR";
case vk_PYREXIA_CLASS_TRIADS_MELEE: return "PYREXIA_CLASS_TRIADS_MELEE";
case vk_PYREXIA_CLASS_TRIADS_WEAPONS: return "PYREXIA_CLASS_TRIADS_WEAPONS";
case vk_PYREXIA_CLASS_TRIADS_INTEL: return "PYREXIA_CLASS_TRIADS_INTEL";
case vk_PYREXIA_CLASS_TRIADS_SPEED: return "PYREXIA_CLASS_TRIADS_SPEED";
case vk_PYREXIA_CLASS_TRIADS_ARMOR: return "PYREXIA_CLASS_TRIADS_ARMOR";
case vk_DEALER_CLASS_TRIADS_MELEE: return "DEALER_CLASS_TRIADS_MELEE";
case vk_DEALER_CLASS_TRIADS_WEAPONS: return "DEALER_CLASS_TRIADS_WEAPONS";
case vk_DEALER_CLASS_TRIADS_INTEL: return "DEALER_CLASS_TRIADS_INTEL";
case vk_DEALER_CLASS_TRIADS_SPEED: return "DEALER_CLASS_TRIADS_SPEED";
case vk_DEALER_CLASS_TRIADS_ARMOR: return "DEALER_CLASS_TRIADS_ARMOR";
case vk_FORGE_CLASS_TRIADS_MELEE: return "FORGE_CLASS_TRIADS_MELEE";
case vk_FORGE_CLASS_TRIADS_WEAPONS: return "FORGE_CLASS_TRIADS_WEAPONS";
case vk_FORGE_CLASS_TRIADS_INTEL: return "FORGE_CLASS_TRIADS_INTEL";
case vk_FORGE_CLASS_TRIADS_SPEED: return "FORGE_CLASS_TRIADS_SPEED";
case vk_FORGE_CLASS_TRIADS_ARMOR: return "FORGE_CLASS_TRIADS_ARMOR";
case vk_SYNDROME_CLASS_TRIADS_MELEE: return "SYNDROME_CLASS_TRIADS_MELEE";
case vk_SYNDROME_CLASS_TRIADS_WEAPONS: return "SYNDROME_CLASS_TRIADS_WEAPONS";
case vk_SYNDROME_CLASS_TRIADS_INTEL: return "SYNDROME_CLASS_TRIADS_INTEL";
case vk_SYNDROME_CLASS_TRIADS_SPEED: return "SYNDROME_CLASS_TRIADS_SPEED";
case vk_SYNDROME_CLASS_TRIADS_ARMOR: return "SYNDROME_CLASS_TRIADS_ARMOR";
case vk_MACHINIST_CLASS_TRIADS_MELEE: return "MACHINIST_CLASS_TRIADS_MELEE";
case vk_MACHINIST_CLASS_TRIADS_WEAPONS: return "MACHINIST_CLASS_TRIADS_WEAPONS";
case vk_MACHINIST_CLASS_TRIADS_INTEL: return "MACHINIST_CLASS_TRIADS_INTEL";
case vk_MACHINIST_CLASS_TRIADS_SPEED: return "MACHINIST_CLASS_TRIADS_SPEED";
case vk_MACHINIST_CLASS_TRIADS_ARMOR: return "MACHINIST_CLASS_TRIADS_ARMOR";
case vk_REGENERATED_AMMO_LOW: return "REGENERATED_AMMO_LOW";
case vk_REGENERATED_AMMO_HIGH: return "REGENERATED_AMMO_HIGH";
case vk_RELOAD_TICKS_SHOTGUN: return "RELOAD_TICKS_SHOTGUN";
case vk_RELOAD_TICKS_ASSAULT_RIFLE: return "RELOAD_TICKS_ASSAULT_RIFLE";
case vk_RELOAD_TICKS_SUB_MACHINE_GUN: return "RELOAD_TICKS_SUB_MACHINE_GUN";
case vk_RELOAD_TICKS_SNIPER: return "RELOAD_TICKS_SNIPER";
case vk_RELOAD_TICKS_HANDGUN: return "RELOAD_TICKS_HANDGUN";
case vk_RELOAD_TICKS_PISTOL: return "RELOAD_TICKS_PISTOL";
case vk_RELOAD_TICKS_MACHINE_PISTOL: return "RELOAD_TICKS_MACHINE_PISTOL";
case vk_RELOAD_TICKS_LIGHT_MACHINE_GUN: return "RELOAD_TICKS_LIGHT_MACHINE_GUN";
case vk_DEFAULT_DISORIENT_TICKS_FROM_RIFLE_ATTACK: return "DEFAULT_DISORIENT_TICKS_FROM_RIFLE_ATTACK";
case vk_AMMO_LOCKER_QUOTA: return "AMMO_LOCKER_QUOTA";
case vk_BREACHER_REPLENISH_CALL_COUNT: return "BREACHER_REPLENISH_CALL_COUNT";
case vk_GHOST_DISSIPATE_TICKS_DURATION: return "GHOST_DISSIPATE_TICKS_DURATION";
case vk_SNIPER_XRAY_SHOT_MAX_COUNT: return "SNIPER_XRAY_SHOT_MAX_COUNT";
			}//end giant switch
			return std::to_string(k);
		}
		value_key_t  to_vk_from_string(std::string s){

if(!s.compare("ALLOW_MOCK_LEVELS")){ return vk_ALLOW_MOCK_LEVELS;}
if(!s.compare("FIRE_DAMAGE_TICK_RESOLUTION")){ return vk_FIRE_DAMAGE_TICK_RESOLUTION;}
if(!s.compare("FLASHBANG_COOLDOWN_TICKS")){ return vk_FLASHBANG_COOLDOWN_TICKS;}
if(!s.compare("FIRE_EVERY_N_TICKS")){ return vk_FIRE_EVERY_N_TICKS;}
if(!s.compare("FIRE_WOODEN_ADDITIONAL_TICKS")){ return vk_FIRE_WOODEN_ADDITIONAL_TICKS;}
if(!s.compare("FIRE_CARPET_ADDITIONAL_TICKS")){ return vk_FIRE_CARPET_ADDITIONAL_TICKS;}
if(!s.compare("DAMAGE_DIVISOR")){ return vk_DAMAGE_DIVISOR;}
if(!s.compare("FRAG_GRENADE_TICKS")){ return vk_FRAG_GRENADE_TICKS;}
if(!s.compare("EMP_GRENADE_TICKS")){ return vk_EMP_GRENADE_TICKS;}
if(!s.compare("SENSOR_GRENADE_TICKS")){ return vk_SENSOR_GRENADE_TICKS;}
if(!s.compare("FLASHBANG_GRENADE_TICKS")){ return vk_FLASHBANG_GRENADE_TICKS;}
if(!s.compare("SMOKE_GRENADE_TICKS")){ return vk_SMOKE_GRENADE_TICKS;}
if(!s.compare("INCENDIARY_GRENADE_TICKS")){ return vk_INCENDIARY_GRENADE_TICKS;}
if(!s.compare("FIRE_STATUS_KINDLING_DAMAGE")){ return vk_FIRE_STATUS_KINDLING_DAMAGE;}
if(!s.compare("FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE")){ return vk_FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE;}
if(!s.compare("FIRE_STATUS_SMOLDERING_DAMAGE")){ return vk_FIRE_STATUS_SMOLDERING_DAMAGE;}
if(!s.compare("FIRE_STATUS_SMOKING_DAMAGE")){ return vk_FIRE_STATUS_SMOKING_DAMAGE;}
if(!s.compare("ADVANCE_LEVEL_BONUS_HP_DICE")){ return vk_ADVANCE_LEVEL_BONUS_HP_DICE;}
if(!s.compare("ADVANCE_LEVEL_BONUS_HP_SIDES")){ return vk_ADVANCE_LEVEL_BONUS_HP_SIDES;}
if(!s.compare("ADVANCE_LEVEL_BONUS_HP_THRESHOLD")){ return vk_ADVANCE_LEVEL_BONUS_HP_THRESHOLD;}
if(!s.compare("LOWLY_SECURITY_ROAM_TICK")){ return vk_LOWLY_SECURITY_ROAM_TICK;}
if(!s.compare("LOWLY_SECURITY_RANDOM_TRIVIAL_TICK")){ return vk_LOWLY_SECURITY_RANDOM_TRIVIAL_TICK;}
if(!s.compare("BREACHER_EXPLOSIVE_SHOT_MAX_COUNT")){ return vk_BREACHER_EXPLOSIVE_SHOT_MAX_COUNT;}
if(!s.compare("SKILL_GHOST_DRONE_SCAN")){ return vk_SKILL_GHOST_DRONE_SCAN;}
if(!s.compare("SKILL_GHOST_STEALTH")){ return vk_SKILL_GHOST_STEALTH;}
if(!s.compare("SKILL_GHOST_SUMMON_EXTRACTION")){ return vk_SKILL_GHOST_SUMMON_EXTRACTION;}
if(!s.compare("SKILL_GHOST_XRAY_SHOT")){ return vk_SKILL_GHOST_XRAY_SHOT;}
if(!s.compare("SKILL_GHOST_FEIGN_DEATH")){ return vk_SKILL_GHOST_FEIGN_DEATH;}
if(!s.compare("SKILL_GHOST_PLANT_CLAYMORE")){ return vk_SKILL_GHOST_PLANT_CLAYMORE;}
if(!s.compare("SKILL_GHOST_PENETRATING_SHOT")){ return vk_SKILL_GHOST_PENETRATING_SHOT;}
if(!s.compare("SKILL_GHOST_INTIMIDATION")){ return vk_SKILL_GHOST_INTIMIDATION;}
if(!s.compare("SKILL_GHOST_CRYOGENIC_GRENADE")){ return vk_SKILL_GHOST_CRYOGENIC_GRENADE;}
if(!s.compare("SKILL_GHOST_FLASH_UNDERBARREL")){ return vk_SKILL_GHOST_FLASH_UNDERBARREL;}
if(!s.compare("SKILL_SNIPER_TRACKING_SHOT")){ return vk_SKILL_SNIPER_TRACKING_SHOT;}
if(!s.compare("SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN")){ return vk_SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN;}
if(!s.compare("SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER")){ return vk_SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER;}
if(!s.compare("SKILL_SNIPER_GUIDED_MISSILE")){ return vk_SKILL_SNIPER_GUIDED_MISSILE;}
if(!s.compare("SKILL_SNIPER_TARGET_LIMB")){ return vk_SKILL_SNIPER_TARGET_LIMB;}
if(!s.compare("SKILL_SNIPER_PLANT_CLAYMORE")){ return vk_SKILL_SNIPER_PLANT_CLAYMORE;}
if(!s.compare("SKILL_SNIPER_XRAY_SHOT")){ return vk_SKILL_SNIPER_XRAY_SHOT;}
if(!s.compare("SKILL_SNIPER_SUMMON_AREA_SCAN")){ return vk_SKILL_SNIPER_SUMMON_AREA_SCAN;}
if(!s.compare("SKILL_GRENADE_USAGE")){ return vk_SKILL_GRENADE_USAGE;}
if(!s.compare("SKILL_CLAYMORE_USAGE")){ return vk_SKILL_CLAYMORE_USAGE;}
if(!s.compare("SKILL_BREACH_USAGE")){ return vk_SKILL_BREACH_USAGE;}
if(!s.compare("WSL_SHOTGUN_0_ALLOWABLE")){ return vk_WSL_SHOTGUN_0_ALLOWABLE;}
if(!s.compare("WSL_SHOTGUN_0_ACCURACY")){ return vk_WSL_SHOTGUN_0_ACCURACY;}
if(!s.compare("WSL_SHOTGUN_0_DAMAGE")){ return vk_WSL_SHOTGUN_0_DAMAGE;}
if(!s.compare("WSL_SHOTGUN_1_ALLOWABLE")){ return vk_WSL_SHOTGUN_1_ALLOWABLE;}
if(!s.compare("WSL_SHOTGUN_1_ACCURACY")){ return vk_WSL_SHOTGUN_1_ACCURACY;}
if(!s.compare("WSL_SHOTGUN_1_DAMAGE")){ return vk_WSL_SHOTGUN_1_DAMAGE;}
if(!s.compare("WSL_SHOTGUN_2_ALLOWABLE")){ return vk_WSL_SHOTGUN_2_ALLOWABLE;}
if(!s.compare("WSL_SHOTGUN_2_ACCURACY")){ return vk_WSL_SHOTGUN_2_ACCURACY;}
if(!s.compare("WSL_SHOTGUN_2_DAMAGE")){ return vk_WSL_SHOTGUN_2_DAMAGE;}
if(!s.compare("WSL_SHOTGUN_3_ALLOWABLE")){ return vk_WSL_SHOTGUN_3_ALLOWABLE;}
if(!s.compare("WSL_SHOTGUN_3_ACCURACY")){ return vk_WSL_SHOTGUN_3_ACCURACY;}
if(!s.compare("WSL_SHOTGUN_3_DAMAGE")){ return vk_WSL_SHOTGUN_3_DAMAGE;}
if(!s.compare("WSL_SHOTGUN_4_ALLOWABLE")){ return vk_WSL_SHOTGUN_4_ALLOWABLE;}
if(!s.compare("WSL_SHOTGUN_4_ACCURACY")){ return vk_WSL_SHOTGUN_4_ACCURACY;}
if(!s.compare("WSL_SHOTGUN_4_DAMAGE")){ return vk_WSL_SHOTGUN_4_DAMAGE;}
if(!s.compare("WSL_AR_0_ALLOWABLE")){ return vk_WSL_AR_0_ALLOWABLE;}
if(!s.compare("WSL_AR_0_ACCURACY")){ return vk_WSL_AR_0_ACCURACY;}
if(!s.compare("WSL_AR_0_DAMAGE")){ return vk_WSL_AR_0_DAMAGE;}
if(!s.compare("WSL_AR_1_ALLOWABLE")){ return vk_WSL_AR_1_ALLOWABLE;}
if(!s.compare("WSL_AR_1_ACCURACY")){ return vk_WSL_AR_1_ACCURACY;}
if(!s.compare("WSL_AR_1_DAMAGE")){ return vk_WSL_AR_1_DAMAGE;}
if(!s.compare("WSL_AR_2_ALLOWABLE")){ return vk_WSL_AR_2_ALLOWABLE;}
if(!s.compare("WSL_AR_2_ACCURACY")){ return vk_WSL_AR_2_ACCURACY;}
if(!s.compare("WSL_AR_2_DAMAGE")){ return vk_WSL_AR_2_DAMAGE;}
if(!s.compare("WSL_AR_3_ALLOWABLE")){ return vk_WSL_AR_3_ALLOWABLE;}
if(!s.compare("WSL_AR_3_ACCURACY")){ return vk_WSL_AR_3_ACCURACY;}
if(!s.compare("WSL_AR_3_DAMAGE")){ return vk_WSL_AR_3_DAMAGE;}
if(!s.compare("WSL_AR_4_ALLOWABLE")){ return vk_WSL_AR_4_ALLOWABLE;}
if(!s.compare("WSL_AR_4_ACCURACY")){ return vk_WSL_AR_4_ACCURACY;}
if(!s.compare("WSL_AR_4_DAMAGE")){ return vk_WSL_AR_4_DAMAGE;}
if(!s.compare("WSL_SMG_0_ALLOWABLE")){ return vk_WSL_SMG_0_ALLOWABLE;}
if(!s.compare("WSL_SMG_0_ACCURACY")){ return vk_WSL_SMG_0_ACCURACY;}
if(!s.compare("WSL_SMG_0_DAMAGE")){ return vk_WSL_SMG_0_DAMAGE;}
if(!s.compare("WSL_SMG_1_ALLOWABLE")){ return vk_WSL_SMG_1_ALLOWABLE;}
if(!s.compare("WSL_SMG_1_ACCURACY")){ return vk_WSL_SMG_1_ACCURACY;}
if(!s.compare("WSL_SMG_1_DAMAGE")){ return vk_WSL_SMG_1_DAMAGE;}
if(!s.compare("WSL_SMG_2_ALLOWABLE")){ return vk_WSL_SMG_2_ALLOWABLE;}
if(!s.compare("WSL_SMG_2_ACCURACY")){ return vk_WSL_SMG_2_ACCURACY;}
if(!s.compare("WSL_SMG_2_DAMAGE")){ return vk_WSL_SMG_2_DAMAGE;}
if(!s.compare("WSL_SMG_3_ALLOWABLE")){ return vk_WSL_SMG_3_ALLOWABLE;}
if(!s.compare("WSL_SMG_3_ACCURACY")){ return vk_WSL_SMG_3_ACCURACY;}
if(!s.compare("WSL_SMG_3_DAMAGE")){ return vk_WSL_SMG_3_DAMAGE;}
if(!s.compare("WSL_SMG_4_ALLOWABLE")){ return vk_WSL_SMG_4_ALLOWABLE;}
if(!s.compare("WSL_SMG_4_ACCURACY")){ return vk_WSL_SMG_4_ACCURACY;}
if(!s.compare("WSL_SMG_4_DAMAGE")){ return vk_WSL_SMG_4_DAMAGE;}
if(!s.compare("WSL_MACHINE_PISTOL_0_ALLOWABLE")){ return vk_WSL_MACHINE_PISTOL_0_ALLOWABLE;}
if(!s.compare("WSL_MACHINE_PISTOL_0_ACCURACY")){ return vk_WSL_MACHINE_PISTOL_0_ACCURACY;}
if(!s.compare("WSL_MACHINE_PISTOL_0_DAMAGE")){ return vk_WSL_MACHINE_PISTOL_0_DAMAGE;}
if(!s.compare("WSL_MACHINE_PISTOL_1_ALLOWABLE")){ return vk_WSL_MACHINE_PISTOL_1_ALLOWABLE;}
if(!s.compare("WSL_MACHINE_PISTOL_1_ACCURACY")){ return vk_WSL_MACHINE_PISTOL_1_ACCURACY;}
if(!s.compare("WSL_MACHINE_PISTOL_1_DAMAGE")){ return vk_WSL_MACHINE_PISTOL_1_DAMAGE;}
if(!s.compare("WSL_MACHINE_PISTOL_2_ALLOWABLE")){ return vk_WSL_MACHINE_PISTOL_2_ALLOWABLE;}
if(!s.compare("WSL_MACHINE_PISTOL_2_ACCURACY")){ return vk_WSL_MACHINE_PISTOL_2_ACCURACY;}
if(!s.compare("WSL_MACHINE_PISTOL_2_DAMAGE")){ return vk_WSL_MACHINE_PISTOL_2_DAMAGE;}
if(!s.compare("WSL_MACHINE_PISTOL_3_ALLOWABLE")){ return vk_WSL_MACHINE_PISTOL_3_ALLOWABLE;}
if(!s.compare("WSL_MACHINE_PISTOL_3_ACCURACY")){ return vk_WSL_MACHINE_PISTOL_3_ACCURACY;}
if(!s.compare("WSL_MACHINE_PISTOL_3_DAMAGE")){ return vk_WSL_MACHINE_PISTOL_3_DAMAGE;}
if(!s.compare("WSL_MACHINE_PISTOL_4_ALLOWABLE")){ return vk_WSL_MACHINE_PISTOL_4_ALLOWABLE;}
if(!s.compare("WSL_MACHINE_PISTOL_4_ACCURACY")){ return vk_WSL_MACHINE_PISTOL_4_ACCURACY;}
if(!s.compare("WSL_MACHINE_PISTOL_4_DAMAGE")){ return vk_WSL_MACHINE_PISTOL_4_DAMAGE;}
if(!s.compare("HEADSHOT_DIVISOR")){ return vk_HEADSHOT_DIVISOR;}
if(!s.compare("WSL_HANDGUN_0_ALLOWABLE")){ return vk_WSL_HANDGUN_0_ALLOWABLE;}
if(!s.compare("WSL_HANDGUN_0_ACCURACY")){ return vk_WSL_HANDGUN_0_ACCURACY;}
if(!s.compare("WSL_HANDGUN_0_DAMAGE")){ return vk_WSL_HANDGUN_0_DAMAGE;}
if(!s.compare("WSL_HANDGUN_1_ALLOWABLE")){ return vk_WSL_HANDGUN_1_ALLOWABLE;}
if(!s.compare("WSL_HANDGUN_1_ACCURACY")){ return vk_WSL_HANDGUN_1_ACCURACY;}
if(!s.compare("WSL_HANDGUN_1_DAMAGE")){ return vk_WSL_HANDGUN_1_DAMAGE;}
if(!s.compare("WSL_HANDGUN_2_ALLOWABLE")){ return vk_WSL_HANDGUN_2_ALLOWABLE;}
if(!s.compare("WSL_HANDGUN_2_ACCURACY")){ return vk_WSL_HANDGUN_2_ACCURACY;}
if(!s.compare("WSL_HANDGUN_2_DAMAGE")){ return vk_WSL_HANDGUN_2_DAMAGE;}
if(!s.compare("WSL_HANDGUN_3_ALLOWABLE")){ return vk_WSL_HANDGUN_3_ALLOWABLE;}
if(!s.compare("WSL_HANDGUN_3_ACCURACY")){ return vk_WSL_HANDGUN_3_ACCURACY;}
if(!s.compare("WSL_HANDGUN_3_DAMAGE")){ return vk_WSL_HANDGUN_3_DAMAGE;}
if(!s.compare("WSL_HANDGUN_4_ALLOWABLE")){ return vk_WSL_HANDGUN_4_ALLOWABLE;}
if(!s.compare("WSL_HANDGUN_4_ACCURACY")){ return vk_WSL_HANDGUN_4_ACCURACY;}
if(!s.compare("WSL_HANDGUN_4_DAMAGE")){ return vk_WSL_HANDGUN_4_DAMAGE;}
if(!s.compare("WSL_LMG_0_ALLOWABLE")){ return vk_WSL_LMG_0_ALLOWABLE;}
if(!s.compare("WSL_LMG_0_ACCURACY")){ return vk_WSL_LMG_0_ACCURACY;}
if(!s.compare("WSL_LMG_0_DAMAGE")){ return vk_WSL_LMG_0_DAMAGE;}
if(!s.compare("WSL_LMG_1_ALLOWABLE")){ return vk_WSL_LMG_1_ALLOWABLE;}
if(!s.compare("WSL_LMG_1_ACCURACY")){ return vk_WSL_LMG_1_ACCURACY;}
if(!s.compare("WSL_LMG_1_DAMAGE")){ return vk_WSL_LMG_1_DAMAGE;}
if(!s.compare("WSL_LMG_2_ALLOWABLE")){ return vk_WSL_LMG_2_ALLOWABLE;}
if(!s.compare("WSL_LMG_2_ACCURACY")){ return vk_WSL_LMG_2_ACCURACY;}
if(!s.compare("WSL_LMG_2_DAMAGE")){ return vk_WSL_LMG_2_DAMAGE;}
if(!s.compare("WSL_LMG_3_ALLOWABLE")){ return vk_WSL_LMG_3_ALLOWABLE;}
if(!s.compare("WSL_LMG_3_ACCURACY")){ return vk_WSL_LMG_3_ACCURACY;}
if(!s.compare("WSL_LMG_3_DAMAGE")){ return vk_WSL_LMG_3_DAMAGE;}
if(!s.compare("WSL_LMG_4_ALLOWABLE")){ return vk_WSL_LMG_4_ALLOWABLE;}
if(!s.compare("WSL_LMG_4_ACCURACY")){ return vk_WSL_LMG_4_ACCURACY;}
if(!s.compare("WSL_LMG_4_DAMAGE")){ return vk_WSL_LMG_4_DAMAGE;}
if(!s.compare("WSL_SNIPER_0_ALLOWABLE")){ return vk_WSL_SNIPER_0_ALLOWABLE;}
if(!s.compare("WSL_SNIPER_0_ACCURACY")){ return vk_WSL_SNIPER_0_ACCURACY;}
if(!s.compare("WSL_SNIPER_0_DAMAGE")){ return vk_WSL_SNIPER_0_DAMAGE;}
if(!s.compare("WSL_SNIPER_1_ALLOWABLE")){ return vk_WSL_SNIPER_1_ALLOWABLE;}
if(!s.compare("WSL_SNIPER_1_ACCURACY")){ return vk_WSL_SNIPER_1_ACCURACY;}
if(!s.compare("WSL_SNIPER_1_DAMAGE")){ return vk_WSL_SNIPER_1_DAMAGE;}
if(!s.compare("WSL_SNIPER_2_ALLOWABLE")){ return vk_WSL_SNIPER_2_ALLOWABLE;}
if(!s.compare("WSL_SNIPER_2_ACCURACY")){ return vk_WSL_SNIPER_2_ACCURACY;}
if(!s.compare("WSL_SNIPER_2_DAMAGE")){ return vk_WSL_SNIPER_2_DAMAGE;}
if(!s.compare("WSL_SNIPER_3_ALLOWABLE")){ return vk_WSL_SNIPER_3_ALLOWABLE;}
if(!s.compare("WSL_SNIPER_3_ACCURACY")){ return vk_WSL_SNIPER_3_ACCURACY;}
if(!s.compare("WSL_SNIPER_3_DAMAGE")){ return vk_WSL_SNIPER_3_DAMAGE;}
if(!s.compare("WSL_SNIPER_4_ALLOWABLE")){ return vk_WSL_SNIPER_4_ALLOWABLE;}
if(!s.compare("WSL_SNIPER_4_ACCURACY")){ return vk_WSL_SNIPER_4_ACCURACY;}
if(!s.compare("WSL_SNIPER_4_DAMAGE")){ return vk_WSL_SNIPER_4_DAMAGE;}
if(!s.compare("SKILL_CAMERA_PLACEMENT")){ return vk_SKILL_CAMERA_PLACEMENT;}
if(!s.compare("SKILL_DETECT_CAMERAS")){ return vk_SKILL_DETECT_CAMERAS;}
if(!s.compare("SKILL_CAMERA_DESTRUCTION")){ return vk_SKILL_CAMERA_DESTRUCTION;}
if(!s.compare("SKILL_ELECTRIFIED_DAMAGE")){ return vk_SKILL_ELECTRIFIED_DAMAGE;}
if(!s.compare("SKILL_PROTECT_FROM_EMP")){ return vk_SKILL_PROTECT_FROM_EMP;}
if(!s.compare("SKILL_CREATE_EMP_WEAPONS")){ return vk_SKILL_CREATE_EMP_WEAPONS;}
if(!s.compare("SKILL_COUNTER_SHOCK")){ return vk_SKILL_COUNTER_SHOCK;}
if(!s.compare("SKILL_TOGGLE_THERMAL")){ return vk_SKILL_TOGGLE_THERMAL;}
if(!s.compare("SKILL_TOGGLE_NIGHT_VISION")){ return vk_SKILL_TOGGLE_NIGHT_VISION;}
if(!s.compare("SKILL_HEADGEAR_INTROSPECTION")){ return vk_SKILL_HEADGEAR_INTROSPECTION;}
if(!s.compare("SKILL_PROXIMITY_ALARM")){ return vk_SKILL_PROXIMITY_ALARM;}
if(!s.compare("SKILL_DEPLOYABLE_TURRET")){ return vk_SKILL_DEPLOYABLE_TURRET;}
if(!s.compare("SKILL_DEPLOYABLE_FIRE_TURRET")){ return vk_SKILL_DEPLOYABLE_FIRE_TURRET;}
if(!s.compare("SKILL_DOOR_CAMERA")){ return vk_SKILL_DOOR_CAMERA;}
if(!s.compare("SKILL_BASIC_ARMOR")){ return vk_SKILL_BASIC_ARMOR;}
if(!s.compare("SKILL_ADVANCED_ARMOR")){ return vk_SKILL_ADVANCED_ARMOR;}
if(!s.compare("SKILL_ELITE_ARMOR")){ return vk_SKILL_ELITE_ARMOR;}
if(!s.compare("SKILL_THIEF")){ return vk_SKILL_THIEF;}
if(!s.compare("SKILL_MOLD")){ return vk_SKILL_MOLD;}
if(!s.compare("SKILL_NO_FACTOR_BASIC")){ return vk_SKILL_NO_FACTOR_BASIC;}
if(!s.compare("SKILL_NO_FACTOR_ADVANCED")){ return vk_SKILL_NO_FACTOR_ADVANCED;}
if(!s.compare("SKILL_NO_FACTOR_ELITE")){ return vk_SKILL_NO_FACTOR_ELITE;}
if(!s.compare("SKILL_EXPLOSIVE_RESISTANCE")){ return vk_SKILL_EXPLOSIVE_RESISTANCE;}
if(!s.compare("SKILL_INJURE_RESISTANCE")){ return vk_SKILL_INJURE_RESISTANCE;}
if(!s.compare("SKILL_MUNITIONS_REFLECTOR")){ return vk_SKILL_MUNITIONS_REFLECTOR;}
if(!s.compare("SKILL_SENTINEL_DISCIPLINE")){ return vk_SKILL_SENTINEL_DISCIPLINE;}
if(!s.compare("SKILL_DEPLOYABLE_SHIELD")){ return vk_SKILL_DEPLOYABLE_SHIELD;}
if(!s.compare("SKILL_SPRAY_CHANCE")){ return vk_SKILL_SPRAY_CHANCE;}
if(!s.compare("SKILL_HEADSHOT_CHANCE")){ return vk_SKILL_HEADSHOT_CHANCE;}
if(!s.compare("SKILL_LIMB_CHANCE")){ return vk_SKILL_LIMB_CHANCE;}
if(!s.compare("SKILL_BETTER_SNIPING_ACCURACY")){ return vk_SKILL_BETTER_SNIPING_ACCURACY;}
if(!s.compare("SKILL_TARGET_LIMB")){ return vk_SKILL_TARGET_LIMB;}
if(!s.compare("SKILL_ACCURACY")){ return vk_SKILL_ACCURACY;}
if(!s.compare("SKILL_VIP")){ return vk_SKILL_VIP;}
if(!s.compare("SKILL_TRACKER")){ return vk_SKILL_TRACKER;}
if(!s.compare("SKILL_QUIETER_SNIPER_SHOTS")){ return vk_SKILL_QUIETER_SNIPER_SHOTS;}
if(!s.compare("SKILL_FASTER_BREACHES")){ return vk_SKILL_FASTER_BREACHES;}
if(!s.compare("SKILL_FURTHER_C4S")){ return vk_SKILL_FURTHER_C4S;}
if(!s.compare("SKILL_STRONGER_FRAG_ARM")){ return vk_SKILL_STRONGER_FRAG_ARM;}
if(!s.compare("SKILL_BIGGER_CLAYMORES")){ return vk_SKILL_BIGGER_CLAYMORES;}
if(!s.compare("SKILL_FASTER_THERMITES")){ return vk_SKILL_FASTER_THERMITES;}
if(!s.compare("SKILL_BIGGER_FIRE_NADES")){ return vk_SKILL_BIGGER_FIRE_NADES;}
if(!s.compare("SKILL_CRAFTY_C4")){ return vk_SKILL_CRAFTY_C4;}
if(!s.compare("SKILL_BETTER_EXPLOSIONS")){ return vk_SKILL_BETTER_EXPLOSIONS;}
if(!s.compare("SKILL_RETROFIT_GRENADE_LAUNCHER")){ return vk_SKILL_RETROFIT_GRENADE_LAUNCHER;}
if(!s.compare("SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER")){ return vk_SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER;}
if(!s.compare("SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER")){ return vk_SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER;}
if(!s.compare("SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER")){ return vk_SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER;}
if(!s.compare("SKILL_RETROFIT_STUN_GRENADE_LAUNCHER")){ return vk_SKILL_RETROFIT_STUN_GRENADE_LAUNCHER;}
if(!s.compare("SKILL_STEROID_DEALER")){ return vk_SKILL_STEROID_DEALER;}
if(!s.compare("SKILL_HGH_DEALER")){ return vk_SKILL_HGH_DEALER;}
if(!s.compare("SKILL_NOXIOUS_NADE_CRAFTER")){ return vk_SKILL_NOXIOUS_NADE_CRAFTER;}
if(!s.compare("SKILL_DUTCH_OVEN")){ return vk_SKILL_DUTCH_OVEN;}
if(!s.compare("SKILL_FIRE_NADE_DEALER")){ return vk_SKILL_FIRE_NADE_DEALER;}
if(!s.compare("SKILL_PRO_WEAPON_HANDLER")){ return vk_SKILL_PRO_WEAPON_HANDLER;}
if(!s.compare("SKILL_BETTER_WEAPON_ACCURACY")){ return vk_SKILL_BETTER_WEAPON_ACCURACY;}
if(!s.compare("SKILL_FASTER_TRIGGER_FINGER")){ return vk_SKILL_FASTER_TRIGGER_FINGER;}
if(!s.compare("SKILL_FASTER_RELOADING")){ return vk_SKILL_FASTER_RELOADING;}
if(!s.compare("SKILL_BASIC_PISTOL")){ return vk_SKILL_BASIC_PISTOL;}
if(!s.compare("SKILL_BASIC_ASSAULT_RIFLE")){ return vk_SKILL_BASIC_ASSAULT_RIFLE;}
if(!s.compare("SKILL_BASIC_SHOTGUN")){ return vk_SKILL_BASIC_SHOTGUN;}
if(!s.compare("SKILL_BASIC_SNIPER_RIFLE")){ return vk_SKILL_BASIC_SNIPER_RIFLE;}
if(!s.compare("SKILL_BASIC_SUB_MACHINE_GUN")){ return vk_SKILL_BASIC_SUB_MACHINE_GUN;}
if(!s.compare("SKILL_INTERMEDIATE_PISTOL")){ return vk_SKILL_INTERMEDIATE_PISTOL;}
if(!s.compare("SKILL_INTERMEDIATE_ASSAULT_RIFLE")){ return vk_SKILL_INTERMEDIATE_ASSAULT_RIFLE;}
if(!s.compare("SKILL_INTERMEDIATE_SHOTGUN")){ return vk_SKILL_INTERMEDIATE_SHOTGUN;}
if(!s.compare("SKILL_INTERMEDIATE_SNIPER_RIFLE")){ return vk_SKILL_INTERMEDIATE_SNIPER_RIFLE;}
if(!s.compare("SKILL_INTERMEDIATE_SUB_MACHINE_GUN")){ return vk_SKILL_INTERMEDIATE_SUB_MACHINE_GUN;}
if(!s.compare("SKILL_ADVANCED_PISTOL")){ return vk_SKILL_ADVANCED_PISTOL;}
if(!s.compare("SKILL_ADVANCED_ASSAULT_RIFLE")){ return vk_SKILL_ADVANCED_ASSAULT_RIFLE;}
if(!s.compare("SKILL_ADVANCED_SHOTGUN")){ return vk_SKILL_ADVANCED_SHOTGUN;}
if(!s.compare("SKILL_ADVANCED_SNIPER_RIFLE")){ return vk_SKILL_ADVANCED_SNIPER_RIFLE;}
if(!s.compare("SKILL_ADVANCED_SUB_MACHINE_GUN")){ return vk_SKILL_ADVANCED_SUB_MACHINE_GUN;}
if(!s.compare("SKILL_EXPERT_PISTOL")){ return vk_SKILL_EXPERT_PISTOL;}
if(!s.compare("SKILL_EXPERT_ASSAULT_RIFLE")){ return vk_SKILL_EXPERT_ASSAULT_RIFLE;}
if(!s.compare("SKILL_EXPERT_SHOTGUN")){ return vk_SKILL_EXPERT_SHOTGUN;}
if(!s.compare("SKILL_EXPERT_SNIPER_RIFLE")){ return vk_SKILL_EXPERT_SNIPER_RIFLE;}
if(!s.compare("SKILL_EXPERT_SUB_MACHINE_GUN")){ return vk_SKILL_EXPERT_SUB_MACHINE_GUN;}
if(!s.compare("SKILL_ARMOR_PENETRATION_SHOT")){ return vk_SKILL_ARMOR_PENETRATION_SHOT;}
if(!s.compare("SKILL_NONSTOP_PENETRATION_SHOT")){ return vk_SKILL_NONSTOP_PENETRATION_SHOT;}
if(!s.compare("SKILL_INCREASED_INJURE_CHANCE")){ return vk_SKILL_INCREASED_INJURE_CHANCE;}
if(!s.compare("SKILL_ASSAULT_RIFLE_SHRAPNEL")){ return vk_SKILL_ASSAULT_RIFLE_SHRAPNEL;}
if(!s.compare("SKILL_ENTRY_DENIAL")){ return vk_SKILL_ENTRY_DENIAL;}
if(!s.compare("SKILL_MISDIRECTION")){ return vk_SKILL_MISDIRECTION;}
if(!s.compare("SKILL_SNIPER_SUPPORT")){ return vk_SKILL_SNIPER_SUPPORT;}
if(!s.compare("SKILL_REDUCED_DETECTION_CHANCE")){ return vk_SKILL_REDUCED_DETECTION_CHANCE;}
if(!s.compare("SKILL_INCREASED_AWARENESS")){ return vk_SKILL_INCREASED_AWARENESS;}
if(!s.compare("SKILL_TRICK_MAGAZINE")){ return vk_SKILL_TRICK_MAGAZINE;}
if(!s.compare("SKILL_CHAINABLE_BREACHING")){ return vk_SKILL_CHAINABLE_BREACHING;}
if(!s.compare("SKILL_HGH_MORE_POWERFUL")){ return vk_SKILL_HGH_MORE_POWERFUL;}
if(!s.compare("SKILL_BASIC_HP_RECOVERY")){ return vk_SKILL_BASIC_HP_RECOVERY;}
if(!s.compare("SKILL_PARASITIC_HP_RECOVERY")){ return vk_SKILL_PARASITIC_HP_RECOVERY;}
if(!s.compare("SKILL_SUTURE")){ return vk_SKILL_SUTURE;}
if(!s.compare("SKILL_ADRENALINE_BOOST")){ return vk_SKILL_ADRENALINE_BOOST;}
if(!s.compare("GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS")){ return vk_GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS;}
if(!s.compare("PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE")){ return vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE;}
if(!s.compare("PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR")){ return vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR;}
if(!s.compare("PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER")){ return vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER;}
if(!s.compare("GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT")){ return vk_GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT;}
if(!s.compare("GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT")){ return vk_GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT;}
if(!s.compare("GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT")){ return vk_GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT;}
if(!s.compare("SKILL_PYREXIA_THROW_FIRE_NADE")){ return vk_SKILL_PYREXIA_THROW_FIRE_NADE;}
if(!s.compare("SKILL_PYREXIA_DRENCH_IN_GASOLINE")){ return vk_SKILL_PYREXIA_DRENCH_IN_GASOLINE;}
if(!s.compare("SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE")){ return vk_SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE;}
if(!s.compare("SKILL_PYREXIA_CONVERT_TO_FIRE_NADE")){ return vk_SKILL_PYREXIA_CONVERT_TO_FIRE_NADE;}
if(!s.compare("SKILL_PYREXIA_ATTACH_INC_LAUNCHER")){ return vk_SKILL_PYREXIA_ATTACH_INC_LAUNCHER;}
if(!s.compare("SKILL_PYREXIA_ATTACH_FLAMETHROWER")){ return vk_SKILL_PYREXIA_ATTACH_FLAMETHROWER;}
if(!s.compare("SKILL_PYREXIA_CREATE_WALL_OF_FIRE")){ return vk_SKILL_PYREXIA_CREATE_WALL_OF_FIRE;}
if(!s.compare("SKILL_PYREXIA_SEAL_OFF_ROOM")){ return vk_SKILL_PYREXIA_SEAL_OFF_ROOM;}
if(!s.compare("SKILL_SNIPER_TRACKING_SHOT_TICKS")){ return vk_SKILL_SNIPER_TRACKING_SHOT_TICKS;}
if(!s.compare("ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER")){ return vk_ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER;}
if(!s.compare("EXPLOSIVE_CRITICAL_MULTIPLIER")){ return vk_EXPLOSIVE_CRITICAL_MULTIPLIER;}
if(!s.compare("RIFLE_CRITICAL_MULTIPLIER")){ return vk_RIFLE_CRITICAL_MULTIPLIER;}
if(!s.compare("INJURED_MAX_HP_MULTIPLIER")){ return vk_INJURED_MAX_HP_MULTIPLIER;}
if(!s.compare("MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER")){ return vk_MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER;}
if(!s.compare("CHANCE_TO_INJURE_SKILL_MODIFIER")){ return vk_CHANCE_TO_INJURE_SKILL_MODIFIER;}
if(!s.compare("INJURE_RESISTANCE_SKILL_MODIFIER")){ return vk_INJURE_RESISTANCE_SKILL_MODIFIER;}
if(!s.compare("ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER")){ return vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER;}
if(!s.compare("BONUS_STRENGTH_MULTIPLIER")){ return vk_BONUS_STRENGTH_MULTIPLIER;}
if(!s.compare("CONSTITUTION_STRENGTH_DAMPENER_MULTIPLIER")){ return vk_CONSTITUTION_STRENGTH_DAMPENER_MULTIPLIER;}
if(!s.compare("ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER")){ return vk_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER;}
if(!s.compare("TIER_ONE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER")){ return vk_TIER_ONE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER;}
if(!s.compare("TIER_TWO_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER")){ return vk_TIER_TWO_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER;}
if(!s.compare("TIER_THREE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER")){ return vk_TIER_THREE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER;}
if(!s.compare("WEAPON_COOLDOWN_MODIFIER_TIER_ONE")){ return vk_WEAPON_COOLDOWN_MODIFIER_TIER_ONE;}
if(!s.compare("WEAPON_COOLDOWN_MODIFIER_TIER_TWO")){ return vk_WEAPON_COOLDOWN_MODIFIER_TIER_TWO;}
if(!s.compare("WEAPON_COOLDOWN_MODIFIER_TIER_THREE")){ return vk_WEAPON_COOLDOWN_MODIFIER_TIER_THREE;}
if(!s.compare("TIER_ONE_CONSTITUTION_INJURY_DAMPENER")){ return vk_TIER_ONE_CONSTITUTION_INJURY_DAMPENER;}
if(!s.compare("TIER_TWO_CONSTITUTION_INJURY_DAMPENER")){ return vk_TIER_TWO_CONSTITUTION_INJURY_DAMPENER;}
if(!s.compare("TIER_THREE_CONSTITUTION_INJURY_DAMPENER")){ return vk_TIER_THREE_CONSTITUTION_INJURY_DAMPENER;}
if(!s.compare("TIER_ONE_STRENGTH_BONUS_MULTIPLIER")){ return vk_TIER_ONE_STRENGTH_BONUS_MULTIPLIER;}
if(!s.compare("TIER_TWO_STRENGTH_BONUS_MULTIPLIER")){ return vk_TIER_TWO_STRENGTH_BONUS_MULTIPLIER;}
if(!s.compare("TIER_THREE_STRENGTH_BONUS_MULTIPLIER")){ return vk_TIER_THREE_STRENGTH_BONUS_MULTIPLIER;}
if(!s.compare("TIER_ONE_CONSTITUTION_RESISTANCE_MULTIPLIER")){ return vk_TIER_ONE_CONSTITUTION_RESISTANCE_MULTIPLIER;}
if(!s.compare("TIER_TWO_CONSTITUTION_RESISTANCE_MULTIPLIER")){ return vk_TIER_TWO_CONSTITUTION_RESISTANCE_MULTIPLIER;}
if(!s.compare("TIER_THREE_CONSTITUTION_RESISTANCE_MULTIPLIER")){ return vk_TIER_THREE_CONSTITUTION_RESISTANCE_MULTIPLIER;}
if(!s.compare("RIFLE_ATTACHMENT_LEVEL_MULTIPLIER")){ return vk_RIFLE_ATTACHMENT_LEVEL_MULTIPLIER;}
if(!s.compare("LEVEL_0_BASE_DAMAGE")){ return vk_LEVEL_0_BASE_DAMAGE;}
if(!s.compare("LEVEL_1_BASE_DAMAGE")){ return vk_LEVEL_1_BASE_DAMAGE;}
if(!s.compare("LEVEL_2_BASE_DAMAGE")){ return vk_LEVEL_2_BASE_DAMAGE;}
if(!s.compare("LEVEL_3_BASE_DAMAGE")){ return vk_LEVEL_3_BASE_DAMAGE;}
if(!s.compare("LEVEL_4_BASE_DAMAGE")){ return vk_LEVEL_4_BASE_DAMAGE;}
if(!s.compare("LEVEL_5_BASE_DAMAGE")){ return vk_LEVEL_5_BASE_DAMAGE;}
if(!s.compare("LEVEL_6_BASE_DAMAGE")){ return vk_LEVEL_6_BASE_DAMAGE;}
if(!s.compare("LEVEL_7_BASE_DAMAGE")){ return vk_LEVEL_7_BASE_DAMAGE;}
if(!s.compare("LEVEL_8_BASE_DAMAGE")){ return vk_LEVEL_8_BASE_DAMAGE;}
if(!s.compare("LEVEL_9_BASE_DAMAGE")){ return vk_LEVEL_9_BASE_DAMAGE;}
if(!s.compare("LEVEL_10_BASE_DAMAGE")){ return vk_LEVEL_10_BASE_DAMAGE;}
if(!s.compare("LEVEL_11_BASE_DAMAGE")){ return vk_LEVEL_11_BASE_DAMAGE;}
if(!s.compare("LEVEL_12_BASE_DAMAGE")){ return vk_LEVEL_12_BASE_DAMAGE;}
if(!s.compare("LEVEL_13_BASE_DAMAGE")){ return vk_LEVEL_13_BASE_DAMAGE;}
if(!s.compare("LEVEL_14_BASE_DAMAGE")){ return vk_LEVEL_14_BASE_DAMAGE;}
if(!s.compare("LEVEL_15_BASE_DAMAGE")){ return vk_LEVEL_15_BASE_DAMAGE;}
if(!s.compare("LEVEL_16_BASE_DAMAGE")){ return vk_LEVEL_16_BASE_DAMAGE;}
if(!s.compare("LEVEL_17_BASE_DAMAGE")){ return vk_LEVEL_17_BASE_DAMAGE;}
if(!s.compare("LEVEL_18_BASE_DAMAGE")){ return vk_LEVEL_18_BASE_DAMAGE;}
if(!s.compare("LEVEL_19_BASE_DAMAGE")){ return vk_LEVEL_19_BASE_DAMAGE;}
if(!s.compare("LEVEL_20_BASE_DAMAGE")){ return vk_LEVEL_20_BASE_DAMAGE;}
if(!s.compare("LEVEL_21_BASE_DAMAGE")){ return vk_LEVEL_21_BASE_DAMAGE;}
if(!s.compare("LEVEL_22_BASE_DAMAGE")){ return vk_LEVEL_22_BASE_DAMAGE;}
if(!s.compare("LEVEL_23_BASE_DAMAGE")){ return vk_LEVEL_23_BASE_DAMAGE;}
if(!s.compare("LEVEL_24_BASE_DAMAGE")){ return vk_LEVEL_24_BASE_DAMAGE;}
if(!s.compare("LEVEL_25_BASE_DAMAGE")){ return vk_LEVEL_25_BASE_DAMAGE;}
if(!s.compare("LEVEL_26_BASE_DAMAGE")){ return vk_LEVEL_26_BASE_DAMAGE;}
if(!s.compare("LEVEL_27_BASE_DAMAGE")){ return vk_LEVEL_27_BASE_DAMAGE;}
if(!s.compare("LEVEL_28_BASE_DAMAGE")){ return vk_LEVEL_28_BASE_DAMAGE;}
if(!s.compare("LEVEL_29_BASE_DAMAGE")){ return vk_LEVEL_29_BASE_DAMAGE;}
if(!s.compare("LEVEL_30_BASE_DAMAGE")){ return vk_LEVEL_30_BASE_DAMAGE;}
if(!s.compare("LEVEL_DIFF_5")){ return vk_LEVEL_DIFF_5;}
if(!s.compare("LEVEL_DIFF_4")){ return vk_LEVEL_DIFF_4;}
if(!s.compare("LEVEL_DIFF_3")){ return vk_LEVEL_DIFF_3;}
if(!s.compare("LEVEL_DIFF_2")){ return vk_LEVEL_DIFF_2;}
if(!s.compare("LEVEL_DIFF_1")){ return vk_LEVEL_DIFF_1;}
if(!s.compare("LEVEL_DIFF_0")){ return vk_LEVEL_DIFF_0;}
if(!s.compare("LEVEL_DIFF_NEG_1")){ return vk_LEVEL_DIFF_NEG_1;}
if(!s.compare("LEVEL_DIFF_NEG_2")){ return vk_LEVEL_DIFF_NEG_2;}
if(!s.compare("LEVEL_DIFF_NEG_3")){ return vk_LEVEL_DIFF_NEG_3;}
if(!s.compare("LEVEL_DIFF_NEG_4")){ return vk_LEVEL_DIFF_NEG_4;}
if(!s.compare("LEVEL_DIFF_NEG_5")){ return vk_LEVEL_DIFF_NEG_5;}
if(!s.compare("LEVEL_DIFF_DEFAULT")){ return vk_LEVEL_DIFF_DEFAULT;}
if(!s.compare("LEVEL_DIFF_GREATER_THAN_SIX")){ return vk_LEVEL_DIFF_GREATER_THAN_SIX;}
if(!s.compare("LEVEL_DIFF_FOOBAR_TEST")){ return vk_LEVEL_DIFF_FOOBAR_TEST;}
if(!s.compare("ARMOR_CRIT_DAMAGE_MULTIPLIER")){ return vk_ARMOR_CRIT_DAMAGE_MULTIPLIER;}
if(!s.compare("MSG_NO_PRACTICE_SESSIONS")){ return vk_MSG_NO_PRACTICE_SESSIONS;}
if(!s.compare("CAN_BE_SEARCHED")){ return vk_CAN_BE_SEARCHED;}
if(!s.compare("SANITY_CHECK")){ return vk_SANITY_CHECK;}
if(!s.compare("MINI_GUNNER_WEAR_LIGHT")){ return vk_MINI_GUNNER_WEAR_LIGHT;}
if(!s.compare("MINI_GUNNER_WEAR_FINGER_R")){ return vk_MINI_GUNNER_WEAR_FINGER_R;}
if(!s.compare("MINI_GUNNER_WEAR_FINGER_L")){ return vk_MINI_GUNNER_WEAR_FINGER_L;}
if(!s.compare("MINI_GUNNER_WEAR_NECK_1")){ return vk_MINI_GUNNER_WEAR_NECK_1;}
if(!s.compare("MINI_GUNNER_WEAR_NECK_2")){ return vk_MINI_GUNNER_WEAR_NECK_2;}
if(!s.compare("MINI_GUNNER_WEAR_BODY")){ return vk_MINI_GUNNER_WEAR_BODY;}
if(!s.compare("MINI_GUNNER_WEAR_HEAD")){ return vk_MINI_GUNNER_WEAR_HEAD;}
if(!s.compare("MINI_GUNNER_WEAR_LEGS")){ return vk_MINI_GUNNER_WEAR_LEGS;}
if(!s.compare("MINI_GUNNER_WEAR_FEET")){ return vk_MINI_GUNNER_WEAR_FEET;}
if(!s.compare("MINI_GUNNER_WEAR_HANDS")){ return vk_MINI_GUNNER_WEAR_HANDS;}
if(!s.compare("MINI_GUNNER_WEAR_ARMS")){ return vk_MINI_GUNNER_WEAR_ARMS;}
if(!s.compare("MINI_GUNNER_WEAR_SHIELD")){ return vk_MINI_GUNNER_WEAR_SHIELD;}
if(!s.compare("MINI_GUNNER_WEAR_ABOUT")){ return vk_MINI_GUNNER_WEAR_ABOUT;}
if(!s.compare("MINI_GUNNER_WEAR_WAIST")){ return vk_MINI_GUNNER_WEAR_WAIST;}
if(!s.compare("MINI_GUNNER_WEAR_WRIST_R")){ return vk_MINI_GUNNER_WEAR_WRIST_R;}
if(!s.compare("MINI_GUNNER_WEAR_WRIST_L")){ return vk_MINI_GUNNER_WEAR_WRIST_L;}
if(!s.compare("MINI_GUNNER_WEAR_PRIMARY")){ return vk_MINI_GUNNER_WEAR_PRIMARY;}
if(!s.compare("MINI_GUNNER_WEAR_WIELD")){ return vk_MINI_GUNNER_WEAR_WIELD;}
if(!s.compare("MINI_GUNNER_WEAR_HOLD")){ return vk_MINI_GUNNER_WEAR_HOLD;}
if(!s.compare("MINI_GUNNER_WEAR_SECONDARY_WEAPON")){ return vk_MINI_GUNNER_WEAR_SECONDARY_WEAPON;}
if(!s.compare("MINI_GUNNER_WEAR_SECONDARY")){ return vk_MINI_GUNNER_WEAR_SECONDARY;}
if(!s.compare("MINI_GUNNER_WEAR_WEAPON_ATTACHMENT")){ return vk_MINI_GUNNER_WEAR_WEAPON_ATTACHMENT;}
if(!s.compare("MINI_GUNNER_WEAR_SHOULDERS_L")){ return vk_MINI_GUNNER_WEAR_SHOULDERS_L;}
if(!s.compare("MINI_GUNNER_WEAR_SHOULDERS_R")){ return vk_MINI_GUNNER_WEAR_SHOULDERS_R;}
if(!s.compare("MINI_GUNNER_WEAR_BACKPACK")){ return vk_MINI_GUNNER_WEAR_BACKPACK;}
if(!s.compare("MINI_GUNNER_WEAR_GOGGLES")){ return vk_MINI_GUNNER_WEAR_GOGGLES;}
if(!s.compare("MINI_GUNNER_WEAR_VEST_PACK")){ return vk_MINI_GUNNER_WEAR_VEST_PACK;}
if(!s.compare("MINI_GUNNER_WEAR_ELBOW_L")){ return vk_MINI_GUNNER_WEAR_ELBOW_L;}
if(!s.compare("MINI_GUNNER_WEAR_ELBOW_R")){ return vk_MINI_GUNNER_WEAR_ELBOW_R;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_LIGHT")){ return vk_LOWLY_SECURITY_GUARD_WEAR_LIGHT;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_FINGER_R")){ return vk_LOWLY_SECURITY_GUARD_WEAR_FINGER_R;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_FINGER_L")){ return vk_LOWLY_SECURITY_GUARD_WEAR_FINGER_L;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_NECK_1")){ return vk_LOWLY_SECURITY_GUARD_WEAR_NECK_1;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_NECK_2")){ return vk_LOWLY_SECURITY_GUARD_WEAR_NECK_2;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_BODY")){ return vk_LOWLY_SECURITY_GUARD_WEAR_BODY;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_HEAD")){ return vk_LOWLY_SECURITY_GUARD_WEAR_HEAD;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_LEGS")){ return vk_LOWLY_SECURITY_GUARD_WEAR_LEGS;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_FEET")){ return vk_LOWLY_SECURITY_GUARD_WEAR_FEET;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_HANDS")){ return vk_LOWLY_SECURITY_GUARD_WEAR_HANDS;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_ARMS")){ return vk_LOWLY_SECURITY_GUARD_WEAR_ARMS;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_SHIELD")){ return vk_LOWLY_SECURITY_GUARD_WEAR_SHIELD;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_ABOUT")){ return vk_LOWLY_SECURITY_GUARD_WEAR_ABOUT;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_WAIST")){ return vk_LOWLY_SECURITY_GUARD_WEAR_WAIST;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_WRIST_R")){ return vk_LOWLY_SECURITY_GUARD_WEAR_WRIST_R;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_WRIST_L")){ return vk_LOWLY_SECURITY_GUARD_WEAR_WRIST_L;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_PRIMARY")){ return vk_LOWLY_SECURITY_GUARD_WEAR_PRIMARY;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_WIELD")){ return vk_LOWLY_SECURITY_GUARD_WEAR_WIELD;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_HOLD")){ return vk_LOWLY_SECURITY_GUARD_WEAR_HOLD;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON")){ return vk_LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_SECONDARY")){ return vk_LOWLY_SECURITY_GUARD_WEAR_SECONDARY;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT")){ return vk_LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L")){ return vk_LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R")){ return vk_LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_BACKPACK")){ return vk_LOWLY_SECURITY_GUARD_WEAR_BACKPACK;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_GOGGLES")){ return vk_LOWLY_SECURITY_GUARD_WEAR_GOGGLES;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_VEST_PACK")){ return vk_LOWLY_SECURITY_GUARD_WEAR_VEST_PACK;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_ELBOW_L")){ return vk_LOWLY_SECURITY_GUARD_WEAR_ELBOW_L;}
if(!s.compare("LOWLY_SECURITY_GUARD_WEAR_ELBOW_R")){ return vk_LOWLY_SECURITY_GUARD_WEAR_ELBOW_R;}
if(!s.compare("LUNATIC_WEAR_LIGHT")){ return vk_LUNATIC_WEAR_LIGHT;}
if(!s.compare("LUNATIC_WEAR_FINGER_R")){ return vk_LUNATIC_WEAR_FINGER_R;}
if(!s.compare("LUNATIC_WEAR_FINGER_L")){ return vk_LUNATIC_WEAR_FINGER_L;}
if(!s.compare("LUNATIC_WEAR_NECK_1")){ return vk_LUNATIC_WEAR_NECK_1;}
if(!s.compare("LUNATIC_WEAR_NECK_2")){ return vk_LUNATIC_WEAR_NECK_2;}
if(!s.compare("LUNATIC_WEAR_BODY")){ return vk_LUNATIC_WEAR_BODY;}
if(!s.compare("LUNATIC_WEAR_HEAD")){ return vk_LUNATIC_WEAR_HEAD;}
if(!s.compare("LUNATIC_WEAR_LEGS")){ return vk_LUNATIC_WEAR_LEGS;}
if(!s.compare("LUNATIC_WEAR_FEET")){ return vk_LUNATIC_WEAR_FEET;}
if(!s.compare("LUNATIC_WEAR_HANDS")){ return vk_LUNATIC_WEAR_HANDS;}
if(!s.compare("LUNATIC_WEAR_ARMS")){ return vk_LUNATIC_WEAR_ARMS;}
if(!s.compare("LUNATIC_WEAR_SHIELD")){ return vk_LUNATIC_WEAR_SHIELD;}
if(!s.compare("LUNATIC_WEAR_ABOUT")){ return vk_LUNATIC_WEAR_ABOUT;}
if(!s.compare("LUNATIC_WEAR_WAIST")){ return vk_LUNATIC_WEAR_WAIST;}
if(!s.compare("LUNATIC_WEAR_WRIST_R")){ return vk_LUNATIC_WEAR_WRIST_R;}
if(!s.compare("LUNATIC_WEAR_WRIST_L")){ return vk_LUNATIC_WEAR_WRIST_L;}
if(!s.compare("LUNATIC_WEAR_PRIMARY")){ return vk_LUNATIC_WEAR_PRIMARY;}
if(!s.compare("LUNATIC_WEAR_WIELD")){ return vk_LUNATIC_WEAR_WIELD;}
if(!s.compare("LUNATIC_WEAR_HOLD")){ return vk_LUNATIC_WEAR_HOLD;}
if(!s.compare("LUNATIC_WEAR_SECONDARY_WEAPON")){ return vk_LUNATIC_WEAR_SECONDARY_WEAPON;}
if(!s.compare("LUNATIC_WEAR_SECONDARY")){ return vk_LUNATIC_WEAR_SECONDARY;}
if(!s.compare("LUNATIC_WEAR_WEAPON_ATTACHMENT")){ return vk_LUNATIC_WEAR_WEAPON_ATTACHMENT;}
if(!s.compare("LUNATIC_WEAR_SHOULDERS_L")){ return vk_LUNATIC_WEAR_SHOULDERS_L;}
if(!s.compare("LUNATIC_WEAR_SHOULDERS_R")){ return vk_LUNATIC_WEAR_SHOULDERS_R;}
if(!s.compare("LUNATIC_WEAR_BACKPACK")){ return vk_LUNATIC_WEAR_BACKPACK;}
if(!s.compare("LUNATIC_WEAR_GOGGLES")){ return vk_LUNATIC_WEAR_GOGGLES;}
if(!s.compare("LUNATIC_WEAR_VEST_PACK")){ return vk_LUNATIC_WEAR_VEST_PACK;}
if(!s.compare("LUNATIC_WEAR_ELBOW_L")){ return vk_LUNATIC_WEAR_ELBOW_L;}
if(!s.compare("LUNATIC_WEAR_ELBOW_R")){ return vk_LUNATIC_WEAR_ELBOW_R;}
if(!s.compare("MSG_CRITICAL")){ return vk_MSG_CRITICAL;}
if(!s.compare("MSG_HEADSHOT")){ return vk_MSG_HEADSHOT;}
if(!s.compare("MSG_HIT_BY_HEADSHOT")){ return vk_MSG_HIT_BY_HEADSHOT;}
if(!s.compare("MSG_HIT")){ return vk_MSG_HIT;}
if(!s.compare("MSG_OUT_OF_AMMO")){ return vk_MSG_OUT_OF_AMMO;}
if(!s.compare("MSG_MISSED_TARGET")){ return vk_MSG_MISSED_TARGET;}
if(!s.compare("MSG_TARGET_DEAD")){ return vk_MSG_TARGET_DEAD;}
if(!s.compare("MSG_YOURE_INJURED")){ return vk_MSG_YOURE_INJURED;}
if(!s.compare("MSG_YOU_ARE_DISORIENTED")){ return vk_MSG_YOU_ARE_DISORIENTED;}
if(!s.compare("MSG_YOU_DISORIENT_SOMEONE")){ return vk_MSG_YOU_DISORIENT_SOMEONE;}
if(!s.compare("MSG_FIRE_DAMAGE")){ return vk_MSG_FIRE_DAMAGE;}
if(!s.compare("MSG_EXPLOSIVE_DAMAGE")){ return vk_MSG_EXPLOSIVE_DAMAGE;}
if(!s.compare("MSG_SHRAPNEL_DAMAGE")){ return vk_MSG_SHRAPNEL_DAMAGE;}
if(!s.compare("MSG_CORROSIVE_DAMAGE")){ return vk_MSG_CORROSIVE_DAMAGE;}
if(!s.compare("MSG_CRYOGENIC_DAMAGE")){ return vk_MSG_CRYOGENIC_DAMAGE;}
if(!s.compare("MSG_RADIOACTIVE_DAMAGE")){ return vk_MSG_RADIOACTIVE_DAMAGE;}
if(!s.compare("MSG_ANTI_MATTER_DAMAGE")){ return vk_MSG_ANTI_MATTER_DAMAGE;}
if(!s.compare("MSG_EMP_DAMAGE")){ return vk_MSG_EMP_DAMAGE;}
if(!s.compare("MSG_SHOCK_DAMAGE")){ return vk_MSG_SHOCK_DAMAGE;}
if(!s.compare("MSG_SMOKE_DAMAGE")){ return vk_MSG_SMOKE_DAMAGE;}
if(!s.compare("MSG_NARROWLY_MISSED_ME")){ return vk_MSG_NARROWLY_MISSED_ME;}
if(!s.compare("MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO")){ return vk_MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO;}
if(!s.compare("MSG_YOU_INFLICTED_INCENDIARY_AMMO")){ return vk_MSG_YOU_INFLICTED_INCENDIARY_AMMO;}
if(!s.compare("MSG_YOU_ARE_INJURED")){ return vk_MSG_YOU_ARE_INJURED;}
if(!s.compare("MSG_YOUR_TARGET_IS_DEAD")){ return vk_MSG_YOUR_TARGET_IS_DEAD;}
if(!s.compare("MSG_HIT_BY_RIFLE_ATTACK")){ return vk_MSG_HIT_BY_RIFLE_ATTACK;}
if(!s.compare("MSG_HIT_BY_MELEE_ATTACK")){ return vk_MSG_HIT_BY_MELEE_ATTACK;}
if(!s.compare("MSG_HIT_BY_BLADED_MELEE_ATTACK")){ return vk_MSG_HIT_BY_BLADED_MELEE_ATTACK;}
if(!s.compare("MSG_HIT_BY_BLUNT_MELEE_ATTACK")){ return vk_MSG_HIT_BY_BLUNT_MELEE_ATTACK;}
if(!s.compare("MSG_YOU_INFLICTED_MELEE_ATTACK")){ return vk_MSG_YOU_INFLICTED_MELEE_ATTACK;}
if(!s.compare("MSG_YOU_INFLICTED_BLADED_MELEE_ATTACK")){ return vk_MSG_YOU_INFLICTED_BLADED_MELEE_ATTACK;}
if(!s.compare("MSG_YOU_INFLICTED_BLUNT_MELEE_ATTACK")){ return vk_MSG_YOU_INFLICTED_BLUNT_MELEE_ATTACK;}
if(!s.compare("MSG_YOU_INFLICTED_INCENDIARY_DAMAGE")){ return vk_MSG_YOU_INFLICTED_INCENDIARY_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_RADIOACTIVE_DAMAGE")){ return vk_MSG_YOU_INFLICTED_RADIOACTIVE_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_ANTI_MATTER_DAMAGE")){ return vk_MSG_YOU_INFLICTED_ANTI_MATTER_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_CORROSIVE_DAMAGE")){ return vk_MSG_YOU_INFLICTED_CORROSIVE_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_EMP_DAMAGE")){ return vk_MSG_YOU_INFLICTED_EMP_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_EXPLOSIVE_DAMAGE")){ return vk_MSG_YOU_INFLICTED_EXPLOSIVE_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_SHRAPNEL_DAMAGE")){ return vk_MSG_YOU_INFLICTED_SHRAPNEL_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_CRYOGENIC_DAMAGE")){ return vk_MSG_YOU_INFLICTED_CRYOGENIC_DAMAGE;}
if(!s.compare("MSG_YOU_INFLICTED_SHOCK_DAMAGE")){ return vk_MSG_YOU_INFLICTED_SHOCK_DAMAGE;}
if(!s.compare("MSG_HIT_BY_INCENDIARY_DAMAGE")){ return vk_MSG_HIT_BY_INCENDIARY_DAMAGE;}
if(!s.compare("MSG_HIT_BY_RADIOACTIVE_DAMAGE")){ return vk_MSG_HIT_BY_RADIOACTIVE_DAMAGE;}
if(!s.compare("MSG_HIT_BY_ANTI_MATTER_DAMAGE")){ return vk_MSG_HIT_BY_ANTI_MATTER_DAMAGE;}
if(!s.compare("MSG_HIT_BY_CORROSIVE_DAMAGE")){ return vk_MSG_HIT_BY_CORROSIVE_DAMAGE;}
if(!s.compare("MSG_HIT_BY_EMP_DAMAGE")){ return vk_MSG_HIT_BY_EMP_DAMAGE;}
if(!s.compare("MSG_HIT_BY_EXPLOSIVE_DAMAGE")){ return vk_MSG_HIT_BY_EXPLOSIVE_DAMAGE;}
if(!s.compare("MSG_HIT_BY_SHRAPNEL_DAMAGE")){ return vk_MSG_HIT_BY_SHRAPNEL_DAMAGE;}
if(!s.compare("MSG_HIT_BY_CRYOGENIC_DAMAGE")){ return vk_MSG_HIT_BY_CRYOGENIC_DAMAGE;}
if(!s.compare("MSG_HIT_BY_SHOCK_DAMAGE")){ return vk_MSG_HIT_BY_SHOCK_DAMAGE;}
if(!s.compare("MSG_HIT_BY_SPRAY_ATTACK")){ return vk_MSG_HIT_BY_SPRAY_ATTACK;}
if(!s.compare("MSG_TARGET_IN_PEACEFUL_ROOM")){ return vk_MSG_TARGET_IN_PEACEFUL_ROOM;}
if(!s.compare("MSG_NO_PRIMARY_WIELDED")){ return vk_MSG_NO_PRIMARY_WIELDED;}
if(!s.compare("MSG_COOLDOWN_IN_EFFECT")){ return vk_MSG_COOLDOWN_IN_EFFECT;}
if(!s.compare("MSG_COULDNT_FIND_TARGET")){ return vk_MSG_COULDNT_FIND_TARGET;}
if(!s.compare("MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS")){ return vk_MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS;}
if(!s.compare("MINI_GUNNER_RANDOM_DISORIENT_STRINGS")){ return vk_MINI_GUNNER_RANDOM_DISORIENT_STRINGS;}
if(!s.compare("MSG_YOU_INJURED_SOMEONE")){ return vk_MSG_YOU_INJURED_SOMEONE;}
if(!s.compare("DEFAULT_PUBLIC_CHANNELS")){ return vk_DEFAULT_PUBLIC_CHANNELS;}
if(!s.compare("EXTENDED_PREFERENCES")){ return vk_EXTENDED_PREFERENCES;}
if(!s.compare("EXTENDED_PREFERENCES_DEFAULTS")){ return vk_EXTENDED_PREFERENCES_DEFAULTS;}
if(!s.compare("SUPER_USERS_LIST")){ return vk_SUPER_USERS_LIST;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION;}
if(!s.compare("PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION")){ return vk_PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION;}
if(!s.compare("MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS")){ return vk_MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS;}
if(!s.compare("MSG_YOU_REFLECTED_MUNITIONS")){ return vk_MSG_YOU_REFLECTED_MUNITIONS;}
if(!s.compare("MSG_YOU_INFLICTED_AR_SHRAPNEL")){ return vk_MSG_YOU_INFLICTED_AR_SHRAPNEL;}
if(!s.compare("MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL")){ return vk_MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL;}
if(!s.compare("SUPER_USER_REJECT_MESSAGE")){ return vk_SUPER_USER_REJECT_MESSAGE;}
if(!s.compare("ADMIN_SUCCESS_MESSAGE")){ return vk_ADMIN_SUCCESS_MESSAGE;}
if(!s.compare("ADMIN_FAILURE_MESSAGE")){ return vk_ADMIN_FAILURE_MESSAGE;}
if(!s.compare("UNIMPLEMENTED_MESSAGE")){ return vk_UNIMPLEMENTED_MESSAGE;}
if(!s.compare("STOCK_STARS_MESSAGE")){ return vk_STOCK_STARS_MESSAGE;}
if(!s.compare("STOCK_BLIND_MESSAGE")){ return vk_STOCK_BLIND_MESSAGE;}
if(!s.compare("STOCK_PITCH_BLACK_MESSAGE")){ return vk_STOCK_PITCH_BLACK_MESSAGE;}
if(!s.compare("STOCK_READ_WHAT_MESSAGE")){ return vk_STOCK_READ_WHAT_MESSAGE;}
if(!s.compare("STOCK_EXAMINE_MESSAGE")){ return vk_STOCK_EXAMINE_MESSAGE;}
if(!s.compare("STOCK_LOOK_INSIDE_MESSAGE")){ return vk_STOCK_LOOK_INSIDE_MESSAGE;}
if(!s.compare("STOCK_GOLD_BROKE_MESSAGE")){ return vk_STOCK_GOLD_BROKE_MESSAGE;}
if(!s.compare("STOCK_GOLD_ONE_MISERABLE_MESSAGE")){ return vk_STOCK_GOLD_ONE_MISERABLE_MESSAGE;}
if(!s.compare("STOCK_GOLD_PREFIX_MESSAGE")){ return vk_STOCK_GOLD_PREFIX_MESSAGE;}
if(!s.compare("STOCK_GOLD_SUFFIX_MESSAGE")){ return vk_STOCK_GOLD_SUFFIX_MESSAGE;}
if(!s.compare("MSG_YOU_FEIGN_DEATH")){ return vk_MSG_YOU_FEIGN_DEATH;}
if(!s.compare("MSG_YOU_FAIL_FEIGN_DEATH")){ return vk_MSG_YOU_FAIL_FEIGN_DEATH;}
if(!s.compare("ADVANCE_LEVEL_CONGRATS")){ return vk_ADVANCE_LEVEL_CONGRATS;}
if(!s.compare("CHARGEN_TRIADS_FORMAT")){ return vk_CHARGEN_TRIADS_FORMAT;}
if(!s.compare("ADVANCE_LEVEL_MESSAGE")){ return vk_ADVANCE_LEVEL_MESSAGE;}
if(!s.compare("ADVANCE_MULTIPLE_LEVELS_MESSAGE")){ return vk_ADVANCE_MULTIPLE_LEVELS_MESSAGE;}
if(!s.compare("ARMOR_LOCKER_QUOTA")){ return vk_ARMOR_LOCKER_QUOTA;}
if(!s.compare("WEAPON_LOCKER_QUOTA")){ return vk_WEAPON_LOCKER_QUOTA;}
if(!s.compare("RADIO_INITIAL_RESPONSE_TICKS")){ return vk_RADIO_INITIAL_RESPONSE_TICKS;}
if(!s.compare("SNIPER_TRACKING_SHOT_MAX_COUNT")){ return vk_SNIPER_TRACKING_SHOT_MAX_COUNT;}
if(!s.compare("LUCKY_DISORIENTED_VISION_CHANCE")){ return vk_LUCKY_DISORIENTED_VISION_CHANCE;}
if(!s.compare("TERRIBLE_SKILL_CHANCE_OF_SUCCESS")){ return vk_TERRIBLE_SKILL_CHANCE_OF_SUCCESS;}
if(!s.compare("AWFUL_SKILL_CHANCE_OF_SUCCESS")){ return vk_AWFUL_SKILL_CHANCE_OF_SUCCESS;}
if(!s.compare("OKAY_SKILL_CHANCE_OF_SUCCESS")){ return vk_OKAY_SKILL_CHANCE_OF_SUCCESS;}
if(!s.compare("LEARNED_SKILL_CHANCE_OF_SUCCESS")){ return vk_LEARNED_SKILL_CHANCE_OF_SUCCESS;}
if(!s.compare("MASTERED_SKILL_CHANCE_OF_SUCCESS")){ return vk_MASTERED_SKILL_CHANCE_OF_SUCCESS;}
if(!s.compare("ELITE_SKILL_CHANCE_OF_SUCCESS")){ return vk_ELITE_SKILL_CHANCE_OF_SUCCESS;}
if(!s.compare("PERCENT_CHANCE_DISSIPATED_DETECTED_BY_THERMALS")){ return vk_PERCENT_CHANCE_DISSIPATED_DETECTED_BY_THERMALS;}
if(!s.compare("ENGINEER_REPLENISH_PULSE")){ return vk_ENGINEER_REPLENISH_PULSE;}
if(!s.compare("ENGINEER_SENSOR_GRENADE_MAX_COUNT")){ return vk_ENGINEER_SENSOR_GRENADE_MAX_COUNT;}
if(!s.compare("ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT")){ return vk_ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT;}
if(!s.compare("SNIPER_REPLENISH_PULSE")){ return vk_SNIPER_REPLENISH_PULSE;}
if(!s.compare("SNIPER_CLAYMORE_MAX_COUNT")){ return vk_SNIPER_CLAYMORE_MAX_COUNT;}
if(!s.compare("GHOST_REPLENISH_PULSE")){ return vk_GHOST_REPLENISH_PULSE;}
if(!s.compare("GHOST_DISSIPATE_CHARGE_MAX_COUNT")){ return vk_GHOST_DISSIPATE_CHARGE_MAX_COUNT;}
if(!s.compare("PYREXIA_REPLENISH_PULSE")){ return vk_PYREXIA_REPLENISH_PULSE;}
if(!s.compare("FORGE_REPLENISH_PULSE")){ return vk_FORGE_REPLENISH_PULSE;}
if(!s.compare("SYNDROME_REPLENISH_PULSE")){ return vk_SYNDROME_REPLENISH_PULSE;}
if(!s.compare("GHOST_CLAYMORE_MAX_COUNT")){ return vk_GHOST_CLAYMORE_MAX_COUNT;}
if(!s.compare("CAMERA_INSTALLATION_TICS")){ return vk_CAMERA_INSTALLATION_TICS;}
if(!s.compare("CLAYMORE_INSTALLATION_TICS")){ return vk_CLAYMORE_INSTALLATION_TICS;}
if(!s.compare("PYREXIA_FIRE_NADE_CHARGES_DEFAULT")){ return vk_PYREXIA_FIRE_NADE_CHARGES_DEFAULT;}
if(!s.compare("PYREXIA_FIRE_NADE_CHARGES_INITIATE")){ return vk_PYREXIA_FIRE_NADE_CHARGES_INITIATE;}
if(!s.compare("PYREXIA_FIRE_NADE_CHARGES_FAMILIAR")){ return vk_PYREXIA_FIRE_NADE_CHARGES_FAMILIAR;}
if(!s.compare("PYREXIA_FIRE_NADE_CHARGES_MASTER")){ return vk_PYREXIA_FIRE_NADE_CHARGES_MASTER;}
if(!s.compare("SINGLE_SHOT_SHOTGUN")){ return vk_SINGLE_SHOT_SHOTGUN;}
if(!s.compare("SINGLE_SHOT_ASSAULT_RIFLE")){ return vk_SINGLE_SHOT_ASSAULT_RIFLE;}
if(!s.compare("SINGLE_SHOT_SUB_MACHINE_GUN")){ return vk_SINGLE_SHOT_SUB_MACHINE_GUN;}
if(!s.compare("SINGLE_SHOT_SNIPER")){ return vk_SINGLE_SHOT_SNIPER;}
if(!s.compare("SINGLE_SHOT_HANDGUN")){ return vk_SINGLE_SHOT_HANDGUN;}
if(!s.compare("SINGLE_SHOT_PISTOL")){ return vk_SINGLE_SHOT_PISTOL;}
if(!s.compare("SINGLE_SHOT_MACHINE_PISTOL")){ return vk_SINGLE_SHOT_MACHINE_PISTOL;}
if(!s.compare("SINGLE_SHOT_LIGHT_MACHINE_GUN")){ return vk_SINGLE_SHOT_LIGHT_MACHINE_GUN;}
if(!s.compare("SPRAY_SHOT_SHOTGUN")){ return vk_SPRAY_SHOT_SHOTGUN;}
if(!s.compare("SPRAY_SHOT_ASSAULT_RIFLE")){ return vk_SPRAY_SHOT_ASSAULT_RIFLE;}
if(!s.compare("SPRAY_SHOT_SUB_MACHINE_GUN")){ return vk_SPRAY_SHOT_SUB_MACHINE_GUN;}
if(!s.compare("SPRAY_SHOT_SNIPER")){ return vk_SPRAY_SHOT_SNIPER;}
if(!s.compare("SPRAY_SHOT_HANDGUN")){ return vk_SPRAY_SHOT_HANDGUN;}
if(!s.compare("SPRAY_SHOT_PISTOL")){ return vk_SPRAY_SHOT_PISTOL;}
if(!s.compare("SPRAY_SHOT_MACHINE_PISTOL")){ return vk_SPRAY_SHOT_MACHINE_PISTOL;}
if(!s.compare("SPRAY_SHOT_LIGHT_MACHINE_GUN")){ return vk_SPRAY_SHOT_LIGHT_MACHINE_GUN;}
if(!s.compare("SPRAY_CHANCE")){ return vk_SPRAY_CHANCE;}
if(!s.compare("SPRAY_HEADSHOT_CHANCE")){ return vk_SPRAY_HEADSHOT_CHANCE;}
if(!s.compare("SPRAY_CRITICAL_CHANCE")){ return vk_SPRAY_CRITICAL_CHANCE;}
if(!s.compare("SPRAY_CRITICAL_REDUCTION_DIVISOR")){ return vk_SPRAY_CRITICAL_REDUCTION_DIVISOR;}
if(!s.compare("REVIVE_TICKS")){ return vk_REVIVE_TICKS;}
if(!s.compare("REVIVE_HP")){ return vk_REVIVE_HP;}
if(!s.compare("INJURED_HP")){ return vk_INJURED_HP;}
if(!s.compare("LOWLY_SECURITY_SCAN_DEPTH")){ return vk_LOWLY_SECURITY_SCAN_DEPTH;}
if(!s.compare("MINI_GUNNER_SCAN_DEPTH")){ return vk_MINI_GUNNER_SCAN_DEPTH;}
if(!s.compare("SPRAY_CHANCE_SKILL_MODIFIER")){ return vk_SPRAY_CHANCE_SKILL_MODIFIER;}
if(!s.compare("HEADSHOT_SKILL_MODIFIER")){ return vk_HEADSHOT_SKILL_MODIFIER;}
if(!s.compare("ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE")){ return vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE;}
if(!s.compare("ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT")){ return vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT;}
if(!s.compare("ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES")){ return vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES;}
if(!s.compare("SHOW_UNIMPLEMENTED_SKILLS")){ return vk_SHOW_UNIMPLEMENTED_SKILLS;}
if(!s.compare("GHOST_FEIGN_DEATH_INITIATE_DURATION")){ return vk_GHOST_FEIGN_DEATH_INITIATE_DURATION;}
if(!s.compare("GHOST_FEIGN_DEATH_FAMILIAR_DURATION")){ return vk_GHOST_FEIGN_DEATH_FAMILIAR_DURATION;}
if(!s.compare("GHOST_FEIGN_DEATH_MASTER_DURATION")){ return vk_GHOST_FEIGN_DEATH_MASTER_DURATION;}
if(!s.compare("MARKSMAN_CLASS_TRIADS_MELEE")){ return vk_MARKSMAN_CLASS_TRIADS_MELEE;}
if(!s.compare("GHOST_CLASS_TRIADS_MELEE")){ return vk_GHOST_CLASS_TRIADS_MELEE;}
if(!s.compare("GHOST_CLASS_TRIADS_WEAPONS")){ return vk_GHOST_CLASS_TRIADS_WEAPONS;}
if(!s.compare("GHOST_CLASS_TRIADS_INTEL")){ return vk_GHOST_CLASS_TRIADS_INTEL;}
if(!s.compare("GHOST_CLASS_TRIADS_SPEED")){ return vk_GHOST_CLASS_TRIADS_SPEED;}
if(!s.compare("GHOST_CLASS_TRIADS_ARMOR")){ return vk_GHOST_CLASS_TRIADS_ARMOR;}
if(!s.compare("MARKSMAN_CLASS_TRIADS_WEAPONS")){ return vk_MARKSMAN_CLASS_TRIADS_WEAPONS;}
if(!s.compare("MARKSMAN_CLASS_TRIADS_INTEL")){ return vk_MARKSMAN_CLASS_TRIADS_INTEL;}
if(!s.compare("MARKSMAN_CLASS_TRIADS_SPEED")){ return vk_MARKSMAN_CLASS_TRIADS_SPEED;}
if(!s.compare("MARKSMAN_CLASS_TRIADS_ARMOR")){ return vk_MARKSMAN_CLASS_TRIADS_ARMOR;}
if(!s.compare("BANDIT_CLASS_TRIADS_MELEE")){ return vk_BANDIT_CLASS_TRIADS_MELEE;}
if(!s.compare("BANDIT_CLASS_TRIADS_WEAPONS")){ return vk_BANDIT_CLASS_TRIADS_WEAPONS;}
if(!s.compare("BANDIT_CLASS_TRIADS_INTEL")){ return vk_BANDIT_CLASS_TRIADS_INTEL;}
if(!s.compare("BANDIT_CLASS_TRIADS_SPEED")){ return vk_BANDIT_CLASS_TRIADS_SPEED;}
if(!s.compare("BANDIT_CLASS_TRIADS_ARMOR")){ return vk_BANDIT_CLASS_TRIADS_ARMOR;}
if(!s.compare("BUTCHER_CLASS_TRIADS_MELEE")){ return vk_BUTCHER_CLASS_TRIADS_MELEE;}
if(!s.compare("BUTCHER_CLASS_TRIADS_WEAPONS")){ return vk_BUTCHER_CLASS_TRIADS_WEAPONS;}
if(!s.compare("BUTCHER_CLASS_TRIADS_INTEL")){ return vk_BUTCHER_CLASS_TRIADS_INTEL;}
if(!s.compare("BUTCHER_CLASS_TRIADS_SPEED")){ return vk_BUTCHER_CLASS_TRIADS_SPEED;}
if(!s.compare("BUTCHER_CLASS_TRIADS_ARMOR")){ return vk_BUTCHER_CLASS_TRIADS_ARMOR;}
if(!s.compare("STRIKER_CLASS_TRIADS_MELEE")){ return vk_STRIKER_CLASS_TRIADS_MELEE;}
if(!s.compare("STRIKER_CLASS_TRIADS_WEAPONS")){ return vk_STRIKER_CLASS_TRIADS_WEAPONS;}
if(!s.compare("STRIKER_CLASS_TRIADS_INTEL")){ return vk_STRIKER_CLASS_TRIADS_INTEL;}
if(!s.compare("STRIKER_CLASS_TRIADS_SPEED")){ return vk_STRIKER_CLASS_TRIADS_SPEED;}
if(!s.compare("STRIKER_CLASS_TRIADS_ARMOR")){ return vk_STRIKER_CLASS_TRIADS_ARMOR;}
if(!s.compare("OBSTRUCTOR_CLASS_TRIADS_MELEE")){ return vk_OBSTRUCTOR_CLASS_TRIADS_MELEE;}
if(!s.compare("OBSTRUCTOR_CLASS_TRIADS_WEAPONS")){ return vk_OBSTRUCTOR_CLASS_TRIADS_WEAPONS;}
if(!s.compare("OBSTRUCTOR_CLASS_TRIADS_INTEL")){ return vk_OBSTRUCTOR_CLASS_TRIADS_INTEL;}
if(!s.compare("OBSTRUCTOR_CLASS_TRIADS_SPEED")){ return vk_OBSTRUCTOR_CLASS_TRIADS_SPEED;}
if(!s.compare("OBSTRUCTOR_CLASS_TRIADS_ARMOR")){ return vk_OBSTRUCTOR_CLASS_TRIADS_ARMOR;}
if(!s.compare("MALADY_CLASS_TRIADS_MELEE")){ return vk_MALADY_CLASS_TRIADS_MELEE;}
if(!s.compare("MALADY_CLASS_TRIADS_WEAPONS")){ return vk_MALADY_CLASS_TRIADS_WEAPONS;}
if(!s.compare("MALADY_CLASS_TRIADS_INTEL")){ return vk_MALADY_CLASS_TRIADS_INTEL;}
if(!s.compare("MALADY_CLASS_TRIADS_SPEED")){ return vk_MALADY_CLASS_TRIADS_SPEED;}
if(!s.compare("MALADY_CLASS_TRIADS_ARMOR")){ return vk_MALADY_CLASS_TRIADS_ARMOR;}
if(!s.compare("PYREXIA_CLASS_TRIADS_MELEE")){ return vk_PYREXIA_CLASS_TRIADS_MELEE;}
if(!s.compare("PYREXIA_CLASS_TRIADS_WEAPONS")){ return vk_PYREXIA_CLASS_TRIADS_WEAPONS;}
if(!s.compare("PYREXIA_CLASS_TRIADS_INTEL")){ return vk_PYREXIA_CLASS_TRIADS_INTEL;}
if(!s.compare("PYREXIA_CLASS_TRIADS_SPEED")){ return vk_PYREXIA_CLASS_TRIADS_SPEED;}
if(!s.compare("PYREXIA_CLASS_TRIADS_ARMOR")){ return vk_PYREXIA_CLASS_TRIADS_ARMOR;}
if(!s.compare("DEALER_CLASS_TRIADS_MELEE")){ return vk_DEALER_CLASS_TRIADS_MELEE;}
if(!s.compare("DEALER_CLASS_TRIADS_WEAPONS")){ return vk_DEALER_CLASS_TRIADS_WEAPONS;}
if(!s.compare("DEALER_CLASS_TRIADS_INTEL")){ return vk_DEALER_CLASS_TRIADS_INTEL;}
if(!s.compare("DEALER_CLASS_TRIADS_SPEED")){ return vk_DEALER_CLASS_TRIADS_SPEED;}
if(!s.compare("DEALER_CLASS_TRIADS_ARMOR")){ return vk_DEALER_CLASS_TRIADS_ARMOR;}
if(!s.compare("FORGE_CLASS_TRIADS_MELEE")){ return vk_FORGE_CLASS_TRIADS_MELEE;}
if(!s.compare("FORGE_CLASS_TRIADS_WEAPONS")){ return vk_FORGE_CLASS_TRIADS_WEAPONS;}
if(!s.compare("FORGE_CLASS_TRIADS_INTEL")){ return vk_FORGE_CLASS_TRIADS_INTEL;}
if(!s.compare("FORGE_CLASS_TRIADS_SPEED")){ return vk_FORGE_CLASS_TRIADS_SPEED;}
if(!s.compare("FORGE_CLASS_TRIADS_ARMOR")){ return vk_FORGE_CLASS_TRIADS_ARMOR;}
if(!s.compare("SYNDROME_CLASS_TRIADS_MELEE")){ return vk_SYNDROME_CLASS_TRIADS_MELEE;}
if(!s.compare("SYNDROME_CLASS_TRIADS_WEAPONS")){ return vk_SYNDROME_CLASS_TRIADS_WEAPONS;}
if(!s.compare("SYNDROME_CLASS_TRIADS_INTEL")){ return vk_SYNDROME_CLASS_TRIADS_INTEL;}
if(!s.compare("SYNDROME_CLASS_TRIADS_SPEED")){ return vk_SYNDROME_CLASS_TRIADS_SPEED;}
if(!s.compare("SYNDROME_CLASS_TRIADS_ARMOR")){ return vk_SYNDROME_CLASS_TRIADS_ARMOR;}
if(!s.compare("MACHINIST_CLASS_TRIADS_MELEE")){ return vk_MACHINIST_CLASS_TRIADS_MELEE;}
if(!s.compare("MACHINIST_CLASS_TRIADS_WEAPONS")){ return vk_MACHINIST_CLASS_TRIADS_WEAPONS;}
if(!s.compare("MACHINIST_CLASS_TRIADS_INTEL")){ return vk_MACHINIST_CLASS_TRIADS_INTEL;}
if(!s.compare("MACHINIST_CLASS_TRIADS_SPEED")){ return vk_MACHINIST_CLASS_TRIADS_SPEED;}
if(!s.compare("MACHINIST_CLASS_TRIADS_ARMOR")){ return vk_MACHINIST_CLASS_TRIADS_ARMOR;}
if(!s.compare("REGENERATED_AMMO_LOW")){ return vk_REGENERATED_AMMO_LOW;}
if(!s.compare("REGENERATED_AMMO_HIGH")){ return vk_REGENERATED_AMMO_HIGH;}
if(!s.compare("RELOAD_TICKS_SHOTGUN")){ return vk_RELOAD_TICKS_SHOTGUN;}
if(!s.compare("RELOAD_TICKS_ASSAULT_RIFLE")){ return vk_RELOAD_TICKS_ASSAULT_RIFLE;}
if(!s.compare("RELOAD_TICKS_SUB_MACHINE_GUN")){ return vk_RELOAD_TICKS_SUB_MACHINE_GUN;}
if(!s.compare("RELOAD_TICKS_SNIPER")){ return vk_RELOAD_TICKS_SNIPER;}
if(!s.compare("RELOAD_TICKS_HANDGUN")){ return vk_RELOAD_TICKS_HANDGUN;}
if(!s.compare("RELOAD_TICKS_PISTOL")){ return vk_RELOAD_TICKS_PISTOL;}
if(!s.compare("RELOAD_TICKS_MACHINE_PISTOL")){ return vk_RELOAD_TICKS_MACHINE_PISTOL;}
if(!s.compare("RELOAD_TICKS_LIGHT_MACHINE_GUN")){ return vk_RELOAD_TICKS_LIGHT_MACHINE_GUN;}
if(!s.compare("DEFAULT_DISORIENT_TICKS_FROM_RIFLE_ATTACK")){ return vk_DEFAULT_DISORIENT_TICKS_FROM_RIFLE_ATTACK;}
if(!s.compare("AMMO_LOCKER_QUOTA")){ return vk_AMMO_LOCKER_QUOTA;}
if(!s.compare("BREACHER_REPLENISH_CALL_COUNT")){ return vk_BREACHER_REPLENISH_CALL_COUNT;}
if(!s.compare("GHOST_DISSIPATE_TICKS_DURATION")){ return vk_GHOST_DISSIPATE_TICKS_DURATION;}
if(!s.compare("SNIPER_XRAY_SHOT_MAX_COUNT")){ return vk_SNIPER_XRAY_SHOT_MAX_COUNT;}
 return (value_key_t)0;}
static const std::vector<value_key_t> bool_types = {
vk_ALLOW_MOCK_LEVELS,
};
static const std::vector<value_key_t> int_types = {
vk_FIRE_DAMAGE_TICK_RESOLUTION,
vk_FLASHBANG_COOLDOWN_TICKS,
vk_FIRE_EVERY_N_TICKS,
vk_FIRE_WOODEN_ADDITIONAL_TICKS,
vk_FIRE_CARPET_ADDITIONAL_TICKS,
vk_DAMAGE_DIVISOR,
vk_FRAG_GRENADE_TICKS,
vk_EMP_GRENADE_TICKS,
vk_SENSOR_GRENADE_TICKS,
vk_FLASHBANG_GRENADE_TICKS,
vk_SMOKE_GRENADE_TICKS,
vk_INCENDIARY_GRENADE_TICKS,
vk_FIRE_STATUS_KINDLING_DAMAGE,
vk_FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE,
vk_FIRE_STATUS_SMOLDERING_DAMAGE,
vk_FIRE_STATUS_SMOKING_DAMAGE,
vk_ADVANCE_LEVEL_BONUS_HP_DICE,
vk_ADVANCE_LEVEL_BONUS_HP_SIDES,
vk_ADVANCE_LEVEL_BONUS_HP_THRESHOLD,
};
static const std::vector<value_key_t> uint16_types = {
vk_LOWLY_SECURITY_ROAM_TICK,
vk_LOWLY_SECURITY_RANDOM_TRIVIAL_TICK,
vk_BREACHER_EXPLOSIVE_SHOT_MAX_COUNT,
vk_SKILL_GHOST_DRONE_SCAN,
vk_SKILL_GHOST_STEALTH,
vk_SKILL_GHOST_SUMMON_EXTRACTION,
vk_SKILL_GHOST_XRAY_SHOT,
vk_SKILL_GHOST_FEIGN_DEATH,
vk_SKILL_GHOST_PLANT_CLAYMORE,
vk_SKILL_GHOST_PENETRATING_SHOT,
vk_SKILL_GHOST_INTIMIDATION,
vk_SKILL_GHOST_CRYOGENIC_GRENADE,
vk_SKILL_GHOST_FLASH_UNDERBARREL,
vk_SKILL_SNIPER_TRACKING_SHOT,
vk_SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN,
vk_SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER,
vk_SKILL_SNIPER_GUIDED_MISSILE,
vk_SKILL_SNIPER_TARGET_LIMB,
vk_SKILL_SNIPER_PLANT_CLAYMORE,
vk_SKILL_SNIPER_XRAY_SHOT,
vk_SKILL_SNIPER_SUMMON_AREA_SCAN,
vk_SKILL_GRENADE_USAGE,
vk_SKILL_CLAYMORE_USAGE,
vk_SKILL_BREACH_USAGE,
vk_WSL_SHOTGUN_0_ALLOWABLE,
vk_WSL_SHOTGUN_0_ACCURACY,
vk_WSL_SHOTGUN_0_DAMAGE,
vk_WSL_SHOTGUN_1_ALLOWABLE,
vk_WSL_SHOTGUN_1_ACCURACY,
vk_WSL_SHOTGUN_1_DAMAGE,
vk_WSL_SHOTGUN_2_ALLOWABLE,
vk_WSL_SHOTGUN_2_ACCURACY,
vk_WSL_SHOTGUN_2_DAMAGE,
vk_WSL_SHOTGUN_3_ALLOWABLE,
vk_WSL_SHOTGUN_3_ACCURACY,
vk_WSL_SHOTGUN_3_DAMAGE,
vk_WSL_SHOTGUN_4_ALLOWABLE,
vk_WSL_SHOTGUN_4_ACCURACY,
vk_WSL_SHOTGUN_4_DAMAGE,
vk_WSL_AR_0_ALLOWABLE,
vk_WSL_AR_0_ACCURACY,
vk_WSL_AR_0_DAMAGE,
vk_WSL_AR_1_ALLOWABLE,
vk_WSL_AR_1_ACCURACY,
vk_WSL_AR_1_DAMAGE,
vk_WSL_AR_2_ALLOWABLE,
vk_WSL_AR_2_ACCURACY,
vk_WSL_AR_2_DAMAGE,
vk_WSL_AR_3_ALLOWABLE,
vk_WSL_AR_3_ACCURACY,
vk_WSL_AR_3_DAMAGE,
vk_WSL_AR_4_ALLOWABLE,
vk_WSL_AR_4_ACCURACY,
vk_WSL_AR_4_DAMAGE,
vk_WSL_SMG_0_ALLOWABLE,
vk_WSL_SMG_0_ACCURACY,
vk_WSL_SMG_0_DAMAGE,
vk_WSL_SMG_1_ALLOWABLE,
vk_WSL_SMG_1_ACCURACY,
vk_WSL_SMG_1_DAMAGE,
vk_WSL_SMG_2_ALLOWABLE,
vk_WSL_SMG_2_ACCURACY,
vk_WSL_SMG_2_DAMAGE,
vk_WSL_SMG_3_ALLOWABLE,
vk_WSL_SMG_3_ACCURACY,
vk_WSL_SMG_3_DAMAGE,
vk_WSL_SMG_4_ALLOWABLE,
vk_WSL_SMG_4_ACCURACY,
vk_WSL_SMG_4_DAMAGE,
vk_WSL_MACHINE_PISTOL_0_ALLOWABLE,
vk_WSL_MACHINE_PISTOL_0_ACCURACY,
vk_WSL_MACHINE_PISTOL_0_DAMAGE,
vk_WSL_MACHINE_PISTOL_1_ALLOWABLE,
vk_WSL_MACHINE_PISTOL_1_ACCURACY,
vk_WSL_MACHINE_PISTOL_1_DAMAGE,
vk_WSL_MACHINE_PISTOL_2_ALLOWABLE,
vk_WSL_MACHINE_PISTOL_2_ACCURACY,
vk_WSL_MACHINE_PISTOL_2_DAMAGE,
vk_WSL_MACHINE_PISTOL_3_ALLOWABLE,
vk_WSL_MACHINE_PISTOL_3_ACCURACY,
vk_WSL_MACHINE_PISTOL_3_DAMAGE,
vk_WSL_MACHINE_PISTOL_4_ALLOWABLE,
vk_WSL_MACHINE_PISTOL_4_ACCURACY,
vk_WSL_MACHINE_PISTOL_4_DAMAGE,
vk_HEADSHOT_DIVISOR,
vk_WSL_HANDGUN_0_ALLOWABLE,
vk_WSL_HANDGUN_0_ACCURACY,
vk_WSL_HANDGUN_0_DAMAGE,
vk_WSL_HANDGUN_1_ALLOWABLE,
vk_WSL_HANDGUN_1_ACCURACY,
vk_WSL_HANDGUN_1_DAMAGE,
vk_WSL_HANDGUN_2_ALLOWABLE,
vk_WSL_HANDGUN_2_ACCURACY,
vk_WSL_HANDGUN_2_DAMAGE,
vk_WSL_HANDGUN_3_ALLOWABLE,
vk_WSL_HANDGUN_3_ACCURACY,
vk_WSL_HANDGUN_3_DAMAGE,
vk_WSL_HANDGUN_4_ALLOWABLE,
vk_WSL_HANDGUN_4_ACCURACY,
vk_WSL_HANDGUN_4_DAMAGE,
vk_WSL_LMG_0_ALLOWABLE,
vk_WSL_LMG_0_ACCURACY,
vk_WSL_LMG_0_DAMAGE,
vk_WSL_LMG_1_ALLOWABLE,
vk_WSL_LMG_1_ACCURACY,
vk_WSL_LMG_1_DAMAGE,
vk_WSL_LMG_2_ALLOWABLE,
vk_WSL_LMG_2_ACCURACY,
vk_WSL_LMG_2_DAMAGE,
vk_WSL_LMG_3_ALLOWABLE,
vk_WSL_LMG_3_ACCURACY,
vk_WSL_LMG_3_DAMAGE,
vk_WSL_LMG_4_ALLOWABLE,
vk_WSL_LMG_4_ACCURACY,
vk_WSL_LMG_4_DAMAGE,
vk_WSL_SNIPER_0_ALLOWABLE,
vk_WSL_SNIPER_0_ACCURACY,
vk_WSL_SNIPER_0_DAMAGE,
vk_WSL_SNIPER_1_ALLOWABLE,
vk_WSL_SNIPER_1_ACCURACY,
vk_WSL_SNIPER_1_DAMAGE,
vk_WSL_SNIPER_2_ALLOWABLE,
vk_WSL_SNIPER_2_ACCURACY,
vk_WSL_SNIPER_2_DAMAGE,
vk_WSL_SNIPER_3_ALLOWABLE,
vk_WSL_SNIPER_3_ACCURACY,
vk_WSL_SNIPER_3_DAMAGE,
vk_WSL_SNIPER_4_ALLOWABLE,
vk_WSL_SNIPER_4_ACCURACY,
vk_WSL_SNIPER_4_DAMAGE,
vk_SKILL_CAMERA_PLACEMENT,
vk_SKILL_DETECT_CAMERAS,
vk_SKILL_CAMERA_DESTRUCTION,
vk_SKILL_ELECTRIFIED_DAMAGE,
vk_SKILL_PROTECT_FROM_EMP,
vk_SKILL_CREATE_EMP_WEAPONS,
vk_SKILL_COUNTER_SHOCK,
vk_SKILL_TOGGLE_THERMAL,
vk_SKILL_TOGGLE_NIGHT_VISION,
vk_SKILL_HEADGEAR_INTROSPECTION,
vk_SKILL_PROXIMITY_ALARM,
vk_SKILL_DEPLOYABLE_TURRET,
vk_SKILL_DEPLOYABLE_FIRE_TURRET,
vk_SKILL_DOOR_CAMERA,
vk_SKILL_BASIC_ARMOR,
vk_SKILL_ADVANCED_ARMOR,
vk_SKILL_ELITE_ARMOR,
vk_SKILL_THIEF,
vk_SKILL_MOLD,
vk_SKILL_NO_FACTOR_BASIC,
vk_SKILL_NO_FACTOR_ADVANCED,
vk_SKILL_NO_FACTOR_ELITE,
vk_SKILL_EXPLOSIVE_RESISTANCE,
vk_SKILL_INJURE_RESISTANCE,
vk_SKILL_MUNITIONS_REFLECTOR,
vk_SKILL_SENTINEL_DISCIPLINE,
vk_SKILL_DEPLOYABLE_SHIELD,
vk_SKILL_SPRAY_CHANCE,
vk_SKILL_HEADSHOT_CHANCE,
vk_SKILL_LIMB_CHANCE,
vk_SKILL_BETTER_SNIPING_ACCURACY,
vk_SKILL_TARGET_LIMB,
vk_SKILL_ACCURACY,
vk_SKILL_VIP,
vk_SKILL_TRACKER,
vk_SKILL_QUIETER_SNIPER_SHOTS,
vk_SKILL_FASTER_BREACHES,
vk_SKILL_FURTHER_C4S,
vk_SKILL_STRONGER_FRAG_ARM,
vk_SKILL_BIGGER_CLAYMORES,
vk_SKILL_FASTER_THERMITES,
vk_SKILL_BIGGER_FIRE_NADES,
vk_SKILL_CRAFTY_C4,
vk_SKILL_BETTER_EXPLOSIONS,
vk_SKILL_RETROFIT_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER,
vk_SKILL_RETROFIT_STUN_GRENADE_LAUNCHER,
vk_SKILL_STEROID_DEALER,
vk_SKILL_HGH_DEALER,
vk_SKILL_NOXIOUS_NADE_CRAFTER,
vk_SKILL_DUTCH_OVEN,
vk_SKILL_FIRE_NADE_DEALER,
vk_SKILL_PRO_WEAPON_HANDLER,
vk_SKILL_BETTER_WEAPON_ACCURACY,
vk_SKILL_FASTER_TRIGGER_FINGER,
vk_SKILL_FASTER_RELOADING,
vk_SKILL_BASIC_PISTOL,
vk_SKILL_BASIC_ASSAULT_RIFLE,
vk_SKILL_BASIC_SHOTGUN,
vk_SKILL_BASIC_SNIPER_RIFLE,
vk_SKILL_BASIC_SUB_MACHINE_GUN,
vk_SKILL_INTERMEDIATE_PISTOL,
vk_SKILL_INTERMEDIATE_ASSAULT_RIFLE,
vk_SKILL_INTERMEDIATE_SHOTGUN,
vk_SKILL_INTERMEDIATE_SNIPER_RIFLE,
vk_SKILL_INTERMEDIATE_SUB_MACHINE_GUN,
vk_SKILL_ADVANCED_PISTOL,
vk_SKILL_ADVANCED_ASSAULT_RIFLE,
vk_SKILL_ADVANCED_SHOTGUN,
vk_SKILL_ADVANCED_SNIPER_RIFLE,
vk_SKILL_ADVANCED_SUB_MACHINE_GUN,
vk_SKILL_EXPERT_PISTOL,
vk_SKILL_EXPERT_ASSAULT_RIFLE,
vk_SKILL_EXPERT_SHOTGUN,
vk_SKILL_EXPERT_SNIPER_RIFLE,
vk_SKILL_EXPERT_SUB_MACHINE_GUN,
vk_SKILL_ARMOR_PENETRATION_SHOT,
vk_SKILL_NONSTOP_PENETRATION_SHOT,
vk_SKILL_INCREASED_INJURE_CHANCE,
vk_SKILL_ASSAULT_RIFLE_SHRAPNEL,
vk_SKILL_ENTRY_DENIAL,
vk_SKILL_MISDIRECTION,
vk_SKILL_SNIPER_SUPPORT,
vk_SKILL_REDUCED_DETECTION_CHANCE,
vk_SKILL_INCREASED_AWARENESS,
vk_SKILL_TRICK_MAGAZINE,
vk_SKILL_CHAINABLE_BREACHING,
vk_SKILL_HGH_MORE_POWERFUL,
vk_SKILL_BASIC_HP_RECOVERY,
vk_SKILL_PARASITIC_HP_RECOVERY,
vk_SKILL_SUTURE,
vk_SKILL_ADRENALINE_BOOST,
vk_GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS,
vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE,
vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR,
vk_PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER,
vk_GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT,
vk_GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT,
vk_GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT,
vk_SKILL_PYREXIA_THROW_FIRE_NADE,
vk_SKILL_PYREXIA_DRENCH_IN_GASOLINE,
vk_SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE,
vk_SKILL_PYREXIA_CONVERT_TO_FIRE_NADE,
vk_SKILL_PYREXIA_ATTACH_INC_LAUNCHER,
vk_SKILL_PYREXIA_ATTACH_FLAMETHROWER,
vk_SKILL_PYREXIA_CREATE_WALL_OF_FIRE,
vk_SKILL_PYREXIA_SEAL_OFF_ROOM,
vk_SKILL_SNIPER_TRACKING_SHOT_TICKS,
};
static const std::vector<value_key_t> float_types = {
vk_ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER,
vk_EXPLOSIVE_CRITICAL_MULTIPLIER,
vk_RIFLE_CRITICAL_MULTIPLIER,
vk_INJURED_MAX_HP_MULTIPLIER,
vk_MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER,
vk_CHANCE_TO_INJURE_SKILL_MODIFIER,
vk_INJURE_RESISTANCE_SKILL_MODIFIER,
vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER,
vk_BONUS_STRENGTH_MULTIPLIER,
vk_CONSTITUTION_STRENGTH_DAMPENER_MULTIPLIER,
vk_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,
vk_TIER_ONE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,
vk_TIER_TWO_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,
vk_TIER_THREE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,
vk_WEAPON_COOLDOWN_MODIFIER_TIER_ONE,
vk_WEAPON_COOLDOWN_MODIFIER_TIER_TWO,
vk_WEAPON_COOLDOWN_MODIFIER_TIER_THREE,
vk_TIER_ONE_CONSTITUTION_INJURY_DAMPENER,
vk_TIER_TWO_CONSTITUTION_INJURY_DAMPENER,
vk_TIER_THREE_CONSTITUTION_INJURY_DAMPENER,
vk_TIER_ONE_STRENGTH_BONUS_MULTIPLIER,
vk_TIER_TWO_STRENGTH_BONUS_MULTIPLIER,
vk_TIER_THREE_STRENGTH_BONUS_MULTIPLIER,
vk_TIER_ONE_CONSTITUTION_RESISTANCE_MULTIPLIER,
vk_TIER_TWO_CONSTITUTION_RESISTANCE_MULTIPLIER,
vk_TIER_THREE_CONSTITUTION_RESISTANCE_MULTIPLIER,
vk_RIFLE_ATTACHMENT_LEVEL_MULTIPLIER,
vk_LEVEL_0_BASE_DAMAGE,
vk_LEVEL_1_BASE_DAMAGE,
vk_LEVEL_2_BASE_DAMAGE,
vk_LEVEL_3_BASE_DAMAGE,
vk_LEVEL_4_BASE_DAMAGE,
vk_LEVEL_5_BASE_DAMAGE,
vk_LEVEL_6_BASE_DAMAGE,
vk_LEVEL_7_BASE_DAMAGE,
vk_LEVEL_8_BASE_DAMAGE,
vk_LEVEL_9_BASE_DAMAGE,
vk_LEVEL_10_BASE_DAMAGE,
vk_LEVEL_11_BASE_DAMAGE,
vk_LEVEL_12_BASE_DAMAGE,
vk_LEVEL_13_BASE_DAMAGE,
vk_LEVEL_14_BASE_DAMAGE,
vk_LEVEL_15_BASE_DAMAGE,
vk_LEVEL_16_BASE_DAMAGE,
vk_LEVEL_17_BASE_DAMAGE,
vk_LEVEL_18_BASE_DAMAGE,
vk_LEVEL_19_BASE_DAMAGE,
vk_LEVEL_20_BASE_DAMAGE,
vk_LEVEL_21_BASE_DAMAGE,
vk_LEVEL_22_BASE_DAMAGE,
vk_LEVEL_23_BASE_DAMAGE,
vk_LEVEL_24_BASE_DAMAGE,
vk_LEVEL_25_BASE_DAMAGE,
vk_LEVEL_26_BASE_DAMAGE,
vk_LEVEL_27_BASE_DAMAGE,
vk_LEVEL_28_BASE_DAMAGE,
vk_LEVEL_29_BASE_DAMAGE,
vk_LEVEL_30_BASE_DAMAGE,
vk_LEVEL_DIFF_5,
vk_LEVEL_DIFF_4,
vk_LEVEL_DIFF_3,
vk_LEVEL_DIFF_2,
vk_LEVEL_DIFF_1,
vk_LEVEL_DIFF_0,
vk_LEVEL_DIFF_NEG_1,
vk_LEVEL_DIFF_NEG_2,
vk_LEVEL_DIFF_NEG_3,
vk_LEVEL_DIFF_NEG_4,
vk_LEVEL_DIFF_NEG_5,
vk_LEVEL_DIFF_DEFAULT,
vk_LEVEL_DIFF_GREATER_THAN_SIX,
vk_LEVEL_DIFF_FOOBAR_TEST,
vk_ARMOR_CRIT_DAMAGE_MULTIPLIER,
};
static const std::vector<value_key_t> string_types = {
vk_MSG_NO_PRACTICE_SESSIONS,
vk_CAN_BE_SEARCHED,
vk_SANITY_CHECK,
vk_MINI_GUNNER_WEAR_LIGHT,
vk_MINI_GUNNER_WEAR_FINGER_R,
vk_MINI_GUNNER_WEAR_FINGER_L,
vk_MINI_GUNNER_WEAR_NECK_1,
vk_MINI_GUNNER_WEAR_NECK_2,
vk_MINI_GUNNER_WEAR_BODY,
vk_MINI_GUNNER_WEAR_HEAD,
vk_MINI_GUNNER_WEAR_LEGS,
vk_MINI_GUNNER_WEAR_FEET,
vk_MINI_GUNNER_WEAR_HANDS,
vk_MINI_GUNNER_WEAR_ARMS,
vk_MINI_GUNNER_WEAR_SHIELD,
vk_MINI_GUNNER_WEAR_ABOUT,
vk_MINI_GUNNER_WEAR_WAIST,
vk_MINI_GUNNER_WEAR_WRIST_R,
vk_MINI_GUNNER_WEAR_WRIST_L,
vk_MINI_GUNNER_WEAR_PRIMARY,
vk_MINI_GUNNER_WEAR_WIELD,
vk_MINI_GUNNER_WEAR_HOLD,
vk_MINI_GUNNER_WEAR_SECONDARY_WEAPON,
vk_MINI_GUNNER_WEAR_SECONDARY,
vk_MINI_GUNNER_WEAR_WEAPON_ATTACHMENT,
vk_MINI_GUNNER_WEAR_SHOULDERS_L,
vk_MINI_GUNNER_WEAR_SHOULDERS_R,
vk_MINI_GUNNER_WEAR_BACKPACK,
vk_MINI_GUNNER_WEAR_GOGGLES,
vk_MINI_GUNNER_WEAR_VEST_PACK,
vk_MINI_GUNNER_WEAR_ELBOW_L,
vk_MINI_GUNNER_WEAR_ELBOW_R,
vk_LOWLY_SECURITY_GUARD_WEAR_LIGHT,
vk_LOWLY_SECURITY_GUARD_WEAR_FINGER_R,
vk_LOWLY_SECURITY_GUARD_WEAR_FINGER_L,
vk_LOWLY_SECURITY_GUARD_WEAR_NECK_1,
vk_LOWLY_SECURITY_GUARD_WEAR_NECK_2,
vk_LOWLY_SECURITY_GUARD_WEAR_BODY,
vk_LOWLY_SECURITY_GUARD_WEAR_HEAD,
vk_LOWLY_SECURITY_GUARD_WEAR_LEGS,
vk_LOWLY_SECURITY_GUARD_WEAR_FEET,
vk_LOWLY_SECURITY_GUARD_WEAR_HANDS,
vk_LOWLY_SECURITY_GUARD_WEAR_ARMS,
vk_LOWLY_SECURITY_GUARD_WEAR_SHIELD,
vk_LOWLY_SECURITY_GUARD_WEAR_ABOUT,
vk_LOWLY_SECURITY_GUARD_WEAR_WAIST,
vk_LOWLY_SECURITY_GUARD_WEAR_WRIST_R,
vk_LOWLY_SECURITY_GUARD_WEAR_WRIST_L,
vk_LOWLY_SECURITY_GUARD_WEAR_PRIMARY,
vk_LOWLY_SECURITY_GUARD_WEAR_WIELD,
vk_LOWLY_SECURITY_GUARD_WEAR_HOLD,
vk_LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON,
vk_LOWLY_SECURITY_GUARD_WEAR_SECONDARY,
vk_LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT,
vk_LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L,
vk_LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R,
vk_LOWLY_SECURITY_GUARD_WEAR_BACKPACK,
vk_LOWLY_SECURITY_GUARD_WEAR_GOGGLES,
vk_LOWLY_SECURITY_GUARD_WEAR_VEST_PACK,
vk_LOWLY_SECURITY_GUARD_WEAR_ELBOW_L,
vk_LOWLY_SECURITY_GUARD_WEAR_ELBOW_R,
vk_LUNATIC_WEAR_LIGHT,
vk_LUNATIC_WEAR_FINGER_R,
vk_LUNATIC_WEAR_FINGER_L,
vk_LUNATIC_WEAR_NECK_1,
vk_LUNATIC_WEAR_NECK_2,
vk_LUNATIC_WEAR_BODY,
vk_LUNATIC_WEAR_HEAD,
vk_LUNATIC_WEAR_LEGS,
vk_LUNATIC_WEAR_FEET,
vk_LUNATIC_WEAR_HANDS,
vk_LUNATIC_WEAR_ARMS,
vk_LUNATIC_WEAR_SHIELD,
vk_LUNATIC_WEAR_ABOUT,
vk_LUNATIC_WEAR_WAIST,
vk_LUNATIC_WEAR_WRIST_R,
vk_LUNATIC_WEAR_WRIST_L,
vk_LUNATIC_WEAR_PRIMARY,
vk_LUNATIC_WEAR_WIELD,
vk_LUNATIC_WEAR_HOLD,
vk_LUNATIC_WEAR_SECONDARY_WEAPON,
vk_LUNATIC_WEAR_SECONDARY,
vk_LUNATIC_WEAR_WEAPON_ATTACHMENT,
vk_LUNATIC_WEAR_SHOULDERS_L,
vk_LUNATIC_WEAR_SHOULDERS_R,
vk_LUNATIC_WEAR_BACKPACK,
vk_LUNATIC_WEAR_GOGGLES,
vk_LUNATIC_WEAR_VEST_PACK,
vk_LUNATIC_WEAR_ELBOW_L,
vk_LUNATIC_WEAR_ELBOW_R,
vk_MSG_CRITICAL,
vk_MSG_HEADSHOT,
vk_MSG_HIT_BY_HEADSHOT,
vk_MSG_HIT,
vk_MSG_OUT_OF_AMMO,
vk_MSG_MISSED_TARGET,
vk_MSG_TARGET_DEAD,
vk_MSG_YOURE_INJURED,
vk_MSG_YOU_ARE_DISORIENTED,
vk_MSG_YOU_DISORIENT_SOMEONE,
vk_MSG_FIRE_DAMAGE,
vk_MSG_EXPLOSIVE_DAMAGE,
vk_MSG_SHRAPNEL_DAMAGE,
vk_MSG_CORROSIVE_DAMAGE,
vk_MSG_CRYOGENIC_DAMAGE,
vk_MSG_RADIOACTIVE_DAMAGE,
vk_MSG_ANTI_MATTER_DAMAGE,
vk_MSG_EMP_DAMAGE,
vk_MSG_SHOCK_DAMAGE,
vk_MSG_SMOKE_DAMAGE,
vk_MSG_NARROWLY_MISSED_ME,
vk_MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO,
vk_MSG_YOU_INFLICTED_INCENDIARY_AMMO,
vk_MSG_YOU_ARE_INJURED,
vk_MSG_YOUR_TARGET_IS_DEAD,
vk_MSG_HIT_BY_RIFLE_ATTACK,
vk_MSG_HIT_BY_MELEE_ATTACK,
vk_MSG_HIT_BY_BLADED_MELEE_ATTACK,
vk_MSG_HIT_BY_BLUNT_MELEE_ATTACK,
vk_MSG_YOU_INFLICTED_MELEE_ATTACK,
vk_MSG_YOU_INFLICTED_BLADED_MELEE_ATTACK,
vk_MSG_YOU_INFLICTED_BLUNT_MELEE_ATTACK,
vk_MSG_YOU_INFLICTED_INCENDIARY_DAMAGE,
vk_MSG_YOU_INFLICTED_RADIOACTIVE_DAMAGE,
vk_MSG_YOU_INFLICTED_ANTI_MATTER_DAMAGE,
vk_MSG_YOU_INFLICTED_CORROSIVE_DAMAGE,
vk_MSG_YOU_INFLICTED_EMP_DAMAGE,
vk_MSG_YOU_INFLICTED_EXPLOSIVE_DAMAGE,
vk_MSG_YOU_INFLICTED_SHRAPNEL_DAMAGE,
vk_MSG_YOU_INFLICTED_CRYOGENIC_DAMAGE,
vk_MSG_YOU_INFLICTED_SHOCK_DAMAGE,
vk_MSG_HIT_BY_INCENDIARY_DAMAGE,
vk_MSG_HIT_BY_RADIOACTIVE_DAMAGE,
vk_MSG_HIT_BY_ANTI_MATTER_DAMAGE,
vk_MSG_HIT_BY_CORROSIVE_DAMAGE,
vk_MSG_HIT_BY_EMP_DAMAGE,
vk_MSG_HIT_BY_EXPLOSIVE_DAMAGE,
vk_MSG_HIT_BY_SHRAPNEL_DAMAGE,
vk_MSG_HIT_BY_CRYOGENIC_DAMAGE,
vk_MSG_HIT_BY_SHOCK_DAMAGE,
vk_MSG_HIT_BY_SPRAY_ATTACK,
vk_MSG_TARGET_IN_PEACEFUL_ROOM,
vk_MSG_NO_PRIMARY_WIELDED,
vk_MSG_COOLDOWN_IN_EFFECT,
vk_MSG_COULDNT_FIND_TARGET,
vk_MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS,
vk_MINI_GUNNER_RANDOM_DISORIENT_STRINGS,
vk_MSG_YOU_INJURED_SOMEONE,
vk_DEFAULT_PUBLIC_CHANNELS,
vk_EXTENDED_PREFERENCES,
vk_EXTENDED_PREFERENCES_DEFAULTS,
vk_SUPER_USERS_LIST,
vk_PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION,
vk_PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION,
vk_MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS,
vk_MSG_YOU_REFLECTED_MUNITIONS,
vk_MSG_YOU_INFLICTED_AR_SHRAPNEL,
vk_MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL,
vk_SUPER_USER_REJECT_MESSAGE,
vk_ADMIN_SUCCESS_MESSAGE,
vk_ADMIN_FAILURE_MESSAGE,
vk_UNIMPLEMENTED_MESSAGE,
vk_STOCK_STARS_MESSAGE,
vk_STOCK_BLIND_MESSAGE,
vk_STOCK_PITCH_BLACK_MESSAGE,
vk_STOCK_READ_WHAT_MESSAGE,
vk_STOCK_EXAMINE_MESSAGE,
vk_STOCK_LOOK_INSIDE_MESSAGE,
vk_STOCK_GOLD_BROKE_MESSAGE,
vk_STOCK_GOLD_ONE_MISERABLE_MESSAGE,
vk_STOCK_GOLD_PREFIX_MESSAGE,
vk_STOCK_GOLD_SUFFIX_MESSAGE,
vk_MSG_YOU_FEIGN_DEATH,
vk_MSG_YOU_FAIL_FEIGN_DEATH,
vk_ADVANCE_LEVEL_CONGRATS,
vk_CHARGEN_TRIADS_FORMAT,
vk_ADVANCE_LEVEL_MESSAGE,
vk_ADVANCE_MULTIPLE_LEVELS_MESSAGE,
};
static const std::vector<value_key_t> uint8_types = {
vk_ARMOR_LOCKER_QUOTA,
vk_WEAPON_LOCKER_QUOTA,
vk_RADIO_INITIAL_RESPONSE_TICKS,
vk_SNIPER_TRACKING_SHOT_MAX_COUNT,
vk_LUCKY_DISORIENTED_VISION_CHANCE,
vk_TERRIBLE_SKILL_CHANCE_OF_SUCCESS,
vk_AWFUL_SKILL_CHANCE_OF_SUCCESS,
vk_OKAY_SKILL_CHANCE_OF_SUCCESS,
vk_LEARNED_SKILL_CHANCE_OF_SUCCESS,
vk_MASTERED_SKILL_CHANCE_OF_SUCCESS,
vk_ELITE_SKILL_CHANCE_OF_SUCCESS,
vk_PERCENT_CHANCE_DISSIPATED_DETECTED_BY_THERMALS,
vk_ENGINEER_REPLENISH_PULSE,
vk_ENGINEER_SENSOR_GRENADE_MAX_COUNT,
vk_ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT,
vk_SNIPER_REPLENISH_PULSE,
vk_SNIPER_CLAYMORE_MAX_COUNT,
vk_GHOST_REPLENISH_PULSE,
vk_GHOST_DISSIPATE_CHARGE_MAX_COUNT,
vk_PYREXIA_REPLENISH_PULSE,
vk_FORGE_REPLENISH_PULSE,
vk_SYNDROME_REPLENISH_PULSE,
vk_GHOST_CLAYMORE_MAX_COUNT,
vk_CAMERA_INSTALLATION_TICS,
vk_CLAYMORE_INSTALLATION_TICS,
vk_PYREXIA_FIRE_NADE_CHARGES_DEFAULT,
vk_PYREXIA_FIRE_NADE_CHARGES_INITIATE,
vk_PYREXIA_FIRE_NADE_CHARGES_FAMILIAR,
vk_PYREXIA_FIRE_NADE_CHARGES_MASTER,
vk_SINGLE_SHOT_SHOTGUN,
vk_SINGLE_SHOT_ASSAULT_RIFLE,
vk_SINGLE_SHOT_SUB_MACHINE_GUN,
vk_SINGLE_SHOT_SNIPER,
vk_SINGLE_SHOT_HANDGUN,
vk_SINGLE_SHOT_PISTOL,
vk_SINGLE_SHOT_MACHINE_PISTOL,
vk_SINGLE_SHOT_LIGHT_MACHINE_GUN,
vk_SPRAY_SHOT_SHOTGUN,
vk_SPRAY_SHOT_ASSAULT_RIFLE,
vk_SPRAY_SHOT_SUB_MACHINE_GUN,
vk_SPRAY_SHOT_SNIPER,
vk_SPRAY_SHOT_HANDGUN,
vk_SPRAY_SHOT_PISTOL,
vk_SPRAY_SHOT_MACHINE_PISTOL,
vk_SPRAY_SHOT_LIGHT_MACHINE_GUN,
vk_SPRAY_CHANCE,
vk_SPRAY_HEADSHOT_CHANCE,
vk_SPRAY_CRITICAL_CHANCE,
vk_SPRAY_CRITICAL_REDUCTION_DIVISOR,
vk_REVIVE_TICKS,
vk_REVIVE_HP,
vk_INJURED_HP,
vk_LOWLY_SECURITY_SCAN_DEPTH,
vk_MINI_GUNNER_SCAN_DEPTH,
vk_SPRAY_CHANCE_SKILL_MODIFIER,
vk_HEADSHOT_SKILL_MODIFIER,
vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE,
vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT,
vk_ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES,
vk_SHOW_UNIMPLEMENTED_SKILLS,
vk_GHOST_FEIGN_DEATH_INITIATE_DURATION,
vk_GHOST_FEIGN_DEATH_FAMILIAR_DURATION,
vk_GHOST_FEIGN_DEATH_MASTER_DURATION,
vk_MARKSMAN_CLASS_TRIADS_MELEE,
vk_GHOST_CLASS_TRIADS_MELEE,
vk_GHOST_CLASS_TRIADS_WEAPONS,
vk_GHOST_CLASS_TRIADS_INTEL,
vk_GHOST_CLASS_TRIADS_SPEED,
vk_GHOST_CLASS_TRIADS_ARMOR,
vk_MARKSMAN_CLASS_TRIADS_WEAPONS,
vk_MARKSMAN_CLASS_TRIADS_INTEL,
vk_MARKSMAN_CLASS_TRIADS_SPEED,
vk_MARKSMAN_CLASS_TRIADS_ARMOR,
vk_BANDIT_CLASS_TRIADS_MELEE,
vk_BANDIT_CLASS_TRIADS_WEAPONS,
vk_BANDIT_CLASS_TRIADS_INTEL,
vk_BANDIT_CLASS_TRIADS_SPEED,
vk_BANDIT_CLASS_TRIADS_ARMOR,
vk_BUTCHER_CLASS_TRIADS_MELEE,
vk_BUTCHER_CLASS_TRIADS_WEAPONS,
vk_BUTCHER_CLASS_TRIADS_INTEL,
vk_BUTCHER_CLASS_TRIADS_SPEED,
vk_BUTCHER_CLASS_TRIADS_ARMOR,
vk_STRIKER_CLASS_TRIADS_MELEE,
vk_STRIKER_CLASS_TRIADS_WEAPONS,
vk_STRIKER_CLASS_TRIADS_INTEL,
vk_STRIKER_CLASS_TRIADS_SPEED,
vk_STRIKER_CLASS_TRIADS_ARMOR,
vk_OBSTRUCTOR_CLASS_TRIADS_MELEE,
vk_OBSTRUCTOR_CLASS_TRIADS_WEAPONS,
vk_OBSTRUCTOR_CLASS_TRIADS_INTEL,
vk_OBSTRUCTOR_CLASS_TRIADS_SPEED,
vk_OBSTRUCTOR_CLASS_TRIADS_ARMOR,
vk_MALADY_CLASS_TRIADS_MELEE,
vk_MALADY_CLASS_TRIADS_WEAPONS,
vk_MALADY_CLASS_TRIADS_INTEL,
vk_MALADY_CLASS_TRIADS_SPEED,
vk_MALADY_CLASS_TRIADS_ARMOR,
vk_PYREXIA_CLASS_TRIADS_MELEE,
vk_PYREXIA_CLASS_TRIADS_WEAPONS,
vk_PYREXIA_CLASS_TRIADS_INTEL,
vk_PYREXIA_CLASS_TRIADS_SPEED,
vk_PYREXIA_CLASS_TRIADS_ARMOR,
vk_DEALER_CLASS_TRIADS_MELEE,
vk_DEALER_CLASS_TRIADS_WEAPONS,
vk_DEALER_CLASS_TRIADS_INTEL,
vk_DEALER_CLASS_TRIADS_SPEED,
vk_DEALER_CLASS_TRIADS_ARMOR,
vk_FORGE_CLASS_TRIADS_MELEE,
vk_FORGE_CLASS_TRIADS_WEAPONS,
vk_FORGE_CLASS_TRIADS_INTEL,
vk_FORGE_CLASS_TRIADS_SPEED,
vk_FORGE_CLASS_TRIADS_ARMOR,
vk_SYNDROME_CLASS_TRIADS_MELEE,
vk_SYNDROME_CLASS_TRIADS_WEAPONS,
vk_SYNDROME_CLASS_TRIADS_INTEL,
vk_SYNDROME_CLASS_TRIADS_SPEED,
vk_SYNDROME_CLASS_TRIADS_ARMOR,
vk_MACHINIST_CLASS_TRIADS_MELEE,
vk_MACHINIST_CLASS_TRIADS_WEAPONS,
vk_MACHINIST_CLASS_TRIADS_INTEL,
vk_MACHINIST_CLASS_TRIADS_SPEED,
vk_MACHINIST_CLASS_TRIADS_ARMOR,
vk_REGENERATED_AMMO_LOW,
vk_REGENERATED_AMMO_HIGH,
vk_RELOAD_TICKS_SHOTGUN,
vk_RELOAD_TICKS_ASSAULT_RIFLE,
vk_RELOAD_TICKS_SUB_MACHINE_GUN,
vk_RELOAD_TICKS_SNIPER,
vk_RELOAD_TICKS_HANDGUN,
vk_RELOAD_TICKS_PISTOL,
vk_RELOAD_TICKS_MACHINE_PISTOL,
vk_RELOAD_TICKS_LIGHT_MACHINE_GUN,
vk_DEFAULT_DISORIENT_TICKS_FROM_RIFLE_ATTACK,
vk_AMMO_LOCKER_QUOTA,
};
static const std::vector<value_key_t> uint32_types = {
vk_BREACHER_REPLENISH_CALL_COUNT,
vk_GHOST_DISSIPATE_TICKS_DURATION,
vk_SNIPER_XRAY_SHOT_MAX_COUNT,
			};
		bool is_int(value_key_t key){
			return (std::find(int_types.begin(),int_types.end(),key) != int_types.end());
		}
		bool is_bool(value_key_t key){
			return (std::find(bool_types.begin(),bool_types.end(),key) != bool_types.end());
		}
		bool is_uint8(value_key_t key){
			return (std::find(uint8_types.begin(),uint8_types.end(),key) != uint8_types.end());
		}
		bool is_uint16(value_key_t key){
			return (std::find(uint16_types.begin(),uint16_types.end(),key) != uint16_types.end());
		}
		bool is_uint32(value_key_t key){
			return (std::find(uint32_types.begin(),uint32_types.end(),key) != uint32_types.end());
		}
		bool is_string(value_key_t key){
			return (std::find(string_types.begin(),string_types.end(),key) != string_types.end());
		}
		bool is_float(value_key_t key){
			return (std::find(float_types.begin(),float_types.end(),key) != float_types.end());
		}

		void revert_to_default(std::string in_key){
			alt_value_map.erase(to_vk_from_string(in_key));
		}
		void revert_to_default(value_key_t in_key){
			alt_value_map.erase(in_key);
		}
		void save_to_lmdb(value_key_t v_key,std::string value){
			mods::db::lmdb_renew();
			std::string key = db_key({"values",to_string(v_key)});
			m_debug("setting lmdb: '" << key << "' -> '" << value << "'");
			mods::db::lmdb_put(key,value);
			mods::db::lmdb_commit();
		}

		void save_to_lmdb(std::string key,std::string value){
			save_to_lmdb(to_vk_from_string(key),value);
		}

		void load_from_lmdb(value_key_t v_key){
			mods::db::lmdb_renew();
			std::string key = db_key({"values",to_string(v_key)});
			m_debug("load from lmdb: '" << key << "'");
			if(!key_exists(key)){
				m_debug(key << " doesn't exist... returning...");
				mods::db::lmdb_commit();
				return;
			}
			std::string value = mods::db::lmdb_get(key);
			if(is_int(v_key)){
				alt_value_map[v_key] = static_cast<int>(atoi(value.c_str()));
				mods::db::lmdb_commit();
				return;
			}
			if(is_uint8(v_key)){
				alt_value_map[v_key] = static_cast<uint8_t>(atoi(value.c_str()));
				mods::db::lmdb_commit();
				return;
			}
			if(is_uint16(v_key)){
				alt_value_map[v_key] = static_cast<uint16_t>(atoi(value.c_str()));
				m_debug(key << " uint16_t exists.... value:'" << value.c_str() << "'");
				mods::db::lmdb_commit();
				return;
			}
			if(is_string(v_key)){
				alt_value_map[v_key] = value;
				mods::db::lmdb_commit();
				return;
			}
			if(is_float(v_key)){
				alt_value_map[v_key] = static_cast<float>(atof(value.c_str()));
				mods::db::lmdb_commit();
				return;
			}
			if(is_bool(v_key)){
				if(value.compare("1") == 0 || value.compare("true") == 0){
					alt_value_map[v_key] = true;
				}else if (value.compare("0") == 0 || value.compare("false") == 0){
					alt_value_map[v_key] = false;
				}
				mods::db::lmdb_commit();
				return;
			}
			log("[WARNING] key doesnt exist in int or string types!->'%s'",key.c_str());
			mods::db::lmdb_commit();
		}
		void load_from_lmdb(std::string in_key){
			load_from_lmdb(to_vk_from_string(in_key));
		}

		std::string random_key_string(std::string value){
					std::vector<std::string> strings;
					std::string current = "";
					for(auto ch : value){
						if(ch == '|' && current.length()){
							strings.emplace_back(current);
							current = "";
							continue;
						}
						current += ch;
					}
					if(current.length()){
						strings.emplace_back(current);
					}
				return strings[rand_number(0,strings.size()-1)];
		}


CGET_DEF(bool,ALLOW_MOCK_LEVELS,false);
CGET_DEF(int,FIRE_DAMAGE_TICK_RESOLUTION,30);
CGET_DEF(int,FLASHBANG_COOLDOWN_TICKS,3);
CGET_DEF(int,FIRE_EVERY_N_TICKS,400);
CGET_DEF(int,FIRE_WOODEN_ADDITIONAL_TICKS,80);
CGET_DEF(int,FIRE_CARPET_ADDITIONAL_TICKS,60);
CGET_DEF(int,DAMAGE_DIVISOR,3);
CGET_DEF(int,FRAG_GRENADE_TICKS,6);
CGET_DEF(int,EMP_GRENADE_TICKS,6);
CGET_DEF(int,SENSOR_GRENADE_TICKS,6);
CGET_DEF(int,FLASHBANG_GRENADE_TICKS,6);
CGET_DEF(int,SMOKE_GRENADE_TICKS,6);
CGET_DEF(int,INCENDIARY_GRENADE_TICKS,6);
CGET_DEF(int,FIRE_STATUS_KINDLING_DAMAGE,10);
CGET_DEF(int,FIRE_STATUS_COMPLETELY_ON_FIRE_DAMAGE,70);
CGET_DEF(int,FIRE_STATUS_SMOLDERING_DAMAGE,40);
CGET_DEF(int,FIRE_STATUS_SMOKING_DAMAGE,15);
CGET_DEF(int,ADVANCE_LEVEL_BONUS_HP_DICE,6);
CGET_DEF(int,ADVANCE_LEVEL_BONUS_HP_SIDES,6);
CGET_DEF(int,ADVANCE_LEVEL_BONUS_HP_THRESHOLD,12);
CGET_DEF(uint16_t,LOWLY_SECURITY_ROAM_TICK,20);
CGET_DEF(uint16_t,LOWLY_SECURITY_RANDOM_TRIVIAL_TICK,60);
CGET_DEF(uint16_t,BREACHER_EXPLOSIVE_SHOT_MAX_COUNT,2);
CGET_DEF(uint16_t,SKILL_GHOST_DRONE_SCAN,50);
CGET_DEF(uint16_t,SKILL_GHOST_STEALTH,50);
CGET_DEF(uint16_t,SKILL_GHOST_SUMMON_EXTRACTION,50);
CGET_DEF(uint16_t,SKILL_GHOST_XRAY_SHOT,50);
CGET_DEF(uint16_t,SKILL_GHOST_FEIGN_DEATH,50);
CGET_DEF(uint16_t,SKILL_GHOST_PLANT_CLAYMORE,50);
CGET_DEF(uint16_t,SKILL_GHOST_PENETRATING_SHOT,50);
CGET_DEF(uint16_t,SKILL_GHOST_INTIMIDATION,50);
CGET_DEF(uint16_t,SKILL_GHOST_CRYOGENIC_GRENADE,50);
CGET_DEF(uint16_t,SKILL_GHOST_FLASH_UNDERBARREL,50);
CGET_DEF(uint16_t,SKILL_SNIPER_TRACKING_SHOT,50);
CGET_DEF(uint16_t,SKILL_SNIPER_SUMMON_UNDERBARREL_SHOTGUN,50);
CGET_DEF(uint16_t,SKILL_SNIPER_SUMMON_UNDERBARREL_GRENADE_LAUNCHER,50);
CGET_DEF(uint16_t,SKILL_SNIPER_GUIDED_MISSILE,50);
CGET_DEF(uint16_t,SKILL_SNIPER_TARGET_LIMB,50);
CGET_DEF(uint16_t,SKILL_SNIPER_PLANT_CLAYMORE,50);
CGET_DEF(uint16_t,SKILL_SNIPER_XRAY_SHOT,50);
CGET_DEF(uint16_t,SKILL_SNIPER_SUMMON_AREA_SCAN,50);
CGET_DEF(uint16_t,SKILL_GRENADE_USAGE,50);
CGET_DEF(uint16_t,SKILL_CLAYMORE_USAGE,50);
CGET_DEF(uint16_t,SKILL_BREACH_USAGE,50);
CGET_DEF(uint16_t,WSL_SHOTGUN_0_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SHOTGUN_0_ACCURACY,80);
CGET_DEF(uint16_t,WSL_SHOTGUN_0_DAMAGE,80);
CGET_DEF(uint16_t,WSL_SHOTGUN_1_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SHOTGUN_1_ACCURACY,15);
CGET_DEF(uint16_t,WSL_SHOTGUN_1_DAMAGE,15);
CGET_DEF(uint16_t,WSL_SHOTGUN_2_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_2_ACCURACY,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_2_DAMAGE,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_3_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_3_ACCURACY,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_3_DAMAGE,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_4_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_4_ACCURACY,0);
CGET_DEF(uint16_t,WSL_SHOTGUN_4_DAMAGE,0);
CGET_DEF(uint16_t,WSL_AR_0_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_AR_0_ACCURACY,40);
CGET_DEF(uint16_t,WSL_AR_0_DAMAGE,40);
CGET_DEF(uint16_t,WSL_AR_1_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_AR_1_ACCURACY,40);
CGET_DEF(uint16_t,WSL_AR_1_DAMAGE,40);
CGET_DEF(uint16_t,WSL_AR_2_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_AR_2_ACCURACY,40);
CGET_DEF(uint16_t,WSL_AR_2_DAMAGE,40);
CGET_DEF(uint16_t,WSL_AR_3_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_AR_3_ACCURACY,0);
CGET_DEF(uint16_t,WSL_AR_3_DAMAGE,0);
CGET_DEF(uint16_t,WSL_AR_4_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_AR_4_ACCURACY,0);
CGET_DEF(uint16_t,WSL_AR_4_DAMAGE,0);
CGET_DEF(uint16_t,WSL_SMG_0_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SMG_0_ACCURACY,90);
CGET_DEF(uint16_t,WSL_SMG_0_DAMAGE,40);
CGET_DEF(uint16_t,WSL_SMG_1_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_SMG_1_ACCURACY,0);
CGET_DEF(uint16_t,WSL_SMG_1_DAMAGE,0);
CGET_DEF(uint16_t,WSL_SMG_2_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_SMG_2_ACCURACY,0);
CGET_DEF(uint16_t,WSL_SMG_2_DAMAGE,0);
CGET_DEF(uint16_t,WSL_SMG_3_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_SMG_3_ACCURACY,0);
CGET_DEF(uint16_t,WSL_SMG_3_DAMAGE,0);
CGET_DEF(uint16_t,WSL_SMG_4_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_SMG_4_ACCURACY,0);
CGET_DEF(uint16_t,WSL_SMG_4_DAMAGE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_0_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_0_ACCURACY,25);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_0_DAMAGE,15);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_1_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_1_ACCURACY,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_1_DAMAGE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_2_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_2_ACCURACY,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_2_DAMAGE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_3_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_3_ACCURACY,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_3_DAMAGE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_4_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_4_ACCURACY,0);
CGET_DEF(uint16_t,WSL_MACHINE_PISTOL_4_DAMAGE,0);
CGET_DEF(uint16_t,HEADSHOT_DIVISOR,3);
CGET_DEF(uint16_t,WSL_HANDGUN_0_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_HANDGUN_0_ACCURACY,55);
CGET_DEF(uint16_t,WSL_HANDGUN_0_DAMAGE,10);
CGET_DEF(uint16_t,WSL_HANDGUN_1_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_HANDGUN_1_ACCURACY,0);
CGET_DEF(uint16_t,WSL_HANDGUN_1_DAMAGE,0);
CGET_DEF(uint16_t,WSL_HANDGUN_2_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_HANDGUN_2_ACCURACY,0);
CGET_DEF(uint16_t,WSL_HANDGUN_2_DAMAGE,0);
CGET_DEF(uint16_t,WSL_HANDGUN_3_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_HANDGUN_3_ACCURACY,0);
CGET_DEF(uint16_t,WSL_HANDGUN_3_DAMAGE,0);
CGET_DEF(uint16_t,WSL_HANDGUN_4_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_HANDGUN_4_ACCURACY,0);
CGET_DEF(uint16_t,WSL_HANDGUN_4_DAMAGE,0);
CGET_DEF(uint16_t,WSL_LMG_0_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_LMG_0_ACCURACY,40);
CGET_DEF(uint16_t,WSL_LMG_0_DAMAGE,40);
CGET_DEF(uint16_t,WSL_LMG_1_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_LMG_1_ACCURACY,35);
CGET_DEF(uint16_t,WSL_LMG_1_DAMAGE,35);
CGET_DEF(uint16_t,WSL_LMG_2_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_LMG_2_ACCURACY,30);
CGET_DEF(uint16_t,WSL_LMG_2_DAMAGE,30);
CGET_DEF(uint16_t,WSL_LMG_3_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_LMG_3_ACCURACY,0);
CGET_DEF(uint16_t,WSL_LMG_3_DAMAGE,0);
CGET_DEF(uint16_t,WSL_LMG_4_ALLOWABLE,0);
CGET_DEF(uint16_t,WSL_LMG_4_ACCURACY,0);
CGET_DEF(uint16_t,WSL_LMG_4_DAMAGE,0);
CGET_DEF(uint16_t,WSL_SNIPER_0_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SNIPER_0_ACCURACY,10);
CGET_DEF(uint16_t,WSL_SNIPER_0_DAMAGE,10);
CGET_DEF(uint16_t,WSL_SNIPER_1_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SNIPER_1_ACCURACY,35);
CGET_DEF(uint16_t,WSL_SNIPER_1_DAMAGE,35);
CGET_DEF(uint16_t,WSL_SNIPER_2_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SNIPER_2_ACCURACY,60);
CGET_DEF(uint16_t,WSL_SNIPER_2_DAMAGE,60);
CGET_DEF(uint16_t,WSL_SNIPER_3_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SNIPER_3_ACCURACY,75);
CGET_DEF(uint16_t,WSL_SNIPER_3_DAMAGE,75);
CGET_DEF(uint16_t,WSL_SNIPER_4_ALLOWABLE,1);
CGET_DEF(uint16_t,WSL_SNIPER_4_ACCURACY,75);
CGET_DEF(uint16_t,WSL_SNIPER_4_DAMAGE,75);
CGET_DEF(uint16_t,SKILL_CAMERA_PLACEMENT,50);
CGET_DEF(uint16_t,SKILL_DETECT_CAMERAS,50);
CGET_DEF(uint16_t,SKILL_CAMERA_DESTRUCTION,100);
CGET_DEF(uint16_t,SKILL_ELECTRIFIED_DAMAGE,100);
CGET_DEF(uint16_t,SKILL_PROTECT_FROM_EMP,200);
CGET_DEF(uint16_t,SKILL_CREATE_EMP_WEAPONS,200);
CGET_DEF(uint16_t,SKILL_COUNTER_SHOCK,4);
CGET_DEF(uint16_t,SKILL_TOGGLE_THERMAL,2050);
CGET_DEF(uint16_t,SKILL_TOGGLE_NIGHT_VISION,2050);
CGET_DEF(uint16_t,SKILL_HEADGEAR_INTROSPECTION,3050);
CGET_DEF(uint16_t,SKILL_PROXIMITY_ALARM,3050);
CGET_DEF(uint16_t,SKILL_DEPLOYABLE_TURRET,3050);
CGET_DEF(uint16_t,SKILL_DEPLOYABLE_FIRE_TURRET,3050);
CGET_DEF(uint16_t,SKILL_DOOR_CAMERA,3050);
CGET_DEF(uint16_t,SKILL_BASIC_ARMOR,50);
CGET_DEF(uint16_t,SKILL_ADVANCED_ARMOR,50);
CGET_DEF(uint16_t,SKILL_ELITE_ARMOR,50);
CGET_DEF(uint16_t,SKILL_THIEF,200);
CGET_DEF(uint16_t,SKILL_MOLD,350);
CGET_DEF(uint16_t,SKILL_NO_FACTOR_BASIC,400);
CGET_DEF(uint16_t,SKILL_NO_FACTOR_ADVANCED,850);
CGET_DEF(uint16_t,SKILL_NO_FACTOR_ELITE,900);
CGET_DEF(uint16_t,SKILL_EXPLOSIVE_RESISTANCE,2050);
CGET_DEF(uint16_t,SKILL_INJURE_RESISTANCE,3050);
CGET_DEF(uint16_t,SKILL_MUNITIONS_REFLECTOR,4);
CGET_DEF(uint16_t,SKILL_SENTINEL_DISCIPLINE,3);
CGET_DEF(uint16_t,SKILL_DEPLOYABLE_SHIELD,8050);
CGET_DEF(uint16_t,SKILL_SPRAY_CHANCE,150);
CGET_DEF(uint16_t,SKILL_HEADSHOT_CHANCE,250);
CGET_DEF(uint16_t,SKILL_LIMB_CHANCE,350);
CGET_DEF(uint16_t,SKILL_BETTER_SNIPING_ACCURACY,450);
CGET_DEF(uint16_t,SKILL_TARGET_LIMB,850);
CGET_DEF(uint16_t,SKILL_ACCURACY,150);
CGET_DEF(uint16_t,SKILL_VIP,250);
CGET_DEF(uint16_t,SKILL_TRACKER,350);
CGET_DEF(uint16_t,SKILL_QUIETER_SNIPER_SHOTS,350);
CGET_DEF(uint16_t,SKILL_FASTER_BREACHES,50);
CGET_DEF(uint16_t,SKILL_FURTHER_C4S,4);
CGET_DEF(uint16_t,SKILL_STRONGER_FRAG_ARM,50);
CGET_DEF(uint16_t,SKILL_BIGGER_CLAYMORES,50);
CGET_DEF(uint16_t,SKILL_FASTER_THERMITES,50);
CGET_DEF(uint16_t,SKILL_BIGGER_FIRE_NADES,50);
CGET_DEF(uint16_t,SKILL_CRAFTY_C4,4);
CGET_DEF(uint16_t,SKILL_BETTER_EXPLOSIONS,33);
CGET_DEF(uint16_t,SKILL_RETROFIT_GRENADE_LAUNCHER,50);
CGET_DEF(uint16_t,SKILL_RETROFIT_FIRE_GRENADE_LAUNCHER,50);
CGET_DEF(uint16_t,SKILL_RETROFIT_SMOKE_GRENADE_LAUNCHER,50);
CGET_DEF(uint16_t,SKILL_RETROFIT_SENSOR_GRENADE_LAUNCHER,50);
CGET_DEF(uint16_t,SKILL_RETROFIT_STUN_GRENADE_LAUNCHER,50);
CGET_DEF(uint16_t,SKILL_STEROID_DEALER,50);
CGET_DEF(uint16_t,SKILL_HGH_DEALER,50);
CGET_DEF(uint16_t,SKILL_NOXIOUS_NADE_CRAFTER,50);
CGET_DEF(uint16_t,SKILL_DUTCH_OVEN,50);
CGET_DEF(uint16_t,SKILL_FIRE_NADE_DEALER,50);
CGET_DEF(uint16_t,SKILL_PRO_WEAPON_HANDLER,50);
CGET_DEF(uint16_t,SKILL_BETTER_WEAPON_ACCURACY,50);
CGET_DEF(uint16_t,SKILL_FASTER_TRIGGER_FINGER,50);
CGET_DEF(uint16_t,SKILL_FASTER_RELOADING,50);
CGET_DEF(uint16_t,SKILL_BASIC_PISTOL,150);
CGET_DEF(uint16_t,SKILL_BASIC_ASSAULT_RIFLE,150);
CGET_DEF(uint16_t,SKILL_BASIC_SHOTGUN,150);
CGET_DEF(uint16_t,SKILL_BASIC_SNIPER_RIFLE,150);
CGET_DEF(uint16_t,SKILL_BASIC_SUB_MACHINE_GUN,150);
CGET_DEF(uint16_t,SKILL_INTERMEDIATE_PISTOL,150);
CGET_DEF(uint16_t,SKILL_INTERMEDIATE_ASSAULT_RIFLE,150);
CGET_DEF(uint16_t,SKILL_INTERMEDIATE_SHOTGUN,150);
CGET_DEF(uint16_t,SKILL_INTERMEDIATE_SNIPER_RIFLE,150);
CGET_DEF(uint16_t,SKILL_INTERMEDIATE_SUB_MACHINE_GUN,150);
CGET_DEF(uint16_t,SKILL_ADVANCED_PISTOL,150);
CGET_DEF(uint16_t,SKILL_ADVANCED_ASSAULT_RIFLE,150);
CGET_DEF(uint16_t,SKILL_ADVANCED_SHOTGUN,150);
CGET_DEF(uint16_t,SKILL_ADVANCED_SNIPER_RIFLE,150);
CGET_DEF(uint16_t,SKILL_ADVANCED_SUB_MACHINE_GUN,150);
CGET_DEF(uint16_t,SKILL_EXPERT_PISTOL,150);
CGET_DEF(uint16_t,SKILL_EXPERT_ASSAULT_RIFLE,150);
CGET_DEF(uint16_t,SKILL_EXPERT_SHOTGUN,150);
CGET_DEF(uint16_t,SKILL_EXPERT_SNIPER_RIFLE,150);
CGET_DEF(uint16_t,SKILL_EXPERT_SUB_MACHINE_GUN,150);
CGET_DEF(uint16_t,SKILL_ARMOR_PENETRATION_SHOT,150);
CGET_DEF(uint16_t,SKILL_NONSTOP_PENETRATION_SHOT,150);
CGET_DEF(uint16_t,SKILL_INCREASED_INJURE_CHANCE,150);
CGET_DEF(uint16_t,SKILL_ASSAULT_RIFLE_SHRAPNEL,150);
CGET_DEF(uint16_t,SKILL_ENTRY_DENIAL,2050);
CGET_DEF(uint16_t,SKILL_MISDIRECTION,2050);
CGET_DEF(uint16_t,SKILL_SNIPER_SUPPORT,2050);
CGET_DEF(uint16_t,SKILL_REDUCED_DETECTION_CHANCE,4);
CGET_DEF(uint16_t,SKILL_INCREASED_AWARENESS,2050);
CGET_DEF(uint16_t,SKILL_TRICK_MAGAZINE,2050);
CGET_DEF(uint16_t,SKILL_CHAINABLE_BREACHING,1);
CGET_DEF(uint16_t,SKILL_HGH_MORE_POWERFUL,2050);
CGET_DEF(uint16_t,SKILL_BASIC_HP_RECOVERY,2050);
CGET_DEF(uint16_t,SKILL_PARASITIC_HP_RECOVERY,2050);
CGET_DEF(uint16_t,SKILL_SUTURE,2050);
CGET_DEF(uint16_t,SKILL_ADRENALINE_BOOST,2050);
CGET_DEF(uint16_t,GHOST_FEIGN_DEATH_BLOCKED_FOR_TICKS,60);
CGET_DEF(uint16_t,PYREXIA_FIRE_NADE_RECHARGE_TICKS_INITIATE,390);
CGET_DEF(uint16_t,PYREXIA_FIRE_NADE_RECHARGE_TICKS_FAMILIAR,280);
CGET_DEF(uint16_t,PYREXIA_FIRE_NADE_RECHARGE_TICKS_MASTER,170);
CGET_DEF(uint16_t,GHOST_PLANT_CLAYMORE_INITIATE_MOD_CALL_COUNT,10);
CGET_DEF(uint16_t,GHOST_PLANT_CLAYMORE_FAMILIAR_MOD_CALL_COUNT,8);
CGET_DEF(uint16_t,GHOST_PLANT_CLAYMORE_MASTER_MOD_CALL_COUNT,5);
CGET_DEF(uint16_t,SKILL_PYREXIA_THROW_FIRE_NADE,50);
CGET_DEF(uint16_t,SKILL_PYREXIA_DRENCH_IN_GASOLINE,50);
CGET_DEF(uint16_t,SKILL_PYREXIA_DRENCH_ROOM_IN_GASOLINE,50);
CGET_DEF(uint16_t,SKILL_PYREXIA_CONVERT_TO_FIRE_NADE,50);
CGET_DEF(uint16_t,SKILL_PYREXIA_ATTACH_INC_LAUNCHER,50);
CGET_DEF(uint16_t,SKILL_PYREXIA_ATTACH_FLAMETHROWER,50);
CGET_DEF(uint16_t,SKILL_PYREXIA_CREATE_WALL_OF_FIRE,50);
CGET_DEF(uint16_t,SKILL_PYREXIA_SEAL_OFF_ROOM,50);
CGET_DEF(uint16_t,SKILL_SNIPER_TRACKING_SHOT_TICKS,280);
CGET_DEF(float,ADVANCE_LEVEL_HP_FLOAT_MULTIPLIER,2.5);
CGET_DEF(float,EXPLOSIVE_CRITICAL_MULTIPLIER,0.75);
CGET_DEF(float,RIFLE_CRITICAL_MULTIPLIER,0.75);
CGET_DEF(float,INJURED_MAX_HP_MULTIPLIER,0.10);
CGET_DEF(float,MINI_GUNNER_DECREASED_SIGHT_MULTIPLIER,0.75);
CGET_DEF(float,CHANCE_TO_INJURE_SKILL_MODIFIER,3.75);
CGET_DEF(float,INJURE_RESISTANCE_SKILL_MODIFIER,2.75);
CGET_DEF(float,ASSAULT_RIFLE_SHRAPNEL_SKILL_DAMAGE_MULTIPLIER,0.33);
CGET_DEF(float,BONUS_STRENGTH_MULTIPLIER,0.25);
CGET_DEF(float,CONSTITUTION_STRENGTH_DAMPENER_MULTIPLIER,0.13);
CGET_DEF(float,ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,0.18);
CGET_DEF(float,TIER_ONE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,0.01);
CGET_DEF(float,TIER_TWO_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,0.08);
CGET_DEF(float,TIER_THREE_ARMOR_ATTRIBUTE_DAMPENER_MULTIPLIER,0.09);
CGET_DEF(float,WEAPON_COOLDOWN_MODIFIER_TIER_ONE,0.032);
CGET_DEF(float,WEAPON_COOLDOWN_MODIFIER_TIER_TWO,0.05813);
CGET_DEF(float,WEAPON_COOLDOWN_MODIFIER_TIER_THREE,0.12893);
CGET_DEF(float,TIER_ONE_CONSTITUTION_INJURY_DAMPENER,0.01);
CGET_DEF(float,TIER_TWO_CONSTITUTION_INJURY_DAMPENER,0.02);
CGET_DEF(float,TIER_THREE_CONSTITUTION_INJURY_DAMPENER,0.11);
CGET_DEF(float,TIER_ONE_STRENGTH_BONUS_MULTIPLIER,0.10);
CGET_DEF(float,TIER_TWO_STRENGTH_BONUS_MULTIPLIER,0.12);
CGET_DEF(float,TIER_THREE_STRENGTH_BONUS_MULTIPLIER,0.18);
CGET_DEF(float,TIER_ONE_CONSTITUTION_RESISTANCE_MULTIPLIER,0.11);
CGET_DEF(float,TIER_TWO_CONSTITUTION_RESISTANCE_MULTIPLIER,0.15);
CGET_DEF(float,TIER_THREE_CONSTITUTION_RESISTANCE_MULTIPLIER,0.19);
CGET_DEF(float,RIFLE_ATTACHMENT_LEVEL_MULTIPLIER,0.3);
CGET_DEF(float,LEVEL_0_BASE_DAMAGE,10.0);
CGET_DEF(float,LEVEL_1_BASE_DAMAGE,10.0);
CGET_DEF(float,LEVEL_2_BASE_DAMAGE,15.0);
CGET_DEF(float,LEVEL_3_BASE_DAMAGE,18.0);
CGET_DEF(float,LEVEL_4_BASE_DAMAGE,20.0);
CGET_DEF(float,LEVEL_5_BASE_DAMAGE,24.0);
CGET_DEF(float,LEVEL_6_BASE_DAMAGE,26.0);
CGET_DEF(float,LEVEL_7_BASE_DAMAGE,28.0);
CGET_DEF(float,LEVEL_8_BASE_DAMAGE,30.0);
CGET_DEF(float,LEVEL_9_BASE_DAMAGE,32.0);
CGET_DEF(float,LEVEL_10_BASE_DAMAGE,34.0);
CGET_DEF(float,LEVEL_11_BASE_DAMAGE,36.0);
CGET_DEF(float,LEVEL_12_BASE_DAMAGE,38.0);
CGET_DEF(float,LEVEL_13_BASE_DAMAGE,40.0);
CGET_DEF(float,LEVEL_14_BASE_DAMAGE,42.0);
CGET_DEF(float,LEVEL_15_BASE_DAMAGE,45.0);
CGET_DEF(float,LEVEL_16_BASE_DAMAGE,50.0);
CGET_DEF(float,LEVEL_17_BASE_DAMAGE,54.0);
CGET_DEF(float,LEVEL_18_BASE_DAMAGE,60.0);
CGET_DEF(float,LEVEL_19_BASE_DAMAGE,68.0);
CGET_DEF(float,LEVEL_20_BASE_DAMAGE,80.0);
CGET_DEF(float,LEVEL_21_BASE_DAMAGE,100.0);
CGET_DEF(float,LEVEL_22_BASE_DAMAGE,115.0);
CGET_DEF(float,LEVEL_23_BASE_DAMAGE,130.0);
CGET_DEF(float,LEVEL_24_BASE_DAMAGE,150.0);
CGET_DEF(float,LEVEL_25_BASE_DAMAGE,170.0);
CGET_DEF(float,LEVEL_26_BASE_DAMAGE,190.0);
CGET_DEF(float,LEVEL_27_BASE_DAMAGE,200.0);
CGET_DEF(float,LEVEL_28_BASE_DAMAGE,250.0);
CGET_DEF(float,LEVEL_29_BASE_DAMAGE,280.0);
CGET_DEF(float,LEVEL_30_BASE_DAMAGE,300.0);
CGET_DEF(float,LEVEL_DIFF_5,1.6);
CGET_DEF(float,LEVEL_DIFF_4,1.4);
CGET_DEF(float,LEVEL_DIFF_3,1.3);
CGET_DEF(float,LEVEL_DIFF_2,1.2);
CGET_DEF(float,LEVEL_DIFF_1,1.1);
CGET_DEF(float,LEVEL_DIFF_0,1.0);
CGET_DEF(float,LEVEL_DIFF_NEG_1,0.8);
CGET_DEF(float,LEVEL_DIFF_NEG_2,0.6);
CGET_DEF(float,LEVEL_DIFF_NEG_3,0.4);
CGET_DEF(float,LEVEL_DIFF_NEG_4,0.2);
CGET_DEF(float,LEVEL_DIFF_NEG_5,0.1);
CGET_DEF(float,LEVEL_DIFF_DEFAULT,0.05);
CGET_DEF(float,LEVEL_DIFF_GREATER_THAN_SIX,2.0);
CGET_DEF(float,LEVEL_DIFF_FOOBAR_TEST,10.0);
CGET_DEF(float,ARMOR_CRIT_DAMAGE_MULTIPLIER,0.011134);
CGET_DEF(std::string,MSG_NO_PRACTICE_SESSIONS,"You don't have any practice sessions.");
CGET_DEF(std::string,CAN_BE_SEARCHED,"This command can be searched by typing the command followed by a space and a word that you would like to search for.");
CGET_DEF(std::string,SANITY_CHECK,"sanity-check");
CGET_DEF(std::string,MINI_GUNNER_WEAR_LIGHT,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_FINGER_R,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_FINGER_L,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_NECK_1,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_NECK_2,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_BODY,"objects/armor/vanguard-spiked-vest.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_HEAD,"objects/armor/ballistic-helmet.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_LEGS,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_FEET,"objects/armor/phagia-corps-ballistic-boots.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_HANDS,"objects/armor/weight-lifting-gloves.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_ARMS,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_SHIELD,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_ABOUT,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_WAIST,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_WRIST_R,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_WRIST_L,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_PRIMARY,"objects/rifle/belt-fed-minigun.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_WIELD,"objects/rifle/belt-fed-minigun.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_HOLD,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_SECONDARY_WEAPON,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_SECONDARY,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_WEAPON_ATTACHMENT,"objects/attachment/belt-feeder.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_SHOULDERS_L,"objects/armor/vanguard-shoulder-pad.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_SHOULDERS_R,"objects/armor/vanguard-shoulder-pad.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_BACKPACK,"objects/armor/ammo-backpack.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_GOGGLES,"objects/armor/ballistic-eye-gaurd.yml");
CGET_DEF(std::string,MINI_GUNNER_WEAR_VEST_PACK,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_ELBOW_L,"");
CGET_DEF(std::string,MINI_GUNNER_WEAR_ELBOW_R,"objects/armor/vanguard-elbow-guard.yml");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_LIGHT,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_FINGER_R,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_FINGER_L,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_NECK_1,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_NECK_2,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_BODY,"objects/armor/basic-ballistic-vest.yml");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_HEAD,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_LEGS,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_FEET,"objects/armor/basic-boots.yml");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_HANDS,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_ARMS,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_SHIELD,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_ABOUT,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_WAIST,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_WRIST_R,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_WRIST_L,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_PRIMARY,"objects/rifle/hk45.yml");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_WIELD,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_HOLD,"objects/gadget/cbradio.yml");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_SECONDARY_WEAPON,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_SECONDARY,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_WEAPON_ATTACHMENT,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_L,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_SHOULDERS_R,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_BACKPACK,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_GOGGLES,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_VEST_PACK,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_ELBOW_L,"");
CGET_DEF(std::string,LOWLY_SECURITY_GUARD_WEAR_ELBOW_R,"");
CGET_DEF(std::string,LUNATIC_WEAR_LIGHT,"");
CGET_DEF(std::string,LUNATIC_WEAR_FINGER_R,"");
CGET_DEF(std::string,LUNATIC_WEAR_FINGER_L,"objects/armor/spiked-skull-ring.yml");
CGET_DEF(std::string,LUNATIC_WEAR_NECK_1,"objects/armor/qi-wol-clock-chain.yml");
CGET_DEF(std::string,LUNATIC_WEAR_NECK_2,"");
CGET_DEF(std::string,LUNATIC_WEAR_BODY,"objects/armor/weak-tanktop.yml");
CGET_DEF(std::string,LUNATIC_WEAR_HEAD,"objects/armor/generic-hat.yml");
CGET_DEF(std::string,LUNATIC_WEAR_LEGS,"objects/armor/generic-red-jeans.yml");
CGET_DEF(std::string,LUNATIC_WEAR_FEET,"objects/armor/iconic-shoes.yml");
CGET_DEF(std::string,LUNATIC_WEAR_HANDS,"");
CGET_DEF(std::string,LUNATIC_WEAR_ARMS,"");
CGET_DEF(std::string,LUNATIC_WEAR_SHIELD,"");
CGET_DEF(std::string,LUNATIC_WEAR_ABOUT,"");
CGET_DEF(std::string,LUNATIC_WEAR_WAIST,"objects/armor/plain-black-belt.yml");
CGET_DEF(std::string,LUNATIC_WEAR_WRIST_R,"");
CGET_DEF(std::string,LUNATIC_WEAR_WRIST_L,"");
CGET_DEF(std::string,LUNATIC_WEAR_PRIMARY,"objects/rifle/uzi-machine-pistol.yml");
CGET_DEF(std::string,LUNATIC_WEAR_WIELD,"objects/rifle/uzi-machine-pistol.yml");
CGET_DEF(std::string,LUNATIC_WEAR_HOLD,"");
CGET_DEF(std::string,LUNATIC_WEAR_SECONDARY_WEAPON,"");
CGET_DEF(std::string,LUNATIC_WEAR_SECONDARY,"");
CGET_DEF(std::string,LUNATIC_WEAR_WEAPON_ATTACHMENT,"objects/attachment/high-velocity-magazine.yml");
CGET_DEF(std::string,LUNATIC_WEAR_SHOULDERS_L,"");
CGET_DEF(std::string,LUNATIC_WEAR_SHOULDERS_R,"");
CGET_DEF(std::string,LUNATIC_WEAR_BACKPACK,"");
CGET_DEF(std::string,LUNATIC_WEAR_GOGGLES,"objects/armor/idiots-sunglasses.yml");
CGET_DEF(std::string,LUNATIC_WEAR_VEST_PACK,"");
CGET_DEF(std::string,LUNATIC_WEAR_ELBOW_L,"");
CGET_DEF(std::string,LUNATIC_WEAR_ELBOW_R,"");
CGET_DEF(std::string,MSG_CRITICAL,"{red}***CRITICAL***{/red} --");
CGET_DEF(std::string,MSG_HEADSHOT,"{red}***HEADSHOT***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_HEADSHOT,"{red}*** YOU'VE BEEN HEADSHOTTED ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT,"{yel}--[HIT]--{/yel}");
CGET_DEF(std::string,MSG_OUT_OF_AMMO,"{gld}*CLICK*{/gld} Your weapon is out of ammo!");
CGET_DEF(std::string,MSG_MISSED_TARGET,"You missed your target!");
CGET_DEF(std::string,MSG_TARGET_DEAD,"It appears that your target is dead.");
CGET_DEF(std::string,MSG_YOURE_INJURED,"You are injured!");
CGET_DEF(std::string,MSG_YOU_ARE_DISORIENTED,"You become disoriented!");
CGET_DEF(std::string,MSG_YOU_DISORIENT_SOMEONE,"You disorient your target!");
CGET_DEF(std::string,MSG_FIRE_DAMAGE,"[%d] You suffer burns from the roaring fire!\r\n");
CGET_DEF(std::string,MSG_EXPLOSIVE_DAMAGE,"[%d] You take EXPLOSIVE damage!\r\n");
CGET_DEF(std::string,MSG_SHRAPNEL_DAMAGE,"[%d] You are shredded by SHRAPNEL!\r\n");
CGET_DEF(std::string,MSG_CORROSIVE_DAMAGE,"[%d] You take CORROSIVE damage!\r\n");
CGET_DEF(std::string,MSG_CRYOGENIC_DAMAGE,"[%d] You take CRYOGENIC damage!\r\n");
CGET_DEF(std::string,MSG_RADIOACTIVE_DAMAGE,"[%d] You take RADIOACTIVE damage!\r\n");
CGET_DEF(std::string,MSG_ANTI_MATTER_DAMAGE,"[%d] You take ANTI-MATTER damage!\r\n");
CGET_DEF(std::string,MSG_EMP_DAMAGE,"[%d] You take EMP damage!\r\n");
CGET_DEF(std::string,MSG_SHOCK_DAMAGE,"[%d] You take SHOCK damage!\r\n");
CGET_DEF(std::string,MSG_SMOKE_DAMAGE,"[%d] You struggle to breath as smoke fills your lungs!\r\n");
CGET_DEF(std::string,MSG_NARROWLY_MISSED_ME,"You just barely get out of the way of a potentially fatal shot!\r\n");
CGET_DEF(std::string,MSG_YOU_GOT_HIT_BY_INCENDIARY_AMMO,"{yel} Your equipment burns from incendiary damage! {/yel}");
CGET_DEF(std::string,MSG_YOU_INFLICTED_INCENDIARY_AMMO,"{grn} You inflict incendiary damage on your target! {/grn}");
CGET_DEF(std::string,MSG_YOU_ARE_INJURED,"{red}***YOU ARE INJURED***{/red} --");
CGET_DEF(std::string,MSG_YOUR_TARGET_IS_DEAD,"{grn}*** YOUR TARGET IS DEAD ***{/grn}\r\n");
CGET_DEF(std::string,MSG_HIT_BY_RIFLE_ATTACK,"{red}*** YOU ARE HIT ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_MELEE_ATTACK,"{red}*** YOU ARE HIT BY A MELEE WEAPON ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_BLADED_MELEE_ATTACK,"{red}*** YOU ARE HIT BY A BLADED WEAPON ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_BLUNT_MELEE_ATTACK,"{red}*** YOU ARE HIT BY A BLUNT FORCE WEAPON ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_MELEE_ATTACK,"{red}*** YOU INFLICTED MELEE DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_BLADED_MELEE_ATTACK,"{red}*** YOU INFLICTED BLADED WEAPON DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_BLUNT_MELEE_ATTACK,"{red}*** YOU INFLICTED BLUNT FORCE WEAPON DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_INCENDIARY_DAMAGE,"{red}*** YOU INFLICTED {yel}INCENDIARY{/yel}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_RADIOACTIVE_DAMAGE,"{red}*** YOU INFLICTED {grn}RADIOACTIVE{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_ANTI_MATTER_DAMAGE,"{red}*** YOU INFLICTED {blu}ANTI-MATTER{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_CORROSIVE_DAMAGE,"{red}*** YOU INFLICTED {grn}CORROSIVE{/grn}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_EMP_DAMAGE,"{red}*** YOU INFLICTED {blu}EMP{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_EXPLOSIVE_DAMAGE,"{red}*** YOU INFLICTED {yel}EXPLOSIVE{/yel}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_SHRAPNEL_DAMAGE,"{red}*** YOU INFLICTED {blu}SHRAPNEL{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_CRYOGENIC_DAMAGE,"{red}*** YOU INFLICTED {blu}CRYOGENIC{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_SHOCK_DAMAGE,"{red}*** YOU INFLICTED {blu}SHOCK{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_INCENDIARY_DAMAGE,"{red}*** YOU TAKE {yel}INCENDIARY{/yel}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_RADIOACTIVE_DAMAGE,"{red}*** YOU TAKE {grn}RADIOACTIVE{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_ANTI_MATTER_DAMAGE,"{red}*** YOU TAKE {blu}ANTI-MATTER{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_CORROSIVE_DAMAGE,"{red}*** YOU TAKE {grn}CORROSIVE{/grn}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_EMP_DAMAGE,"{red}*** YOU TAKE {blu}EMP{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_EXPLOSIVE_DAMAGE,"{red}*** YOU TAKE {yel}EXPLOSIVE{/yel}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_SHRAPNEL_DAMAGE,"{red}*** YOU TAKE {blu}SHRAPNEL{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_CRYOGENIC_DAMAGE,"{red}*** YOU TAKE {blu}CRYOGENIC{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_SHOCK_DAMAGE,"{red}*** YOU TAKE {blu}SHOCK{/blu}{red} DAMAGE ***{/red} -- ");
CGET_DEF(std::string,MSG_HIT_BY_SPRAY_ATTACK,"{red}*** YOU ARE HIT BY A SPRAY OF BULLETS ***{/red} -- ");
CGET_DEF(std::string,MSG_TARGET_IN_PEACEFUL_ROOM,"{gld}Your target is in a peaceful room{/gld}");
CGET_DEF(std::string,MSG_NO_PRIMARY_WIELDED,"{gld}You aren't wielding a primary weapon.{/gld}");
CGET_DEF(std::string,MSG_COOLDOWN_IN_EFFECT,"{gld}Weapon cooldown in effect.{/gld}");
CGET_DEF(std::string,MSG_COULDNT_FIND_TARGET,"You couldn't find your target!");
CGET_DEF(std::string,MINI_GUNNER_RANDOM_ATTACK_YELL_STRINGS,"");
CGET_DEF(std::string,MINI_GUNNER_RANDOM_DISORIENT_STRINGS,"");
CGET_DEF(std::string,MSG_YOU_INJURED_SOMEONE,"{red}*** YOU INJURED YOUR TARGET ***{/red}!");
CGET_DEF(std::string,DEFAULT_PUBLIC_CHANNELS,"chat,gossip,gratz,newbie");
CGET_DEF(std::string,EXTENDED_PREFERENCES,IMPLODE({"nochat","nogossip","nonewbie","nogratz"},"|"));
CGET_DEF(std::string,EXTENDED_PREFERENCES_DEFAULTS,IMPLODE({"0","0","0","0"},"|"));
CGET_DEF(std::string,SUPER_USERS_LIST,IMPLODE({"far"},"|"));
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_PSG1_DESCRIPTION,"A bolt-action semi-automatic sniper rifle.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_L96AW_DESCRIPTION,"A reliable semi-automatic sniper rifle that works well in very cold conditions.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_M16A4_DESCRIPTION,"Standard issue marine corps automatic rifle.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_M4_DESCRIPTION,"Lighter and shorter variant of the M16A2.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_MP5_DESCRIPTION,"Widely used in SWAT teams across the world,the MP5 is *the* SMG for tactical operations.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_SASG12_DESCRIPTION,"Semi-automatic shotgun with large spread,but limited range.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_M3_DESCRIPTION,"A dual-mode shotgun with pump-action and semi-automatic modes.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_FAMAS_DESCRIPTION,"Assault rifle known for it's high rate of fire.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_FMG9_DESCRIPTION,"A new prototype of foldable machine guns.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_P90_DESCRIPTION,"Assault rifle known for it's high rate of fire.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_AUGPARA_DESCRIPTION,"A sub-machine-gun form of the popular AUG-A3 assault rifle.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_TAR21_DESCRIPTION,"The TAR-21 is a reliable assault rifle with two firing modes.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_SCARH_DESCRIPTION,"Gas-operated assault rifle used by SOCOM operatives.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_UMP45_DESCRIPTION,"Dubbed the 'Universal Sub Machinegun',the UMP-45 is a versatile and reliable SMG.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_MK46_DESCRIPTION,"The MK-46 LMG is a perfect balance of firepower,portability,and accuracy.\r\n");
CGET_DEF(std::string,PRIMARY_CHOICE_SCREEN_HK21_DESCRIPTION,"General purpose LMG widely used in tactical teams all over the world.\r\n");
CGET_DEF(std::string,MSG_YOU_GOT_HIT_BY_REFLECTED_MUNTIONS,"*** [ You are HIT by {red} REFLECTED MUNITIONS {/red}] *** ");
CGET_DEF(std::string,MSG_YOU_REFLECTED_MUNITIONS,"*** [ You {grn} REFLECTED part of that attack {/grn}] *** ");
CGET_DEF(std::string,MSG_YOU_INFLICTED_AR_SHRAPNEL,"{grn}*** [ You INFLICTED A.R. ::SHRAPNEL:: ] *** {/grn}");
CGET_DEF(std::string,MSG_YOU_GOT_HIT_BY_AR_SHRAPNEL,"{red}*** [ You got hit by A.R. ::SHRAPNEL:: ] *** {/red}");
CGET_DEF(std::string,SUPER_USER_REJECT_MESSAGE,"{red}You are not a super user.\r\nA man with no teeth spits on you.{/red}");
CGET_DEF(std::string,ADMIN_SUCCESS_MESSAGE,"{grn}[+] It is done.{/grn}");
CGET_DEF(std::string,ADMIN_FAILURE_MESSAGE,"{red}[-] Failure.{/red}");
CGET_DEF(std::string,UNIMPLEMENTED_MESSAGE,"{red}this command is unimplemented{/red}");
CGET_DEF(std::string,STOCK_STARS_MESSAGE,"You can't see anything but stars!");
CGET_DEF(std::string,STOCK_BLIND_MESSAGE,"You can't see a damned thing,you're blind!");
CGET_DEF(std::string,STOCK_PITCH_BLACK_MESSAGE,"It is pitch black...");
CGET_DEF(std::string,STOCK_READ_WHAT_MESSAGE,"Read what?");
CGET_DEF(std::string,STOCK_EXAMINE_MESSAGE,"Examine what?");
CGET_DEF(std::string,STOCK_LOOK_INSIDE_MESSAGE,"When you look inside,you see:");
CGET_DEF(std::string,STOCK_GOLD_BROKE_MESSAGE,"You're broke!");
CGET_DEF(std::string,STOCK_GOLD_ONE_MISERABLE_MESSAGE,"You have one miserable little gold coin.");
CGET_DEF(std::string,STOCK_GOLD_PREFIX_MESSAGE,"You have ");
CGET_DEF(std::string,STOCK_GOLD_SUFFIX_MESSAGE," gold coins.");
CGET_DEF(std::string,MSG_YOU_FEIGN_DEATH,"You succesfully feign death. The enemy is none the wiser...");
CGET_DEF(std::string,MSG_YOU_FAIL_FEIGN_DEATH,"You fail at feigning death...\r\nYou are on the ground and vulnerable!");
CGET_DEF(std::string,ADVANCE_LEVEL_CONGRATS,"{grn}Congratulations on advancing,soldier! You are proving to be a well-rounded member of the {blu}Counter Terrorist Unit{/blu}.");
CGET_DEF(std::string,CHARGEN_TRIADS_FORMAT,"Melee: %d\r\nWeapons: %d\r\nIntel: %d\r\nSpeed: %d\r\nArmor: %d\r\n");
CGET_DEF(std::string,ADVANCE_LEVEL_MESSAGE,"{grn}CONGRATS! You rise a level!{/grn}");
CGET_DEF(std::string,ADVANCE_MULTIPLE_LEVELS_MESSAGE,"{grn}CONGRATS! You rise %d levels!{/grn}");
CGET_DEF(uint8_t,ARMOR_LOCKER_QUOTA,10);
CGET_DEF(uint8_t,WEAPON_LOCKER_QUOTA,10);
CGET_DEF(uint8_t,RADIO_INITIAL_RESPONSE_TICKS,10);
CGET_DEF(uint8_t,SNIPER_TRACKING_SHOT_MAX_COUNT,1);
CGET_DEF(uint8_t,LUCKY_DISORIENTED_VISION_CHANCE,2);
CGET_DEF(uint8_t,TERRIBLE_SKILL_CHANCE_OF_SUCCESS,5);
CGET_DEF(uint8_t,AWFUL_SKILL_CHANCE_OF_SUCCESS,10);
CGET_DEF(uint8_t,OKAY_SKILL_CHANCE_OF_SUCCESS,30);
CGET_DEF(uint8_t,LEARNED_SKILL_CHANCE_OF_SUCCESS,80);
CGET_DEF(uint8_t,MASTERED_SKILL_CHANCE_OF_SUCCESS,150);
CGET_DEF(uint8_t,ELITE_SKILL_CHANCE_OF_SUCCESS,200);
CGET_DEF(uint8_t,PERCENT_CHANCE_DISSIPATED_DETECTED_BY_THERMALS,5);
CGET_DEF(uint8_t,ENGINEER_REPLENISH_PULSE,3);
CGET_DEF(uint8_t,ENGINEER_SENSOR_GRENADE_MAX_COUNT,2);
CGET_DEF(uint8_t,ENGINEER_DRONE_BOMB_CHARGE_MAX_COUNT,3);
CGET_DEF(uint8_t,SNIPER_REPLENISH_PULSE,3);
CGET_DEF(uint8_t,SNIPER_CLAYMORE_MAX_COUNT,1);
CGET_DEF(uint8_t,GHOST_REPLENISH_PULSE,5);
CGET_DEF(uint8_t,GHOST_DISSIPATE_CHARGE_MAX_COUNT,2);
CGET_DEF(uint8_t,PYREXIA_REPLENISH_PULSE,5);
CGET_DEF(uint8_t,FORGE_REPLENISH_PULSE,5);
CGET_DEF(uint8_t,SYNDROME_REPLENISH_PULSE,5);
CGET_DEF(uint8_t,GHOST_CLAYMORE_MAX_COUNT,2);
CGET_DEF(uint8_t,CAMERA_INSTALLATION_TICS,30);
CGET_DEF(uint8_t,CLAYMORE_INSTALLATION_TICS,10);
CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_DEFAULT,3);
CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_INITIATE,3);
CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_FAMILIAR,6);
CGET_DEF(uint8_t,PYREXIA_FIRE_NADE_CHARGES_MASTER,9);
CGET_DEF(uint8_t,SINGLE_SHOT_SHOTGUN,1);
CGET_DEF(uint8_t,SINGLE_SHOT_ASSAULT_RIFLE,3);
CGET_DEF(uint8_t,SINGLE_SHOT_SUB_MACHINE_GUN,3);
CGET_DEF(uint8_t,SINGLE_SHOT_SNIPER,1);
CGET_DEF(uint8_t,SINGLE_SHOT_HANDGUN,1);
CGET_DEF(uint8_t,SINGLE_SHOT_PISTOL,1);
CGET_DEF(uint8_t,SINGLE_SHOT_MACHINE_PISTOL,6);
CGET_DEF(uint8_t,SINGLE_SHOT_LIGHT_MACHINE_GUN,8);
CGET_DEF(uint8_t,SPRAY_SHOT_SHOTGUN,2);
CGET_DEF(uint8_t,SPRAY_SHOT_ASSAULT_RIFLE,9);
CGET_DEF(uint8_t,SPRAY_SHOT_SUB_MACHINE_GUN,6);
CGET_DEF(uint8_t,SPRAY_SHOT_SNIPER,1);
CGET_DEF(uint8_t,SPRAY_SHOT_HANDGUN,1);
CGET_DEF(uint8_t,SPRAY_SHOT_PISTOL,1);
CGET_DEF(uint8_t,SPRAY_SHOT_MACHINE_PISTOL,12);
CGET_DEF(uint8_t,SPRAY_SHOT_LIGHT_MACHINE_GUN,16);
CGET_DEF(uint8_t,SPRAY_CHANCE,25);
CGET_DEF(uint8_t,SPRAY_HEADSHOT_CHANCE,3);
CGET_DEF(uint8_t,SPRAY_CRITICAL_CHANCE,2);
CGET_DEF(uint8_t,SPRAY_CRITICAL_REDUCTION_DIVISOR,10);
CGET_DEF(uint8_t,REVIVE_TICKS,40);
CGET_DEF(uint8_t,REVIVE_HP,50);
CGET_DEF(uint8_t,INJURED_HP,5);
CGET_DEF(uint8_t,LOWLY_SECURITY_SCAN_DEPTH,1);
CGET_DEF(uint8_t,MINI_GUNNER_SCAN_DEPTH,5);
CGET_DEF(uint8_t,SPRAY_CHANCE_SKILL_MODIFIER,17);
CGET_DEF(uint8_t,HEADSHOT_SKILL_MODIFIER,5);
CGET_DEF(uint8_t,ASSAULT_RIFLE_SHRAPNEL_SKILL_CHANCE,10);
CGET_DEF(uint8_t,ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_COUNT,3);
CGET_DEF(uint8_t,ASSAULT_RIFLE_SHRAPNEL_SKILL_DICE_SIDES,30);
CGET_DEF(uint8_t,SHOW_UNIMPLEMENTED_SKILLS,1);
CGET_DEF(uint8_t,GHOST_FEIGN_DEATH_INITIATE_DURATION,33);
CGET_DEF(uint8_t,GHOST_FEIGN_DEATH_FAMILIAR_DURATION,66);
CGET_DEF(uint8_t,GHOST_FEIGN_DEATH_MASTER_DURATION,99);
CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_MELEE,1);
CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_MELEE,1);
CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_WEAPONS,3);
CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_INTEL,2);
CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_SPEED,1);
CGET_DEF(uint8_t,GHOST_CLASS_TRIADS_ARMOR,3);
CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_WEAPONS,3);
CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_INTEL,2);
CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_SPEED,2);
CGET_DEF(uint8_t,MARKSMAN_CLASS_TRIADS_ARMOR,2);
CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_MELEE,2);
CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_WEAPONS,2);
CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_INTEL,3);
CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_SPEED,3);
CGET_DEF(uint8_t,BANDIT_CLASS_TRIADS_ARMOR,1);
CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_MELEE,3);
CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_WEAPONS,2);
CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_INTEL,2);
CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_SPEED,2);
CGET_DEF(uint8_t,BUTCHER_CLASS_TRIADS_ARMOR,2);
CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_MELEE,3);
CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_WEAPONS,3);
CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_INTEL,1);
CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_SPEED,3);
CGET_DEF(uint8_t,STRIKER_CLASS_TRIADS_ARMOR,1);
CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_MELEE,3);
CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_WEAPONS,2);
CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_INTEL,2);
CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_SPEED,1);
CGET_DEF(uint8_t,OBSTRUCTOR_CLASS_TRIADS_ARMOR,3);
CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_MELEE,2);
CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_WEAPONS,2);
CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_INTEL,3);
CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_SPEED,2);
CGET_DEF(uint8_t,MALADY_CLASS_TRIADS_ARMOR,2);
CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_MELEE,1);
CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_WEAPONS,3);
CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_INTEL,3);
CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_SPEED,3);
CGET_DEF(uint8_t,PYREXIA_CLASS_TRIADS_ARMOR,1);
CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_MELEE,1);
CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_WEAPONS,3);
CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_INTEL,3);
CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_SPEED,1);
CGET_DEF(uint8_t,DEALER_CLASS_TRIADS_ARMOR,3);
CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_MELEE,2);
CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_WEAPONS,2);
CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_INTEL,3);
CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_SPEED,2);
CGET_DEF(uint8_t,FORGE_CLASS_TRIADS_ARMOR,2);
CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_MELEE,1);
CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_WEAPONS,3);
CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_INTEL,3);
CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_SPEED,3);
CGET_DEF(uint8_t,SYNDROME_CLASS_TRIADS_ARMOR,1);
CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_MELEE,2);
CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_WEAPONS,2);
CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_INTEL,3);
CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_SPEED,1);
CGET_DEF(uint8_t,MACHINIST_CLASS_TRIADS_ARMOR,3);
CGET_DEF(uint8_t,REGENERATED_AMMO_LOW,5);
CGET_DEF(uint8_t,REGENERATED_AMMO_HIGH,15);
CGET_DEF(uint8_t,RELOAD_TICKS_SHOTGUN,3);
CGET_DEF(uint8_t,RELOAD_TICKS_ASSAULT_RIFLE,6);
CGET_DEF(uint8_t,RELOAD_TICKS_SUB_MACHINE_GUN,2);
CGET_DEF(uint8_t,RELOAD_TICKS_SNIPER,2);
CGET_DEF(uint8_t,RELOAD_TICKS_HANDGUN,2);
CGET_DEF(uint8_t,RELOAD_TICKS_PISTOL,2);
CGET_DEF(uint8_t,RELOAD_TICKS_MACHINE_PISTOL,2);
CGET_DEF(uint8_t,RELOAD_TICKS_LIGHT_MACHINE_GUN,16);
CGET_DEF(uint8_t,DEFAULT_DISORIENT_TICKS_FROM_RIFLE_ATTACK,16);
CGET_DEF(uint8_t,AMMO_LOCKER_QUOTA,15);
CGET_DEF(uint32_t,BREACHER_REPLENISH_CALL_COUNT,1);
CGET_DEF(uint32_t,GHOST_DISSIPATE_TICKS_DURATION,20);
CGET_DEF(uint32_t,SNIPER_XRAY_SHOT_MAX_COUNT,10);
#undef CGET_DEF

			/**************/
			/** set_value */
			/**************/
			ACMD(do_set_value) {
				ADMIN_REJECT();
				DO_HELP("set_value");
				static constexpr const char* usage = "usage: set_value <key> <value>\r\nAlso see: list_values\r\n";
				auto vec_args = PARSE_ARGS();
				if(vec_args.size() != 2){
					player->errorln(usage);
					return;
				}
				player->send(vec_args);
				mods::values::save_to_lmdb(vec_args[0],vec_args[1]);
				mods::values::load_from_lmdb(vec_args[0]);
				ADMIN_DONE();
			}
			/**************/
			/** get_value */
			/**************/
			ACMD(do_get_value) {
				ADMIN_REJECT();
				DO_HELP("get_value");
				static constexpr const char* usage = "usage: get_value <key>...<keyN>\r\nAlso see: list_values\r\n";
				auto vec_args = PARSE_ARGS();
				if(vec_args.size() < 1){
					player->errorln(usage);
					return;
				}

				for(auto vk_key : vec_args){
					value_key_t key = to_vk_from_string(vk_key);
					if(is_int(key)){
						auto it = std::find(int_types.begin(),int_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<int>(*it,0),"'"));
					}
					if(is_uint8(key)){
						auto it = std::find(uint8_types.begin(),uint8_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<uint8_t>(*it,0),"'"));
					}
					if(is_uint16(key)){
						auto it = std::find(uint16_types.begin(),uint16_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<uint16_t>(*it,0),"'"));
					}
					if(is_float(key)){
						auto it = std::find(float_types.begin(),float_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<float>(*it,0),"'"));
					}
					if(is_string(key)){
						auto it = std::find(string_types.begin(),string_types.end(),key);
						player->sendln(CAT(key,":'",CONSTGET<std::string>(*it,""),"'"));
					}
				}
				ADMIN_DONE();
			}

			/****************************/
			/** revert_value_to_default */
			/****************************/
			ACMD(do_revert_value_to_default){
				ADMIN_REJECT();
				DO_HELP("revert_value_to_default");
				static constexpr const char* usage = "usage: revert_value_to_default <arg>...<argN>";
				auto vec_args = PARSE_ARGS();
				if(vec_args.size() < 1){
					player->errorln(usage);
					return;
				}
				for(auto arg : vec_args){
					mods::values::revert_to_default(arg);
				}
				ADMIN_DONE();
			}

			/****************/
			/** list_values */
			/****************/
			ACMD(do_list_values) {
				ADMIN_REJECT();
				DO_HELP("list_values");
				auto vec_args = PARSE_ARGS();
				std::vector<std::string> screen;
				for(auto section : {uint8_types,uint16_types,int_types,string_types}){
					for(auto item : section){
						screen.emplace_back(to_string(item));
					}
				}
				if(vec_args.size()){
					mods::search_screen(player, screen, vec_args, 255);
					player->sendln("Done listing.");
					player->sendln(CAN_BE_SEARCHED());
					return;
				}
				player->send(screen);
				player->sendln("Done listing.");
				player->sendln(CAN_BE_SEARCHED());
				ADMIN_DONE();
			}
			void init(){
				mods::interpreter::add_command("revert_value_to_default", POS_RESTING, do_revert_value_to_default, LVL_BUILDER,0);
				mods::interpreter::add_command("list_values", POS_RESTING, do_list_values, LVL_BUILDER,0);
				mods::interpreter::add_command("list_value", POS_RESTING, do_list_values, LVL_BUILDER,0);
				mods::interpreter::add_command("set_value", POS_RESTING, do_set_value, LVL_BUILDER,0);
				mods::interpreter::add_command("get_value", POS_RESTING, do_get_value, LVL_BUILDER,0);
			}
};
