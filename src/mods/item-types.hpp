#ifndef __MENTOC_MODS_ITEM_TYPES__
#define __MENTOC_MODS_ITEM_TYPES__
#include <boost/preprocessor.hpp>
#define MENTOC_ITEM_TYPES_SEQ (rifle)(explosive)(drone)(gadget)(attachment)(armor)
#define MENTOC_ITEM_TYPES_SEQ_CAPS (ITEM_RIFLE)(ITEM_EXPLOSIVE)(ITEM_DRONE)(ITEM_GADGET)(ITEM_ATTACHMENT)(ITEM_ARMOR)
#define MENTOC_YAML_DESC_IMPL(r,data,T) struct BOOST_PP_CAT(T,_description_t);

#define MENTOC_USING_CT_IMPL(r,data,CLASS_TYPE)\
using BOOST_PP_CAT(mw_,CLASS_TYPE) = mods::weapon::type::CLASS_TYPE;

#define MENTOC_USING_CT \
BOOST_PP_SEQ_FOR_EACH(MENTOC_USING_CT_IMPL, ~, MENTOC_ITEM_TYPES_SEQ)

#define MENTOC_YAML_DESC \
BOOST_PP_SEQ_FOR_EACH(MENTOC_YAML_DESC_IMPL, ~, MENTOC_ITEM_TYPES_SEQ)

#define MENTOC_DECLARE_DATA_STRUCTS_IMPL(r,data,CLASS_TYPE)\
struct BOOST_PP_CAT(CLASS_TYPE,_data_t);

#define MENTOC_DECLARE_DATA_STRUCTS \
BOOST_PP_SEQ_FOR_EACH(MENTOC_DECLARE_DATA_STRUCTS_IMPL, ~, MENTOC_ITEM_TYPES_SEQ)

#define MENTOC_OBJ_DATA_FEED_SWITCH_IMPL(IN_R,data,CLASS_TYPE)\
	case CLASS_TYPE: if(obj_file.length() == 0){\
										 obj_file = default_yaml_file( BOOST_PP_STRINGIZE(BOOST_PP_ELEM(IN_R,MENTOC_ITEM_TYPES_SEQ)) );\
			 }; this->feed(BOOST_PP_STRINGIZE(CLASS_TYPE), row["obj_file"].as<std::string>()); break;

#define MENTOC_OBJ_DATA_FEED_SWITCH \
BOOST_PP_SEQ_FOR_EACH(MENTOC_OBJ_DATA_FEED_SWITCH_IMPL, ~, MENTOC_ITEM_TYPES_SEQ_CAPS)

#define MENTOC_RIFLE_TYPES_SEQUENCE (SHOTGUN)(ASSAULT_RIFLE)(SUB_MACHINE_GUN)(SNIPER)(HANDGUN)(PISTOL)(MACHINE_PISTOL)(LIGHT_MACHINE_GUN)

#define MENTOC_EXPLOSIVE_TYPES_SEQUENCE (FRAG_GRENADE)(INCENDIARY_GRENADE)(REMOTE_EXPLOSIVE)(REMOTE_CHEMICAL)(EMP_GRENADE)(CLAYMORE_MINE)(SMOKE_GRENADE)(C4)(BREACH_CHARGE)(FLASHBANG_GRENADE)(SENSOR_GRENADE)

#define MENTOC_DRONE_TYPES_SEQUENCE (GROUND_DRONE)(AERIAL_DRONE)(AQUATIC_DRONE)

#define MENTOC_GADGET_TYPES_SEQUENCE (GRAPPLING_HOOK)(BARBED_WIRE)(CAMERA)(MOTION_SENSOR)(DEPLOYABLE_SHIELD)

#define MENTOC_ATTACHMENT_TYPES_SEQUENCE (SIGHT)(MUZZLE)(MAGAZINE)

#define MENTOC_ARMOR_TYPES_SEQUENCE (VEST)(LEGS)(GAUNTLETS)(SHOULDER_PADS)(HELMET)(HAT)(EYEWEAR)(GOGGLES)(BACKPACK)(WAIST_PACK)(VEST_PACK)(ELBOW_GUARDS)(GLOVES)

#define MENTOC_ITEM_TYPE_LIST_SEQUENCE (RIFLE)(EXPLOSIVE)(DRONE)(GADGET)(ATTACHMENT)(ARMOR)

#define MENTOC_ENUM_TYPES_IMPL(r,data,ENUM_TYPE) ENUM_TYPE = BOOST_PP_ADD(r,1) BOOST_PP_COMMA()


#define MENTOC_FEED_IMPL(r,data,TYPE) \
		if(type_string.compare(BOOST_PP_STRINGIZE(TYPE)) == 0){\
			type = data::TYPE;\
		}

#define MENTOC_FEED_GADGETS \
	BOOST_PP_SEQ_FOR_EACH(MENTOC_FEED_IMPL,mw_gadget,MENTOC_GADGET_TYPES_SEQUENCE)

#define MENTOC_FEED_DRONES \
	BOOST_PP_SEQ_FOR_EACH(MENTOC_FEED_IMPL,mw_drone,MENTOC_DRONE_TYPES_SEQUENCE)

#define MENTOC_FEED_ATTACHMENTS \
	BOOST_PP_SEQ_FOR_EACH(MENTOC_FEED_IMPL,mw_attachment,MENTOC_ATTACHMENT_TYPES_SEQUENCE)

#define MENTOC_FEED_RIFLES \
	BOOST_PP_SEQ_FOR_EACH(MENTOC_FEED_IMPL,mw_rifle,MENTOC_RIFLE_TYPES_SEQUENCE)

#define MENTOC_FEED_EXPLOSIVES \
	BOOST_PP_SEQ_FOR_EACH(MENTOC_FEED_IMPL,mw_explosive,MENTOC_EXPLOSIVE_TYPES_SEQUENCE)

#define MENTOC_FEED_ARMORS \
	BOOST_PP_SEQ_FOR_EACH(MENTOC_FEED_IMPL,mw_armor,MENTOC_ARMOR_TYPES_SEQUENCE)

#endif
