# Generated automatically from Makefile.in by configure.
# CircleMUD Makefile.in - Makefile template used by 'configure'
#

# C compiler to use
CC = g++ -std=c++14 -fpermissive -I/home/llvm/code/c++/bnull-mud/src/mods/include -L/home/llvm/code/c++/bnull-mud/src/mods/lib 

# Path to cxref utility
CXREF = cxref

# Any special flags you want to pass to the compiler
MYFLAGS = -Wall -Wno-char-subscripts

#flags for profiling (see hacker.doc for more information)
PROFILE = 

##############################################################################
# Do Not Modify Anything Below This Line (unless you know what you're doing) #
##############################################################################

BINDIR = ../bin

CFLAGS = -g -O2 $(MYFLAGS) $(PROFILE)

LIBS =  -lcrypt /home/llvm/code/c++/bnull-mud/src/mods/lib/liblmdb.so

OBJFILES = act.comm.o act.informative.o act.item.o act.movement.o \
	act.offensive.o act.other.o act.social.o act.wizard.o alias.o ban.o \
	boards.o castle.o class.o comm.o config.o constants.o db.o fight.o \
	graph.o mods_player.o handler.o house.o interpreter.o limits.o magic.o mail.o \
	mobact.o modify.o objsave.o olc.o random.o shop.o spec_assign.o \
	spec_procs.o spell_parser.o spells.o utils.o weather.o \
	bsd-snprintf.o acl.o mods_utils.o mods_scan.o mods_aistate.o \
	mods_deferred.o mods_prefs.o mods_projectile.o duktape.o mods_js.o\
	mods_quests.o globals.o

CXREF_FILES = act.comm.c act.informative.c act.item.c act.movement.c \
	act.offensive.cpp act.other.c act.social.c act.wizard.cpp alias.c ban.c \
	boards.c castle.c class.c comm.c config.c constants.c db.cpp fight.c \
	graph.c handler.c house.c interpreter.c limits.c magic.c mail.c \
	mobact.c modify.c objsave.c olc.c random.c shop.c spec_assign.c\
	spec_procs.c spell_parser.c spells.c utils.c weather.c \
	bsd-snprintf.c globals.cpp mods/acl/config-parser.cpp \
	mods/utils.hpp mods/player.hpp mods/scan.hpp

default: all

all: .accepted
	$(MAKE) $(BINDIR)/circle
	#$(MAKE) utils

.accepted:
	@./licheck less

utils: .accepted
	(cd util; $(MAKE) all)
circle:
	$(MAKE) $(BINDIR)/circle

$(BINDIR)/circle : $(OBJFILES)
	$(CC) -o $(BINDIR)/circle $(PROFILE) $(OBJFILES) $(LIBS)

clean:
	rm -f *.o
	rm -f mods/*.o
ref:
#
# Create the cross reference files
# Note, this is not meant to be used unless you've installed cxref...
#
	@for file in $(CXREF_FILES) ; do \
	  echo Cross referencing $$file ; \
	  $(CXREF) -D__CXREF__ -xref -Odoc -Ncircle $$file ; \
	done
#
# Create the source files using cxref
#
	@for file in $(CXREF_FILES) ; do \
	   echo Documenting $$file ; \
	   ( cd . ; $(CXREF) -D__CXREF__ -warn-xref -xref -Odoc -Ncircle -html $$file ) ; \
	   rm -f $(DOCS) ; \
	done
#
# Create the index using cxref
#
	@echo Indexing
	@( cd . ; $(CXREF) -D__CXREF__ -index-all -Odoc -Ncircle -html )
	@rm -f $(DOCS)
#
# Make html files for the .h files
#
	@echo Creating .h.html files...
	@for file in *.h ; do \
	  echo $$file ; \
	  cat htmlh-head $$file htmlh-tail > doc/$$file.html ; \
	done
# Copy over to the html directory
	#cp doc/*.html $(HOME)/www/cxref
	#chmod 644 $(HOME)/www/cxref/*.html

# Dependencies for the object files (automagically generated with
# gcc -MM)

mods_quests.o: mods/quests.cpp mods/quests.hpp 
	$(CC) -c $(CFLAGS) mods/quests.cpp -o mods_quests.o
mods_js.o: mods/js.cpp mods/js.hpp 
	$(CC) -c $(CFLAGS) mods/js.cpp -o mods_js.o
duktape.o: duktape-2.2.0/src/duktape.h 
	$(CC) -c $(CFLAGS) duktape-2.2.0/src/duktape.c -o duktape.o
mods_projectile.o: mods/projectile.cpp mods/projectile.hpp 
	$(CC) -c $(CFLAGS) mods/projectile.cpp -o mods_projectile.o
mods_prefs.o: mods/prefs.cpp mods/prefs.hpp 
	$(CC) -c $(CFLAGS) mods/prefs.cpp -o mods_prefs.o
mods_aistate.o: mods/ai_state.cpp mods/ai_state.hpp 
	$(CC) -c $(CFLAGS) mods/ai_state.cpp -o mods_aistate.o
mods_deferred.o: mods/deferred.cpp mods/deferred.hpp
	$(CC) -c $(CFLAGS) mods/deferred.cpp -o mods_deferred.o
mods_scan.o: mods/scan.cpp
	$(CC) -c $(CFLAGS) mods/scan.cpp -o mods_scan.o
mods_player.o: mods/player.cpp
	$(CC) -c $(CFLAGS) mods/player.cpp -o mods_player.o
mods_utils.o: mods/utils.cpp
	$(CC) -c $(CFLAGS) mods/utils.cpp -o mods_utils.o
acl.o: mods/acl/config-parser.cpp
	$(CC) -c $(CFLAGS) mods/acl/config-parser.cpp -o acl.o
globals.o: globals.cpp mods/player.cpp mods/deferred.hpp mods/deferred.cpp mods/ai_state.cpp
	$(CC) -c $(CFLAGS) /home/llvm/code/c++/bnull-mud/src/mods/lib/liblmdb.so  globals.cpp 
act.comm.o: act.comm.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h \
  handler.h db.h screen.h
	$(CC) -c $(CFLAGS) act.comm.c
act.informative.o: act.informative.c conf.h sysdep.h structs.h utils.h comm.h \
  interpreter.h handler.h db.h spells.h screen.h constants.h
	$(CC) -c $(CFLAGS) act.informative.c
act.item.o: act.item.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h \
  handler.h db.h spells.h constants.h
	$(CC) -c $(CFLAGS) act.item.c
act.movement.o: act.movement.c conf.h sysdep.h structs.h utils.h comm.h \
  interpreter.h handler.h db.h spells.h house.h constants.h
	$(CC) -c $(CFLAGS) act.movement.c
act.offensive.o: globals.hpp mods/player.hpp act.offensive.cpp conf.h sysdep.h structs.h utils.h comm.h \
  interpreter.h handler.h db.h spells.h mods/utils.hpp
	$(CC) -c $(CFLAGS) act.offensive.cpp
act.other.o: act.other.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h \
  handler.h db.h spells.h screen.h house.h constants.h
	$(CC) -c $(CFLAGS) act.other.c
act.social.o: act.social.c conf.h sysdep.h structs.h utils.h comm.h \
  interpreter.h handler.h db.h spells.h
	$(CC) -c $(CFLAGS) act.social.c
act.wizard.o: act.wizard.cpp conf.h sysdep.h structs.h utils.h comm.h \
  interpreter.h handler.h db.h spells.h house.h screen.h constants.h \
  globals.hpp
	$(CC) -c $(CFLAGS) act.wizard.cpp
alias.o: alias.c conf.h sysdep.h structs.h utils.h interpreter.h db.h
	$(CC) -c $(CFLAGS) alias.c
ban.o: ban.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h handler.h db.h
	$(CC) -c $(CFLAGS) ban.c
boards.o: boards.c conf.h sysdep.h structs.h utils.h comm.h db.h boards.h \
  interpreter.h handler.h
	$(CC) -c $(CFLAGS) boards.c
castle.o: castle.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h \
  handler.h db.h spells.h
	$(CC) -c $(CFLAGS) castle.c
class.o: class.c conf.h sysdep.h structs.h db.h utils.h spells.h interpreter.h \
  constants.h
	$(CC) -c $(CFLAGS) class.c
comm.o: comm.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h handler.h \
  db.h house.h
	$(CC) -c $(CFLAGS) comm.c
config.o: config.c conf.h sysdep.h structs.h interpreter.h
	$(CC) -c $(CFLAGS) config.c
constants.o: constants.c conf.h sysdep.h structs.h interpreter.h
	$(CC) -c $(CFLAGS) constants.c
db.o: db.cpp conf.h sysdep.h structs.h utils.h db.h comm.h handler.h spells.h mail.h \
  interpreter.h house.h constants.h
	$(CC) -c $(CFLAGS) db.cpp
fight.o: fight.c conf.h sysdep.h structs.h utils.h comm.h handler.h interpreter.h \
  db.h spells.h screen.h constants.h
	$(CC) -c $(CFLAGS) fight.c
graph.o: graph.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h handler.h \
  db.h spells.h
	$(CC) -c $(CFLAGS) graph.c
handler.o: globals.hpp handler.c conf.h sysdep.h structs.h utils.h comm.h db.h handler.h \
  interpreter.h spells.h
	$(CC) -c $(CFLAGS) handler.c
house.o: house.c conf.h sysdep.h structs.h comm.h handler.h db.h interpreter.h \
  utils.h house.h constants.h
	$(CC) -c $(CFLAGS) house.c
interpreter.o: interpreter.c conf.h sysdep.h structs.h comm.h interpreter.h db.h \
  utils.h spells.h handler.h mail.h screen.h
	$(CC) -c $(CFLAGS) interpreter.c
limits.o: limits.c conf.h sysdep.h structs.h utils.h spells.h comm.h db.h \
  handler.h
	$(CC) -c $(CFLAGS) limits.c
magic.o: magic.c conf.h sysdep.h structs.h utils.h comm.h spells.h handler.h db.h \
  constants.h
	$(CC) -c $(CFLAGS) magic.c
mail.o: mail.c conf.h sysdep.h structs.h utils.h comm.h db.h interpreter.h \
  handler.h mail.h
	$(CC) -c $(CFLAGS) mail.c
mobact.o: mobact.c conf.h sysdep.h structs.h utils.h db.h comm.h interpreter.h \
  handler.h spells.h constants.h
	$(CC) -c $(CFLAGS) mobact.c
modify.o: modify.c conf.h sysdep.h structs.h utils.h interpreter.h handler.h db.h \
  comm.h spells.h mail.h boards.h
	$(CC) -c $(CFLAGS) modify.c
objsave.o: objsave.c conf.h sysdep.h structs.h comm.h handler.h db.h \
  interpreter.h utils.h spells.h
	$(CC) -c $(CFLAGS) objsave.c
olc.o: olc.c conf.h sysdep.h structs.h utils.h comm.h interpreter.h handler.h db.h \
  olc.h
	$(CC) -c $(CFLAGS) olc.c
random.o: random.c utils.h
	$(CC) -c $(CFLAGS) random.c
shop.o: shop.c conf.h sysdep.h structs.h comm.h handler.h db.h interpreter.h \
  utils.h shop.h constants.h
	$(CC) -c $(CFLAGS) shop.c
spec_assign.o: spec_assign.c conf.h sysdep.h structs.h db.h interpreter.h \
  utils.h
	$(CC) -c $(CFLAGS) spec_assign.c
spec_procs.o: spec_procs.c conf.h sysdep.h structs.h utils.h comm.h \
  interpreter.h handler.h db.h spells.h constants.h
	$(CC) -c $(CFLAGS) spec_procs.c
spell_parser.o: spell_parser.c conf.h sysdep.h structs.h utils.h interpreter.h \
  spells.h handler.h comm.h db.h
	$(CC) -c $(CFLAGS) spell_parser.c
spells.o: spells.c conf.h sysdep.h structs.h utils.h comm.h spells.h handler.h \
  db.h constants.h interpreter.h
	$(CC) -c $(CFLAGS) spells.c
utils.o: utils.c conf.h sysdep.h structs.h utils.h comm.h screen.h spells.h \
  handler.h db.h interpreter.h
	$(CC) -c $(CFLAGS) utils.c
weather.o: weather.c conf.h sysdep.h structs.h utils.h comm.h handler.h \
  interpreter.h db.h
	$(CC) -c $(CFLAGS) weather.c
bsd-snprintf.o: bsd-snprintf.c conf.h sysdep.h
	$(CC) -c $(CFLAGS) bsd-snprintf.c
